(function(e){function n(n){for(var F,B,U=n[0],c=n[1],a=n[2],i=0,l=[];i<U.length;i++)B=U[i],Object.prototype.hasOwnProperty.call(t,B)&&t[B]&&l.push(t[B][0]),t[B]=0;for(F in c)Object.prototype.hasOwnProperty.call(c,F)&&(e[F]=c[F]);I&&I(n);while(l.length)l.shift()();return s.push.apply(s,a||[]),Q()}function Q(){for(var e,n=0;n<s.length;n++){for(var Q=s[n],F=!0,B=1;B<Q.length;B++){var U=Q[B];0!==t[U]&&(F=!1)}F&&(s.splice(n--,1),e=c(c.s=Q[0]))}return e}var F={},B={app:0},t={app:0},s=[];function U(e){return c.p+"js/"+({}[e]||e)+"."+{"chunk-94319540":"024654d9","chunk-8f19f602":"a5d98c8e","chunk-a4175c2a":"267697a0","chunk-19ad8cd5":"7202626a","chunk-62d1e710":"17e1dca8","chunk-325375a7":"977bb775","chunk-77eec0da":"f30c4900","chunk-b151c3c4":"2b213863","chunk-d40335fa":"0fcf6e94"}[e]+".js"}function c(n){if(F[n])return F[n].exports;var Q=F[n]={i:n,l:!1,exports:{}};return e[n].call(Q.exports,Q,Q.exports,c),Q.l=!0,Q.exports}c.e=function(e){var n=[],Q={"chunk-94319540":1,"chunk-8f19f602":1,"chunk-a4175c2a":1,"chunk-19ad8cd5":1,"chunk-62d1e710":1,"chunk-325375a7":1,"chunk-77eec0da":1,"chunk-b151c3c4":1,"chunk-d40335fa":1};B[e]?n.push(B[e]):0!==B[e]&&Q[e]&&n.push(B[e]=new Promise((function(n,Q){for(var F="css/"+({}[e]||e)+"."+{"chunk-94319540":"bd892268","chunk-8f19f602":"81dcc05a","chunk-a4175c2a":"8d776d2d","chunk-19ad8cd5":"a7589d2b","chunk-62d1e710":"28e665a3","chunk-325375a7":"ad68b2bf","chunk-77eec0da":"017f8155","chunk-b151c3c4":"b4dda758","chunk-d40335fa":"1dc5c4fb"}[e]+".css",t=c.p+F,s=document.getElementsByTagName("link"),U=0;U<s.length;U++){var a=s[U],i=a.getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(i===F||i===t))return n()}var l=document.getElementsByTagName("style");for(U=0;U<l.length;U++){a=l[U],i=a.getAttribute("data-href");if(i===F||i===t)return n()}var I=document.createElement("link");I.rel="stylesheet",I.type="text/css",I.onload=n,I.onerror=function(n){var F=n&&n.target&&n.target.src||t,s=new Error("Loading CSS chunk "+e+" failed.\n("+F+")");s.code="CSS_CHUNK_LOAD_FAILED",s.request=F,delete B[e],I.parentNode.removeChild(I),Q(s)},I.href=t;var r=document.getElementsByTagName("head")[0];r.appendChild(I)})).then((function(){B[e]=0})));var F=t[e];if(0!==F)if(F)n.push(F[2]);else{var s=new Promise((function(n,Q){F=t[e]=[n,Q]}));n.push(F[2]=s);var a,i=document.createElement("script");i.charset="utf-8",i.timeout=120,c.nc&&i.setAttribute("nonce",c.nc),i.src=U(e);var l=new Error;a=function(n){i.onerror=i.onload=null,clearTimeout(I);var Q=t[e];if(0!==Q){if(Q){var F=n&&("load"===n.type?"missing":n.type),B=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+F+": "+B+")",l.name="ChunkLoadError",l.type=F,l.request=B,Q[1](l)}t[e]=void 0}};var I=setTimeout((function(){a({type:"timeout",target:i})}),12e4);i.onerror=i.onload=a,document.head.appendChild(i)}return Promise.all(n)},c.m=e,c.c=F,c.d=function(e,n,Q){c.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:Q})},c.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,n){if(1&n&&(e=c(e)),8&n)return e;if(4&n&&"object"===typeof e&&e&&e.__esModule)return e;var Q=Object.create(null);if(c.r(Q),Object.defineProperty(Q,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var F in e)c.d(Q,F,function(n){return e[n]}.bind(null,F));return Q},c.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return c.d(n,"a",n),n},c.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},c.p="/",c.oe=function(e){throw console.error(e),e};var a=window["webpackJsonp"]=window["webpackJsonp"]||[],i=a.push.bind(a);a.push=n,a=a.slice();for(var l=0;l<a.length;l++)n(a[l]);var I=i;s.push([0,"chunk-vendors"]),Q()})({0:function(e,n,Q){e.exports=Q("cd49")},"0c63":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OfflineSnackbar_vue_vue_type_style_index_0_id_2841044e_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("930e");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OfflineSnackbar_vue_vue_type_style_index_0_id_2841044e_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OfflineSnackbar_vue_vue_type_style_index_0_id_2841044e_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OfflineSnackbar_vue_vue_type_style_index_0_id_2841044e_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PZmZsaW5lU25hY2tiYXIudnVlP2NhNTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQTRrQixDQUFnQiw0bUJBQUcsRUFBQyIsImZpbGUiOiIwYzYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vT2ZmbGluZVNuYWNrYmFyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTI4NDEwNDRlJnNjb3BlZD10cnVlJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vT2ZmbGluZVNuYWNrYmFyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTI4NDEwNDRlJnNjb3BlZD10cnVlJmxhbmc9c2NzcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0c63\n')},"0f75":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Filters; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2b0e");\n/* harmony import */ var _utils_balance_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("a3d5");\n/* harmony import */ var lodash_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("6625");\n/* harmony import */ var lodash_split__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_split__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_capitalize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("e9a7");\n/* harmony import */ var lodash_capitalize__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_capitalize__WEBPACK_IMPORTED_MODULE_3__);\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\nvar Filters =\n/*#__PURE__*/\nfunction () {\n  function Filters() {\n    _classCallCheck(this, Filters);\n  }\n\n  _createClass(Filters, null, [{\n    key: "truncate",\n    value: function truncate(value) {\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n      var separator = \'...\';\n\n      if (value.length <= width) {\n        return value;\n      } else {\n        var substWidth = Math.floor(width / 2);\n        return value.substr(0, substWidth) + separator + value.substr(value.length - substWidth);\n      }\n    }\n  }, {\n    key: "decimals",\n    value: function decimals(value) {\n      var _decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n      return parseFloat(value).toFixed(_decimals);\n    }\n  }, {\n    key: "upper",\n    value: function upper(value) {\n      if (!value) {\n        return \'\';\n      }\n\n      return value.toLocaleUpperCase();\n    }\n  }, {\n    key: "displayFormat",\n    value: function displayFormat(amount, decimals) {\n      var units = _utils_balance_utils__WEBPACK_IMPORTED_MODULE_1__[/* BalanceUtils */ "a"].toUnits(amount, decimals || 18);\n      var deposit = parseFloat(units);\n\n      if (deposit === 0) {\n        return \'0.0\';\n      } else if (deposit < 0.000001) {\n        return \'<0.000001\';\n      } else {\n        var _split = lodash_split__WEBPACK_IMPORTED_MODULE_2___default()(units, \'.\'),\n            _split2 = _slicedToArray(_split, 2),\n            integerPart = _split2[0],\n            decimalPart = _split2[1];\n\n        if (decimalPart && decimalPart.length > 6) {\n          var newDecimal = decimalPart.substring(0, 6);\n          return "\\u2248".concat(integerPart, ".").concat(newDecimal);\n        } else {\n          return units;\n        }\n      }\n    }\n  }, {\n    key: "capitalizeFirst",\n    value: function capitalizeFirst(value) {\n      return lodash_capitalize__WEBPACK_IMPORTED_MODULE_3___default()(value);\n    }\n  }]);\n\n  return Filters;\n}();\n\n\n\nFilters.toUnits = function (wei, decimals) {\n  return _utils_balance_utils__WEBPACK_IMPORTED_MODULE_1__[/* BalanceUtils */ "a"].toUnits(wei, decimals || 18);\n};\n\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'truncate\', Filters.truncate);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'decimals\', Filters.decimals);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'upper\', Filters.upper);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'displayFormat\', Filters.displayFormat);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'capitalizeFirst\', Filters.capitalizeFirst);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'toUnits\', Filters.toUnits);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZmlsdGVycy50cz85NzZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUNBOztJQUVxQixPOzs7Ozs7Ozs7NkJBQ0gsSyxFQUFpQztBQUFBLFVBQWxCLEtBQWtCLHVFQUFGLEVBQUU7QUFDL0MsVUFBTSxTQUFTLEdBQUcsS0FBbEI7O0FBQ0EsVUFBSSxLQUFLLENBQUMsTUFBTixJQUFnQixLQUFwQixFQUEyQjtBQUN6QixlQUFPLEtBQVA7QUFDRCxPQUZELE1BRU87QUFDTCxZQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQUssR0FBRyxDQUFuQixDQUFuQjtBQUNBLGVBQ0UsS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFiLEVBQWdCLFVBQWhCLElBQ0EsU0FEQSxHQUVBLEtBQUssQ0FBQyxNQUFOLENBQWEsS0FBSyxDQUFDLE1BQU4sR0FBZSxVQUE1QixDQUhGO0FBS0Q7QUFDRjs7OzZCQUVlLEssRUFBbUM7QUFBQSxVQUFwQixTQUFvQix1RUFBRCxDQUFDOztBQUNqRCxhQUFPLFVBQVUsQ0FBQyxLQUFELENBQVYsQ0FBa0IsT0FBbEIsQ0FBMEIsU0FBMUIsQ0FBUDtBQUNEOzs7MEJBRVksSyxFQUFhO0FBQ3hCLFVBQUksQ0FBQyxLQUFMLEVBQVk7QUFDVixlQUFPLEVBQVA7QUFDRDs7QUFDRCxhQUFPLEtBQUssQ0FBQyxpQkFBTixFQUFQO0FBQ0Q7OztrQ0FFb0IsTSxFQUFtQixRLEVBQWlCO0FBQ3ZELFVBQU0sS0FBSyxHQUFHLHlFQUFZLENBQUMsT0FBYixDQUFxQixNQUFyQixFQUE2QixRQUFRLElBQUksRUFBekMsQ0FBZDtBQUNBLFVBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxLQUFELENBQTFCOztBQUNBLFVBQUksT0FBTyxLQUFLLENBQWhCLEVBQW1CO0FBQ2pCLGVBQU8sS0FBUDtBQUNELE9BRkQsTUFFTyxJQUFJLE9BQU8sR0FBRyxRQUFkLEVBQXdCO0FBQzdCLGVBQU8sV0FBUDtBQUNELE9BRk0sTUFFQTtBQUFBLHFCQUM4QixtREFBSyxDQUFDLEtBQUQsRUFBUSxHQUFSLENBRG5DO0FBQUE7QUFBQSxZQUNFLFdBREY7QUFBQSxZQUNlLFdBRGY7O0FBR0wsWUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQVosR0FBcUIsQ0FBeEMsRUFBMkM7QUFDekMsY0FBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVosQ0FBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsQ0FBakI7QUFDQSxpQ0FBVyxXQUFYLGNBQTBCLFVBQTFCO0FBQ0QsU0FIRCxNQUdPO0FBQ0wsaUJBQU8sS0FBUDtBQUNEO0FBQ0Y7QUFDRjs7O29DQUVzQixLLEVBQWE7QUFDbEMsYUFBTyx3REFBVSxDQUFDLEtBQUQsQ0FBakI7QUFDRDs7Ozs7Ozs7QUFFTSxrQkFBVSxVQUFDLEdBQUQsRUFBaUIsUUFBakI7QUFBQSxTQUNmLHlFQUFZLENBQUMsT0FBYixDQUFxQixHQUFyQixFQUEwQixRQUFRLElBQUksRUFBdEMsQ0FEZTtBQUFBLENBQVY7O0FBSVQsbURBQUcsQ0FBQyxNQUFKLENBQVcsVUFBWCxFQUF1QixPQUFPLENBQUMsUUFBL0I7QUFDQSxtREFBRyxDQUFDLE1BQUosQ0FBVyxVQUFYLEVBQXVCLE9BQU8sQ0FBQyxRQUEvQjtBQUNBLG1EQUFHLENBQUMsTUFBSixDQUFXLE9BQVgsRUFBb0IsT0FBTyxDQUFDLEtBQTVCO0FBQ0EsbURBQUcsQ0FBQyxNQUFKLENBQVcsZUFBWCxFQUE0QixPQUFPLENBQUMsYUFBcEM7QUFDQSxtREFBRyxDQUFDLE1BQUosQ0FBVyxpQkFBWCxFQUE4QixPQUFPLENBQUMsZUFBdEM7QUFDQSxtREFBRyxDQUFDLE1BQUosQ0FBVyxTQUFYLEVBQXNCLE9BQU8sQ0FBQyxPQUE5QiIsImZpbGUiOiIwZjc1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnZXRoZXJzL3V0aWxzJztcbmltcG9ydCB7IEJhbGFuY2VVdGlscyB9IGZyb20gJ0AvdXRpbHMvYmFsYW5jZS11dGlscyc7XG5pbXBvcnQgc3BsaXQgZnJvbSAnbG9kYXNoL3NwbGl0JztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJ2xvZGFzaC9jYXBpdGFsaXplJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVycyB7XG4gIHN0YXRpYyB0cnVuY2F0ZSh2YWx1ZTogc3RyaW5nLCB3aWR0aDogbnVtYmVyID0gMTIpIHtcbiAgICBjb25zdCBzZXBhcmF0b3IgPSAnLi4uJztcbiAgICBpZiAodmFsdWUubGVuZ3RoIDw9IHdpZHRoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN1YnN0V2lkdGggPSBNYXRoLmZsb29yKHdpZHRoIC8gMik7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB2YWx1ZS5zdWJzdHIoMCwgc3Vic3RXaWR0aCkgK1xuICAgICAgICBzZXBhcmF0b3IgK1xuICAgICAgICB2YWx1ZS5zdWJzdHIodmFsdWUubGVuZ3RoIC0gc3Vic3RXaWR0aClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGRlY2ltYWxzKHZhbHVlOiBzdHJpbmcsIGRlY2ltYWxzOiBudW1iZXIgPSAzKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpLnRvRml4ZWQoZGVjaW1hbHMpO1xuICB9XG5cbiAgc3RhdGljIHVwcGVyKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICB9XG5cbiAgc3RhdGljIGRpc3BsYXlGb3JtYXQoYW1vdW50OiBCaWdOdW1iZXIsIGRlY2ltYWxzPzogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCB1bml0cyA9IEJhbGFuY2VVdGlscy50b1VuaXRzKGFtb3VudCwgZGVjaW1hbHMgfHwgMTgpO1xuICAgIGNvbnN0IGRlcG9zaXQgPSBwYXJzZUZsb2F0KHVuaXRzKTtcbiAgICBpZiAoZGVwb3NpdCA9PT0gMCkge1xuICAgICAgcmV0dXJuICcwLjAnO1xuICAgIH0gZWxzZSBpZiAoZGVwb3NpdCA8IDAuMDAwMDAxKSB7XG4gICAgICByZXR1cm4gJzwwLjAwMDAwMSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IFtpbnRlZ2VyUGFydCwgZGVjaW1hbFBhcnRdID0gc3BsaXQodW5pdHMsICcuJyk7XG5cbiAgICAgIGlmIChkZWNpbWFsUGFydCAmJiBkZWNpbWFsUGFydC5sZW5ndGggPiA2KSB7XG4gICAgICAgIGxldCBuZXdEZWNpbWFsID0gZGVjaW1hbFBhcnQuc3Vic3RyaW5nKDAsIDYpO1xuICAgICAgICByZXR1cm4gYOKJiCR7aW50ZWdlclBhcnR9LiR7bmV3RGVjaW1hbH1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuaXRzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjYXBpdGFsaXplRmlyc3QodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGNhcGl0YWxpemUodmFsdWUpO1xuICB9XG5cbiAgc3RhdGljIHRvVW5pdHMgPSAod2VpOiBCaWdOdW1iZXIsIGRlY2ltYWxzPzogbnVtYmVyKSA9PlxuICAgIEJhbGFuY2VVdGlscy50b1VuaXRzKHdlaSwgZGVjaW1hbHMgfHwgMTgpO1xufVxuXG5WdWUuZmlsdGVyKCd0cnVuY2F0ZScsIEZpbHRlcnMudHJ1bmNhdGUpO1xuVnVlLmZpbHRlcignZGVjaW1hbHMnLCBGaWx0ZXJzLmRlY2ltYWxzKTtcblZ1ZS5maWx0ZXIoJ3VwcGVyJywgRmlsdGVycy51cHBlcik7XG5WdWUuZmlsdGVyKCdkaXNwbGF5Rm9ybWF0JywgRmlsdGVycy5kaXNwbGF5Rm9ybWF0KTtcblZ1ZS5maWx0ZXIoJ2NhcGl0YWxpemVGaXJzdCcsIEZpbHRlcnMuY2FwaXRhbGl6ZUZpcnN0KTtcblZ1ZS5maWx0ZXIoJ3RvVW5pdHMnLCBGaWx0ZXJzLnRvVW5pdHMpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0f75\n')},"0ff6":function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":4,\\"contracts\\":{\\"ServiceRegistry\\":{\\"address\\":\\"0xE1d6074D0749605902819643B5B0B12C3b693816\\",\\"transaction_hash\\":\\"0xcf7cec90fa8728f99130e59dea30160af449bd204381d50031faee1907c1d4e2\\",\\"block_number\\":5279471,\\"gas_cost\\":2541477,\\"constructor_arguments\\":[\\"0x7CB8fe4b74Aa9FC6e4Ce116EBAd431a4831742b5\\",\\"0x1b1Ce693E7289fC40753393CFCe2EC7F8E0E3Ca3\\",2e+21,6,5,17280000,1000,17280000]},\\"UserDeposit\\":{\\"address\\":\\"0xcA3611E609Cf2E66276eB947B816051EaDF3e6c0\\",\\"transaction_hash\\":\\"0x81265cc8b8a5bb453be7eecd170fb1717777d3055ddc35e23eb6a9a496622794\\",\\"block_number\\":5279472,\\"gas_cost\\":1899008,\\"constructor_arguments\\":[\\"0x7CB8fe4b74Aa9FC6e4Ce116EBAd431a4831742b5\\",1.157920892373162e+77]},\\"MonitoringService\\":{\\"address\\":\\"0x36e53400F21364975e19123CD49ba18461ae21C2\\",\\"transaction_hash\\":\\"0xf8f90fcf0ff0bed820d06c82e755e63942356742077505d30d24bfb794ce87fe\\",\\"block_number\\":5279473,\\"gas_cost\\":2507681,\\"constructor_arguments\\":[\\"0x7CB8fe4b74Aa9FC6e4Ce116EBAd431a4831742b5\\",\\"0xE1d6074D0749605902819643B5B0B12C3b693816\\",\\"0xcA3611E609Cf2E66276eB947B816051EaDF3e6c0\\",\\"0xc2be5E503D2ea011eA8aA58cf1d90c24B352a305\\"]},\\"OneToN\\":{\\"address\\":\\"0x0aF7720aCfA8F33BFF874941272722ddbf8C5e4C\\",\\"transaction_hash\\":\\"0xbb4fd8b38a09fc7ead00383108eccd1783f89045edefd1c2989920a96116b19c\\",\\"block_number\\":5279474,\\"gas_cost\\":1367516,\\"constructor_arguments\\":[\\"0xcA3611E609Cf2E66276eB947B816051EaDF3e6c0\\",4,\\"0xE1d6074D0749605902819643B5B0B12C3b693816\\"]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIwZmY2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0ff6\n')},1:function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVmZmVyIChpZ25vcmVkKT9mNmZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoaWdub3JlZCkgKi8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},"152b":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("9ab4");\n/* harmony import */ var vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("60a3");\n/* harmony import */ var _router_route_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("80bf");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\nvar NavigationMixin =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(NavigationMixin, _Vue);\n\n  function NavigationMixin() {\n    _classCallCheck(this, NavigationMixin);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NavigationMixin).apply(this, arguments));\n  }\n\n  _createClass(NavigationMixin, [{\n    key: "navigateToSelectHub",\n    value: function navigateToSelectHub(token) {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].SELECT_HUB,\n        params: {\n          token: token\n        }\n      });\n    }\n  }, {\n    key: "navigateToHome",\n    value: function navigateToHome() {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].HOME\n      });\n    }\n  }, {\n    key: "navigateToOpenChannel",\n    value: function navigateToOpenChannel(token, partner) {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].OPEN_CHANNEL,\n        params: {\n          token: token,\n          partner: partner\n        }\n      });\n    }\n  }, {\n    key: "navigateToChannels",\n    value: function navigateToChannels(token) {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].CHANNELS,\n        params: {\n          token: token\n        }\n      });\n    }\n  }, {\n    key: "navigateToSelectTransferTarget",\n    value: function navigateToSelectTransferTarget(token, target, amount) {\n      var route = {\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].TRANSFER,\n        params: {\n          token: token\n        },\n        query: {}\n      };\n\n      if (target && amount) {\n        route.query = {\n          target: target,\n          amount: amount\n        };\n      }\n\n      this.$router.push(route);\n    }\n  }, {\n    key: "navigateToTokenSelect",\n    value: function navigateToTokenSelect() {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].SELECT_TOKEN\n      });\n    }\n  }, {\n    key: "navigateToTransferSteps",\n    value: function navigateToTransferSteps(target, amount) {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].TRANSFER_STEPS,\n        params: {\n          target: target\n        },\n        query: {\n          amount: amount\n        }\n      });\n    }\n  }, {\n    key: "onBackClicked",\n    value: function onBackClicked() {\n      switch (this.$route.name) {\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].TRANSFER_STEPS:\n          this.navigateToSelectTransferTarget(this.$route.params.token, this.$route.params.target, this.$route.params.amount);\n          break;\n\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].TRANSFER:\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].CHANNELS:\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].SELECT_TOKEN:\n          this.navigateToHome();\n          break;\n\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].SELECT_HUB:\n          this.navigateToTokenSelect();\n          break;\n\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].OPEN_CHANNEL:\n          this.navigateToSelectHub(this.$route.params.token);\n          break;\n      }\n    }\n  }]);\n\n  return NavigationMixin;\n}(vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__[/* Vue */ "e"]);\n\nNavigationMixin = tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ "a"]([vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__[/* Component */ "a"]], NavigationMixin);\n/* harmony default export */ __webpack_exports__["a"] = (NavigationMixin);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWl4aW5zL25hdmlnYXRpb24tbWl4aW4udHM/MDk1YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFHQSxJQUFxQixlQUFyQjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLHdDQUNzQixLQUR0QixFQUNtQztBQUMvQixXQUFLLE9BQUwsQ0FBYSxJQUFiLENBQWtCO0FBQ2hCLFlBQUksRUFBRSxzRUFBVSxDQUFDLFVBREQ7QUFFaEIsY0FBTSxFQUFFO0FBQ04sZUFBSyxFQUFFO0FBREQ7QUFGUSxPQUFsQjtBQU1EO0FBUkg7QUFBQTtBQUFBLHFDQVVnQjtBQUNaLFdBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0I7QUFDaEIsWUFBSSxFQUFFLHNFQUFVLENBQUM7QUFERCxPQUFsQjtBQUdEO0FBZEg7QUFBQTtBQUFBLDBDQWdCd0IsS0FoQnhCLEVBZ0J1QyxPQWhCdkMsRUFnQnNEO0FBQ2xELFdBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0I7QUFDaEIsWUFBSSxFQUFFLHNFQUFVLENBQUMsWUFERDtBQUVoQixjQUFNLEVBQUU7QUFDTixlQUFLLEVBQUUsS0FERDtBQUVOLGlCQUFPLEVBQUU7QUFGSDtBQUZRLE9BQWxCO0FBT0Q7QUF4Qkg7QUFBQTtBQUFBLHVDQTBCcUIsS0ExQnJCLEVBMEJrQztBQUM5QixXQUFLLE9BQUwsQ0FBYSxJQUFiLENBQWtCO0FBQ2hCLFlBQUksRUFBRSxzRUFBVSxDQUFDLFFBREQ7QUFFaEIsY0FBTSxFQUFFO0FBQ04sZUFBSyxFQUFFO0FBREQ7QUFGUSxPQUFsQjtBQU1EO0FBakNIO0FBQUE7QUFBQSxtREFvQ0ksS0FwQ0osRUFxQ0ksTUFyQ0osRUFzQ0ksTUF0Q0osRUFzQ21CO0FBRWYsVUFBTSxLQUFLLEdBQUc7QUFDWixZQUFJLEVBQUUsc0VBQVUsQ0FBQyxRQURMO0FBRVosY0FBTSxFQUFFO0FBQUUsZUFBSyxFQUFFO0FBQVQsU0FGSTtBQUdaLGFBQUssRUFBRTtBQUhLLE9BQWQ7O0FBS0EsVUFBSSxNQUFNLElBQUksTUFBZCxFQUFzQjtBQUNwQixhQUFLLENBQUMsS0FBTixHQUFjO0FBQUUsZ0JBQU0sRUFBTixNQUFGO0FBQVUsZ0JBQU0sRUFBTjtBQUFWLFNBQWQ7QUFDRDs7QUFDRCxXQUFLLE9BQUwsQ0FBYSxJQUFiLENBQWtCLEtBQWxCO0FBQ0Q7QUFqREg7QUFBQTtBQUFBLDRDQW1EdUI7QUFDbkIsV0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQjtBQUNoQixZQUFJLEVBQUUsc0VBQVUsQ0FBQztBQURELE9BQWxCO0FBR0Q7QUF2REg7QUFBQTtBQUFBLDRDQXlEMEIsTUF6RDFCLEVBeUQwQyxNQXpEMUMsRUF5RHdEO0FBQ3BELFdBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0I7QUFDaEIsWUFBSSxFQUFFLHNFQUFVLENBQUMsY0FERDtBQUVoQixjQUFNLEVBQUU7QUFBRSxnQkFBTSxFQUFOO0FBQUYsU0FGUTtBQUdoQixhQUFLLEVBQUU7QUFBRSxnQkFBTSxFQUFOO0FBQUY7QUFIUyxPQUFsQjtBQUtEO0FBL0RIO0FBQUE7QUFBQSxvQ0FpRWU7QUFDWCxjQUFRLEtBQUssTUFBTCxDQUFZLElBQXBCO0FBQ0UsYUFBSyxzRUFBVSxDQUFDLGNBQWhCO0FBQ0UsZUFBSyw4QkFBTCxDQUNFLEtBQUssTUFBTCxDQUFZLE1BQVosQ0FBbUIsS0FEckIsRUFFRSxLQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLE1BRnJCLEVBR0UsS0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixNQUhyQjtBQUtBOztBQUNGLGFBQUssc0VBQVUsQ0FBQyxRQUFoQjtBQUNBLGFBQUssc0VBQVUsQ0FBQyxRQUFoQjtBQUNBLGFBQUssc0VBQVUsQ0FBQyxZQUFoQjtBQUNFLGVBQUssY0FBTDtBQUNBOztBQUNGLGFBQUssc0VBQVUsQ0FBQyxVQUFoQjtBQUNFLGVBQUsscUJBQUw7QUFDQTs7QUFDRixhQUFLLHNFQUFVLENBQUMsWUFBaEI7QUFDRSxlQUFLLG1CQUFMLENBQXlCLEtBQUssTUFBTCxDQUFZLE1BQVosQ0FBbUIsS0FBNUM7QUFDQTtBQWxCSjtBQW9CRDtBQXRGSDs7QUFBQTtBQUFBLEVBQTZDLGtFQUE3Qzs7QUFBcUIsZUFBZSw2REFEbkMsd0VBQ21DLEdBQWYsZUFBZSxDQUFmO0FBQUEsd0UiLCJmaWxlIjoiMTUyYi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XG5pbXBvcnQgeyBSb3V0ZU5hbWVzIH0gZnJvbSAnQC9yb3V0ZXIvcm91dGUtbmFtZXMnO1xuXG5AQ29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZpZ2F0aW9uTWl4aW4gZXh0ZW5kcyBWdWUge1xuICBuYXZpZ2F0ZVRvU2VsZWN0SHViKHRva2VuOiBzdHJpbmcpIHtcbiAgICB0aGlzLiRyb3V0ZXIucHVzaCh7XG4gICAgICBuYW1lOiBSb3V0ZU5hbWVzLlNFTEVDVF9IVUIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgdG9rZW46IHRva2VuXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuYXZpZ2F0ZVRvSG9tZSgpIHtcbiAgICB0aGlzLiRyb3V0ZXIucHVzaCh7XG4gICAgICBuYW1lOiBSb3V0ZU5hbWVzLkhPTUVcbiAgICB9KTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9PcGVuQ2hhbm5lbCh0b2tlbjogc3RyaW5nLCBwYXJ0bmVyOiBzdHJpbmcpIHtcbiAgICB0aGlzLiRyb3V0ZXIucHVzaCh7XG4gICAgICBuYW1lOiBSb3V0ZU5hbWVzLk9QRU5fQ0hBTk5FTCxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgIHBhcnRuZXI6IHBhcnRuZXJcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9DaGFubmVscyh0b2tlbjogc3RyaW5nKSB7XG4gICAgdGhpcy4kcm91dGVyLnB1c2goe1xuICAgICAgbmFtZTogUm91dGVOYW1lcy5DSEFOTkVMUyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB0b2tlbjogdG9rZW5cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9TZWxlY3RUcmFuc2ZlclRhcmdldChcbiAgICB0b2tlbjogc3RyaW5nLFxuICAgIHRhcmdldD86IHN0cmluZyxcbiAgICBhbW91bnQ/OiBzdHJpbmdcbiAgKSB7XG4gICAgY29uc3Qgcm91dGUgPSB7XG4gICAgICBuYW1lOiBSb3V0ZU5hbWVzLlRSQU5TRkVSLFxuICAgICAgcGFyYW1zOiB7IHRva2VuOiB0b2tlbiB9LFxuICAgICAgcXVlcnk6IHt9XG4gICAgfTtcbiAgICBpZiAodGFyZ2V0ICYmIGFtb3VudCkge1xuICAgICAgcm91dGUucXVlcnkgPSB7IHRhcmdldCwgYW1vdW50IH07XG4gICAgfVxuICAgIHRoaXMuJHJvdXRlci5wdXNoKHJvdXRlKTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9Ub2tlblNlbGVjdCgpIHtcbiAgICB0aGlzLiRyb3V0ZXIucHVzaCh7XG4gICAgICBuYW1lOiBSb3V0ZU5hbWVzLlNFTEVDVF9UT0tFTlxuICAgIH0pO1xuICB9XG5cbiAgbmF2aWdhdGVUb1RyYW5zZmVyU3RlcHModGFyZ2V0OiBzdHJpbmcsIGFtb3VudDogc3RyaW5nKSB7XG4gICAgdGhpcy4kcm91dGVyLnB1c2goe1xuICAgICAgbmFtZTogUm91dGVOYW1lcy5UUkFOU0ZFUl9TVEVQUyxcbiAgICAgIHBhcmFtczogeyB0YXJnZXQgfSxcbiAgICAgIHF1ZXJ5OiB7IGFtb3VudCB9XG4gICAgfSk7XG4gIH1cblxuICBvbkJhY2tDbGlja2VkKCkge1xuICAgIHN3aXRjaCAodGhpcy4kcm91dGUubmFtZSkge1xuICAgICAgY2FzZSBSb3V0ZU5hbWVzLlRSQU5TRkVSX1NURVBTOlxuICAgICAgICB0aGlzLm5hdmlnYXRlVG9TZWxlY3RUcmFuc2ZlclRhcmdldChcbiAgICAgICAgICB0aGlzLiRyb3V0ZS5wYXJhbXMudG9rZW4sXG4gICAgICAgICAgdGhpcy4kcm91dGUucGFyYW1zLnRhcmdldCxcbiAgICAgICAgICB0aGlzLiRyb3V0ZS5wYXJhbXMuYW1vdW50XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBSb3V0ZU5hbWVzLlRSQU5TRkVSOlxuICAgICAgY2FzZSBSb3V0ZU5hbWVzLkNIQU5ORUxTOlxuICAgICAgY2FzZSBSb3V0ZU5hbWVzLlNFTEVDVF9UT0tFTjpcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvSG9tZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUm91dGVOYW1lcy5TRUxFQ1RfSFVCOlxuICAgICAgICB0aGlzLm5hdmlnYXRlVG9Ub2tlblNlbGVjdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUm91dGVOYW1lcy5PUEVOX0NIQU5ORUw6XG4gICAgICAgIHRoaXMubmF2aWdhdGVUb1NlbGVjdEh1Yih0aGlzLiRyb3V0ZS5wYXJhbXMudG9rZW4pO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///152b\n')},2:function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCk/MjZiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKGlnbm9yZWQpICovIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},3:function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCk/NGQ2MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKGlnbm9yZWQpICovIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")},"31a7":function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":4,\\"contracts\\":{\\"SecretRegistry\\":{\\"address\\":\\"0xfC83B78195A99Ee782fABCFF9d259764640cEc7E\\",\\"transaction_hash\\":\\"0xf79919c727a4ad270548d7b0a3dcb5f4b6f391097528adfe5ec4cbfd1cda4faa\\",\\"block_number\\":4667704,\\"gas_cost\\":298578,\\"constructor_arguments\\":[]},\\"TokenNetworkRegistry\\":{\\"address\\":\\"0xc2be5E503D2ea011eA8aA58cf1d90c24B352a305\\",\\"transaction_hash\\":\\"0xd9b4291b0ce663ff13e9870c72d8d37fd36ec6beeb3e91876badf85925fce47a\\",\\"block_number\\":5239473,\\"gas_cost\\":5056166,\\"constructor_arguments\\":[\\"0xfC83B78195A99Ee782fABCFF9d259764640cEc7E\\",4,20,555428,1.157920892373162e+77]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIzMWE3LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31a7\n')},"3ba2":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY3Rpb25CdXR0b24udnVlP2YxNTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiM2JhMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3ba2\n")},4:function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vY3J5cHRvIChpZ25vcmVkKT9iNWU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoaWdub3JlZCkgKi8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},4201:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob1Rva2Vucy52dWU/ZGM2MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0MjAxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4201\n")},"431d":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob0FjY2Vzc01lc3NhZ2UudnVlPzZiYTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDMxZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///431d\n")},"49f8":function(module,exports,__webpack_require__){eval('var map = {\n\t"./en.json": "edd4"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = "49f8";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbG9jYWxlcyBzeW5jIFtBLVphLXowLTktXyxcXHNdK1xcLmpzb24kLz80ZGE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQ5ZjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vZW4uanNvblwiOiBcImVkZDRcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiNDlmOFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49f8\n')},"4e0b":function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":5,\\"contracts\\":{\\"ServiceRegistry\\":{\\"address\\":\\"0x22b32dB233c5b870372002CC196C404831c0d9a7\\",\\"transaction_hash\\":\\"0x14f8973148eccd2d89a341538b5a90600fbdc08ef98c92c1f46b8c4e6e321270\\",\\"block_number\\":1486919,\\"gas_cost\\":2541477,\\"constructor_arguments\\":[\\"0x709118121A1ccA0f32FC2C0c59752E8FEE3c2834\\",\\"0x6C5C227036a1D159C19f17316E5D0f0A52D84D5c\\",2e+21,6,5,17280000,1000,17280000]},\\"UserDeposit\\":{\\"address\\":\\"0x3E8bEc5C426B0dd0380bA53048C46edfC84B992a\\",\\"transaction_hash\\":\\"0x2abf9d2cd37414caad23d64a816f69132252a703a07b4a1f990c7eaf8967aab7\\",\\"block_number\\":1486921,\\"gas_cost\\":1899008,\\"constructor_arguments\\":[\\"0x709118121A1ccA0f32FC2C0c59752E8FEE3c2834\\",1.157920892373162e+77]},\\"MonitoringService\\":{\\"address\\":\\"0xa7e2E51D8cB1108513070ea8ec75F921ba3bEd27\\",\\"transaction_hash\\":\\"0xa173df5a5f6b866c476fdc9946fe5d1c21e2d85b945152291856a2a5ccb9e212\\",\\"block_number\\":1486923,\\"gas_cost\\":2507681,\\"constructor_arguments\\":[\\"0x709118121A1ccA0f32FC2C0c59752E8FEE3c2834\\",\\"0x22b32dB233c5b870372002CC196C404831c0d9a7\\",\\"0x3E8bEc5C426B0dd0380bA53048C46edfC84B992a\\",\\"0x62436bbadB629498107278486C2A367FfdFEb2f3\\"]},\\"OneToN\\":{\\"address\\":\\"0xB3C76048dB9Fe3092a7F88CeEBC580CcbC223A46\\",\\"transaction_hash\\":\\"0x2f60fd600d0cd3f23ee6585aff5c90499d3b7f0d165782285791c7782c6f29b8\\",\\"block_number\\":1486924,\\"gas_cost\\":1367516,\\"constructor_arguments\\":[\\"0x3E8bEc5C426B0dd0380bA53048C46edfC84B992a\\",5,\\"0x22b32dB233c5b870372002CC196C404831c0d9a7\\"]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0ZTBiLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4e0b\n')},"73da":function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/back_arrow.268247fb.svg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2JhY2tfYXJyb3cuc3ZnP2MzN2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiI3M2RhLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2JhY2tfYXJyb3cuMjY4MjQ3ZmIuc3ZnXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///73da\n')},"750b":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ActionButton.vue?vue&type=template&id=6ad6aad0&scoped=true&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-row\',{staticClass:"action-button",class:{ sticky: _vm.sticky },attrs:{"no-gutters":"","align-content":"center","justify":"center"}},[_c(\'v-col\',{staticClass:"text-center",attrs:{"cols":_vm.sticky ? 12 : 10}},[_c(\'v-btn\',{staticClass:"text-capitalize action-button__button",class:{ sticky: _vm.sticky },attrs:{"disabled":!_vm.enabled,"loading":_vm.loading,"depressed":"","large":""},on:{"click":function($event){return _vm.click()}}},[_vm._v(" "+_vm._s(_vm.text)+" "),(_vm.arrow)?_c(\'v-icon\',{attrs:{"right":""}},[_vm._v("keyboard_arrow_right")]):_vm._e()],1)],1)],1)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/ActionButton.vue?vue&type=template&id=6ad6aad0&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__("9ab4");\n\n// EXTERNAL MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\nvar vue_property_decorator = __webpack_require__("60a3");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ActionButton.vue?vue&type=script&lang=ts&\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\nvar ActionButton =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(ActionButton, _Vue);\n\n  function ActionButton() {\n    _classCallCheck(this, ActionButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ActionButton).apply(this, arguments));\n  }\n\n  _createClass(ActionButton, [{\n    key: "click",\n    value: function click() {}\n  }]);\n\n  return ActionButton;\n}(vue_property_decorator["e" /* Vue */]);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["d" /* Prop */])({\n  required: true,\n  type: Boolean\n})], ActionButton.prototype, "enabled", void 0);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["d" /* Prop */])({\n  required: true\n})], ActionButton.prototype, "text", void 0);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  default: false\n})], ActionButton.prototype, "loading", void 0);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  default: false\n})], ActionButton.prototype, "sticky", void 0);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  default: false\n})], ActionButton.prototype, "arrow", void 0);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["b" /* Emit */])()], ActionButton.prototype, "click", null);\n\nActionButton = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({})], ActionButton);\n/* harmony default export */ var ActionButtonvue_type_script_lang_ts_ = (ActionButton);\n// CONCATENATED MODULE: ./src/components/ActionButton.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_ActionButtonvue_type_script_lang_ts_ = (ActionButtonvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/ActionButton.vue?vue&type=style&index=0&id=6ad6aad0&lang=scss&scoped=true&\nvar ActionButtonvue_type_style_index_0_id_6ad6aad0_lang_scss_scoped_true_ = __webpack_require__("bf54");\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("2877");\n\n// EXTERNAL MODULE: ./node_modules/vuetify-loader/lib/runtime/installComponents.js\nvar installComponents = __webpack_require__("6544");\nvar installComponents_default = /*#__PURE__*/__webpack_require__.n(installComponents);\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VBtn/VBtn.js\nvar VBtn = __webpack_require__("8336");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VCol.js\nvar VCol = __webpack_require__("62ad");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VIcon/VIcon.js\nvar VIcon = __webpack_require__("132d");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VRow.js\nvar VRow = __webpack_require__("0fd9");\n\n// CONCATENATED MODULE: ./src/components/ActionButton.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_ActionButtonvue_type_script_lang_ts_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "6ad6aad0",\n  null\n  \n)\n\n/* harmony default export */ var components_ActionButton = __webpack_exports__["a"] = (component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\ninstallComponents_default()(component, {VBtn: VBtn["a" /* default */],VCol: VCol["a" /* default */],VIcon: VIcon["a" /* default */],VRow: VRow["a" /* default */]})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY3Rpb25CdXR0b24udnVlPzBmMGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQWN0aW9uQnV0dG9uLnZ1ZT9lNWJmIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FjdGlvbkJ1dHRvbi52dWU/NTc0ZiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY3Rpb25CdXR0b24udnVlPzU0N2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLG1CQUFtQixtQ0FBbUMscUJBQXFCLFFBQVEsNkRBQTZELGNBQWMsaUNBQWlDLDZCQUE2QixjQUFjLDJEQUEyRCxxQkFBcUIsUUFBUSx3RUFBd0UsS0FBSyx5QkFBeUIscUJBQXFCLDREQUE0RCxPQUFPLFlBQVk7QUFDcm1COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDd0JBOztBQUdBLElBQXFCLFlBQXJCO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUEsNEJBaUJPLENBQUs7QUFqQlo7O0FBQUE7QUFBQSxFQUEwQyxxQ0FBMUM7O0FBRUUsaUNBREMsOENBQUksQ0FBQztBQUFFLFVBQVEsRUFBRSxJQUFaO0FBQWtCLE1BQUksRUFBRTtBQUF4QixDQUFELENBQ0wsRyxzQkFBQSxFLFNBQUEsRSxLQUFrQixDQUFsQjs7QUFHQSxpQ0FEQyw4Q0FBSSxDQUFDO0FBQUUsVUFBUSxFQUFFO0FBQVosQ0FBRCxDQUNMLEcsc0JBQUEsRSxNQUFBLEUsS0FBYyxDQUFkOztBQUdBLGlDQURDLDhDQUFJLENBQUM7QUFBRSxNQUFJLEVBQUUsT0FBUjtBQUFpQixTQUFPLEVBQUU7QUFBMUIsQ0FBRCxDQUNMLEcsc0JBQUEsRSxTQUFBLEUsS0FBa0IsQ0FBbEI7O0FBR0EsaUNBREMsOENBQUksQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ0wsRyxzQkFBQSxFLFFBQUEsRSxLQUFpQixDQUFqQjs7QUFHQSxpQ0FEQyw4Q0FBSSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDTCxHLHNCQUFBLEUsT0FBQSxFLEtBQWdCLENBQWhCOztBQUdBLGlDQURDLDhDQUFJLEVBQ0wsRyxzQkFBQSxFLE9BQUEsRUFBVSxJQUFWOztBQWpCbUIsWUFBWSxvQ0FEaEMsbURBQVMsQ0FBQyxFQUFELENBQ3VCLEdBQVosWUFBWSxDQUFaO0FBQUEscUY7O0FDNUJrWixDQUFnQix3SEFBRyxFQUFDLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FwVjtBQUN2QztBQUNMO0FBQ3NDOzs7QUFHakc7QUFDMEY7QUFDMUYsZ0JBQWdCLDhDQUFVO0FBQzFCLEVBQUUsK0NBQU07QUFDUixFQUFFLE1BQU07QUFDUixFQUFFLGVBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRWUsd0dBQWlCOztBQUVoQztBQUNtRztBQUNoRDtBQUNDO0FBQ0M7QUFDRDtBQUNwRCwyQkFBaUIsYUFBYSw2QkFBSSxDQUFDLDZCQUFJLENBQUMsK0JBQUssQ0FBQyw2QkFBSSxDQUFDIiwiZmlsZSI6Ijc1MGIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygndi1yb3cnLHtzdGF0aWNDbGFzczpcImFjdGlvbi1idXR0b25cIixjbGFzczp7IHN0aWNreTogX3ZtLnN0aWNreSB9LGF0dHJzOntcIm5vLWd1dHRlcnNcIjpcIlwiLFwiYWxpZ24tY29udGVudFwiOlwiY2VudGVyXCIsXCJqdXN0aWZ5XCI6XCJjZW50ZXJcIn19LFtfYygndi1jb2wnLHtzdGF0aWNDbGFzczpcInRleHQtY2VudGVyXCIsYXR0cnM6e1wiY29sc1wiOl92bS5zdGlja3kgPyAxMiA6IDEwfX0sW19jKCd2LWJ0bicse3N0YXRpY0NsYXNzOlwidGV4dC1jYXBpdGFsaXplIGFjdGlvbi1idXR0b25fX2J1dHRvblwiLGNsYXNzOnsgc3RpY2t5OiBfdm0uc3RpY2t5IH0sYXR0cnM6e1wiZGlzYWJsZWRcIjohX3ZtLmVuYWJsZWQsXCJsb2FkaW5nXCI6X3ZtLmxvYWRpbmcsXCJkZXByZXNzZWRcIjpcIlwiLFwibGFyZ2VcIjpcIlwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5jbGljaygpfX19LFtfdm0uX3YoXCIgXCIrX3ZtLl9zKF92bS50ZXh0KStcIiBcIiksKF92bS5hcnJvdyk/X2MoJ3YtaWNvbicse2F0dHJzOntcInJpZ2h0XCI6XCJcIn19LFtfdm0uX3YoXCJrZXlib2FyZF9hcnJvd19yaWdodFwiKV0pOl92bS5fZSgpXSwxKV0sMSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRW1pdCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XG5cbkBDb21wb25lbnQoe30pXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25CdXR0b24gZXh0ZW5kcyBWdWUge1xuICBAUHJvcCh7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiBCb29sZWFuIH0pXG4gIGVuYWJsZWQhOiBib29sZWFuO1xuXG4gIEBQcm9wKHsgcmVxdWlyZWQ6IHRydWUgfSlcbiAgdGV4dCE6IHN0cmluZztcblxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXG4gIGxvYWRpbmchOiBib29sZWFuO1xuXG4gIEBQcm9wKHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSlcbiAgc3RpY2t5PzogYm9vbGVhbjtcblxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXG4gIGFycm93PzogYm9vbGVhbjtcblxuICBARW1pdCgpXG4gIGNsaWNrKCkge31cbn1cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xNC0wIS4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FjdGlvbkJ1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xNC0wIS4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FjdGlvbkJ1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FjdGlvbkJ1dHRvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NmFkNmFhZDAmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQWN0aW9uQnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQWN0aW9uQnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9BY3Rpb25CdXR0b24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NmFkNmFhZDAmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI2YWQ2YWFkMFwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0c1xuXG4vKiB2dWV0aWZ5LWxvYWRlciAqL1xuaW1wb3J0IGluc3RhbGxDb21wb25lbnRzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9ydW50aW1lL2luc3RhbGxDb21wb25lbnRzLmpzXCJcbmltcG9ydCB7IFZCdG4gfSBmcm9tICd2dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCdG4nO1xuaW1wb3J0IHsgVkNvbCB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkdyaWQnO1xuaW1wb3J0IHsgVkljb24gfSBmcm9tICd2dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZJY29uJztcbmltcG9ydCB7IFZSb3cgfSBmcm9tICd2dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZHcmlkJztcbmluc3RhbGxDb21wb25lbnRzKGNvbXBvbmVudCwge1ZCdG4sVkNvbCxWSWNvbixWUm93fSlcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///750b\n')},"77e8":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoTokens_vue_vue_type_style_index_0_id_58ff6435_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("4201");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoTokens_vue_vue_type_style_index_0_id_58ff6435_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoTokens_vue_vue_type_style_index_0_id_58ff6435_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoTokens_vue_vue_type_style_index_0_id_58ff6435_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob1Rva2Vucy52dWU/MWJiYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBcWtCLENBQWdCLHFtQkFBRyxFQUFDIiwiZmlsZSI6Ijc3ZTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ob1Rva2Vucy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01OGZmNjQzNSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTgtb25lT2YtMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTgtb25lT2YtMS0yIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05vVG9rZW5zLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTU4ZmY2NDM1Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///77e8\n')},"77fd":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("9ab4");\n/* harmony import */ var vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("60a3");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\nvar BlockieMixin =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(BlockieMixin, _Vue);\n\n  function BlockieMixin() {\n    _classCallCheck(this, BlockieMixin);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BlockieMixin).apply(this, arguments));\n  }\n\n  _createClass(BlockieMixin, [{\n    key: "$blockie",\n    value: function $blockie(address) {\n      return this.$identicon.getIdenticon(address);\n    }\n  }]);\n\n  return BlockieMixin;\n}(vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__[/* Vue */ "e"]);\n\nBlockieMixin = tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ "a"]([vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__[/* Component */ "a"]], BlockieMixin);\n/* harmony default export */ __webpack_exports__["a"] = (BlockieMixin);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWl4aW5zL2Jsb2NraWUtbWl4aW4udHM/NzE3MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFHQSxJQUFxQixZQUFyQjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLDZCQUNXLE9BRFgsRUFDMEI7QUFDdEIsYUFBTyxLQUFLLFVBQUwsQ0FBZ0IsWUFBaEIsQ0FBNkIsT0FBN0IsQ0FBUDtBQUNEO0FBSEg7O0FBQUE7QUFBQSxFQUEwQyxrRUFBMUM7O0FBQXFCLFlBQVksNkRBRGhDLHdFQUNnQyxHQUFaLFlBQVksQ0FBWjtBQUFBLHFFIiwiZmlsZSI6Ijc3ZmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZ1ZSB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xuXG5AQ29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbG9ja2llTWl4aW4gZXh0ZW5kcyBWdWUge1xuICAkYmxvY2tpZShhZGRyZXNzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy4kaWRlbnRpY29uLmdldElkZW50aWNvbihhZGRyZXNzKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///77fd\n')},"80bf":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RouteNames; });\nvar RouteNames;\n\n(function (RouteNames) {\n  RouteNames["TRANSFER"] = "transfer";\n  RouteNames["TRANSFER_STEPS"] = "transfer-steps";\n  RouteNames["SELECT_TOKEN"] = "select-token";\n  RouteNames["SELECT_HUB"] = "select-hub";\n  RouteNames["HOME"] = "home";\n  RouteNames["CHANNELS"] = "channels";\n  RouteNames["OPEN_CHANNEL"] = "open-channel";\n})(RouteNames || (RouteNames = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVyL3JvdXRlLW5hbWVzLnRzPzk4MDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxJQUFZLFVBQVo7O0FBQUEsV0FBWSxVQUFaLEVBQXNCO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0QsQ0FSRCxFQUFZLFVBQVUsS0FBVixVQUFVLE1BQXRCIiwiZmlsZSI6IjgwYmYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBSb3V0ZU5hbWVzIHtcbiAgVFJBTlNGRVIgPSAndHJhbnNmZXInLFxuICBUUkFOU0ZFUl9TVEVQUyA9ICd0cmFuc2Zlci1zdGVwcycsXG4gIFNFTEVDVF9UT0tFTiA9ICdzZWxlY3QtdG9rZW4nLFxuICBTRUxFQ1RfSFVCID0gJ3NlbGVjdC1odWInLFxuICBIT01FID0gJ2hvbWUnLFxuICBDSEFOTkVMUyA9ICdjaGFubmVscycsXG4gIE9QRU5fQ0hBTk5FTCA9ICdvcGVuLWNoYW5uZWwnXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80bf\n')},8144:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AppHeader_vue_vue_type_style_index_0_id_57449954_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("be3a");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AppHeader_vue_vue_type_style_index_0_id_57449954_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AppHeader_vue_vue_type_style_index_0_id_57449954_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AppHeader_vue_vue_type_style_index_0_id_57449954_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHBIZWFkZXIudnVlPzBmOTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQXNrQixDQUFnQixzbUJBQUcsRUFBQyIsImZpbGUiOiI4MTQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwSGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTU3NDQ5OTU0JnNjb3BlZD10cnVlJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwSGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTU3NDQ5OTU0JnNjb3BlZD10cnVlJmxhbmc9c2NzcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8144\n')},"87a2":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return emptyDescription; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return emptyTokenModel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return PlaceHolderNetwork; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DeniedReason; });\nvar emptyDescription = function emptyDescription() {\n  return {\n    label: \'\',\n    title: \'\',\n    description: \'\'\n  };\n};\nvar emptyTokenModel = function emptyTokenModel() {\n  return {\n    name: \'\',\n    symbol: \'\',\n    address: \'\',\n    opening: 0,\n    open: 0,\n    closing: 0,\n    closed: 0,\n    settling: 0,\n    settled: 0\n  };\n};\nvar PlaceHolderNetwork = {\n  name: \'\',\n  chainId: -1\n};\nvar DeniedReason;\n\n(function (DeniedReason) {\n  DeniedReason[DeniedReason["UNDEFINED"] = 0] = "UNDEFINED";\n  DeniedReason[DeniedReason["NO_ACCOUNT"] = 1] = "NO_ACCOUNT";\n  DeniedReason[DeniedReason["UNSUPPORTED_NETWORK"] = 2] = "UNSUPPORTED_NETWORK";\n  DeniedReason[DeniedReason["INITIALIZATION_FAILED"] = 3] = "INITIALIZATION_FAILED";\n})(DeniedReason || (DeniedReason = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvdHlwZXMudHM/MDNmZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0REE7QUFBQTtBQUFBO0FBQUE7QUFBTyxJQUFNLGdCQUFnQixHQUFHLFNBQW5CLGdCQUFtQjtBQUFBLFNBQXdCO0FBQ3RELFNBQUssRUFBRSxFQUQrQztBQUV0RCxTQUFLLEVBQUUsRUFGK0M7QUFHdEQsZUFBVyxFQUFFO0FBSHlDLEdBQXhCO0FBQUEsQ0FBekI7QUFNQSxJQUFNLGVBQWUsR0FBRyxTQUFsQixlQUFrQjtBQUFBLFNBQXNCO0FBQ25ELFFBQUksRUFBRSxFQUQ2QztBQUVuRCxVQUFNLEVBQUUsRUFGMkM7QUFHbkQsV0FBTyxFQUFFLEVBSDBDO0FBSW5ELFdBQU8sRUFBRSxDQUowQztBQUtuRCxRQUFJLEVBQUUsQ0FMNkM7QUFNbkQsV0FBTyxFQUFFLENBTjBDO0FBT25ELFVBQU0sRUFBRSxDQVAyQztBQVFuRCxZQUFRLEVBQUUsQ0FSeUM7QUFTbkQsV0FBTyxFQUFFO0FBVDBDLEdBQXRCO0FBQUEsQ0FBeEI7QUFZQSxJQUFNLGtCQUFrQixHQUFZO0FBQ3pDLE1BQUksRUFBRSxFQURtQztBQUV6QyxTQUFPLEVBQUUsQ0FBQztBQUYrQixDQUFwQztBQUtQLElBQVksWUFBWjs7QUFBQSxXQUFZLFlBQVosRUFBd0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDRCxDQUxELEVBQVksWUFBWSxLQUFaLFlBQVksTUFBeEIiLCJmaWxlIjoiODdhMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoLCBOZXR3b3JrIH0gZnJvbSAnZXRoZXJzL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBUb2tlbiB7XG4gIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcbiAgcmVhZG9ubHkgZGVjaW1hbHM/OiBudW1iZXI7XG4gIHJlYWRvbmx5IGJhbGFuY2U/OiBCaWdOdW1iZXJpc2g7XG4gIHJlYWRvbmx5IHN5bWJvbD86IHN0cmluZztcbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2NUb2tlbk1vZGVsIHtcbiAgbmFtZTogc3RyaW5nO1xuICBzeW1ib2w6IHN0cmluZztcbiAgYWRkcmVzczogc3RyaW5nO1xuICBvcGVuaW5nOiBudW1iZXI7XG4gIG9wZW46IG51bWJlcjtcbiAgY2xvc2luZzogbnVtYmVyO1xuICBjbG9zZWQ6IG51bWJlcjtcbiAgc2V0dGxpbmc6IG51bWJlcjtcbiAgc2V0dGxlZDogbnVtYmVyO1xuXG4gIFtpbmRleDogc3RyaW5nXTogbnVtYmVyIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRva2VuTW9kZWwgZXh0ZW5kcyBBY2NUb2tlbk1vZGVsIHtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICByZWFkb25seSBzeW1ib2w6IHN0cmluZztcbiAgcmVhZG9ubHkgYWRkcmVzczogc3RyaW5nO1xuICByZWFkb25seSBvcGVuaW5nOiBudW1iZXI7XG4gIHJlYWRvbmx5IG9wZW46IG51bWJlcjtcbiAgcmVhZG9ubHkgY2xvc2luZzogbnVtYmVyO1xuICByZWFkb25seSBjbG9zZWQ6IG51bWJlcjtcbiAgcmVhZG9ubHkgc2V0dGxpbmc6IG51bWJlcjtcbiAgcmVhZG9ubHkgc2V0dGxlZDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYXZlTmV0d29ya1Jlc3VsdCB7XG4gIHJlYWRvbmx5IGNsb3NlZDogbnVtYmVyO1xuICByZWFkb25seSBmYWlsZWQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm9ncmVzcyB7XG4gIHJlYWRvbmx5IGN1cnJlbnQ6IG51bWJlcjtcbiAgcmVhZG9ubHkgdG90YWw6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGVwRGVzY3JpcHRpb24ge1xuICByZWFkb25seSBsYWJlbDogc3RyaW5nO1xuICByZWFkb25seSB0aXRsZTogc3RyaW5nO1xuICByZWFkb25seSBkZXNjcmlwdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlIHtcbiAgcmVhZG9ubHkga2V5OiBudW1iZXI7XG4gIHJlYWRvbmx5IGhvcHM6IG51bWJlcjtcbiAgcmVhZG9ubHkgcGF0aDogc3RyaW5nW107XG4gIHJlYWRvbmx5IGZlZTogQmlnTnVtYmVyO1xuICByZWFkb25seSBkaXNwbGF5RmVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBlbXB0eURlc2NyaXB0aW9uID0gKCk6IFN0ZXBEZXNjcmlwdGlvbiA9PiAoe1xuICBsYWJlbDogJycsXG4gIHRpdGxlOiAnJyxcbiAgZGVzY3JpcHRpb246ICcnXG59KTtcblxuZXhwb3J0IGNvbnN0IGVtcHR5VG9rZW5Nb2RlbCA9ICgpOiBBY2NUb2tlbk1vZGVsID0+ICh7XG4gIG5hbWU6ICcnLFxuICBzeW1ib2w6ICcnLFxuICBhZGRyZXNzOiAnJyxcbiAgb3BlbmluZzogMCxcbiAgb3BlbjogMCxcbiAgY2xvc2luZzogMCxcbiAgY2xvc2VkOiAwLFxuICBzZXR0bGluZzogMCxcbiAgc2V0dGxlZDogMFxufSk7XG5cbmV4cG9ydCBjb25zdCBQbGFjZUhvbGRlck5ldHdvcms6IE5ldHdvcmsgPSB7XG4gIG5hbWU6ICcnLFxuICBjaGFpbklkOiAtMVxufTtcblxuZXhwb3J0IGVudW0gRGVuaWVkUmVhc29uIHtcbiAgVU5ERUZJTkVELFxuICBOT19BQ0NPVU5ULFxuICBVTlNVUFBPUlRFRF9ORVRXT1JLLFxuICBJTklUSUFMSVpBVElPTl9GQUlMRURcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87a2\n')},"8ecd":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoAccessMessage_vue_vue_type_style_index_0_id_6b8163f4_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("431d");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoAccessMessage_vue_vue_type_style_index_0_id_6b8163f4_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoAccessMessage_vue_vue_type_style_index_0_id_6b8163f4_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoAccessMessage_vue_vue_type_style_index_0_id_6b8163f4_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob0FjY2Vzc01lc3NhZ2UudnVlPzJhN2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQTRrQixDQUFnQiw0bUJBQUcsRUFBQyIsImZpbGUiOiI4ZWNkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTm9BY2Nlc3NNZXNzYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTZiODE2M2Y0JnNjb3BlZD10cnVlJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTm9BY2Nlc3NNZXNzYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTZiODE2M2Y0JnNjb3BlZD10cnVlJmxhbmc9c2NzcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8ecd\n')},"927e":function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/copy_icon.80d12304.svg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2NvcHlfaWNvbi5zdmc/NDIyMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjkyN2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvY29weV9pY29uLjgwZDEyMzA0LnN2Z1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///927e\n')},"92e5":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_SplashScreen_vue_vue_type_style_index_0_id_714ef5f8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("943d");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_SplashScreen_vue_vue_type_style_index_0_id_714ef5f8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_SplashScreen_vue_vue_type_style_index_0_id_714ef5f8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_SplashScreen_vue_vue_type_style_index_0_id_714ef5f8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGxhc2hTY3JlZW4udnVlPzU0ODkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQXlrQixDQUFnQix5bUJBQUcsRUFBQyIsImZpbGUiOiI5MmU1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU3BsYXNoU2NyZWVuLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcxNGVmNWY4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU3BsYXNoU2NyZWVuLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcxNGVmNWY4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///92e5\n')},"930e":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PZmZsaW5lU25hY2tiYXIudnVlPzYzMTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTMwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///930e\n")},"943d":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGxhc2hTY3JlZW4udnVlPzlkZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTQzZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///943d\n")},"9b19":function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/logo.5c4b022d.svg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2xvZ28uc3ZnPzExMTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiI5YjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2xvZ28uNWM0YjAyMmQuc3ZnXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9b19\n')},a0df:function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":3,\\"contracts\\":{\\"SecretRegistry\\":{\\"address\\":\\"0xA39faF9464b4E5668154003464e3a40ab9a83cB8\\",\\"transaction_hash\\":\\"0x948201d71da1c344ff722257e2153eafa2f7a55c1dd2afc72fbf61271d8bfa3f\\",\\"block_number\\":5914539,\\"gas_cost\\":298578,\\"constructor_arguments\\":[]},\\"TokenNetworkRegistry\\":{\\"address\\":\\"0x14375063E15B4cBe111c92aE35720d86FD8744bd\\",\\"transaction_hash\\":\\"0x8675a5b6889ff4766659a3e9fe899a02491522aa69129493aa9a0adf07929345\\",\\"block_number\\":6553162,\\"gas_cost\\":4139254,\\"constructor_arguments\\":[\\"0xA39faF9464b4E5668154003464e3a40ab9a83cB8\\",3,20,555428,1.157920892373162e+77]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhMGRmLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a0df\n')},a3d5:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BalanceUtils; });\n/* harmony import */ var ethers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6934");\n/* harmony import */ var ethers_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ethers_utils__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar BalanceUtils =\n/*#__PURE__*/\nfunction () {\n  function BalanceUtils() {\n    _classCallCheck(this, BalanceUtils);\n  }\n\n  _createClass(BalanceUtils, null, [{\n    key: "toEth",\n    value: function toEth(wei) {\n      return Object(ethers_utils__WEBPACK_IMPORTED_MODULE_0__["formatEther"])(wei);\n    }\n  }, {\n    key: "toUnits",\n    value: function toUnits(wei, decimals) {\n      return Object(ethers_utils__WEBPACK_IMPORTED_MODULE_0__["formatUnits"])(wei, decimals);\n    }\n  }, {\n    key: "decimalsOverflow",\n    value: function decimalsOverflow(depositTokens, decimals) {\n      var decimalPart;\n\n      if (depositTokens.indexOf(\'.\') > 0) {\n        decimalPart = depositTokens.split(\'.\')[1];\n      } else {\n        decimalPart = \'\';\n      }\n\n      return decimalPart.length > decimals;\n    }\n  }, {\n    key: "parse",\n    value: function parse(deposit, decimals) {\n      return Object(ethers_utils__WEBPACK_IMPORTED_MODULE_0__["parseUnits"])(deposit, decimals);\n    }\n  }]);\n\n  return BalanceUtils;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYmFsYW5jZS11dGlscy50cz9kOWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBRU8sSUFBTSxZQUFiO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUEsMEJBQ2UsR0FEZixFQUM2QjtBQUN6QixhQUFPLGdFQUFXLENBQUMsR0FBRCxDQUFsQjtBQUNEO0FBSEg7QUFBQTtBQUFBLDRCQUtpQixHQUxqQixFQUtpQyxRQUxqQyxFQUtpRDtBQUM3QyxhQUFPLGdFQUFXLENBQUMsR0FBRCxFQUFNLFFBQU4sQ0FBbEI7QUFDRDtBQVBIO0FBQUE7QUFBQSxxQ0FTMEIsYUFUMUIsRUFTaUQsUUFUakQsRUFTaUU7QUFDN0QsVUFBSSxXQUFKOztBQUNBLFVBQUksYUFBYSxDQUFDLE9BQWQsQ0FBc0IsR0FBdEIsSUFBNkIsQ0FBakMsRUFBb0M7QUFDbEMsbUJBQVcsR0FBRyxhQUFhLENBQUMsS0FBZCxDQUFvQixHQUFwQixFQUF5QixDQUF6QixDQUFkO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsbUJBQVcsR0FBRyxFQUFkO0FBQ0Q7O0FBQ0QsYUFBTyxXQUFXLENBQUMsTUFBWixHQUFxQixRQUE1QjtBQUNEO0FBakJIO0FBQUE7QUFBQSwwQkFtQmUsT0FuQmYsRUFtQmdDLFFBbkJoQyxFQW1CZ0Q7QUFDNUMsYUFBTywrREFBVSxDQUFDLE9BQUQsRUFBVSxRQUFWLENBQWpCO0FBQ0Q7QUFyQkg7O0FBQUE7QUFBQSIsImZpbGUiOiJhM2Q1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlnTnVtYmVyLCBwYXJzZVVuaXRzLCBmb3JtYXRVbml0cywgZm9ybWF0RXRoZXIgfSBmcm9tICdldGhlcnMvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgQmFsYW5jZVV0aWxzIHtcbiAgc3RhdGljIHRvRXRoKHdlaTogQmlnTnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZm9ybWF0RXRoZXIod2VpKTtcbiAgfVxuXG4gIHN0YXRpYyB0b1VuaXRzKHdlaTogQmlnTnVtYmVyLCBkZWNpbWFsczogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZm9ybWF0VW5pdHMod2VpLCBkZWNpbWFscyk7XG4gIH1cblxuICBzdGF0aWMgZGVjaW1hbHNPdmVyZmxvdyhkZXBvc2l0VG9rZW5zOiBzdHJpbmcsIGRlY2ltYWxzOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBsZXQgZGVjaW1hbFBhcnQ6IHN0cmluZztcbiAgICBpZiAoZGVwb3NpdFRva2Vucy5pbmRleE9mKCcuJykgPiAwKSB7XG4gICAgICBkZWNpbWFsUGFydCA9IGRlcG9zaXRUb2tlbnMuc3BsaXQoJy4nKVsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjaW1hbFBhcnQgPSAnJztcbiAgICB9XG4gICAgcmV0dXJuIGRlY2ltYWxQYXJ0Lmxlbmd0aCA+IGRlY2ltYWxzO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlKGRlcG9zaXQ6IHN0cmluZywgZGVjaW1hbHM6IG51bWJlcikge1xuICAgIHJldHVybiBwYXJzZVVuaXRzKGRlcG9zaXQsIGRlY2ltYWxzKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///a3d5\n')},b4cc:function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":3,\\"contracts\\":{\\"ServiceRegistry\\":{\\"address\\":\\"0xdEB53870CF77df11f2825192433b83FF76b47f0F\\",\\"transaction_hash\\":\\"0x37bcef72668ed1d53a3394e01183a4f67b2595200c9f1abfb961178879c3cea7\\",\\"block_number\\":6591271,\\"gas_cost\\":2041537,\\"constructor_arguments\\":[\\"0xa64C21430150e0D3a5fC6fE02c8B345B1B1d67aE\\",\\"0xa00311De92d71F14a13F0108C827a7c7aE3FF3Ed\\",2e+21,6,5,17280000,1000,17280000]},\\"UserDeposit\\":{\\"address\\":\\"0x306F745b4C80859924BeEAFd8D8d4B96Ba9B3F05\\",\\"transaction_hash\\":\\"0x98e0fd424c32ae16061e1c3760b05be98cb3adeaf72a072fceea49fa909f684a\\",\\"block_number\\":6591275,\\"gas_cost\\":1553356,\\"constructor_arguments\\":[\\"0xa64C21430150e0D3a5fC6fE02c8B345B1B1d67aE\\",1.157920892373162e+77]},\\"MonitoringService\\":{\\"address\\":\\"0x4e7e0F1552cD4e892D18A8649F2803D54b7c8bA8\\",\\"transaction_hash\\":\\"0x24266b2ff3f11a370321ea51648d12bdf8982b6dc04f7a29429d58b0dc3cbf0c\\",\\"block_number\\":6591277,\\"gas_cost\\":2039589,\\"constructor_arguments\\":[\\"0xa64C21430150e0D3a5fC6fE02c8B345B1B1d67aE\\",\\"0xdEB53870CF77df11f2825192433b83FF76b47f0F\\",\\"0x306F745b4C80859924BeEAFd8D8d4B96Ba9B3F05\\",\\"0x14375063E15B4cBe111c92aE35720d86FD8744bd\\"]},\\"OneToN\\":{\\"address\\":\\"0x66D31D7c528B49d12f279BAdc3DeD8f13E548c1E\\",\\"transaction_hash\\":\\"0x410b493a39c26a7a0f44e320983e8c11b3487d88ab7b92077e314c5ec6aa60e9\\",\\"block_number\\":6591278,\\"gas_cost\\":1137888,\\"constructor_arguments\\":[\\"0x306F745b4C80859924BeEAFd8D8d4B96Ba9B3F05\\",3,\\"0xdEB53870CF77df11f2825192433b83FF76b47f0F\\"]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJiNGNjLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///b4cc\n')},be3a:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHBIZWFkZXIudnVlPzdlYTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiYmUzYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///be3a\n")},bf54:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ActionButton_vue_vue_type_style_index_0_id_6ad6aad0_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("3ba2");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ActionButton_vue_vue_type_style_index_0_id_6ad6aad0_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ActionButton_vue_vue_type_style_index_0_id_6ad6aad0_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ActionButton_vue_vue_type_style_index_0_id_6ad6aad0_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY3Rpb25CdXR0b24udnVlP2NkNjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQXlrQixDQUFnQix5bUJBQUcsRUFBQyIsImZpbGUiOiJiZjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQWN0aW9uQnV0dG9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTZhZDZhYWQwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQWN0aW9uQnV0dG9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTZhZDZhYWQwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///bf54\n')},c437:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9mY2UyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6ImM0MzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///c437\n")},c998:function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":5,\\"contracts\\":{\\"SecretRegistry\\":{\\"address\\":\\"0xF6d610f7c8473a0F0c8c1653AF28A68C69860288\\",\\"transaction_hash\\":\\"0x9e4d32a73673f046e731580c2a6aaafc28a9ca0aaecee689fb61e28754abcb82\\",\\"block_number\\":875035,\\"gas_cost\\":298578,\\"constructor_arguments\\":[]},\\"TokenNetworkRegistry\\":{\\"address\\":\\"0x62436bbadB629498107278486C2A367FfdFEb2f3\\",\\"transaction_hash\\":\\"0x6fdc072bfd88a25512b150c27a2901107129bf7220fca31eb1fab32303abc145\\",\\"block_number\\":1447384,\\"gas_cost\\":5056166,\\"constructor_arguments\\":[\\"0xF6d610f7c8473a0F0c8c1653AF28A68C69860288\\",5,20,555428,1.157920892373162e+77]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjOTk4LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///c998\n')},cd49:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.runtime.esm.js\nvar vue_runtime_esm = __webpack_require__("2b0e");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=template&id=1ed0943e&scoped=true&\nvar Appvue_type_template_id_1ed0943e_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-app\',{attrs:{"dark":""}},[(_vm.inaccessible)?_c(\'splash-screen\',{attrs:{"connecting":_vm.connecting},on:{"connect":function($event){return _vm.connect()}}}):_c(\'div\',{attrs:{"id":"application-wrapper"}},[_c(\'div\',{attrs:{"id":"application-content"}},[_c(\'app-header\'),_c(\'v-content\',[_c(\'v-container\',{staticClass:"application__container fill-height",attrs:{"fluid":""}},[_c(\'router-view\')],1)],1)],1)]),_c(\'div\',{staticClass:"policy"},[_c(\'a\',{attrs:{"href":"https://raiden.network/privacy.html","target":"_blank"}},[_vm._v(" "+_vm._s(_vm.$t(\'application.privacy-policy\'))+" ")])]),_c(\'offline-snackbar\')],1)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/App.vue?vue&type=template&id=1ed0943e&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__("a34a");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__("9ab4");\n\n// EXTERNAL MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\nvar vue_property_decorator = __webpack_require__("60a3");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SplashScreen.vue?vue&type=template&id=714ef5f8&scoped=true&\nvar SplashScreenvue_type_template_id_714ef5f8_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-container\',{staticClass:"splash-screen fill-height",attrs:{"fluid":""}},[_c(\'v-row\',{attrs:{"align":"center","justify":"center","no-gutters":""}},[_c(\'v-col\',{attrs:{"cols":"4","lg":"4","md":"6","sm":"8"}},[_c(\'div\',{staticClass:"splash-screen__wrapper display-3"},[_c(\'div\',{staticClass:"splash-screen__logo-container"},[_c(\'v-img\',{staticClass:"splash-screen__logo",attrs:{"src":__webpack_require__("9b19"),"min-width":"50px","aspect-ratio":"1","contain":""}})],1),_c(\'div\',{staticClass:"splash-screen__app-name"},[_c(\'div\',[_vm._v(" "+_vm._s(_vm.name)+" ")])])]),_c(\'div\',{staticClass:"font-weight-light text-center splash-screen__disclaimer"},[_vm._v(" "+_vm._s(_vm.$t(\'splash-screen.disclaimer\'))+" ")]),_c(\'div\',{staticClass:"font-weight-light text-center splash-screen__matrix_sign"},[_vm._v(" "+_vm._s(_vm.$t(\'splash-screen.matrix-sign\'))+" ")]),_c(\'div\',{staticClass:"splash-screen__button"},[(_vm.injectedProvider)?_c(\'action-button\',{attrs:{"text":_vm.$t(\'splash-screen.connect-button\'),"enabled":!_vm.connecting,"loading":_vm.connecting},on:{"click":function($event){return _vm.connect()}}}):_c(\'span\',{staticClass:"splash-screen__no-provider"},[_vm._v(" "+_vm._s(_vm.$t(\'splash-screen.no-provider\'))+" ")])],1),_c(\'div\',{staticClass:"splash-screen__message"},[(_vm.accessDenied)?_c(\'no-access-message\',{attrs:{"reason":_vm.accessDenied}}):_vm._e()],1)])],1)],1)}\nvar SplashScreenvue_type_template_id_714ef5f8_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/SplashScreen.vue?vue&type=template&id=714ef5f8&scoped=true&\n\n// EXTERNAL MODULE: ./src/services/web3-provider.ts\nvar web3_provider = __webpack_require__("f15c");\n\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__("2f62");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/NoAccessMessage.vue?vue&type=template&id=6b8163f4&scoped=true&\nvar NoAccessMessagevue_type_template_id_6b8163f4_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-alert\',{staticClass:"no-access-message",attrs:{"value":true,"color":"error","icon":"warning"}},[_c(\'div\',{staticClass:"font-weight-light no-access-message__message"},[(_vm.networkUnsupported)?_c(\'span\',[_vm._v(" "+_vm._s(_vm.$t(\'no-access.unsupported-network\'))+" ")]):(_vm.initializationFailed)?_c(\'span\',[_vm._v(" "+_vm._s(_vm.$t(\'no-access.sdk-initialization-failure\'))+" ")]):_c(\'span\',[_vm._v(" "+_vm._s(_vm.$t(\'no-access.generic-error\'))+" ")])])])}\nvar NoAccessMessagevue_type_template_id_6b8163f4_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/NoAccessMessage.vue?vue&type=template&id=6b8163f4&scoped=true&\n\n// EXTERNAL MODULE: ./src/model/types.ts\nvar types = __webpack_require__("87a2");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/NoAccessMessage.vue?vue&type=script&lang=ts&\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\nvar NoAccessMessagevue_type_script_lang_ts_NoAccessMessage =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(NoAccessMessage, _Vue);\n\n  function NoAccessMessage() {\n    _classCallCheck(this, NoAccessMessage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NoAccessMessage).apply(this, arguments));\n  }\n\n  _createClass(NoAccessMessage, [{\n    key: "networkUnsupported",\n    get: function get() {\n      return this.reason === types["a" /* DeniedReason */].UNSUPPORTED_NETWORK;\n    }\n  }, {\n    key: "initializationFailed",\n    get: function get() {\n      return this.reason === types["a" /* DeniedReason */].INITIALIZATION_FAILED;\n    }\n  }]);\n\n  return NoAccessMessage;\n}(vue_property_decorator["e" /* Vue */]);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["d" /* Prop */])({\n  required: true\n})], NoAccessMessagevue_type_script_lang_ts_NoAccessMessage.prototype, "reason", void 0);\n\nNoAccessMessagevue_type_script_lang_ts_NoAccessMessage = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({})], NoAccessMessagevue_type_script_lang_ts_NoAccessMessage);\n/* harmony default export */ var NoAccessMessagevue_type_script_lang_ts_ = (NoAccessMessagevue_type_script_lang_ts_NoAccessMessage);\n// CONCATENATED MODULE: ./src/components/NoAccessMessage.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_NoAccessMessagevue_type_script_lang_ts_ = (NoAccessMessagevue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/NoAccessMessage.vue?vue&type=style&index=0&id=6b8163f4&scoped=true&lang=scss&\nvar NoAccessMessagevue_type_style_index_0_id_6b8163f4_scoped_true_lang_scss_ = __webpack_require__("8ecd");\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("2877");\n\n// EXTERNAL MODULE: ./node_modules/vuetify-loader/lib/runtime/installComponents.js\nvar installComponents = __webpack_require__("6544");\nvar installComponents_default = /*#__PURE__*/__webpack_require__.n(installComponents);\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VAlert/VAlert.js + 1 modules\nvar VAlert = __webpack_require__("0798");\n\n// CONCATENATED MODULE: ./src/components/NoAccessMessage.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_NoAccessMessagevue_type_script_lang_ts_,\n  NoAccessMessagevue_type_template_id_6b8163f4_scoped_true_render,\n  NoAccessMessagevue_type_template_id_6b8163f4_scoped_true_staticRenderFns,\n  false,\n  null,\n  "6b8163f4",\n  null\n  \n)\n\n/* harmony default export */ var components_NoAccessMessage = (component.exports);\n\n/* vuetify-loader */\n\n\ninstallComponents_default()(component, {VAlert: VAlert["a" /* default */]})\n\n// EXTERNAL MODULE: ./src/components/ActionButton.vue + 4 modules\nvar ActionButton = __webpack_require__("750b");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SplashScreen.vue?vue&type=script&lang=ts&\nfunction SplashScreenvue_type_script_lang_ts_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { SplashScreenvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { SplashScreenvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return SplashScreenvue_type_script_lang_ts_typeof(obj); }\n\nfunction SplashScreenvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction SplashScreenvue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SplashScreenvue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) SplashScreenvue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) SplashScreenvue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction SplashScreenvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (SplashScreenvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return SplashScreenvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction SplashScreenvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction SplashScreenvue_type_script_lang_ts_getPrototypeOf(o) { SplashScreenvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SplashScreenvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction SplashScreenvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) SplashScreenvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction SplashScreenvue_type_script_lang_ts_setPrototypeOf(o, p) { SplashScreenvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SplashScreenvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\nvar SplashScreenvue_type_script_lang_ts_Loading =\n/*#__PURE__*/\nfunction (_Vue) {\n  SplashScreenvue_type_script_lang_ts_inherits(Loading, _Vue);\n\n  function Loading() {\n    var _this;\n\n    SplashScreenvue_type_script_lang_ts_classCallCheck(this, Loading);\n\n    _this = SplashScreenvue_type_script_lang_ts_possibleConstructorReturn(this, SplashScreenvue_type_script_lang_ts_getPrototypeOf(Loading).apply(this, arguments));\n    _this.name = \'Raiden dApp\';\n    return _this;\n  } // noinspection JSMethodCanBeStatic\n\n\n  SplashScreenvue_type_script_lang_ts_createClass(Loading, [{\n    key: "connect",\n    value: function connect() {}\n  }, {\n    key: "injectedProvider",\n    get: function get() {\n      return web3_provider["a" /* Web3Provider */].injectedWeb3Available();\n    }\n  }]);\n\n  return Loading;\n}(vue_property_decorator["e" /* Vue */]);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["d" /* Prop */])({\n  default: false,\n  required: true,\n  type: Boolean\n})], SplashScreenvue_type_script_lang_ts_Loading.prototype, "connecting", void 0);\n\ntslib_es6["a" /* __decorate */]([Object(vue_property_decorator["b" /* Emit */])()], SplashScreenvue_type_script_lang_ts_Loading.prototype, "connect", null);\n\nSplashScreenvue_type_script_lang_ts_Loading = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({\n  components: {\n    ActionButton: ActionButton["a" /* default */],\n    NoAccessMessage: components_NoAccessMessage\n  },\n  computed: Object(vuex_esm["c" /* mapState */])([\'accessDenied\'])\n})], SplashScreenvue_type_script_lang_ts_Loading);\n/* harmony default export */ var SplashScreenvue_type_script_lang_ts_ = (SplashScreenvue_type_script_lang_ts_Loading);\n// CONCATENATED MODULE: ./src/components/SplashScreen.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_SplashScreenvue_type_script_lang_ts_ = (SplashScreenvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/SplashScreen.vue?vue&type=style&index=0&id=714ef5f8&lang=scss&scoped=true&\nvar SplashScreenvue_type_style_index_0_id_714ef5f8_lang_scss_scoped_true_ = __webpack_require__("92e5");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VCol.js\nvar VCol = __webpack_require__("62ad");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VContainer.js + 1 modules\nvar VContainer = __webpack_require__("a523");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VImg/VImg.js + 3 modules\nvar VImg = __webpack_require__("adda");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VRow.js\nvar VRow = __webpack_require__("0fd9");\n\n// CONCATENATED MODULE: ./src/components/SplashScreen.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar SplashScreen_component = Object(componentNormalizer["a" /* default */])(\n  components_SplashScreenvue_type_script_lang_ts_,\n  SplashScreenvue_type_template_id_714ef5f8_scoped_true_render,\n  SplashScreenvue_type_template_id_714ef5f8_scoped_true_staticRenderFns,\n  false,\n  null,\n  "714ef5f8",\n  null\n  \n)\n\n/* harmony default export */ var SplashScreen = (SplashScreen_component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\ninstallComponents_default()(SplashScreen_component, {VCol: VCol["a" /* default */],VContainer: VContainer["a" /* default */],VImg: VImg["a" /* default */],VRow: VRow["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/AppHeader.vue?vue&type=template&id=57449954&scoped=true&\nvar AppHeadervue_type_template_id_57449954_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (!_vm.loading && _vm.defaultAccount)?_c(\'div\',{staticClass:"app-header"},[_c(\'v-row\',{staticClass:"app-header__top",attrs:{"justify":"center","align":"center","no-gutters":""}},[_c(\'v-col\',{attrs:{"cols":"12"}},[_c(\'div\',{staticClass:"app-header__top__content"},[_c(\'div\',{staticClass:"app-header__top__content__back"},[(_vm.canGoBack)?_c(\'v-btn\',{attrs:{"height":"40px","width":"40px","text":"","icon":""},on:{"click":function($event){return _vm.onBackClicked()}}},[_c(\'v-img\',{attrs:{"src":__webpack_require__("73da"),"max-width":"34px"}})],1):_vm._e()],1),_c(\'v-spacer\'),_c(\'v-col\',{attrs:{"align-self":"center"}},[_c(\'div\',{staticClass:"app-header__top__content__title"},[_vm._v(" "+_vm._s(_vm.$route.meta.title)+" ")]),_c(\'div\',{staticClass:"app-header__top__content__network"},[_vm._v(" "+_vm._s(_vm.network)+" ")])]),_c(\'v-spacer\'),_c(\'div\',[_c(\'v-img\',{staticClass:"app-header__top__content__blockie",attrs:{"src":_vm.$blockie(_vm.defaultAccount),"height":"36","width":"36","contain":"","aspect-ratio":"1"}})],1)],1)])],1),_c(\'v-row\',{staticClass:"app-header__bottom",attrs:{"align":"center","no-gutters":""}},[_c(\'v-col\',{attrs:{"cols":"6"}},[_c(\'div\',{staticClass:"app-header__bottom__address text-left"},[_c(\'v-tooltip\',{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){\nvar on = ref.on;\nreturn [_c(\'span\',_vm._g({},on),[_vm._v(" "+_vm._s(_vm._f("truncate")(_vm.defaultAccount,8))+" ")])]}}],null,false,2257572214)},[_c(\'span\',[_vm._v(_vm._s(_vm.defaultAccount))])]),_c(\'v-tooltip\',{attrs:{"bottom":"","dark":"","close-delay":"1500"},scopedSlots:_vm._u([{key:"activator",fn:function(ref){\nvar on = ref.on;\nreturn [_c(\'v-btn\',_vm._g({attrs:{"id":"copyBtn","text":"","icon":""},on:{"click":function($event){return _vm.copy()}}},on),[_c(\'v-img\',{staticClass:"app-header__bottom__address__copy",attrs:{"src":__webpack_require__("927e"),"contain":""}})],1)]}}],null,false,121364382)},[_c(\'span\',[_vm._v(" "+_vm._s(_vm.copied ? _vm.$t(\'app-header.copy-success\') : _vm.$t(\'app-header.copy\'))+" ")])])],1)]),_c(\'v-col\',{attrs:{"cols":"6"}},[_c(\'div\',{staticClass:"app-header__bottom__balance text-right"},[_vm._v(" "+_vm._s(_vm._f("decimals")(_vm.accountBalance))+" "),_c(\'span\',{staticClass:"app-header__bottom__balance__currency"},[_vm._v(" "+_vm._s(_vm.$t(\'app-header.currency\'))+" ")])])])],1),_c(\'textarea\',{directives:[{name:"model",rawName:"v-model",value:(_vm.defaultAccount),expression:"defaultAccount"}],ref:"copy",staticClass:"app-header__copy-area",domProps:{"value":(_vm.defaultAccount)},on:{"input":function($event){if($event.target.composing){ return; }_vm.defaultAccount=$event.target.value}}})],1):_vm._e()}\nvar AppHeadervue_type_template_id_57449954_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/AppHeader.vue?vue&type=template&id=57449954&scoped=true&\n\n// EXTERNAL MODULE: ./src/mixins/blockie-mixin.ts\nvar blockie_mixin = __webpack_require__("77fd");\n\n// EXTERNAL MODULE: ./src/router/route-names.ts\nvar route_names = __webpack_require__("80bf");\n\n// EXTERNAL MODULE: ./src/mixins/navigation-mixin.ts\nvar navigation_mixin = __webpack_require__("152b");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/AppHeader.vue?vue&type=script&lang=ts&\nfunction AppHeadervue_type_script_lang_ts_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { AppHeadervue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { AppHeadervue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return AppHeadervue_type_script_lang_ts_typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction AppHeadervue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AppHeadervue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AppHeadervue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) AppHeadervue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) AppHeadervue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction AppHeadervue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (AppHeadervue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return AppHeadervue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction AppHeadervue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AppHeadervue_type_script_lang_ts_getPrototypeOf(o) { AppHeadervue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AppHeadervue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction AppHeadervue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) AppHeadervue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction AppHeadervue_type_script_lang_ts_setPrototypeOf(o, p) { AppHeadervue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AppHeadervue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\nvar AppHeadervue_type_script_lang_ts_AppHeader =\n/*#__PURE__*/\nfunction (_Mixins) {\n  AppHeadervue_type_script_lang_ts_inherits(AppHeader, _Mixins);\n\n  function AppHeader() {\n    var _this;\n\n    AppHeadervue_type_script_lang_ts_classCallCheck(this, AppHeader);\n\n    _this = AppHeadervue_type_script_lang_ts_possibleConstructorReturn(this, AppHeadervue_type_script_lang_ts_getPrototypeOf(AppHeader).apply(this, arguments));\n    _this.copied = false;\n    _this.timeout = 0;\n    return _this;\n  }\n\n  AppHeadervue_type_script_lang_ts_createClass(AppHeader, [{\n    key: "copy",\n    value: function copy() {\n      var _this2 = this;\n\n      var copyArea = this.$refs.copy;\n      copyArea.focus();\n      copyArea.select();\n      this.copied = document.execCommand(\'copy\');\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(function () {\n        _this2.copied = false;\n      }, 2000);\n    }\n  }, {\n    key: "canGoBack",\n    get: function get() {\n      var routesWithoutBackBtn = [route_names["a" /* RouteNames */].HOME, route_names["a" /* RouteNames */].TRANSFER];\n      return !routesWithoutBackBtn.includes(this.$route.name);\n    }\n  }]);\n\n  return AppHeader;\n}(Object(vue_property_decorator["c" /* Mixins */])(blockie_mixin["a" /* default */], navigation_mixin["a" /* default */]));\n\nAppHeadervue_type_script_lang_ts_AppHeader = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({\n  computed: _objectSpread({}, Object(vuex_esm["c" /* mapState */])([\'loading\', \'defaultAccount\', \'accountBalance\']), {}, Object(vuex_esm["b" /* mapGetters */])([\'network\']))\n})], AppHeadervue_type_script_lang_ts_AppHeader);\n/* harmony default export */ var AppHeadervue_type_script_lang_ts_ = (AppHeadervue_type_script_lang_ts_AppHeader);\n// CONCATENATED MODULE: ./src/components/AppHeader.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_AppHeadervue_type_script_lang_ts_ = (AppHeadervue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/AppHeader.vue?vue&type=style&index=0&id=57449954&scoped=true&lang=scss&\nvar AppHeadervue_type_style_index_0_id_57449954_scoped_true_lang_scss_ = __webpack_require__("8144");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VBtn/VBtn.js\nvar VBtn = __webpack_require__("8336");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VSpacer.js\nvar VSpacer = __webpack_require__("2fa4");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VTooltip/VTooltip.js\nvar VTooltip = __webpack_require__("3a2f");\n\n// CONCATENATED MODULE: ./src/components/AppHeader.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar AppHeader_component = Object(componentNormalizer["a" /* default */])(\n  components_AppHeadervue_type_script_lang_ts_,\n  AppHeadervue_type_template_id_57449954_scoped_true_render,\n  AppHeadervue_type_template_id_57449954_scoped_true_staticRenderFns,\n  false,\n  null,\n  "57449954",\n  null\n  \n)\n\n/* harmony default export */ var components_AppHeader = (AppHeader_component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\n\n\ninstallComponents_default()(AppHeader_component, {VBtn: VBtn["a" /* default */],VCol: VCol["a" /* default */],VImg: VImg["a" /* default */],VRow: VRow["a" /* default */],VSpacer: VSpacer["a" /* default */],VTooltip: VTooltip["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/OfflineSnackbar.vue?vue&type=template&id=2841044e&scoped=true&\nvar OfflineSnackbarvue_type_template_id_2841044e_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.offline)?_c(\'span\',[_c(\'div\',{staticClass:"offline-overlay"}),_c(\'v-snackbar\',{attrs:{"timeout":0,"color":"error"},model:{value:(_vm.offline),callback:function ($$v) {_vm.offline=$$v},expression:"offline"}},[_vm._v(" "+_vm._s(_vm.$t(\'general.offline\'))+" "),_c(\'v-icon\',[_vm._v("mdi-alert")])],1)],1):_vm._e()}\nvar OfflineSnackbarvue_type_template_id_2841044e_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/OfflineSnackbar.vue?vue&type=template&id=2841044e&scoped=true&\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/OfflineSnackbar.vue?vue&type=script&lang=ts&\nfunction OfflineSnackbarvue_type_script_lang_ts_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { OfflineSnackbarvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { OfflineSnackbarvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return OfflineSnackbarvue_type_script_lang_ts_typeof(obj); }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) OfflineSnackbarvue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) OfflineSnackbarvue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (OfflineSnackbarvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return OfflineSnackbarvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf(o) { OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) OfflineSnackbarvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_setPrototypeOf(o, p) { OfflineSnackbarvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return OfflineSnackbarvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\nvar OfflineSnackbar =\n/*#__PURE__*/\nfunction (_Vue) {\n  OfflineSnackbarvue_type_script_lang_ts_inherits(OfflineSnackbar, _Vue);\n\n  function OfflineSnackbar() {\n    var _this;\n\n    OfflineSnackbarvue_type_script_lang_ts_classCallCheck(this, OfflineSnackbar);\n\n    _this = OfflineSnackbarvue_type_script_lang_ts_possibleConstructorReturn(this, OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf(OfflineSnackbar).apply(this, arguments));\n    _this.offline = false;\n    return _this;\n  }\n\n  OfflineSnackbarvue_type_script_lang_ts_createClass(OfflineSnackbar, [{\n    key: "handleOnline",\n    value: function handleOnline() {\n      this.offline = false;\n    }\n  }, {\n    key: "handleOffline",\n    value: function handleOffline() {\n      this.offline = true;\n    }\n  }, {\n    key: "mounted",\n    value: function mounted() {\n      this.offline = !navigator.onLine;\n      window.addEventListener(\'offline\', this.handleOffline);\n      window.addEventListener(\'online\', this.handleOnline);\n    }\n  }, {\n    key: "beforeDestroy",\n    value: function beforeDestroy() {\n      window.removeEventListener(\'offline\', this.handleOffline);\n      window.removeEventListener(\'online\', this.handleOnline);\n    }\n  }]);\n\n  return OfflineSnackbar;\n}(vue_property_decorator["e" /* Vue */]);\n\nOfflineSnackbar = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({})], OfflineSnackbar);\n/* harmony default export */ var OfflineSnackbarvue_type_script_lang_ts_ = (OfflineSnackbar);\n// CONCATENATED MODULE: ./src/components/OfflineSnackbar.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_OfflineSnackbarvue_type_script_lang_ts_ = (OfflineSnackbarvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/OfflineSnackbar.vue?vue&type=style&index=0&id=2841044e&scoped=true&lang=scss&\nvar OfflineSnackbarvue_type_style_index_0_id_2841044e_scoped_true_lang_scss_ = __webpack_require__("0c63");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VIcon/VIcon.js\nvar VIcon = __webpack_require__("132d");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VSnackbar/VSnackbar.js\nvar VSnackbar = __webpack_require__("2db4");\n\n// CONCATENATED MODULE: ./src/components/OfflineSnackbar.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar OfflineSnackbar_component = Object(componentNormalizer["a" /* default */])(\n  components_OfflineSnackbarvue_type_script_lang_ts_,\n  OfflineSnackbarvue_type_template_id_2841044e_scoped_true_render,\n  OfflineSnackbarvue_type_template_id_2841044e_scoped_true_staticRenderFns,\n  false,\n  null,\n  "2841044e",\n  null\n  \n)\n\n/* harmony default export */ var components_OfflineSnackbar = (OfflineSnackbar_component.exports);\n\n/* vuetify-loader */\n\n\n\ninstallComponents_default()(OfflineSnackbar_component, {VIcon: VIcon["a" /* default */],VSnackbar: VSnackbar["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=script&lang=ts&\n\n\nfunction Appvue_type_script_lang_ts_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Appvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { Appvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Appvue_type_script_lang_ts_typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction Appvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Appvue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Appvue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) Appvue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) Appvue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Appvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (Appvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return Appvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction Appvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Appvue_type_script_lang_ts_getPrototypeOf(o) { Appvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Appvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction Appvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Appvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction Appvue_type_script_lang_ts_setPrototypeOf(o, p) { Appvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Appvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\nvar Appvue_type_script_lang_ts_App =\n/*#__PURE__*/\nfunction (_Vue) {\n  Appvue_type_script_lang_ts_inherits(App, _Vue);\n\n  function App() {\n    var _this;\n\n    Appvue_type_script_lang_ts_classCallCheck(this, App);\n\n    _this = Appvue_type_script_lang_ts_possibleConstructorReturn(this, Appvue_type_script_lang_ts_getPrototypeOf(App).call(this));\n    _this.connecting = false;\n    _this.name = \'Raiden dApp\';\n    return _this;\n  }\n\n  Appvue_type_script_lang_ts_createClass(App, [{\n    key: "connect",\n    value: function () {\n      var _connect = _asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee() {\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.connecting = true;\n                this.$store.commit(\'reset\');\n                _context.next = 4;\n                return this.$raiden.connect();\n\n              case 4:\n                this.connecting = false;\n\n              case 5:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: "destroyed",\n    value: function destroyed() {\n      this.$raiden.disconnect();\n    }\n  }, {\n    key: "inaccessible",\n    get: function get() {\n      return this.connecting || this.loading || this.accessDenied !== types["a" /* DeniedReason */].UNDEFINED;\n    }\n  }]);\n\n  return App;\n}(vue_property_decorator["e" /* Vue */]);\n\nAppvue_type_script_lang_ts_App = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({\n  computed: Object(vuex_esm["c" /* mapState */])([\'loading\', \'accessDenied\']),\n  components: {\n    AppHeader: components_AppHeader,\n    SplashScreen: SplashScreen,\n    OfflineSnackbar: components_OfflineSnackbar\n  }\n})], Appvue_type_script_lang_ts_App);\n/* harmony default export */ var Appvue_type_script_lang_ts_ = (Appvue_type_script_lang_ts_App);\n// CONCATENATED MODULE: ./src/App.vue?vue&type=script&lang=ts&\n /* harmony default export */ var src_Appvue_type_script_lang_ts_ = (Appvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/App.vue?vue&type=style&index=0&id=1ed0943e&lang=scss&scoped=true&\nvar Appvue_type_style_index_0_id_1ed0943e_lang_scss_scoped_true_ = __webpack_require__("d868");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VApp/VApp.js\nvar VApp = __webpack_require__("7496");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VContent/VContent.js + 1 modules\nvar VContent = __webpack_require__("a75b");\n\n// CONCATENATED MODULE: ./src/App.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar App_component = Object(componentNormalizer["a" /* default */])(\n  src_Appvue_type_script_lang_ts_,\n  Appvue_type_template_id_1ed0943e_scoped_true_render,\n  staticRenderFns,\n  false,\n  null,\n  "1ed0943e",\n  null\n  \n)\n\n/* harmony default export */ var src_App = (App_component.exports);\n\n/* vuetify-loader */\n\n\n\n\ninstallComponents_default()(App_component, {VApp: VApp["a" /* default */],VContainer: VContainer["a" /* default */],VContent: VContent["a" /* default */]})\n\n// EXTERNAL MODULE: ./node_modules/vue-class-component/dist/vue-class-component.esm.js\nvar vue_class_component_esm = __webpack_require__("2fe1");\n\n// CONCATENATED MODULE: ./src/plugins/class-component.hooks.ts\n/* istanbul ignore file */\n // Register the router hooks with their names\n\nvue_class_component_esm["b" /* default */].registerHooks([\'beforeRouteEnter\', \'beforeRouteLeave\', \'beforeRouteUpdate\' // for vue-router 2.2+\n]);\n// EXTERNAL MODULE: ./src/filters.ts\nvar filters = __webpack_require__("0f75");\n\n// EXTERNAL MODULE: ./node_modules/vue-router/dist/vue-router.esm.js\nvar vue_router_esm = __webpack_require__("8c4f");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=template&id=5122a23d&\nvar Homevue_type_template_id_5122a23d_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'app-core\')}\nvar Homevue_type_template_id_5122a23d_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/views/Home.vue?vue&type=template&id=5122a23d&\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/AppCore.vue?vue&type=template&id=31fadee6&\nvar AppCorevue_type_template_id_31fadee6_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (!_vm.tokens.length)?_c(\'no-tokens\'):_vm._e()}\nvar AppCorevue_type_template_id_31fadee6_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/AppCore.vue?vue&type=template&id=31fadee6&\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4efedd6a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/NoTokens.vue?vue&type=template&id=58ff6435&scoped=true&\nvar NoTokensvue_type_template_id_58ff6435_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-container\',{staticClass:"new-token"},[_c(\'v-col\',{staticClass:"new-token__button"},[_c(\'v-btn\',{attrs:{"fab":"","color":"primary"},on:{"click":function($event){return _vm.navigateToTokenSelect()}}},[_c(\'v-icon\',{attrs:{"large":""}},[_vm._v("mdi-plus")])],1)],1),_c(\'v-col\',{staticClass:"new-token__header"},[_vm._v(" "+_vm._s(_vm.$t(\'tokens.connect-new\'))+" ")])],1)}\nvar NoTokensvue_type_template_id_58ff6435_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/NoTokens.vue?vue&type=template&id=58ff6435&scoped=true&\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/NoTokens.vue?vue&type=script&lang=ts&\nfunction NoTokensvue_type_script_lang_ts_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { NoTokensvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { NoTokensvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return NoTokensvue_type_script_lang_ts_typeof(obj); }\n\nfunction NoTokensvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction NoTokensvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (NoTokensvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return NoTokensvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction NoTokensvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction NoTokensvue_type_script_lang_ts_getPrototypeOf(o) { NoTokensvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return NoTokensvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction NoTokensvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) NoTokensvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction NoTokensvue_type_script_lang_ts_setPrototypeOf(o, p) { NoTokensvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return NoTokensvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\nvar NoTokens =\n/*#__PURE__*/\nfunction (_Mixins) {\n  NoTokensvue_type_script_lang_ts_inherits(NoTokens, _Mixins);\n\n  function NoTokens() {\n    NoTokensvue_type_script_lang_ts_classCallCheck(this, NoTokens);\n\n    return NoTokensvue_type_script_lang_ts_possibleConstructorReturn(this, NoTokensvue_type_script_lang_ts_getPrototypeOf(NoTokens).apply(this, arguments));\n  }\n\n  return NoTokens;\n}(Object(vue_property_decorator["c" /* Mixins */])(navigation_mixin["a" /* default */]));\n\nNoTokens = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({})], NoTokens);\n/* harmony default export */ var NoTokensvue_type_script_lang_ts_ = (NoTokens);\n// CONCATENATED MODULE: ./src/components/NoTokens.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_NoTokensvue_type_script_lang_ts_ = (NoTokensvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/NoTokens.vue?vue&type=style&index=0&id=58ff6435&lang=scss&scoped=true&\nvar NoTokensvue_type_style_index_0_id_58ff6435_lang_scss_scoped_true_ = __webpack_require__("77e8");\n\n// CONCATENATED MODULE: ./src/components/NoTokens.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar NoTokens_component = Object(componentNormalizer["a" /* default */])(\n  components_NoTokensvue_type_script_lang_ts_,\n  NoTokensvue_type_template_id_58ff6435_scoped_true_render,\n  NoTokensvue_type_template_id_58ff6435_scoped_true_staticRenderFns,\n  false,\n  null,\n  "58ff6435",\n  null\n  \n)\n\n/* harmony default export */ var components_NoTokens = (NoTokens_component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\ninstallComponents_default()(NoTokens_component, {VBtn: VBtn["a" /* default */],VCol: VCol["a" /* default */],VContainer: VContainer["a" /* default */],VIcon: VIcon["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/AppCore.vue?vue&type=script&lang=ts&\nfunction AppCorevue_type_script_lang_ts_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { AppCorevue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { AppCorevue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return AppCorevue_type_script_lang_ts_typeof(obj); }\n\nfunction AppCorevue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AppCorevue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AppCorevue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) AppCorevue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) AppCorevue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction AppCorevue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (AppCorevue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return AppCorevue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction AppCorevue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AppCorevue_type_script_lang_ts_getPrototypeOf(o) { AppCorevue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AppCorevue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction AppCorevue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) AppCorevue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction AppCorevue_type_script_lang_ts_setPrototypeOf(o, p) { AppCorevue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AppCorevue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\nvar AppCore =\n/*#__PURE__*/\nfunction (_Mixins) {\n  AppCorevue_type_script_lang_ts_inherits(AppCore, _Mixins);\n\n  function AppCore() {\n    AppCorevue_type_script_lang_ts_classCallCheck(this, AppCore);\n\n    return AppCorevue_type_script_lang_ts_possibleConstructorReturn(this, AppCorevue_type_script_lang_ts_getPrototypeOf(AppCore).apply(this, arguments));\n  }\n\n  AppCorevue_type_script_lang_ts_createClass(AppCore, [{\n    key: "mounted",\n    value: function mounted() {\n      if (this.tokens.length) {\n        this.navigateToSelectTransferTarget(this.tokens[0].address);\n      }\n    }\n  }]);\n\n  return AppCore;\n}(Object(vue_property_decorator["c" /* Mixins */])(navigation_mixin["a" /* default */]));\n\nAppCore = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({\n  computed: Object(vuex_esm["b" /* mapGetters */])([\'tokens\']),\n  components: {\n    NoTokens: components_NoTokens\n  }\n})], AppCore);\n/* harmony default export */ var AppCorevue_type_script_lang_ts_ = (AppCore);\n// CONCATENATED MODULE: ./src/components/AppCore.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_AppCorevue_type_script_lang_ts_ = (AppCorevue_type_script_lang_ts_); \n// CONCATENATED MODULE: ./src/components/AppCore.vue\n\n\n\n\n\n/* normalize component */\n\nvar AppCore_component = Object(componentNormalizer["a" /* default */])(\n  components_AppCorevue_type_script_lang_ts_,\n  AppCorevue_type_template_id_31fadee6_render,\n  AppCorevue_type_template_id_31fadee6_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var components_AppCore = (AppCore_component.exports);\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=script&lang=ts&\nfunction Homevue_type_script_lang_ts_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Homevue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { Homevue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Homevue_type_script_lang_ts_typeof(obj); }\n\nfunction Homevue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Homevue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (Homevue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return Homevue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction Homevue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Homevue_type_script_lang_ts_getPrototypeOf(o) { Homevue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Homevue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction Homevue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Homevue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction Homevue_type_script_lang_ts_setPrototypeOf(o, p) { Homevue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Homevue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\nvar Home =\n/*#__PURE__*/\nfunction (_Vue) {\n  Homevue_type_script_lang_ts_inherits(Home, _Vue);\n\n  function Home() {\n    Homevue_type_script_lang_ts_classCallCheck(this, Home);\n\n    return Homevue_type_script_lang_ts_possibleConstructorReturn(this, Homevue_type_script_lang_ts_getPrototypeOf(Home).apply(this, arguments));\n  }\n\n  return Home;\n}(vue_property_decorator["e" /* Vue */]);\n\nHome = tslib_es6["a" /* __decorate */]([Object(vue_property_decorator["a" /* Component */])({\n  components: {\n    AppCore: components_AppCore\n  }\n})], Home);\n/* harmony default export */ var Homevue_type_script_lang_ts_ = (Home);\n// CONCATENATED MODULE: ./src/views/Home.vue?vue&type=script&lang=ts&\n /* harmony default export */ var views_Homevue_type_script_lang_ts_ = (Homevue_type_script_lang_ts_); \n// CONCATENATED MODULE: ./src/views/Home.vue\n\n\n\n\n\n/* normalize component */\n\nvar Home_component = Object(componentNormalizer["a" /* default */])(\n  views_Homevue_type_script_lang_ts_,\n  Homevue_type_template_id_5122a23d_render,\n  Homevue_type_template_id_5122a23d_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var views_Home = (Home_component.exports);\n// CONCATENATED MODULE: ./src/router/index.ts\n/* istanbul ignore file */\n\n\n\n\nvue_runtime_esm["a" /* default */].use(vue_router_esm["a" /* default */]);\nvar router = new vue_router_esm["a" /* default */]({\n  mode: \'history\',\n  base: "/",\n  routes: [{\n    path: \'/\',\n    name: route_names["a" /* RouteNames */].HOME,\n    meta: {\n      title: \'Raiden dApp\'\n    },\n    component: views_Home\n  }, {\n    path: \'*\',\n    redirect: \'/\'\n  }, {\n    path: \'/transfer/:token\',\n    name: route_names["a" /* RouteNames */].TRANSFER,\n    meta: {\n      title: \'Send\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-a4175c2a"), __webpack_require__.e("chunk-94319540"), __webpack_require__.e("chunk-325375a7"), __webpack_require__.e("chunk-77eec0da")]).then(__webpack_require__.bind(null, "69aa"));\n    }\n  }, {\n    path: \'/transfer/:token/:target\',\n    name: route_names["a" /* RouteNames */].TRANSFER_STEPS,\n    meta: {\n      title: \'Send\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-a4175c2a"), __webpack_require__.e("chunk-94319540"), __webpack_require__.e("chunk-325375a7"), __webpack_require__.e("chunk-b151c3c4")]).then(__webpack_require__.bind(null, "feae"));\n    }\n  }, {\n    path: \'/connect\',\n    name: route_names["a" /* RouteNames */].SELECT_TOKEN,\n    meta: {\n      title: \'Select token\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-94319540"), __webpack_require__.e("chunk-8f19f602")]).then(__webpack_require__.bind(null, "7724"));\n    }\n  }, {\n    path: \'/connect/:token\',\n    name: route_names["a" /* RouteNames */].SELECT_HUB,\n    meta: {\n      title: \'Select hub\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-a4175c2a"), __webpack_require__.e("chunk-62d1e710")]).then(__webpack_require__.bind(null, "c405"));\n    }\n  }, {\n    path: \'/connect/:token/:partner\',\n    name: route_names["a" /* RouteNames */].OPEN_CHANNEL,\n    meta: {\n      title: \'Open channel\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-a4175c2a"), __webpack_require__.e("chunk-19ad8cd5")]).then(__webpack_require__.bind(null, "7542"));\n    }\n  }, {\n    path: \'/channels/:token\',\n    name: route_names["a" /* RouteNames */].CHANNELS,\n    meta: {\n      title: \'Channels\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-a4175c2a"), __webpack_require__.e("chunk-94319540"), __webpack_require__.e("chunk-d40335fa")]).then(__webpack_require__.bind(null, "3010"));\n    }\n  }]\n});\n/* harmony default export */ var src_router = (router);\n// EXTERNAL MODULE: ../raiden-ts/dist/index.js + 45 modules\nvar dist = __webpack_require__("f455");\n\n// EXTERNAL MODULE: ./node_modules/lodash/map.js\nvar map = __webpack_require__("dd61");\nvar map_default = /*#__PURE__*/__webpack_require__.n(map);\n\n// EXTERNAL MODULE: ./node_modules/lodash/flatMap.js\nvar flatMap = __webpack_require__("e9a8d");\nvar flatMap_default = /*#__PURE__*/__webpack_require__.n(flatMap);\n\n// EXTERNAL MODULE: ./node_modules/lodash/filter.js\nvar filter = __webpack_require__("9380");\nvar filter_default = /*#__PURE__*/__webpack_require__.n(filter);\n\n// EXTERNAL MODULE: ./node_modules/lodash/clone.js\nvar clone = __webpack_require__("b8ce");\nvar clone_default = /*#__PURE__*/__webpack_require__.n(clone);\n\n// EXTERNAL MODULE: ./node_modules/lodash/reduce.js\nvar reduce = __webpack_require__("c5a2");\nvar reduce_default = /*#__PURE__*/__webpack_require__.n(reduce);\n\n// EXTERNAL MODULE: ./node_modules/lodash/orderBy.js\nvar orderBy = __webpack_require__("93c6");\nvar orderBy_default = /*#__PURE__*/__webpack_require__.n(orderBy);\n\n// EXTERNAL MODULE: ./node_modules/lodash/isEqual.js\nvar isEqual = __webpack_require__("63ea");\nvar isEqual_default = /*#__PURE__*/__webpack_require__.n(isEqual);\n\n// EXTERNAL MODULE: ./node_modules/lodash/isEmpty.js\nvar isEmpty = __webpack_require__("13ea");\nvar isEmpty_default = /*#__PURE__*/__webpack_require__.n(isEmpty);\n\n// CONCATENATED MODULE: ./src/store/index.ts\nfunction store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { store_ownKeys(source, true).forEach(function (key) { store_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { store_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvue_runtime_esm["a" /* default */].use(vuex_esm["a" /* default */]);\nvar _defaultState = {\n  loading: true,\n  defaultAccount: \'\',\n  accountBalance: \'0.0\',\n  providerDetected: true,\n  accessDenied: types["a" /* DeniedReason */].UNDEFINED,\n  channels: {},\n  tokens: {},\n  network: types["b" /* PlaceHolderNetwork */]\n};\nfunction defaultState() {\n  return clone_default()(_defaultState);\n}\nvar store = {\n  state: defaultState(),\n  mutations: {\n    noProvider: function noProvider(state) {\n      state.providerDetected = false;\n    },\n    accessDenied: function accessDenied(state, reason) {\n      state.accessDenied = reason;\n    },\n    account: function account(state, _account) {\n      state.defaultAccount = _account;\n    },\n    loadComplete: function loadComplete(state) {\n      state.loading = false;\n    },\n    balance: function balance(state, _balance) {\n      state.accountBalance = _balance;\n    },\n    updateChannels: function updateChannels(state, channels) {\n      state.channels = channels;\n    },\n    updateTokens: function updateTokens(state, tokens) {\n      for (var _i = 0, _Object$entries = Object.entries(tokens); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            address = _Object$entries$_i[0],\n            token = _Object$entries$_i[1];\n\n        if (address in state.tokens && isEqual_default()(token, state.tokens[address])) continue;else if (address in state.tokens) state.tokens[address] = store_objectSpread({}, state.tokens[address], {}, token);else state.tokens = store_objectSpread({}, state.tokens, store_defineProperty({}, address, token));\n      }\n    },\n    network: function network(state, _network) {\n      state.network = _network;\n    },\n    reset: function reset(state) {\n      Object.assign(state, defaultState());\n    }\n  },\n  actions: {},\n  getters: {\n    tokens: function tokens(state) {\n      var reducer = function reducer(acc, channel) {\n        acc.address = channel.token;\n        acc[channel.state] += 1;\n        return acc;\n      };\n\n      return map_default()(filter_default()(flatMap_default()(state.channels), function (channels) {\n        return !isEmpty_default()(channels);\n      }), function (tokenChannels) {\n        var model = reduce_default()(tokenChannels, reducer, Object(types["d" /* emptyTokenModel */])());\n        var tokenInfo = state.tokens[model.address];\n\n        if (tokenInfo) {\n          model.name = tokenInfo.name || \'\';\n          model.symbol = tokenInfo.symbol || \'\';\n        }\n\n        return model;\n      });\n    },\n    allTokens: function allTokens(state) {\n      return Object.values(state.tokens);\n    },\n    channels: function channels(state) {\n      return function (tokenAddress) {\n        var channels = [];\n        var tokenChannels = state.channels[tokenAddress];\n\n        if (tokenChannels && !isEmpty_default()(tokenChannels)) {\n          channels = flatMap_default()(tokenChannels);\n        }\n\n        return channels;\n      };\n    },\n    token: function token(state) {\n      return function (tokenAddress) {\n        if (tokenAddress in state.tokens) {\n          return state.tokens[tokenAddress];\n        } else {\n          return null;\n        }\n      };\n    },\n    network: function network(state) {\n      return state.network.name || "Chain ".concat(state.network.chainId);\n    },\n    channelWithBiggestCapacity: function channelWithBiggestCapacity(_, getters) {\n      return function (tokenAddress) {\n        var channels = getters.channels(tokenAddress);\n        var openChannels = channels.filter(function (value) {\n          return value.state === dist["a" /* ChannelState */].open;\n        });\n        return orderBy_default()(openChannels, [\'capacity\'], [\'desc\'])[0];\n      };\n    }\n  }\n};\n/* harmony default export */ var src_store = (new vuex_esm["a" /* default */].Store(store));\n// CONCATENATED MODULE: ./src/class-component-hooks.ts\n/* istanbul ignore file */\n // Register the router hooks with their names\n\nvue_class_component_esm["b" /* default */].registerHooks([\'beforeRouteEnter\', \'beforeRouteLeave\', \'beforeRouteUpdate\']);\n// EXTERNAL MODULE: ./src/services/raiden-service.ts + 1 modules\nvar raiden_service = __webpack_require__("e62e");\n\n// CONCATENATED MODULE: ./src/plugins/raiden.ts\n\n\nfunction RaidenPlugin(Vue, _options) {\n  Vue.prototype.$raiden = new raiden_service["c" /* default */](src_store);\n}\n// EXTERNAL MODULE: ./node_modules/ethereum-blockies-base64/dist/main.js\nvar main = __webpack_require__("103a");\nvar main_default = /*#__PURE__*/__webpack_require__.n(main);\n\n// CONCATENATED MODULE: ./src/services/identicon-cache.ts\nfunction identicon_cache_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction identicon_cache_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction identicon_cache_createClass(Constructor, protoProps, staticProps) { if (protoProps) identicon_cache_defineProperties(Constructor.prototype, protoProps); if (staticProps) identicon_cache_defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar identicon_cache_IdenticonCache =\n/*#__PURE__*/\nfunction () {\n  function IdenticonCache() {\n    identicon_cache_classCallCheck(this, IdenticonCache);\n\n    this.cache = {};\n  }\n\n  identicon_cache_createClass(IdenticonCache, [{\n    key: "getIdenticon",\n    value: function getIdenticon(address) {\n      var cached = this.cache[address];\n\n      if (!cached) {\n        var generated = main_default()(address);\n        this.cache[address] = generated;\n        return generated;\n      } else {\n        return cached;\n      }\n    }\n  }]);\n\n  return IdenticonCache;\n}();\n// CONCATENATED MODULE: ./src/plugins/identicon-plugin.ts\n\nfunction IdenticonPlugin(Vue, _options) {\n  Vue.prototype.$identicon = new identicon_cache_IdenticonCache();\n}\n// EXTERNAL MODULE: ./node_modules/vue-i18n/dist/vue-i18n.esm.js\nvar vue_i18n_esm = __webpack_require__("a925");\n\n// CONCATENATED MODULE: ./src/i18n.ts\n/* istanbul ignore file */\n\n\nvue_runtime_esm["a" /* default */].use(vue_i18n_esm["a" /* default */]);\n\nfunction loadLocaleMessages() {\n  var locales = __webpack_require__("49f8");\n\n  var messages = {};\n  locales.keys().forEach(function (key) {\n    var matched = key.match(/([A-Za-z0-9-_]+)\\./i);\n\n    if (matched && matched.length > 1) {\n      var locale = matched[1];\n      messages[locale] = locales(key);\n    }\n  });\n  return messages;\n}\n\n/* harmony default export */ var i18n = (new vue_i18n_esm["a" /* default */]({\n  locale: "en" || false,\n  fallbackLocale: "en" || false,\n  messages: loadLocaleMessages()\n}));\n// EXTERNAL MODULE: ./node_modules/@mdi/font/css/materialdesignicons.css\nvar materialdesignicons = __webpack_require__("5363");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/framework.js + 21 modules\nvar framework = __webpack_require__("f309");\n\n// CONCATENATED MODULE: ./src/plugins/vuetify.ts\n/* istanbul ignore file */\n\n\n\nvue_runtime_esm["a" /* default */].use(framework["a" /* default */]);\n/* harmony default export */ var vuetify = (new framework["a" /* default */]({\n  icons: {\n    iconfont: \'mdi\'\n  },\n  theme: {\n    dark: true,\n    themes: {\n      dark: {\n        primary: \'#28A5C8\',\n        secondary: \'#0A6E87\'\n      }\n    }\n  }\n}));\n// EXTERNAL MODULE: ./node_modules/vue-virtual-scroller/dist/vue-virtual-scroller.esm.js\nvar vue_virtual_scroller_esm = __webpack_require__("e508");\n\n// EXTERNAL MODULE: ./node_modules/vue-virtual-scroller/dist/vue-virtual-scroller.css\nvar vue_virtual_scroller = __webpack_require__("a899");\n\n// CONCATENATED MODULE: ./src/main.ts\n/* istanbul ignore file */\n\n\n\n\n\n\n\n\n\n\n\n\n\nvue_runtime_esm["a" /* default */].config.productionTip = false;\nvue_runtime_esm["a" /* default */].use(RaidenPlugin);\nvue_runtime_esm["a" /* default */].use(IdenticonPlugin);\nvue_runtime_esm["a" /* default */].use(vue_virtual_scroller_esm["a" /* default */]);\nnew vue_runtime_esm["a" /* default */]({\n  vuetify: vuetify,\n  router: src_router,\n  store: src_store,\n  i18n: i18n,\n  render: function render(h) {\n    return h(src_App);\n  }\n}).$mount(\'#app\');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///cd49\n')},d868:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_1ed0943e_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("c437");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_1ed0943e_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_1ed0943e_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_1ed0943e_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8wMTVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUF3aUIsQ0FBZ0IsZ21CQUFHLEVBQUMiLCJmaWxlIjoiZDg2OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTgtb25lT2YtMS0wIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTgtb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xZWQwOTQzZSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTgtb25lT2YtMS0wIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTgtb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xZWQwOTQzZSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///d868\n')},e62e:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__("a34a");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// EXTERNAL MODULE: ../raiden-ts/dist/index.js + 45 modules\nvar dist = __webpack_require__("f455");\n\n// EXTERNAL MODULE: ./src/services/web3-provider.ts\nvar web3_provider = __webpack_require__("f15c");\n\n// EXTERNAL MODULE: ./src/utils/balance-utils.ts\nvar balance_utils = __webpack_require__("a3d5");\n\n// EXTERNAL MODULE: ./src/model/types.ts\nvar types = __webpack_require__("87a2");\n\n// EXTERNAL MODULE: ./node_modules/ethers/constants.js\nvar constants = __webpack_require__("8404");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js\nvar filter = __webpack_require__("5670");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js + 20 modules\nvar exhaustMap = __webpack_require__("e95d");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/first.js + 7 modules\nvar first = __webpack_require__("3fab");\n\n// EXTERNAL MODULE: ./node_modules/tiny-async-pool/dist/node.js\nvar node = __webpack_require__("7f4b");\nvar node_default = /*#__PURE__*/__webpack_require__.n(node);\n\n// CONCATENATED MODULE: ./src/services/config-provider.ts\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar config_provider_ConfigProvider =\n/*#__PURE__*/\nfunction () {\n  function ConfigProvider() {\n    _classCallCheck(this, ConfigProvider);\n  }\n\n  _createClass(ConfigProvider, null, [{\n    key: "fetch",\n    value: function (_fetch) {\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee(url) {\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!url) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                _context.next = 5;\n                return _context.sent.json();\n\n              case 5:\n                return _context.abrupt("return", _context.sent);\n\n              case 6:\n                return _context.abrupt("return", undefined);\n\n              case 7:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x2) {\n        return _ref.apply(this, arguments);\n      };\n    }())\n  }]);\n\n  return ConfigProvider;\n}();\n// CONCATENATED MODULE: ./src/services/raiden-service.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return raiden_service_RaidenService; });\n/* unused harmony export ChannelSettleFailed */\n/* unused harmony export ChannelCloseFailed */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ChannelOpenFailed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ChannelDepositFailed; });\n/* unused harmony export EnsResolveFailed */\n/* unused harmony export TransferFailed */\n/* unused harmony export RaidenInitializationFailed */\n/* unused harmony export FindRoutesFailed */\n/* unused harmony export PFSRequestFailed */\n/* unused harmony export MintTokenFailed */\n\n\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction raiden_service_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction raiden_service_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { raiden_service_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { raiden_service_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction raiden_service_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction raiden_service_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction raiden_service_createClass(Constructor, protoProps, staticProps) { if (protoProps) raiden_service_defineProperties(Constructor.prototype, protoProps); if (staticProps) raiden_service_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\n\nvar raiden_service_RaidenService =\n/*#__PURE__*/\nfunction () {\n  function RaidenService(store) {\n    raiden_service_classCallCheck(this, RaidenService);\n\n    this._userDepositTokenAddress = \'\';\n    this._raiden = undefined;\n    this.store = store;\n  }\n\n  raiden_service_createClass(RaidenService, [{\n    key: "ensResolve",\n    value: function () {\n      var _ensResolve = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee(name) {\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.raiden.resolveName(name);\n\n              case 3:\n                return _context.abrupt("return", _context.sent);\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context["catch"](0);\n                throw new EnsResolveFailed(_context.t0);\n\n              case 9:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n\n      function ensResolve(_x) {\n        return _ensResolve.apply(this, arguments);\n      }\n\n      return ensResolve;\n    }()\n  }, {\n    key: "connect",\n    value: function () {\n      var _connect = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee2() {\n        var _this = this;\n\n        var raidenPackageConfigUrl, config, provider, raiden, deniedReason;\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                raidenPackageConfigUrl = Object({"NODE_ENV":"production","VUE_APP_I18N_LOCALE":"en","VUE_APP_I18N_FALLBACK_LOCALE":"en","BASE_URL":"/"}).VUE_APP_RAIDEN_PACKAGE;\n\n                if (!raidenPackageConfigUrl) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 5;\n                return config_provider_ConfigProvider.fetch(raidenPackageConfigUrl);\n\n              case 5:\n                config = _context2.sent;\n                _context2.next = 8;\n                return web3_provider["a" /* Web3Provider */].provider(config);\n\n              case 8:\n                provider = _context2.sent;\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.next = 13;\n                return web3_provider["a" /* Web3Provider */].provider();\n\n              case 13:\n                provider = _context2.sent;\n\n              case 14:\n                if (provider) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                this.store.commit(\'noProvider\');\n                _context2.next = 47;\n                break;\n\n              case 18:\n                if (!config) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                _context2.next = 21;\n                return RaidenService.createRaiden(provider, config.PRIVATE_KEY);\n\n              case 21:\n                raiden = _context2.sent;\n                _context2.next = 27;\n                break;\n\n              case 24:\n                _context2.next = 26;\n                return RaidenService.createRaiden(provider);\n\n              case 26:\n                raiden = _context2.sent;\n\n              case 27:\n                this._raiden = raiden;\n                _context2.t0 = this.store;\n                _context2.next = 31;\n                return this.getAccount();\n\n              case 31:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.commit.call(_context2.t0, \'account\', _context2.t1);\n\n                _context2.t2 = this.store;\n                _context2.next = 36;\n                return this.getBalance();\n\n              case 36:\n                _context2.t3 = _context2.sent;\n\n                _context2.t2.commit.call(_context2.t2, \'balance\', _context2.t3);\n\n                _context2.next = 40;\n                return raiden.userDepositTokenAddress();\n\n              case 40:\n                this._userDepositTokenAddress = _context2.sent;\n                // update connected tokens data on each newBlock\n                raiden.events$.pipe(Object(filter["a" /* filter */])(function (value) {\n                  return value.type === \'newBlock\';\n                }), Object(exhaustMap["a" /* exhaustMap */])(function () {\n                  return _this.fetchTokenData(_this.store.getters.tokens.map(function (m) {\n                    return m.address;\n                  }));\n                })).subscribe();\n                raiden.events$.pipe(Object(filter["a" /* filter */])(function (value) {\n                  return value.type === \'raidenShutdown\';\n                })).subscribe(function () {\n                  return _this.store.commit(\'reset\');\n                });\n                raiden.events$.subscribe(function (value) {\n                  if (value.type === \'tokenMonitored\') {\n                    _this.store.commit(\'updateTokens\', _defineProperty({}, value.payload.token, {\n                      address: value.payload.token\n                    }));\n                  }\n                });\n                raiden.channels$.subscribe(function (value) {\n                  _this.store.commit(\'updateChannels\', value);\n                });\n                this.store.commit(\'network\', raiden.network);\n                raiden.start();\n\n              case 47:\n                _context2.next = 53;\n                break;\n\n              case 49:\n                _context2.prev = 49;\n                _context2.t4 = _context2["catch"](0);\n\n                if (_context2.t4.message && _context2.t4.message.indexOf(\'No deploy info provided\') > -1) {\n                  deniedReason = types["a" /* DeniedReason */].UNSUPPORTED_NETWORK;\n                } else if (_context2.t4 instanceof RaidenInitializationFailed) {\n                  deniedReason = types["a" /* DeniedReason */].INITIALIZATION_FAILED;\n                } else {\n                  deniedReason = types["a" /* DeniedReason */].NO_ACCOUNT;\n                }\n\n                this.store.commit(\'accessDenied\', deniedReason);\n\n              case 53:\n                this.store.commit(\'loadComplete\');\n\n              case 54:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 49]]);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      this.raiden.stop();\n    }\n  }, {\n    key: "getAccount",\n    value: function () {\n      var _getAccount = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee3() {\n        return regenerator_default.a.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt("return", this.raiden.address);\n\n              case 1:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAccount() {\n        return _getAccount.apply(this, arguments);\n      }\n\n      return getAccount;\n    }()\n  }, {\n    key: "getBalance",\n    value: function () {\n      var _getBalance = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee4() {\n        var balance;\n        return regenerator_default.a.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.raiden.getBalance();\n\n              case 2:\n                balance = _context4.sent;\n                return _context4.abrupt("return", balance_utils["a" /* BalanceUtils */].toEth(balance));\n\n              case 4:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getBalance() {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n  }, {\n    key: "getToken",\n    value: function () {\n      var _getToken = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee5(tokenAddress) {\n        var raiden, _ref, _ref2, balance, _ref2$, decimals, symbol, name;\n\n        return regenerator_default.a.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                raiden = this.raiden;\n                _context5.prev = 1;\n                _context5.next = 4;\n                return Promise.all([raiden.getTokenBalance(tokenAddress), raiden.getTokenInfo(tokenAddress)]);\n\n              case 4:\n                _ref = _context5.sent;\n                _ref2 = _slicedToArray(_ref, 2);\n                balance = _ref2[0];\n                _ref2$ = _ref2[1];\n                decimals = _ref2$.decimals;\n                symbol = _ref2$.symbol;\n                name = _ref2$.name;\n                return _context5.abrupt("return", {\n                  name: name,\n                  symbol: symbol,\n                  balance: balance,\n                  decimals: decimals,\n                  address: tokenAddress\n                });\n\n              case 14:\n                _context5.prev = 14;\n                _context5.t0 = _context5["catch"](1);\n                return _context5.abrupt("return", null);\n\n              case 17:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[1, 14]]);\n      }));\n\n      function getToken(_x2) {\n        return _getToken.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n  }, {\n    key: "openChannel",\n    value: function () {\n      var _openChannel = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee6(token, partner, amount, progress) {\n        var progressUpdater, raiden;\n        return regenerator_default.a.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                progressUpdater = function progressUpdater(current, total) {\n                  if (progress) {\n                    progress({\n                      current: current,\n                      total: total\n                    });\n                  }\n                };\n\n                raiden = this.raiden;\n                progressUpdater(1, 3);\n                _context6.prev = 3;\n                _context6.next = 6;\n                return raiden.openChannel(token, partner);\n\n              case 6:\n                _context6.next = 11;\n                break;\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6["catch"](3);\n                throw new ChannelOpenFailed(_context6.t0);\n\n              case 11:\n                progressUpdater(2, 3);\n\n                if (!amount.gt(constants["Zero"])) {\n                  _context6.next = 15;\n                  break;\n                }\n\n                _context6.next = 15;\n                return this.deposit(token, partner, amount);\n\n              case 15:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[3, 8]]);\n      }));\n\n      function openChannel(_x3, _x4, _x5, _x6) {\n        return _openChannel.apply(this, arguments);\n      }\n\n      return openChannel;\n    }()\n  }, {\n    key: "leaveNetwork",\n    value: function () {\n      var _leaveNetwork = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee7(address, progress) {\n        var channels, result, total, i, channel;\n        return regenerator_default.a.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                channels = this.store.getters.channels(address);\n                result = {\n                  closed: 0,\n                  failed: 0\n                };\n                total = channels.length;\n                i = 0;\n\n              case 4:\n                if (!(i < total)) {\n                  _context7.next = 19;\n                  break;\n                }\n\n                if (progress) {\n                  progress({\n                    current: i + 1,\n                    total: total\n                  });\n                }\n\n                channel = channels[i];\n                _context7.prev = 7;\n                _context7.next = 10;\n                return this.closeChannel(channel.token, channel.partner);\n\n              case 10:\n                result.closed += 1;\n                _context7.next = 16;\n                break;\n\n              case 13:\n                _context7.prev = 13;\n                _context7.t0 = _context7["catch"](7);\n                result.failed += 1;\n\n              case 16:\n                i++;\n                _context7.next = 4;\n                break;\n\n              case 19:\n                return _context7.abrupt("return", result);\n\n              case 20:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[7, 13]]);\n      }));\n\n      function leaveNetwork(_x7, _x8) {\n        return _leaveNetwork.apply(this, arguments);\n      }\n\n      return leaveNetwork;\n    }()\n  }, {\n    key: "closeChannel",\n    value: function () {\n      var _closeChannel = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee8(token, partner) {\n        return regenerator_default.a.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return this.raiden.closeChannel(token, partner);\n\n              case 3:\n                _context8.next = 8;\n                break;\n\n              case 5:\n                _context8.prev = 5;\n                _context8.t0 = _context8["catch"](0);\n                throw new ChannelCloseFailed(_context8.t0);\n\n              case 8:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 5]]);\n      }));\n\n      function closeChannel(_x9, _x10) {\n        return _closeChannel.apply(this, arguments);\n      }\n\n      return closeChannel;\n    }()\n  }, {\n    key: "deposit",\n    value: function () {\n      var _deposit = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee9(token, partner, amount) {\n        return regenerator_default.a.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return this.raiden.depositChannel(token, partner, amount);\n\n              case 3:\n                _context9.next = 8;\n                break;\n\n              case 5:\n                _context9.prev = 5;\n                _context9.t0 = _context9["catch"](0);\n                throw new ChannelDepositFailed(_context9.t0);\n\n              case 8:\n              case "end":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 5]]);\n      }));\n\n      function deposit(_x11, _x12, _x13) {\n        return _deposit.apply(this, arguments);\n      }\n\n      return deposit;\n    }()\n  }, {\n    key: "settleChannel",\n    value: function () {\n      var _settleChannel = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee10(token, partner) {\n        return regenerator_default.a.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return this.raiden.settleChannel(token, partner);\n\n              case 3:\n                _context10.next = 8;\n                break;\n\n              case 5:\n                _context10.prev = 5;\n                _context10.t0 = _context10["catch"](0);\n                throw new ChannelSettleFailed(_context10.t0);\n\n              case 8:\n              case "end":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 5]]);\n      }));\n\n      function settleChannel(_x14, _x15) {\n        return _settleChannel.apply(this, arguments);\n      }\n\n      return settleChannel;\n    }()\n  }, {\n    key: "fetchTokenData",\n    value: function () {\n      var _fetchTokenData = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee12(tokens) {\n        var _this2 = this;\n\n        var fetchToken;\n        return regenerator_default.a.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (tokens.length) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                return _context12.abrupt("return");\n\n              case 2:\n                fetchToken =\n                /*#__PURE__*/\n                function () {\n                  var _ref3 = raiden_service_asyncToGenerator(\n                  /*#__PURE__*/\n                  regenerator_default.a.mark(function _callee11(address) {\n                    return regenerator_default.a.wrap(function _callee11$(_context11) {\n                      while (1) {\n                        switch (_context11.prev = _context11.next) {\n                          case 0:\n                            return _context11.abrupt("return", _this2.getToken(address).then(function (token) {\n                              if (!token) return;\n\n                              _this2.store.commit(\'updateTokens\', _defineProperty({}, token.address, token));\n                            }));\n\n                          case 1:\n                          case "end":\n                            return _context11.stop();\n                        }\n                      }\n                    }, _callee11);\n                  }));\n\n                  return function fetchToken(_x17) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }();\n\n                _context12.next = 5;\n                return node_default()(6, tokens, fetchToken);\n\n              case 5:\n              case "end":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n\n      function fetchTokenData(_x16) {\n        return _fetchTokenData.apply(this, arguments);\n      }\n\n      return fetchTokenData;\n    }()\n  }, {\n    key: "transfer",\n    value: function () {\n      var _transfer = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee13(token, target, amount, paths) {\n        var secretHash;\n        return regenerator_default.a.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.prev = 0;\n                _context13.next = 3;\n                return this.raiden.transfer(token, target, amount, {\n                  paths: paths\n                });\n\n              case 3:\n                secretHash = _context13.sent;\n                _context13.next = 6;\n                return this.raiden.transfers$.pipe(Object(first["a" /* first */])(function (transfer) {\n                  return transfer.secrethash === secretHash && transfer.completed;\n                })).toPromise();\n\n              case 6:\n                _context13.next = 11;\n                break;\n\n              case 8:\n                _context13.prev = 8;\n                _context13.t0 = _context13["catch"](0);\n                throw new TransferFailed(_context13.t0);\n\n              case 11:\n              case "end":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this, [[0, 8]]);\n      }));\n\n      function transfer(_x18, _x19, _x20, _x21) {\n        return _transfer.apply(this, arguments);\n      }\n\n      return transfer;\n    }()\n  }, {\n    key: "findRoutes",\n    value: function () {\n      var _findRoutes = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee14(token, target, amount, raidenPFS) {\n        var routes;\n        return regenerator_default.a.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.prev = 0;\n                _context14.next = 3;\n                return this.raiden.getAvailability(target);\n\n              case 3:\n                _context14.next = 5;\n                return this.raiden.findRoutes(token, target, amount, {\n                  pfs: raidenPFS\n                });\n\n              case 5:\n                routes = _context14.sent;\n                _context14.next = 11;\n                break;\n\n              case 8:\n                _context14.prev = 8;\n                _context14.t0 = _context14["catch"](0);\n                throw new FindRoutesFailed(_context14.t0);\n\n              case 11:\n                return _context14.abrupt("return", routes);\n\n              case 12:\n              case "end":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[0, 8]]);\n      }));\n\n      function findRoutes(_x22, _x23, _x24, _x25) {\n        return _findRoutes.apply(this, arguments);\n      }\n\n      return findRoutes;\n    }()\n  }, {\n    key: "fetchServices",\n    value: function () {\n      var _fetchServices = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee15() {\n        var raidenPFS;\n        return regenerator_default.a.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.prev = 0;\n                _context15.next = 3;\n                return this.raiden.findPFS();\n\n              case 3:\n                raidenPFS = _context15.sent;\n                _context15.next = 9;\n                break;\n\n              case 6:\n                _context15.prev = 6;\n                _context15.t0 = _context15["catch"](0);\n                throw new PFSRequestFailed(_context15.t0);\n\n              case 9:\n                return _context15.abrupt("return", raidenPFS);\n\n              case 10:\n              case "end":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this, [[0, 6]]);\n      }));\n\n      function fetchServices() {\n        return _fetchServices.apply(this, arguments);\n      }\n\n      return fetchServices;\n    }()\n  }, {\n    key: "noPfsSelected",\n    value: function noPfsSelected() {\n      return this.raiden.config.pfs === undefined;\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: "mint",\n    value: function () {\n      var _mint = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee16(token, amount) {\n        return regenerator_default.a.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.raiden.mint(token, amount);\n\n              case 2:\n                return _context16.abrupt("return", _context16.sent);\n\n              case 3:\n              case "end":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function mint(_x26, _x27) {\n        return _mint.apply(this, arguments);\n      }\n\n      return mint;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: "depositToUDC",\n    value: function () {\n      var _depositToUDC = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee17(amount) {\n        return regenerator_default.a.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.raiden.depositToUDC(amount);\n\n              case 2:\n              case "end":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function depositToUDC(_x28) {\n        return _depositToUDC.apply(this, arguments);\n      }\n\n      return depositToUDC;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: "getUDCCapacity",\n    value: function () {\n      var _getUDCCapacity = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee18() {\n        return regenerator_default.a.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                return _context18.abrupt("return", this.raiden.getUDCCapacity());\n\n              case 1:\n              case "end":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getUDCCapacity() {\n        return _getUDCCapacity.apply(this, arguments);\n      }\n\n      return getUDCCapacity;\n    }()\n  }, {\n    key: "raiden",\n    get: function get() {\n      if (this._raiden === undefined) {\n        throw new Error(\'Raiden instance was not initialized\');\n      } else {\n        return this._raiden;\n      }\n    }\n  }, {\n    key: "userDepositTokenAddress",\n    get: function get() {\n      if (!this._userDepositTokenAddress) throw new Error(\'address empty\');\n      return this._userDepositTokenAddress;\n    }\n  }], [{\n    key: "createRaiden",\n    value: function () {\n      var _createRaiden = raiden_service_asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee19(provider) {\n        var account,\n            _args19 = arguments;\n        return regenerator_default.a.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                account = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : 0;\n                _context19.prev = 1;\n                _context19.next = 4;\n                return dist["b" /* Raiden */].create(provider, account, window.localStorage, undefined, {\n                  pfsSafetyMargin: 1.1\n                });\n\n              case 4:\n                return _context19.abrupt("return", _context19.sent);\n\n              case 7:\n                _context19.prev = 7;\n                _context19.t0 = _context19["catch"](1);\n                throw new RaidenInitializationFailed(_context19.t0);\n\n              case 10:\n              case "end":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, null, [[1, 7]]);\n      }));\n\n      function createRaiden(_x29) {\n        return _createRaiden.apply(this, arguments);\n      }\n\n      return createRaiden;\n    }()\n  }]);\n\n  return RaidenService;\n}();\n\n\nvar ChannelSettleFailed =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(ChannelSettleFailed, _Error);\n\n  function ChannelSettleFailed() {\n    raiden_service_classCallCheck(this, ChannelSettleFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChannelSettleFailed).apply(this, arguments));\n  }\n\n  return ChannelSettleFailed;\n}(_wrapNativeSuper(Error));\nvar ChannelCloseFailed =\n/*#__PURE__*/\nfunction (_Error2) {\n  _inherits(ChannelCloseFailed, _Error2);\n\n  function ChannelCloseFailed() {\n    raiden_service_classCallCheck(this, ChannelCloseFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChannelCloseFailed).apply(this, arguments));\n  }\n\n  return ChannelCloseFailed;\n}(_wrapNativeSuper(Error));\nvar ChannelOpenFailed =\n/*#__PURE__*/\nfunction (_Error3) {\n  _inherits(ChannelOpenFailed, _Error3);\n\n  function ChannelOpenFailed() {\n    raiden_service_classCallCheck(this, ChannelOpenFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChannelOpenFailed).apply(this, arguments));\n  }\n\n  return ChannelOpenFailed;\n}(_wrapNativeSuper(Error));\nvar ChannelDepositFailed =\n/*#__PURE__*/\nfunction (_Error4) {\n  _inherits(ChannelDepositFailed, _Error4);\n\n  function ChannelDepositFailed() {\n    raiden_service_classCallCheck(this, ChannelDepositFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChannelDepositFailed).apply(this, arguments));\n  }\n\n  return ChannelDepositFailed;\n}(_wrapNativeSuper(Error));\nvar EnsResolveFailed =\n/*#__PURE__*/\nfunction (_Error5) {\n  _inherits(EnsResolveFailed, _Error5);\n\n  function EnsResolveFailed() {\n    raiden_service_classCallCheck(this, EnsResolveFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EnsResolveFailed).apply(this, arguments));\n  }\n\n  return EnsResolveFailed;\n}(_wrapNativeSuper(Error));\nvar TransferFailed =\n/*#__PURE__*/\nfunction (_Error6) {\n  _inherits(TransferFailed, _Error6);\n\n  function TransferFailed() {\n    raiden_service_classCallCheck(this, TransferFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TransferFailed).apply(this, arguments));\n  }\n\n  return TransferFailed;\n}(_wrapNativeSuper(Error));\nvar RaidenInitializationFailed =\n/*#__PURE__*/\nfunction (_Error7) {\n  _inherits(RaidenInitializationFailed, _Error7);\n\n  function RaidenInitializationFailed() {\n    raiden_service_classCallCheck(this, RaidenInitializationFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RaidenInitializationFailed).apply(this, arguments));\n  }\n\n  return RaidenInitializationFailed;\n}(_wrapNativeSuper(Error));\nvar FindRoutesFailed =\n/*#__PURE__*/\nfunction (_Error8) {\n  _inherits(FindRoutesFailed, _Error8);\n\n  function FindRoutesFailed() {\n    raiden_service_classCallCheck(this, FindRoutesFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FindRoutesFailed).apply(this, arguments));\n  }\n\n  return FindRoutesFailed;\n}(_wrapNativeSuper(Error));\nvar PFSRequestFailed =\n/*#__PURE__*/\nfunction (_Error9) {\n  _inherits(PFSRequestFailed, _Error9);\n\n  function PFSRequestFailed() {\n    raiden_service_classCallCheck(this, PFSRequestFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PFSRequestFailed).apply(this, arguments));\n  }\n\n  return PFSRequestFailed;\n}(_wrapNativeSuper(Error));\nvar MintTokenFailed =\n/*#__PURE__*/\nfunction (_Error10) {\n  _inherits(MintTokenFailed, _Error10);\n\n  function MintTokenFailed() {\n    raiden_service_classCallCheck(this, MintTokenFailed);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MintTokenFailed).apply(this, arguments));\n  }\n\n  return MintTokenFailed;\n}(_wrapNativeSuper(Error));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///e62e\n')},edd4:function(module){eval('module.exports = JSON.parse("{\\"general\\":{\\"buttons\\":{\\"cancel\\":\\"Cancel\\",\\"transfer\\":\\"Transfer\\",\\"continue\\":\\"Continue\\",\\"confirm\\":\\"Confirm\\"},\\"offline\\":\\"Please connect to the internet.\\"},\\"address-input\\":{\\"paste-button\\":\\"Paste\\",\\"input\\":{\\"placeholder\\":\\"Enter an address or ENS name...\\"},\\"blockie-alt\\":\\"Selected token address blockie\\",\\"error\\":{\\"invalid-address\\":\\"Please enter a valid address or ENS name\\",\\"no-checksum\\":\\"Please enter an address in checksum format. You can convert your address on https://ethsum.netlify.com\\",\\"empty\\":\\"Please enter an address or ENS name\\",\\"ens-resolve-failed\\":\\"Please enter a resolvable ENS name\\",\\"invalid-excluded-address\\":\\"Please enter a different address or ENS name. You can\'t use your own address or the address of the token network.\\",\\"channel-not-open\\":\\"Please enter a hub address you have an open channel with.\\"}},\\"amount-input\\":{\\"input\\":{\\"hint\\":\\"Please enter an amount\\"},\\"error\\":{\\"empty\\":\\"Please enter an amount\\",\\"too-many-decimals\\":\\"Please use only up to {decimals} decimals for this token\\",\\"not-enough-funds\\":\\"Your maximum usable amount is {funds} {symbol}\\"}},\\"app-header\\":{\\"copy\\":\\"Copy\\",\\"copy-success\\":\\"Copied!\\",\\"currency\\":\\"ETH\\"},\\"channel-actions\\":{\\"deposit\\":\\"Deposit\\",\\"close\\":\\"Close\\",\\"settle\\":\\"Settle\\"},\\"channel-deposit\\":{\\"buttons\\":{\\"confirm\\":\\"Deposit\\"},\\"input\\":{\\"label\\":\\"Amount\\"}},\\"find-routes\\":{\\"hops\\":\\"Hops\\",\\"price\\":\\"Price\\",\\"error\\":{\\"title\\":\\"Oops, something went wrong\\"}},\\"stepper\\":{\\"steps\\":{\\"open\\":{\\"title\\":\\"Open\\",\\"description\\":\\"You can deposit more tokens \\\\n or close the channel.\\"},\\"closed\\":{\\"title\\":\\"Closed\\",\\"description\\":\\"Please wait until your channel is settleable. \\\\nthis may take some time.\\"},\\"settleable\\":{\\"title\\":\\"Settleable\\",\\"description\\":\\"Settle your channel to transfer \\\\n your tokens back to your account.\\"}}},\\"channels\\":{\\"open\\":{\\"header\\":\\"Open\\"},\\"closed\\":{\\"header\\":\\"Closed\\"},\\"settleable\\":{\\"header\\":\\"Settleable\\"},\\"snackbar-close\\":\\"Close\\"},\\"channel-list\\":{\\"channel\\":{\\"blockie_alt\\":\\"Partner address blockie\\",\\"state\\":\\"Deposit {deposit} | State: {state}\\",\\"close_dialog\\":{\\"title\\":\\"Close Channel\\",\\"description\\":\\"Are you sure you want to close this channel? This action cannot be undone.\\"},\\"settle_dialog\\":{\\"title\\":\\"Settle Channel\\",\\"description\\":\\"Are you sure you want to settle the channel with hub {partner} for token {token}?\\"}},\\"messages\\":{\\"close\\":{\\"success\\":\\"Channel closed successfully\\",\\"failure\\":\\"Channel close failed\\"},\\"deposit\\":{\\"success\\":\\"Deposit was successful\\",\\"failure\\":\\"Deposit failed\\"},\\"settle\\":{\\"success\\":\\"Channel settle was successful\\",\\"failure\\":\\"Channel settle failed\\"}}},\\"confirmation\\":{\\"buttons\\":{\\"cancel\\":\\"Cancel\\",\\"close\\":\\"Close\\",\\"settle\\":\\"Settle\\"}},\\"confirmation-dialog\\":{\\"buttons\\":{\\"cancel\\":\\"Cancel\\",\\"confirm\\":\\"Confirm\\"}},\\"error-screen\\":{\\"title\\":\\"Error\\"},\\"no-access\\":{\\"unsupported-network\\":\\"The current network is unsupported. Please choose a different network.\\",\\"sdk-initialization-failure\\":\\"SDK initialization failed. Please check the console for more information.\\",\\"generic-error\\":\\"A valid account could not be detected. Please make sure that your provider is unlocked and accessible.\\"},\\"splash-screen\\":{\\"disclaimer\\":\\"The Raiden dApp is a reference implementation of the Raiden Light Client SDK. It is work in progress and can just be used on the Ethereum Testnets.\\",\\"matrix-sign\\":\\"On the first launch you get asked to sign two messages to connect to the Raiden transport layer. You sign the matrix server name and the public user name.\\",\\"connect-button\\":\\"Connect\\",\\"no-provider\\":\\"No web3 provider was detected. Please install e.g. MetaMask\\"},\\"tokens\\":{\\"connected\\":{\\"header\\":\\"Connected Tokens\\",\\"token\\":{\\"blockie-alt\\":\\"Partner address blockie\\",\\"token-info\\":\\"{symbol} | {name}\\",\\"buttons\\":{\\"disconnect\\":\\"Disconnect Token\\",\\"view-channels\\":\\"View Channels\\"}}},\\"connect-new\\":\\"Connect new token\\",\\"disconnect-dialog\\":{\\"header\\":\\"Disconnect token\\",\\"confirmation-message\\":\\"This action will close all channels for the {symbol} token! {address}\\"},\\"leave-progress\\":{\\"label\\":\\"Disconnect\\",\\"title\\":\\"Disconnecting from the token network\\",\\"description\\":\\"Closing the channels\\"},\\"leave-done\\":{\\"label\\":\\"Done\\",\\"title\\":\\"Disconnected from the token network\\",\\"description\\":\\"All your channels were successfully closed\\"}},\\"application\\":{\\"privacy-policy\\":\\"Privacy Policy, Disclaimer & Imprint\\"},\\"mint-deposit-dialog\\":{\\"button\\":\\"Mint and deposit\\",\\"available\\":\\"Available {currency} to pay for on-chain transaction: {balance} {currency}\\",\\"error\\":\\"The mint and deposit operation failed.\\"},\\"transfer\\":{\\"deposit-button\\":\\"Deposit\\",\\"channel-button\\":\\"Channels\\",\\"capacity-label\\":\\"Capacity\\",\\"recipient-label\\":\\"Recipient\\",\\"amount-label\\":\\"Amount\\",\\"amount-placeholder\\":\\"Specify amount...\\",\\"error\\":{\\"button\\":\\"Dismiss\\",\\"title\\":\\"Token transfer unsuccessful. Please retry.\\",\\"deposit-title\\":\\"Deposit was unsuccessful. Please retry.\\"},\\"steps\\":{\\"request-route\\":{\\"title\\":\\"Request Route\\",\\"udc-description\\":\\"{token} Balance\\",\\"in-progress\\":\\"Sign the message to pay for the route request\\",\\"done\\":\\"Route request payment complete\\"},\\"select-route\\":{\\"title\\":\\"Select Route\\"},\\"confirm-transfer\\":{\\"title\\":\\"Confirm Transfer\\",\\"total-amount\\":\\"Total Amount\\"},\\"call-to-action\\":{\\"1\\":{\\"default\\":\\"Transfer Route Request\\",\\"amount\\":\\"Transfer {amount} {symbol}\\"},\\"2\\":{\\"default\\":\\"Confirm Mediation Fees\\",\\"amount\\":\\"Confirm {amount} {symbol}\\"},\\"3\\":{\\"amount\\":\\"Transfer {amount} {symbol}\\"}},\\"transfer\\":{\\"label\\":\\"Transfer\\",\\"title\\":\\"Sending Tokens\\",\\"description\\":\\"Please do not close the browser and confirm the transactions with MetaMask.\\"},\\"done\\":{\\"label\\":\\"Done\\",\\"title\\":\\"Send Successful\\",\\"description\\":\\"Your transfer was successful. You may get prompted to sign additional messages in order to acknowledge delivered messages from the target.\\"},\\"deposit\\":{\\"label\\":\\"Deposit\\",\\"title\\":\\"Depositing Tokens\\",\\"description\\":\\"Please do not close the browser and confirm the transactions with MetaMask.\\"},\\"deposit-done\\":{\\"label\\":\\"Done\\",\\"title\\":\\"Deposit successful\\",\\"description\\":\\"Your tokens have been success\\"}}},\\"select-token\\":{\\"header\\":\\"Available\\",\\"tokens\\":{\\"token\\":{\\"blockie-alt\\":\\"Token address blockie\\",\\"token-information\\":\\"{symbol} | {name}\\"}}},\\"select-hub\\":{\\"select-button\\":\\"Select Hub\\"},\\"open-channel\\":{\\"error\\":{\\"title\\":\\"Ops, something went wrong\\",\\"button\\":\\"Dismiss\\",\\"deposit-failed\\":\\"Could not deposit to the channel.\\",\\"open-failed\\":\\"Channel open failed.\\"},\\"open-button\\":\\"Open Channel\\",\\"hub\\":\\"Hub\\",\\"steps\\":{\\"open\\":{\\"label\\":\\"Open\\",\\"title\\":\\"Opening a new channel\\",\\"description\\":\\"Please do not close the browser and confirm the transaction with MetaMask.\\"},\\"transfer\\":{\\"label\\":\\"Transfer\\",\\"title\\":\\"Transferring tokens to the network and deposit into the channel\\",\\"description\\":\\"Please do not close the browser and confirm two (2) transactions with MetaMask.\\"},\\"deposit\\":{\\"label\\":\\"Deposit\\",\\"title\\":\\"Not implemented - split title above, when done\\",\\"description\\":\\"Not implemented - split description above, when done\\"},\\"done\\":{\\"label\\":\\"Done\\",\\"title\\":\\"New Channel opened\\",\\"description\\":\\"A new channel has been opened successfully. You may now select a transfer target.\\"}},\\"confirmation\\":\\"Channel opening is in progress, are you sure you want to leave?\\"},\\"token-information\\":{\\"title\\":\\"Token\\",\\"description\\":\\"{symbol} | {name}\\"},\\"pathfinding-services\\":{\\"title\\":\\"Select Pathfinding Service\\",\\"rtt\\":\\"{time} ms\\",\\"headers\\":{\\"host\\":\\"PFS\\",\\"rtt\\":\\"Ping\\",\\"price\\":\\"Price\\"}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJlZGQ0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///edd4\n')},f15c:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Web3Provider; });\n/* harmony import */ var _home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a34a");\n/* harmony import */ var _home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Web3Provider =\n/*#__PURE__*/\nfunction () {\n  function Web3Provider() {\n    _classCallCheck(this, Web3Provider);\n  }\n\n  _createClass(Web3Provider, null, [{\n    key: "provider",\n    value: function () {\n      var _provider = _asyncToGenerator(\n      /*#__PURE__*/\n      _home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(config) {\n        var ethereum, provider;\n        return _home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                ethereum = window.ethereum;\n                provider = null;\n\n                if (!config) {\n                  _context.next = 6;\n                  break;\n                }\n\n                provider = "https://".concat(config.INFURA_ENDPOINT);\n                _context.next = 13;\n                break;\n\n              case 6:\n                if (!(typeof ethereum !== \'undefined\')) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 9;\n                return ethereum.enable();\n\n              case 9:\n                provider = ethereum;\n                _context.next = 13;\n                break;\n\n              case 12:\n                if (window.web3) {\n                  provider = window.web3.currentProvider;\n                }\n\n              case 13:\n                /* istanbul ignore next */\n                if (provider && provider.isMetaMask) {\n                  provider.autoRefreshOnNetworkChange = false;\n                  provider.on(\'networkChanged\', function () {\n                    return window.location.replace(window.location.origin);\n                  });\n                }\n\n                return _context.abrupt("return", provider);\n\n              case 15:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function provider(_x) {\n        return _provider.apply(this, arguments);\n      }\n\n      return provider;\n    }()\n  }]);\n\n  return Web3Provider;\n}();\n\nWeb3Provider.injectedWeb3Available = function () {\n  return window.ethereum || window.web3;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvd2ViMy1wcm92aWRlci50cz81MDY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFPLElBQU0sWUFBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHlJQUN3QixNQUR4QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFVSx3QkFGVixHQUVxQixNQUFNLENBQUMsUUFGNUI7QUFHUSx3QkFIUixHQUdtQixJQUhuQjs7QUFBQSxxQkFLUSxNQUxSO0FBQUE7QUFBQTtBQUFBOztBQU1NLHdCQUFRLHFCQUFjLE1BQU0sQ0FBQyxlQUFyQixDQUFSO0FBTk47QUFBQTs7QUFBQTtBQUFBLHNCQU9lLE9BQU8sUUFBUCxLQUFvQixXQVBuQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLHVCQVFZLFFBQVEsQ0FBQyxNQUFULEVBUlo7O0FBQUE7QUFTTSx3QkFBUSxHQUFHLFFBQVg7QUFUTjtBQUFBOztBQUFBO0FBVVcsb0JBQUksTUFBTSxDQUFDLElBQVgsRUFBaUI7QUFDdEIsMEJBQVEsR0FBRyxNQUFNLENBQUMsSUFBUCxDQUFZLGVBQXZCO0FBQ0Q7O0FBWkw7QUFjSTtBQUNBLG9CQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsVUFBekIsRUFBcUM7QUFDbkMsMEJBQVEsQ0FBQywwQkFBVCxHQUFzQyxLQUF0QztBQUNBLDBCQUFRLENBQUMsRUFBVCxDQUFZLGdCQUFaLEVBQThCO0FBQUEsMkJBQzVCLE1BQU0sQ0FBQyxRQUFQLENBQWdCLE9BQWhCLENBQXdCLE1BQU0sQ0FBQyxRQUFQLENBQWdCLE1BQXhDLENBRDRCO0FBQUEsbUJBQTlCO0FBR0Q7O0FBcEJMLGlEQXNCVyxRQXRCWDs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBeUJTLHFDQUF3QjtBQUFBLFNBQWUsTUFBTSxDQUFDLFFBQVAsSUFBbUIsTUFBTSxDQUFDLElBQXpDO0FBQUEsQ0FBeEIiLCJmaWxlIjoiZjE1Yy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBXZWIzUHJvdmlkZXIge1xuICBzdGF0aWMgYXN5bmMgcHJvdmlkZXIoY29uZmlnPzogeyBJTkZVUkFfRU5EUE9JTlQ6IHN0cmluZyB9KSB7XG4gICAgY29uc3QgZXRoZXJldW0gPSB3aW5kb3cuZXRoZXJldW07XG4gICAgbGV0IHByb3ZpZGVyID0gbnVsbDtcblxuICAgIGlmIChjb25maWcpIHtcbiAgICAgIHByb3ZpZGVyID0gYGh0dHBzOi8vJHtjb25maWcuSU5GVVJBX0VORFBPSU5UfWA7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXRoZXJldW0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBhd2FpdCBldGhlcmV1bS5lbmFibGUoKTtcbiAgICAgIHByb3ZpZGVyID0gZXRoZXJldW07XG4gICAgfSBlbHNlIGlmICh3aW5kb3cud2ViMykge1xuICAgICAgcHJvdmlkZXIgPSB3aW5kb3cud2ViMy5jdXJyZW50UHJvdmlkZXI7XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAocHJvdmlkZXIgJiYgcHJvdmlkZXIuaXNNZXRhTWFzaykge1xuICAgICAgcHJvdmlkZXIuYXV0b1JlZnJlc2hPbk5ldHdvcmtDaGFuZ2UgPSBmYWxzZTtcbiAgICAgIHByb3ZpZGVyLm9uKCduZXR3b3JrQ2hhbmdlZCcsICgpID0+XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBwcm92aWRlcjtcbiAgfVxuXG4gIHN0YXRpYyBpbmplY3RlZFdlYjNBdmFpbGFibGUgPSAoKTogYm9vbGVhbiA9PiB3aW5kb3cuZXRoZXJldW0gfHwgd2luZG93LndlYjM7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///f15c\n')},f455:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var actions_namespaceObject = {};\n__webpack_require__.r(actions_namespaceObject);\n__webpack_require__.d(actions_namespaceObject, "newBlock", function() { return newBlock; });\n__webpack_require__.d(actions_namespaceObject, "tokenMonitored", function() { return tokenMonitored; });\n__webpack_require__.d(actions_namespaceObject, "channelOpen", function() { return channelOpen; });\n__webpack_require__.d(actions_namespaceObject, "channelOpened", function() { return channelOpened; });\n__webpack_require__.d(actions_namespaceObject, "channelOpenFailed", function() { return channelOpenFailed; });\n__webpack_require__.d(actions_namespaceObject, "channelMonitored", function() { return channelMonitored; });\n__webpack_require__.d(actions_namespaceObject, "channelDeposit", function() { return channelDeposit; });\n__webpack_require__.d(actions_namespaceObject, "channelDeposited", function() { return channelDeposited; });\n__webpack_require__.d(actions_namespaceObject, "channelDepositFailed", function() { return channelDepositFailed; });\n__webpack_require__.d(actions_namespaceObject, "channelWithdrawn", function() { return channelWithdrawn; });\n__webpack_require__.d(actions_namespaceObject, "channelClose", function() { return channelClose; });\n__webpack_require__.d(actions_namespaceObject, "channelClosed", function() { return channelClosed; });\n__webpack_require__.d(actions_namespaceObject, "channelCloseFailed", function() { return channelCloseFailed; });\n__webpack_require__.d(actions_namespaceObject, "channelSettleable", function() { return channelSettleable; });\n__webpack_require__.d(actions_namespaceObject, "channelSettle", function() { return channelSettle; });\n__webpack_require__.d(actions_namespaceObject, "channelSettled", function() { return channelSettled; });\n__webpack_require__.d(actions_namespaceObject, "channelSettleFailed", function() { return channelSettleFailed; });\nvar path_actions_namespaceObject = {};\n__webpack_require__.r(path_actions_namespaceObject);\n__webpack_require__.d(path_actions_namespaceObject, "pathFind", function() { return pathFind; });\n__webpack_require__.d(path_actions_namespaceObject, "pathFound", function() { return pathFound; });\n__webpack_require__.d(path_actions_namespaceObject, "pathFindFailed", function() { return pathFindFailed; });\n__webpack_require__.d(path_actions_namespaceObject, "pfsListUpdated", function() { return pfsListUpdated; });\n__webpack_require__.d(path_actions_namespaceObject, "iouPersist", function() { return iouPersist; });\n__webpack_require__.d(path_actions_namespaceObject, "iouClear", function() { return iouClear; });\nvar transport_actions_namespaceObject = {};\n__webpack_require__.r(transport_actions_namespaceObject);\n__webpack_require__.d(transport_actions_namespaceObject, "matrixSetup", function() { return matrixSetup; });\n__webpack_require__.d(transport_actions_namespaceObject, "matrixRequestMonitorPresence", function() { return matrixRequestMonitorPresence; });\n__webpack_require__.d(transport_actions_namespaceObject, "matrixPresenceUpdate", function() { return matrixPresenceUpdate; });\n__webpack_require__.d(transport_actions_namespaceObject, "matrixRequestMonitorPresenceFailed", function() { return matrixRequestMonitorPresenceFailed; });\n__webpack_require__.d(transport_actions_namespaceObject, "matrixRoom", function() { return matrixRoom; });\n__webpack_require__.d(transport_actions_namespaceObject, "matrixRoomLeave", function() { return matrixRoomLeave; });\nvar transfers_actions_namespaceObject = {};\n__webpack_require__.r(transfers_actions_namespaceObject);\n__webpack_require__.d(transfers_actions_namespaceObject, "transfer", function() { return actions_transfer; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSigned", function() { return transferSigned; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferProcessed", function() { return transferProcessed; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSecret", function() { return transferSecret; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSecretRequest", function() { return transferSecretRequest; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSecretReveal", function() { return transferSecretReveal; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferUnlock", function() { return transferUnlock; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferUnlocked", function() { return transferUnlocked; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferUnlockProcessed", function() { return transferUnlockProcessed; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferExpire", function() { return transferExpire; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferExpired", function() { return transferExpired; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferExpireFailed", function() { return transferExpireFailed; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferExpireProcessed", function() { return transferExpireProcessed; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferRefunded", function() { return transferRefunded; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferred", function() { return transferred; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferFailed", function() { return transferFailed; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferClear", function() { return transferClear; });\n__webpack_require__.d(transfers_actions_namespaceObject, "withdrawReceiveRequest", function() { return withdrawReceiveRequest; });\n__webpack_require__.d(transfers_actions_namespaceObject, "withdrawSendConfirmation", function() { return withdrawSendConfirmation; });\nvar messages_actions_namespaceObject = {};\n__webpack_require__.r(messages_actions_namespaceObject);\n__webpack_require__.d(messages_actions_namespaceObject, "messageSend", function() { return messageSend; });\n__webpack_require__.d(messages_actions_namespaceObject, "messageSent", function() { return messageSent; });\n__webpack_require__.d(messages_actions_namespaceObject, "messageGlobalSend", function() { return messageGlobalSend; });\n__webpack_require__.d(messages_actions_namespaceObject, "messageReceived", function() { return messageReceived; });\nvar epics_namespaceObject = {};\n__webpack_require__.r(epics_namespaceObject);\n__webpack_require__.d(epics_namespaceObject, "initNewBlockEpic", function() { return epics_initNewBlockEpic; });\n__webpack_require__.d(epics_namespaceObject, "initMonitorRegistryEpic", function() { return epics_initMonitorRegistryEpic; });\n__webpack_require__.d(epics_namespaceObject, "initMonitorChannelsEpic", function() { return epics_initMonitorChannelsEpic; });\n__webpack_require__.d(epics_namespaceObject, "initMonitorProviderEpic", function() { return epics_initMonitorProviderEpic; });\n__webpack_require__.d(epics_namespaceObject, "tokenMonitoredEpic", function() { return epics_tokenMonitoredEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelMonitoredEpic", function() { return epics_channelMonitoredEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelOpenEpic", function() { return epics_channelOpenEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelOpenedEpic", function() { return epics_channelOpenedEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelDepositEpic", function() { return epics_channelDepositEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelCloseEpic", function() { return epics_channelCloseEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelSettleEpic", function() { return epics_channelSettleEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelSettleableEpic", function() { return epics_channelSettleableEpic; });\nvar transport_epics_namespaceObject = {};\n__webpack_require__.r(transport_epics_namespaceObject);\n__webpack_require__.d(transport_epics_namespaceObject, "initMatrixEpic", function() { return epics_initMatrixEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixShutdownEpic", function() { return epics_matrixShutdownEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMonitorPresenceEpic", function() { return epics_matrixMonitorPresenceEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixPresenceUpdateEpic", function() { return epics_matrixPresenceUpdateEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixCreateRoomEpic", function() { return epics_matrixCreateRoomEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixInviteEpic", function() { return epics_matrixInviteEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixHandleInvitesEpic", function() { return epics_matrixHandleInvitesEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixLeaveExcessRoomsEpic", function() { return epics_matrixLeaveExcessRoomsEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixLeaveUnknownRoomsEpic", function() { return epics_matrixLeaveUnknownRoomsEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixCleanLeftRoomsEpic", function() { return epics_matrixCleanLeftRoomsEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMessageSendEpic", function() { return epics_matrixMessageSendEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMessageGlobalSendEpic", function() { return epics_matrixMessageGlobalSendEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMessageReceivedEpic", function() { return epics_matrixMessageReceivedEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMessageReceivedUpdateRoomEpic", function() { return epics_matrixMessageReceivedUpdateRoomEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMonitorChannelPresenceEpic", function() { return epics_matrixMonitorChannelPresenceEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "deliveredEpic", function() { return epics_deliveredEpic; });\nvar transfers_epics_namespaceObject = {};\n__webpack_require__.r(transfers_epics_namespaceObject);\n__webpack_require__.d(transfers_epics_namespaceObject, "transferGenerateAndSignEnvelopeMessageEpic", function() { return epics_transferGenerateAndSignEnvelopeMessageEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSignedRetryMessageEpic", function() { return epics_transferSignedRetryMessageEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferUnlockedRetryMessageEpic", function() { return epics_transferUnlockedRetryMessageEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferExpiredRetryMessageEpic", function() { return epics_transferExpiredRetryMessageEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferAutoExpireEpic", function() { return epics_transferAutoExpireEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "initQueuePendingEnvelopeMessagesEpic", function() { return epics_initQueuePendingEnvelopeMessagesEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferProcessedReceivedEpic", function() { return epics_transferProcessedReceivedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSecretRequestedEpic", function() { return epics_transferSecretRequestedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSecretRevealEpic", function() { return epics_transferSecretRevealEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSecretRevealedEpic", function() { return epics_transferSecretRevealedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferUnlockProcessedReceivedEpic", function() { return epics_transferUnlockProcessedReceivedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferExpireProcessedEpic", function() { return epics_transferExpireProcessedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferChannelClosedEpic", function() { return epics_transferChannelClosedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferRefundedEpic", function() { return epics_transferRefundedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferReceivedReplyProcessedEpic", function() { return epics_transferReceivedReplyProcessedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "withdrawRequestReceivedEpic", function() { return epics_withdrawRequestReceivedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "withdrawSendConfirmationEpic", function() { return epics_withdrawSendConfirmationEpic; });\nvar path_epics_namespaceObject = {};\n__webpack_require__.r(path_epics_namespaceObject);\n__webpack_require__.d(path_epics_namespaceObject, "pathFindServiceEpic", function() { return epics_pathFindServiceEpic; });\n__webpack_require__.d(path_epics_namespaceObject, "pfsCapacityUpdateEpic", function() { return epics_pfsCapacityUpdateEpic; });\n__webpack_require__.d(path_epics_namespaceObject, "pfsServiceRegistryMonitorEpic", function() { return epics_pfsServiceRegistryMonitorEpic; });\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/io-ts/es6/index.js\nvar es6 = __webpack_require__("bef3");\n\n// EXTERNAL MODULE: ./node_modules/ethers/constants.js\nvar constants = __webpack_require__("8404");\n\n// EXTERNAL MODULE: ./node_modules/ethers/utils/index.js\nvar utils = __webpack_require__("6934");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/lodash/lodash.js\nvar lodash = __webpack_require__("9749");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/fp-ts/lib/Either.js\nvar Either = __webpack_require__("3498");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/io-ts/lib/ThrowReporter.js\nvar ThrowReporter = __webpack_require__("ffa9");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/types.js\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n\n/**\n * Decode/validate like codec.decode, but throw or return right instead of Either\n * TODO: add assert signature after TS 3.7\n *\n * @param codec - io-ts codec to be used for decoding/validation\n * @param data - data to decode/validate\n * @returns Decoded value of codec type\n */\n\nfunction decode(codec, data) {\n  var decoded = codec.decode(data); // report already throw, so the throw here is just for type narrowing in context\n\n  if (Object(Either["isLeft"])(decoded)) throw ThrowReporter["ThrowReporter"].report(decoded);\n  return decoded.right;\n}\n/**\n * Test for value\'s non-nulliness\n * Like lodash\'s negate(isNil), but also works as type guard (e.g. useful for filters)\n *\n * @param value - to be tested\n * @returns true if value is not null nor undefined\n */\n\nfunction isntNil(value) {\n  return value != null;\n}\n/**\n * Codec of ethers.utils.BigNumber objects\n *\n * Input can be anything bigNumberify-able: number, string, LosslessNumber or BigNumber\n * Output is string, so we can JSON-serialize with \'number\'s types bigger than JS VM limits\n * of ±2^53, as Raiden python client stdlib json encode longs as string.\n */\n\nvar BigNumberC = new es6["a" /* Type */](\'BigNumber\', utils["BigNumber"].isBigNumber, function (u, c) {\n  if (utils["BigNumber"].isBigNumber(u)) return es6["p" /* success */](u);\n\n  try {\n    // decode by trying to bigNumberify string representation of anything\n    return es6["p" /* success */](Object(utils["bigNumberify"])(u.toString()));\n  } catch (err) {\n    return es6["e" /* failure */](u, c, err.message);\n  }\n}, function (a) {\n  return a.toString();\n});\n/**\n * Helper function to create codecs to validate an arbitrary or variable-sized hex bytestring\n * A branded codec to indicate validated hex-strings\n *\n * @param size - Required number of bytes. Pass undefined or zero to have a variable-sized type\n * @returns branded codec for hex-encoded bytestrings\n */\n\nvar HexString = Object(lodash["memoize"])(function (size) {\n  return es6["d" /* brand */](es6["o" /* string */], function (n) {\n    return typeof n === \'string\' && (size ? Object(utils["hexDataLength"])(n) === size : Object(utils["isHexString"])(n));\n  }, \'HexString\');\n});\n/**\n * Helper function to create codecs to validate an arbitrary or variable-sized BigNumbers\n * A branded codec/type to indicate size-validated BigNumbers\n *\n * @param size - Required number of bytes. Pass undefined to have a variable-sized type\n * @returns branded codec for hex-encoded bytestrings\n */\n\nvar Int = Object(lodash["memoize"])(function (size) {\n  var min = size ? constants["Zero"].sub(constants["Two"].pow(size * 8 - 1)) : undefined,\n      max = size ? constants["Two"].pow(size * 8 - 1) : undefined;\n  return es6["d" /* brand */](BigNumberC, function (n) {\n    return BigNumberC.is(n) && (!min || !max || n.gte(min) && n.lt(max));\n  }, \'Int\');\n});\n/**\n * Helper function to create codecs to validate an arbitrary or variable-sized BigNumbers\n * A branded codec/type to indicate size-validated BigNumbers\n *\n * @param size - Required number of bytes. Pass undefined to have a variable-sized type\n * @returns branded codec for hex-encoded bytestrings\n */\n\nvar UInt = Object(lodash["memoize"])(function (size) {\n  var min = size ? constants["Zero"] : undefined,\n      max = size ? constants["Two"].pow(size * 8) : undefined;\n  return es6["d" /* brand */](BigNumberC, function (n) {\n    return BigNumberC.is(n) && (!min || !max || n.gte(min) && n.lt(max));\n  }, \'UInt\');\n}); // specific types\n// strig brand: ECDSA signature as an hex-string\n\nvar Signature = HexString(65); // string brand: 256-bit hash, usually keccak256 or sha256\n\nvar Hash = HexString(32); // string brand: a secret bytearray, non-sized\n\nvar Secret = HexString(); // string brand: ECDSA private key, 32 bytes\n\nvar PrivateKey = HexString(32); // string brand: checksummed address, 20 bytes\n\nvar Address = es6["d" /* brand */](HexString(20), function (u) {\n  try {\n    return typeof u === \'string\' && Object(utils["getAddress"])(u) === u;\n  } catch (e) {}\n\n  return false;\n}, // type guard for branded values\n\'Address\');\n/**\n * Helper function to create codecs to validate [timestamp, value] tuples\n *\n * @param codec - Codec to compose with a timestamp in a tuple\n * @returns Codec of a tuple of timestamp and codec type\n */\n\nvar Timed = Object(lodash["memoize"])(function (codec) {\n  return es6["q" /* tuple */]([es6["j" /* number */], codec]);\n});\n/**\n * Given a value of type T, returns a Timed<T> tuple with current time as first value\n *\n * @param v - Value to return with time\n * @returns Tuple of call timestamp as first elemtn and value passed as parameter as second\n */\n\nfunction timed(v) {\n  return [Date.now(), v];\n} // generic type codec for messages that must be signed\n// use it like: Codec = Signed(Message)\n// The t.TypeOf<typeof codec> will be Signed<Message>, defined later\n\nvar Signed = Object(lodash["memoize"])(function (codec) {\n  return es6["f" /* intersection */]([codec, es6["l" /* readonly */](es6["r" /* type */]({\n    signature: Signature\n  }))]);\n});\n// CONCATENATED MODULE: ../raiden-ts/dist/config.js\nvar _t$keyof;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n/**\n * A Raiden configuration object with required parameters and\n * optional parameters from [[PartialRaidenConfig]].\n *\n * - matrixServerLookup - Matrix server URL to fetch existing matrix servers from.\n *      After intializing a [[Raiden]] instance, the matrix server can\'t be changed later on.\n * - revealTimeout - Timeout for secrets to be revealed\n * - settleTimeout - Timeout for channels to be settled\n * - httpTimeout - Used in http fetch requests\n * - discoveryRoom - Discovery Room to auto-join, use null to disable\n * - pfsRoom - PFS Room to auto-join and send PFSCapacityUpdate to, use null to disable\n * - pfsSafetyMargin - Safety margin to be added to fees received from PFS. Use `1.1` to add a 10% safety margin.\n * - matrixExcessRooms - Keep this much rooms for a single user of interest (partner, target).\n *                       Leave LRU beyond this threshold.\n * - matrixServer? - Specify a matrix server to use.\n * - logger? - String specifying the console log level of redux-logger. Use \'\' to disable.\n *             Defaults to \'debug\' if undefined and process.env.NODE_ENV === \'development\'\n * - pfs - Path Finding Service URL or Address. Set to null to disable, or leave undefined to\n *             enable automatic fetching from ServiceRegistry.\n */\n\nvar RaidenConfig = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  matrixServerLookup: es6["o" /* string */],\n  revealTimeout: es6["j" /* number */],\n  settleTimeout: es6["j" /* number */],\n  httpTimeout: es6["j" /* number */],\n  discoveryRoom: es6["s" /* union */]([es6["o" /* string */], es6["i" /* null */]]),\n  pfsRoom: es6["s" /* union */]([es6["o" /* string */], es6["i" /* null */]]),\n  pfsSafetyMargin: es6["j" /* number */],\n  matrixExcessRooms: es6["j" /* number */]\n}), es6["k" /* partial */]({\n  matrixServer: es6["o" /* string */],\n  logger: es6["g" /* keyof */]((_t$keyof = {}, _defineProperty(_t$keyof, \'\', null), _defineProperty(_t$keyof, "trace", null), _defineProperty(_t$keyof, "debug", null), _defineProperty(_t$keyof, "info", null), _defineProperty(_t$keyof, "warn", null), _defineProperty(_t$keyof, "error", null), _t$keyof)),\n  pfs: es6["s" /* union */]([Address, es6["o" /* string */], es6["i" /* null */]])\n})]));\n/**\n * Create a RaidenConfig from some common options and an optional overwrites partial\n *\n * @param obj - Object containing common parameters for config\n * @param obj.network - ether\'s Network object for the current blockchain\n * @param overwrites - A partial object to overwrite top-level properties of the returned config\n * @returns A full config object\n */\n\nfunction makeDefaultConfig(_ref) {\n  var network = _ref.network;\n  var overwrites = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.assign({\n    matrixServerLookup: \'https://raw.githubusercontent.com/raiden-network/raiden-transport/master/known_servers.test.yaml\',\n    settleTimeout: 500,\n    revealTimeout: 50,\n    httpTimeout: 30e3,\n    discoveryRoom: "raiden_".concat(network.name !== \'unknown\' ? network.name : network.chainId, "_discovery"),\n    pfsRoom: "raiden_".concat(network.name !== \'unknown\' ? network.name : network.chainId, "_path_finding"),\n    matrixExcessRooms: 3,\n    pfsSafetyMargin: 1.0\n  }, overwrites);\n}\n// EXTERNAL MODULE: ./node_modules/ethers/utils/bytes.js\nvar bytes = __webpack_require__("948b");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/lossless-json/dist/lossless-json.js\nvar lossless_json = __webpack_require__("ad02");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/data.js\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n/**\n * Encode data to hex string of exactly length size (in bytes)\n * Throw if data can\'t be made to fit in length.\n *\n * @param data - May be of multiple types:\n *      - number|BigNumber: Encoded in the big-endian byte-order and left-zero-padded to length\n *      - string: Must be hex-encoded string of length bytes\n *      - number[] Must be of exactly of length size (left/right-pad it before if needed)\n * @param length - The expected length of the hex string, in bytes\n * @returns HexString byte-array of length\n */\n\nfunction encode(data, length) {\n  var hex;\n  if (typeof data === \'number\') data = Object(utils["bigNumberify"])(data);\n\n  if (BigNumberC.is(data)) {\n    if (data.lt(0)) throw new Error(\'Number is negative\');\n    if (data.gte(constants["Two"].pow(length * 8))) throw new Error(\'Number too large\');\n    hex = Object(bytes["hexZeroPad"])(Object(bytes["hexlify"])(data), length);\n  } else if (typeof data === \'string\' || Object(bytes["isArrayish"])(data)) {\n    var str = Object(bytes["hexlify"])(data);\n    if (Object(bytes["hexDataLength"])(str) !== length) throw new Error(\'Uint8Array or hex string must be of exact length\');\n    hex = str;\n  } else {\n    throw new Error(\'data is not a HexString or Uint8Array\');\n  }\n\n  return hex;\n}\n\nvar isLosslessNumber = function isLosslessNumber(u) {\n  return (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    u != null && u[\'isLosslessNumber\']\n  );\n};\n/**\n * Opportunistic JSON.parse regarding numbers\n * If possible to decode a JSON number as JS number (i.e. value < 2^53) and return \'number\',\n * otherwise returns BigNumber object\n * Throws if handled invalid JSON\n *\n * @param text - JSON string to parse\n * @returns Decoded object\n */\n\n\nfunction losslessParse(text) {\n  return lossless_json["parse"](text, function (_ref, value) {\n    _objectDestructuringEmpty(_ref);\n\n    if (isLosslessNumber(value)) {\n      try {\n        return value.valueOf(); // return number, if possible, or throw if > 2^53\n      } catch (e) {\n        // else, convert early to BigNumber\n        return Object(utils["bigNumberify"])(value.toString());\n      }\n    }\n\n    return value;\n  });\n}\n/**\n * Stringify object losslessly, by converting BigNumbers to \'string\'s\n *\n * @param value - Object to be serialized as a string\n * @param replacer - Replacer function. Leave default to stringify BigNumbers\n * @param space - indentation spaces\n * @returns serialized representation of value\n */\n\nfunction losslessStringify(value) {\n  var replacer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (_ref2, value) {\n    _objectDestructuringEmpty(_ref2);\n\n    return utils["BigNumber"].isBigNumber(value) ? value.toString() : value;\n  };\n  var space = arguments.length > 2 ? arguments[2] : undefined;\n  return lossless_json["stringify"](value, replacer, space);\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/types.js\n\n // Represents a HashTime-Locked amount in a channel\n\nvar Lock = es6["r" /* type */]({\n  amount: UInt(32),\n  expiration: UInt(32),\n  secrethash: Hash\n}, \'Lock\');\n/**\n * Balance Proof constructed from an EnvelopeMessage\n * Either produced by us or received from the partner, the BPs are generated from the messages\n * because BP signature requires the hash of the message, for authentication of data not included\n * nor relevant for the smartcontract/BP itself, but so for the peers (e.g. payment_id)\n */\n\nvar SignedBalanceProof = es6["r" /* type */]({\n  // channel data\n  chainId: UInt(32),\n  tokenNetworkAddress: Address,\n  channelId: UInt(32),\n  // balance proof data\n  nonce: UInt(8),\n  transferredAmount: UInt(32),\n  lockedAmount: UInt(32),\n  locksroot: Hash,\n  messageHash: Hash,\n  signature: Signature,\n  sender: Address\n});\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/state.js\n\n\n\nvar ChannelState;\n\n(function (ChannelState) {\n  ChannelState["opening"] = "opening";\n  ChannelState["open"] = "open";\n  ChannelState["closing"] = "closing";\n  ChannelState["closed"] = "closed";\n  ChannelState["settleable"] = "settleable";\n  ChannelState["settling"] = "settling";\n  ChannelState["settled"] = "settled";\n})(ChannelState || (ChannelState = {}));\n/**\n * Contains info of each side of a channel\n */\n\n\nvar ChannelEnd = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  deposit: UInt(32)\n}), es6["k" /* partial */]({\n  locks: es6["b" /* array */](Lock),\n  balanceProof: SignedBalanceProof,\n  withdraw: UInt(32)\n})]));\nvar Channel = es6["f" /* intersection */]([es6["l" /* readonly */](es6["r" /* type */]({\n  own: ChannelEnd,\n  partner: ChannelEnd\n})), es6["s" /* union */]([\n/* union of types with literals intersection allows narrowing other props presence. e.g.:\n * if (channel.state === ChannelState.open) {\n *   id = channel.id; // <- id can\'t be undefined\n *   closeBlock = channel.closeBlock; // error: closeBlock only exist on states closed|settling\n * }\n */\nes6["l" /* readonly */](es6["r" /* type */]({\n  state: es6["h" /* literal */](ChannelState.opening)\n})), es6["l" /* readonly */](es6["r" /* type */]({\n  state: es6["s" /* union */]([es6["h" /* literal */](ChannelState.open), es6["h" /* literal */](ChannelState.closing)]),\n  id: es6["j" /* number */],\n  settleTimeout: es6["j" /* number */],\n  openBlock: es6["j" /* number */],\n  isFirstParticipant: es6["c" /* boolean */]\n})), es6["l" /* readonly */](es6["r" /* type */]({\n  state: es6["s" /* union */]([es6["h" /* literal */](ChannelState.closed), es6["h" /* literal */](ChannelState.settleable), es6["h" /* literal */](ChannelState.settling)]),\n  id: es6["j" /* number */],\n  settleTimeout: es6["j" /* number */],\n  openBlock: es6["j" /* number */],\n  isFirstParticipant: es6["c" /* boolean */],\n  closeBlock: es6["j" /* number */]\n}))])]);\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/state.js\n\nvar RaidenMatrixSetup = es6["l" /* readonly */](es6["r" /* type */]({\n  userId: es6["o" /* string */],\n  accessToken: es6["o" /* string */],\n  deviceId: es6["o" /* string */],\n  displayName: es6["o" /* string */]\n}));\n// CONCATENATED MODULE: ../raiden-ts/dist/messages/types.js\n/* istanbul ignore file */\n\n/* eslint-disable @typescript-eslint/camelcase */\n\n/**\n * These io-ts codecs validate and decode JSON Raiden messages\n * They include BigNumber strings validation, enum validation (if needed), Address checksum\n * validation, etc, and converting everything to its respective object, where needed.\n */\n // import { ThrowReporter } from \'io-ts/lib/ThrowReporter\';\n\n\n // types\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType["DELIVERED"] = "Delivered";\n  MessageType["PROCESSED"] = "Processed";\n  MessageType["SECRET_REQUEST"] = "SecretRequest";\n  MessageType["SECRET_REVEAL"] = "RevealSecret";\n  MessageType["LOCKED_TRANSFER"] = "LockedTransfer";\n  MessageType["REFUND_TRANSFER"] = "RefundTransfer";\n  MessageType["UNLOCK"] = "Unlock";\n  MessageType["LOCK_EXPIRED"] = "LockExpired";\n  MessageType["TO_DEVICE"] = "ToDevice";\n  MessageType["WITHDRAW_REQUEST"] = "WithdrawRequest";\n  MessageType["WITHDRAW_CONFIRMATION"] = "WithdrawConfirmation";\n  MessageType["WITHDRAW_EXPIRED"] = "WithdrawExpired";\n  MessageType["PFS_CAPACITY_UPDATE"] = "PFSCapacityUpdate";\n})(MessageType || (MessageType = {})); // Mixin of a message that contains an identifier and should be ack\'ed with a respective Delivered\n\n\nvar RetrieableMessage = es6["l" /* readonly */](es6["r" /* type */]({\n  message_identifier: UInt(8)\n})); // Acknowledges to the sender that a RetrieableMessage was received\n\nvar Delivered = es6["l" /* readonly */](es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.DELIVERED),\n  delivered_message_identifier: UInt(8)\n})); // Confirms some message that required state validation was successfuly processed\n\nvar Processed = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.PROCESSED)\n}), RetrieableMessage])); // Requests the initiator to reveal the secret for a LockedTransfer targeted to us\n\nvar SecretRequest = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.SECRET_REQUEST),\n  payment_identifier: UInt(8),\n  secrethash: Hash,\n  amount: UInt(32),\n  expiration: UInt(32)\n}), RetrieableMessage])); // Reveal to the target or the previous hop a secret we just learned off-chain\n\nvar SecretReveal = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.SECRET_REVEAL),\n  secret: Secret\n}), RetrieableMessage])); // Mixin for messages containing a balance proof\n\nvar EnvelopeMessage = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  chain_id: UInt(32),\n  token_network_address: Address,\n  channel_identifier: UInt(32),\n  nonce: UInt(8),\n  transferred_amount: UInt(32),\n  locked_amount: UInt(32),\n  locksroot: Hash\n}), RetrieableMessage]));\nvar RouteMetadata = es6["l" /* readonly */](es6["r" /* type */]({\n  route: es6["m" /* readonlyArray */](Address)\n}));\nvar Metadata = es6["l" /* readonly */](es6["r" /* type */]({\n  routes: es6["m" /* readonlyArray */](RouteMetadata)\n})); // base for locked and refund transfer, they differentiate only on the type tag\n\nvar LockedTransferBase = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  payment_identifier: UInt(8),\n  token: Address,\n  recipient: Address,\n  lock: Lock,\n  target: Address,\n  initiator: Address,\n  metadata: Metadata\n}), EnvelopeMessage])); // a mediated transfer containing a locked amount\n\nvar LockedTransfer = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.LOCKED_TRANSFER)\n}), LockedTransferBase])); // if a mediated transfer didn\'t succeed, mediator can refund the amount with the same secrethash\n// so the previous hop can retry it with another neighbor\n\nvar RefundTransfer = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.REFUND_TRANSFER)\n}), LockedTransferBase])); // when the secret is revealed, unlock sends a new balance proof without the lock and increasing\n// the total transfered to finish the offchain transfer\n\nvar Unlock = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.UNLOCK),\n  payment_identifier: UInt(8),\n  secret: Secret\n}), EnvelopeMessage])); // after mediated transfer fails and the lock expire, clean it from the locks tree\n\nvar LockExpired = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.LOCK_EXPIRED),\n  recipient: Address,\n  secrethash: Hash\n}), EnvelopeMessage]));\nvar ToDevice = es6["l" /* readonly */](es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.TO_DEVICE),\n  message_identifier: UInt(8)\n}));\nvar WithdrawBase = es6["l" /* readonly */](es6["r" /* type */]({\n  chain_id: UInt(32),\n  token_network_address: Address,\n  channel_identifier: UInt(32),\n  participant: Address,\n  total_withdraw: UInt(32),\n  nonce: UInt(8),\n  expiration: UInt(32)\n}));\nvar WithdrawRequest = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.WITHDRAW_REQUEST)\n}), WithdrawBase, RetrieableMessage]));\nvar WithdrawConfirmation = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.WITHDRAW_CONFIRMATION)\n}), WithdrawBase, RetrieableMessage]));\nvar WithdrawExpired = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.WITHDRAW_EXPIRED)\n}), WithdrawBase, RetrieableMessage]));\nvar PFSCapacityUpdate = es6["l" /* readonly */](es6["r" /* type */]({\n  type: es6["h" /* literal */](MessageType.PFS_CAPACITY_UPDATE),\n  canonical_identifier: es6["l" /* readonly */](es6["r" /* type */]({\n    chain_identifier: UInt(32),\n    token_network_address: Address,\n    channel_identifier: UInt(32)\n  })),\n  updating_participant: Address,\n  other_participant: Address,\n  updating_nonce: UInt(8),\n  other_nonce: UInt(8),\n  updating_capacity: UInt(32),\n  other_capacity: UInt(32),\n  reveal_timeout: UInt(32)\n}));\nvar Message = es6["s" /* union */]([Delivered, Processed, SecretRequest, SecretReveal, LockedTransfer, RefundTransfer, Unlock, LockExpired, ToDevice, WithdrawRequest, WithdrawConfirmation, WithdrawExpired, PFSCapacityUpdate]);\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/state.js\n\n\n\n/**\n * This struct holds the relevant messages exchanged in a transfer\n * The transfer state is defined by the exchanged messages\n */\n\nvar SentTransfer = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  /** -> outgoing locked transfer */\n  transfer: Timed(Signed(LockedTransfer)),\n  fee: Int(32)\n}), es6["k" /* partial */]({\n  /** <- incoming processed for locked transfer */\n  transferProcessed: Timed(Signed(Processed)),\n\n  /**\n   * <- incoming refund transfer (if so)\n   * If this is set, transfer failed and partner tried refunding the transfer to us. We don\'t\n   * handle receiving transfers, but just store it here to mark this transfer as failed with a\n   * refund, until the lock expires normally\n   */\n  refund: Timed(Signed(RefundTransfer)),\n\n  /**\n   * !! channel was closed !!\n   * In the case a channel is closed (possibly middle transfer), this will be the txHash of the\n   * CloseChannel transaction. No further actions are possible after it\'s set.\n   */\n  channelClosed: Timed(Hash),\n\n  /**\n   * -> outgoing secret reveal to target\n   * If this is set, it means the secret was revealed (so transfer succeeded, even if it didn\'t\n   * complete yet)\n   */\n  secretReveal: Timed(Signed(SecretReveal)),\n\n  /**\n   * -> outgoing unlock to recipient\n   * If this is set, it means the Unlock was sent (even if partner didn\'t acknowledge it yet)\n   */\n  unlock: Timed(Signed(Unlock)),\n\n  /**\n   * -> outgoing lock expired (if so)\n   * If this is set, transfer failed, and we expired the lock (retrieving the locked amount).\n   * Transfer failed may not have completed yet, e.g. waiting for LockExpired\'s Processed reply\n   */\n  lockExpired: Timed(Signed(LockExpired)),\n\n  /**\n   * <- incoming processed for Unlock message\n   * If this is set, the protocol completed by the transfer succeeding and partner\n   * acknowledging validity of our off-chain unlock\n   */\n  unlockProcessed: Timed(Signed(Processed)),\n\n  /**\n   * <- incoming processed for LockExpired message\n   * If this is set, the protocol completed by the transfer failing and partner acknowledging\n   * this transfer can\'t be claimed anymore\n   */\n  lockExpiredProcessed: Timed(Signed(Processed))\n})]));\n/**\n * Mapping of outgoing transfers, indexed by the secrethash\n */\n\nvar SentTransfers = es6["l" /* readonly */](es6["n" /* record */](es6["o" /* string */]\n/* secrethash: Hash */\n, SentTransfer));\nvar RaidenSentTransferStatus;\n\n(function (RaidenSentTransferStatus) {\n  RaidenSentTransferStatus["pending"] = "PENDING";\n  RaidenSentTransferStatus["received"] = "RECEIVED";\n  RaidenSentTransferStatus["refunded"] = "REFUNDED";\n  RaidenSentTransferStatus["closed"] = "CLOSED";\n  RaidenSentTransferStatus["revealed"] = "REVEALED";\n  RaidenSentTransferStatus["unlocking"] = "UNLOCKING";\n  RaidenSentTransferStatus["expiring"] = "EXPIRING";\n  RaidenSentTransferStatus["unlocked"] = "UNLOCKED";\n  RaidenSentTransferStatus["expired"] = "EXPIRED";\n})(RaidenSentTransferStatus || (RaidenSentTransferStatus = {}));\n// CONCATENATED MODULE: ../raiden-ts/dist/path/types.js\n\n\n/**\n * Codec for PFS API returned data\n */\n\nvar PathResults = es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n  result: es6["b" /* array */](es6["l" /* readonly */](es6["r" /* type */]({\n    path: es6["m" /* readonlyArray */](Address),\n\n    /* eslint-disable-next-line @typescript-eslint/camelcase */\n    estimated_fee: Int(32)\n  })))\n}), es6["k" /* partial */]({\n  /* eslint-disable-next-line @typescript-eslint/camelcase */\n  feedback_token: es6["o" /* string */]\n})]));\n/**\n * Codec for raiden-ts internal representation of a PFS result/routes\n */\n\nvar Paths = es6["b" /* array */](es6["l" /* readonly */](es6["r" /* type */]({\n  path: es6["m" /* readonlyArray */](Address),\n  fee: Int(32)\n})));\n/**\n * A PFS server/service instance info\n */\n\nvar PFS = es6["l" /* readonly */](es6["r" /* type */]({\n  address: Address,\n  url: es6["o" /* string */],\n  rtt: es6["j" /* number */],\n  price: UInt(32),\n  token: Address\n}));\n/**\n * An IOU used to pay the services\n */\n\nvar IOU = es6["l" /* readonly */](es6["r" /* type */]({\n  sender: Address,\n  receiver: Address,\n  amount: UInt(32),\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  expiration_block: UInt(32),\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  one_to_n_address: Address,\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  chain_id: UInt(32)\n}));\nvar LastIOUResults = es6["l" /* readonly */](es6["r" /* type */]({\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  last_iou: Signed(IOU)\n}));\n// CONCATENATED MODULE: ../raiden-ts/dist/state.js\n\n\n\n\n\n\n\n\n\n // types\n\nvar RaidenState = es6["l" /* readonly */](es6["r" /* type */]({\n  address: Address,\n  chainId: es6["j" /* number */],\n  registry: Address,\n  blockNumber: es6["j" /* number */],\n  config: RaidenConfig,\n  channels: es6["l" /* readonly */](es6["n" /* record */](es6["o" /* string */]\n  /* tokenNetwork: Address */\n  , es6["l" /* readonly */](es6["n" /* record */](es6["o" /* string */]\n  /* partner: Address */\n  , Channel)))),\n  tokens: es6["l" /* readonly */](es6["n" /* record */](es6["o" /* string */]\n  /* token: Address */\n  , Address)),\n  transport: es6["l" /* readonly */](es6["k" /* partial */]({\n    matrix: es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n      server: es6["o" /* string */]\n    }), es6["k" /* partial */]({\n      setup: RaidenMatrixSetup,\n      rooms: es6["l" /* readonly */](es6["n" /* record */](es6["o" /* string */]\n      /* partner: Address */\n      , es6["b" /* array */](es6["o" /* string */])))\n    })]))\n  })),\n  secrets: es6["l" /* readonly */](es6["n" /* record */](es6["o" /* string */]\n  /* secrethash: Hash */\n  , es6["l" /* readonly */](es6["f" /* intersection */]([es6["r" /* type */]({\n    secret: Secret\n  }), es6["k" /* partial */]({\n    registerBlock: es6["j" /* number */]\n  })])))),\n  sent: SentTransfers,\n  path: es6["r" /* type */]({\n    iou: es6["l" /* readonly */](es6["n" /* record */](es6["o" /* string */]\n    /* tokenNetwork: Address */\n    , es6["n" /* record */](es6["o" /* string */]\n    /* service: Address */\n    , Signed(IOU))))\n  })\n})); // helpers, utils & constants\n\n/**\n * Encode RaidenState to a JSON string\n * For Raiden client compliance, this JSON encodes BigNumbers as \'number\' (using lossless-json lib)\n * which is valid json though not very common as common JS implementations lose precision when\n * decoding through JSON.parse. This is solved in SDK by both encoding and decoding BigNumbers\n * using lossless-json, without going through the intermediary JS-number form.\n *\n * @param state - RaidenState object\n * @returns JSON encoded string\n */\n\nfunction encodeRaidenState(state) {\n  return losslessStringify(RaidenState.encode(state), undefined, 2);\n}\n/**\n * Try to decode any data as a RaidenState.\n * If handled a string, will parse it with lossless-json, to preserve BigNumbers encoded as JSON\n * \'number\'.\n *\n * @param data - string | any which may be decoded as RaidenState\n * @returns RaidenState parsed and validated\n */\n\nfunction decodeRaidenState(data) {\n  if (typeof data === \'string\') data = losslessParse(data);\n  return decode(RaidenState, data);\n}\n/**\n * Create an initial RaidenState from common parameters (including default config)\n *\n * @param obj - Object containing common parameters for state\n * @param obj.network - ether\'s Network object for the current blockchain\n * @param obj.address - current account\'s address\n * @param overwrites - A partial object to overwrite top-level properties of the returned config\n * @returns A full config object\n */\n\nfunction makeInitialState(_ref) {\n  var network = _ref.network,\n      address = _ref.address,\n      contractsInfo = _ref.contractsInfo;\n  var overwrites = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    address: address,\n    chainId: network.chainId,\n    registry: contractsInfo.TokenNetworkRegistry.address,\n    blockNumber: contractsInfo.TokenNetworkRegistry.block_number || 0,\n    config: makeDefaultConfig({\n      network: network\n    }, overwrites.config),\n    channels: {},\n    tokens: {},\n    transport: {},\n    secrets: {},\n    sent: {},\n    path: {\n      iou: {}\n    }\n  };\n}\n/**\n * state constant used as default state reducer parameter only.\n * To build an actual initial state at runtime, use [[makeInitialState]] instead.\n */\n\nvar initialState = makeInitialState({\n  network: Object(utils["getNetwork"])(\'unspecified\'),\n  address: constants["AddressZero"],\n  contractsInfo: {\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    TokenNetworkRegistry: {\n      address: constants["AddressZero"],\n      block_number: 0\n    },\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    ServiceRegistry: {\n      address: constants["AddressZero"],\n      block_number: 0\n    },\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    UserDeposit: {\n      address: constants["AddressZero"],\n      block_number: 0\n    }\n  }\n});\n// CONCATENATED MODULE: ../raiden-ts/dist/constants.js\n\nvar SignatureZero = Object(utils["padZeros"])([], 65);\nvar ShutdownReason;\n\n(function (ShutdownReason) {\n  ShutdownReason["STOP"] = "raidenStopped";\n  ShutdownReason["ACCOUNT_CHANGED"] = "providerAccountChanged";\n  ShutdownReason["NETWORK_CHANGED"] = "providerNetworkChanged";\n})(ShutdownReason || (ShutdownReason = {}));\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__("a34a");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// EXTERNAL MODULE: ./node_modules/ethers/dist/ethers.min.js\nvar ethers_min = __webpack_require__("e7ea");\n\n// EXTERNAL MODULE: ./node_modules/ethers/wallet.js\nvar wallet = __webpack_require__("ddfd");\n\n// EXTERNAL MODULE: ./node_modules/ethers/providers/index.js\nvar providers = __webpack_require__("686e");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/redux/es/redux.js\nvar redux = __webpack_require__("7508");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/redux-observable/lib/esm/createEpicMiddleware.js + 9 modules\nvar createEpicMiddleware = __webpack_require__("733d");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/typesafe-actions/dist/typesafe-actions.umd.production.js\nvar typesafe_actions_umd_production = __webpack_require__("7442");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/redux-logger/dist/redux-logger.js\nvar redux_logger = __webpack_require__("371e");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/BehaviorSubject.js\nvar BehaviorSubject = __webpack_require__("ff97");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/Subject.js\nvar Subject = __webpack_require__("6aa5");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/from.js + 6 modules\nvar from = __webpack_require__("eec8");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/ReplaySubject.js\nvar ReplaySubject = __webpack_require__("6292");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/AsyncSubject.js\nvar AsyncSubject = __webpack_require__("a1c0");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/merge.js\nvar merge = __webpack_require__("649d");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/defer.js\nvar defer = __webpack_require__("06d2");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/empty.js\nvar empty = __webpack_require__("5580");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/map.js\nvar map = __webpack_require__("f791");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/pluck.js\nvar pluck = __webpack_require__("891b");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js\nvar distinctUntilChanged = __webpack_require__("e102");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/concatMap.js\nvar concatMap = __webpack_require__("7fdb");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/scan.js\nvar scan = __webpack_require__("ac72");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/filter.js\nvar filter = __webpack_require__("3a71");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/first.js\nvar first = __webpack_require__("7b32");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/mergeMap.js\nvar mergeMap = __webpack_require__("446c");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/isomorphic-fetch/fetch-npm-browserify.js\nvar fetch_npm_browserify = __webpack_require__("86ae");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/abort-controller/polyfill.mjs + 2 modules\nvar polyfill = __webpack_require__("fa1e");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/polyfills.js\n\n\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/TokenNetworkRegistryFactory.ts\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar TokenNetworkRegistryFactory_TokenNetworkRegistryFactory =\n/*#__PURE__*/\nfunction () {\n  function TokenNetworkRegistryFactory() {\n    _classCallCheck(this, TokenNetworkRegistryFactory);\n  }\n\n  _createClass(TokenNetworkRegistryFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, _abi, signerOrProvider);\n    }\n  }]);\n\n  return TokenNetworkRegistryFactory;\n}();\nvar _abi = [{\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "address"\n  }],\n  name: "token_to_token_networks",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "settlement_timeout_max",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "deprecation_executor",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "chain_id",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "contract_address",\n    type: "address"\n  }],\n  name: "contractExists",\n  outputs: [{\n    name: "",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "max_token_networks",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "token_network_created",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "settlement_timeout_min",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_token_address",\n    type: "address"\n  }, {\n    name: "_channel_participant_deposit_limit",\n    type: "uint256"\n  }, {\n    name: "_token_network_deposit_limit",\n    type: "uint256"\n  }],\n  name: "createERC20TokenNetwork",\n  outputs: [{\n    name: "token_network_address",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "secret_registry_address",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    name: "_secret_registry_address",\n    type: "address"\n  }, {\n    name: "_chain_id",\n    type: "uint256"\n  }, {\n    name: "_settlement_timeout_min",\n    type: "uint256"\n  }, {\n    name: "_settlement_timeout_max",\n    type: "uint256"\n  }, {\n    name: "_max_token_networks",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "token_address",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "token_network_address",\n    type: "address"\n  }],\n  name: "TokenNetworkCreated",\n  type: "event"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/TokenNetworkFactory.ts\nfunction TokenNetworkFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction TokenNetworkFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TokenNetworkFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) TokenNetworkFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) TokenNetworkFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar TokenNetworkFactory_TokenNetworkFactory =\n/*#__PURE__*/\nfunction () {\n  function TokenNetworkFactory() {\n    TokenNetworkFactory_classCallCheck(this, TokenNetworkFactory);\n  }\n\n  TokenNetworkFactory_createClass(TokenNetworkFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, TokenNetworkFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return TokenNetworkFactory;\n}();\nvar TokenNetworkFactory_abi = [{\n  constant: false,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "receiver",\n    type: "address"\n  }, {\n    name: "sender",\n    type: "address"\n  }, {\n    name: "locks",\n    type: "bytes"\n  }],\n  name: "unlock",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "participant1",\n    type: "address"\n  }, {\n    name: "participant2",\n    type: "address"\n  }, {\n    name: "settle_timeout",\n    type: "uint256"\n  }],\n  name: "openChannel",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [],\n  name: "deprecate",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "settlement_timeout_max",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "deprecation_executor",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "secret_registry",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "chain_id",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "token_network_deposit_limit",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "bytes32"\n  }],\n  name: "participants_hash_to_channel_identifier",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "channel_participant_deposit_limit",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "participant",\n    type: "address"\n  }, {\n    name: "total_deposit",\n    type: "uint256"\n  }, {\n    name: "partner",\n    type: "address"\n  }],\n  name: "setTotalDeposit",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "channel_counter",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "MAX_SAFE_UINT256",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "contract_address",\n    type: "address"\n  }],\n  name: "contractExists",\n  outputs: [{\n    name: "",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "participant",\n    type: "address"\n  }, {\n    name: "partner",\n    type: "address"\n  }],\n  name: "getParticipantsHash",\n  outputs: [{\n    name: "",\n    type: "bytes32"\n  }],\n  payable: false,\n  stateMutability: "pure",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "non_closing_participant",\n    type: "address"\n  }, {\n    name: "closing_participant",\n    type: "address"\n  }, {\n    name: "balance_hash",\n    type: "bytes32"\n  }, {\n    name: "nonce",\n    type: "uint256"\n  }, {\n    name: "additional_hash",\n    type: "bytes32"\n  }, {\n    name: "non_closing_signature",\n    type: "bytes"\n  }, {\n    name: "closing_signature",\n    type: "bytes"\n  }],\n  name: "closeChannel",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "participant1",\n    type: "address"\n  }, {\n    name: "participant2",\n    type: "address"\n  }],\n  name: "getChannelInfo",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }, {\n    name: "",\n    type: "uint8"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "signature_prefix",\n  outputs: [{\n    name: "",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "participant",\n    type: "address"\n  }, {\n    name: "partner",\n    type: "address"\n  }],\n  name: "getChannelIdentifier",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "participant1",\n    type: "address"\n  }, {\n    name: "participant1_transferred_amount",\n    type: "uint256"\n  }, {\n    name: "participant1_locked_amount",\n    type: "uint256"\n  }, {\n    name: "participant1_locksroot",\n    type: "bytes32"\n  }, {\n    name: "participant2",\n    type: "address"\n  }, {\n    name: "participant2_transferred_amount",\n    type: "uint256"\n  }, {\n    name: "participant2_locked_amount",\n    type: "uint256"\n  }, {\n    name: "participant2_locksroot",\n    type: "bytes32"\n  }],\n  name: "settleChannel",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "participant",\n    type: "address"\n  }, {\n    name: "total_withdraw",\n    type: "uint256"\n  }, {\n    name: "expiration_block",\n    type: "uint256"\n  }, {\n    name: "participant_signature",\n    type: "bytes"\n  }, {\n    name: "partner_signature",\n    type: "bytes"\n  }],\n  name: "setTotalWithdraw",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "safety_deprecation_switch",\n  outputs: [{\n    name: "",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "settlement_timeout_min",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  name: "channels",\n  outputs: [{\n    name: "settle_block_number",\n    type: "uint256"\n  }, {\n    name: "state",\n    type: "uint8"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "participant",\n    type: "address"\n  }, {\n    name: "partner",\n    type: "address"\n  }],\n  name: "getChannelParticipantInfo",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }, {\n    name: "",\n    type: "uint256"\n  }, {\n    name: "",\n    type: "bool"\n  }, {\n    name: "",\n    type: "bytes32"\n  }, {\n    name: "",\n    type: "uint256"\n  }, {\n    name: "",\n    type: "bytes32"\n  }, {\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "closing_participant",\n    type: "address"\n  }, {\n    name: "non_closing_participant",\n    type: "address"\n  }, {\n    name: "balance_hash",\n    type: "bytes32"\n  }, {\n    name: "nonce",\n    type: "uint256"\n  }, {\n    name: "additional_hash",\n    type: "bytes32"\n  }, {\n    name: "closing_signature",\n    type: "bytes"\n  }, {\n    name: "non_closing_signature",\n    type: "bytes"\n  }],\n  name: "updateNonClosingBalanceProof",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "token",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    name: "sender",\n    type: "address"\n  }, {\n    name: "receiver",\n    type: "address"\n  }],\n  name: "getUnlockIdentifier",\n  outputs: [{\n    name: "",\n    type: "bytes32"\n  }],\n  payable: false,\n  stateMutability: "pure",\n  type: "function"\n}, {\n  inputs: [{\n    name: "_token_address",\n    type: "address"\n  }, {\n    name: "_secret_registry",\n    type: "address"\n  }, {\n    name: "_chain_id",\n    type: "uint256"\n  }, {\n    name: "_settlement_timeout_min",\n    type: "uint256"\n  }, {\n    name: "_settlement_timeout_max",\n    type: "uint256"\n  }, {\n    name: "_deprecation_executor",\n    type: "address"\n  }, {\n    name: "_channel_participant_deposit_limit",\n    type: "uint256"\n  }, {\n    name: "_token_network_deposit_limit",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    name: "participant1",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "participant2",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "settle_timeout",\n    type: "uint256"\n  }],\n  name: "ChannelOpened",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    name: "participant",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "total_deposit",\n    type: "uint256"\n  }],\n  name: "ChannelNewDeposit",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: false,\n    name: "new_value",\n    type: "bool"\n  }],\n  name: "DeprecationSwitch",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    name: "participant",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "total_withdraw",\n    type: "uint256"\n  }],\n  name: "ChannelWithdraw",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    name: "closing_participant",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "nonce",\n    type: "uint256"\n  }, {\n    indexed: false,\n    name: "balance_hash",\n    type: "bytes32"\n  }],\n  name: "ChannelClosed",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    name: "receiver",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "sender",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "locksroot",\n    type: "bytes32"\n  }, {\n    indexed: false,\n    name: "unlocked_amount",\n    type: "uint256"\n  }, {\n    indexed: false,\n    name: "returned_tokens",\n    type: "uint256"\n  }],\n  name: "ChannelUnlocked",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    name: "closing_participant",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "nonce",\n    type: "uint256"\n  }, {\n    indexed: false,\n    name: "balance_hash",\n    type: "bytes32"\n  }],\n  name: "NonClosingBalanceProofUpdated",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: false,\n    name: "participant1_amount",\n    type: "uint256"\n  }, {\n    indexed: false,\n    name: "participant1_locksroot",\n    type: "bytes32"\n  }, {\n    indexed: false,\n    name: "participant2_amount",\n    type: "uint256"\n  }, {\n    indexed: false,\n    name: "participant2_locksroot",\n    type: "bytes32"\n  }],\n  name: "ChannelSettled",\n  type: "event"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/HumanStandardTokenFactory.ts\nfunction HumanStandardTokenFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction HumanStandardTokenFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HumanStandardTokenFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) HumanStandardTokenFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) HumanStandardTokenFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar HumanStandardTokenFactory_HumanStandardTokenFactory =\n/*#__PURE__*/\nfunction () {\n  function HumanStandardTokenFactory() {\n    HumanStandardTokenFactory_classCallCheck(this, HumanStandardTokenFactory);\n  }\n\n  HumanStandardTokenFactory_createClass(HumanStandardTokenFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, HumanStandardTokenFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return HumanStandardTokenFactory;\n}();\nvar HumanStandardTokenFactory_abi = [{\n  constant: true,\n  inputs: [],\n  name: "name",\n  outputs: [{\n    name: "",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_spender",\n    type: "address"\n  }, {\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "approve",\n  outputs: [{\n    name: "success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "totalSupply",\n  outputs: [{\n    name: "supply",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_from",\n    type: "address"\n  }, {\n    name: "_to",\n    type: "address"\n  }, {\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "transferFrom",\n  outputs: [{\n    name: "success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "address"\n  }],\n  name: "balances",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "decimals",\n  outputs: [{\n    name: "decimals",\n    type: "uint8"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "_decimals",\n  outputs: [{\n    name: "",\n    type: "uint8"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "version",\n  outputs: [{\n    name: "",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "_owner",\n    type: "address"\n  }],\n  name: "balanceOf",\n  outputs: [{\n    name: "balance",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "symbol",\n  outputs: [{\n    name: "",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_to",\n    type: "address"\n  }, {\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "transfer",\n  outputs: [{\n    name: "success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_spender",\n    type: "address"\n  }, {\n    name: "_value",\n    type: "uint256"\n  }, {\n    name: "_extraData",\n    type: "bytes"\n  }],\n  name: "approveAndCall",\n  outputs: [{\n    name: "success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "_owner",\n    type: "address"\n  }, {\n    name: "_spender",\n    type: "address"\n  }],\n  name: "allowance",\n  outputs: [{\n    name: "remaining",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    name: "_initialAmount",\n    type: "uint256"\n  }, {\n    name: "_decimalUnits",\n    type: "uint8"\n  }, {\n    name: "_tokenName",\n    type: "string"\n  }, {\n    name: "_tokenSymbol",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "fallback"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "_from",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "_to",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "Transfer",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "_owner",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "_spender",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "Approval",\n  type: "event"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/ServiceRegistryFactory.ts\nfunction ServiceRegistryFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ServiceRegistryFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ServiceRegistryFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) ServiceRegistryFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) ServiceRegistryFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar ServiceRegistryFactory_ServiceRegistryFactory =\n/*#__PURE__*/\nfunction () {\n  function ServiceRegistryFactory() {\n    ServiceRegistryFactory_classCallCheck(this, ServiceRegistryFactory);\n  }\n\n  ServiceRegistryFactory_createClass(ServiceRegistryFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, ServiceRegistryFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return ServiceRegistryFactory;\n}();\nvar ServiceRegistryFactory_abi = [{\n  constant: true,\n  inputs: [],\n  name: "price_bump_denominator",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "deprecated",\n  outputs: [{\n    name: "",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "set_price",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "_set_price",\n    type: "uint256"\n  }, {\n    name: "_seconds_passed",\n    type: "uint256"\n  }],\n  name: "decayedPrice",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_price_bump_numerator",\n    type: "uint256"\n  }, {\n    name: "_price_bump_denominator",\n    type: "uint256"\n  }, {\n    name: "_decay_constant",\n    type: "uint256"\n  }, {\n    name: "_min_price",\n    type: "uint256"\n  }, {\n    name: "_registration_duration",\n    type: "uint256"\n  }],\n  name: "changeParameters",\n  outputs: [{\n    name: "_success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "set_price_at",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "everMadeDepositsLen",\n  outputs: [{\n    name: "_len",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "contract_address",\n    type: "address"\n  }],\n  name: "contractExists",\n  outputs: [{\n    name: "",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "new_url",\n    type: "string"\n  }],\n  name: "setURL",\n  outputs: [{\n    name: "_success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "decay_constant",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "address"\n  }],\n  name: "service_valid_till",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "currentPrice",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "registration_duration",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  name: "ever_made_deposits",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_limit_amount",\n    type: "uint256"\n  }],\n  name: "deposit",\n  outputs: [{\n    name: "_success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [],\n  name: "setDeprecationSwitch",\n  outputs: [{\n    name: "_success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "min_price",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "address"\n  }],\n  name: "urls",\n  outputs: [{\n    name: "",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "_address",\n    type: "address"\n  }],\n  name: "hasValidRegistration",\n  outputs: [{\n    name: "_has_registration",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "controller",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "token",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "price_bump_numerator",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    name: "_token_for_registration",\n    type: "address"\n  }, {\n    name: "_controller",\n    type: "address"\n  }, {\n    name: "_initial_price",\n    type: "uint256"\n  }, {\n    name: "_price_bump_numerator",\n    type: "uint256"\n  }, {\n    name: "_price_bump_denominator",\n    type: "uint256"\n  }, {\n    name: "_decay_constant",\n    type: "uint256"\n  }, {\n    name: "_min_price",\n    type: "uint256"\n  }, {\n    name: "_registration_duration",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "service",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "valid_till",\n    type: "uint256"\n  }, {\n    indexed: false,\n    name: "deposit_amount",\n    type: "uint256"\n  }, {\n    indexed: false,\n    name: "deposit_contract",\n    type: "address"\n  }],\n  name: "RegisteredService",\n  type: "event"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/CustomTokenFactory.ts\nfunction CustomTokenFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction CustomTokenFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction CustomTokenFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) CustomTokenFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) CustomTokenFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar CustomTokenFactory_CustomTokenFactory =\n/*#__PURE__*/\nfunction () {\n  function CustomTokenFactory() {\n    CustomTokenFactory_classCallCheck(this, CustomTokenFactory);\n  }\n\n  CustomTokenFactory_createClass(CustomTokenFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, CustomTokenFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return CustomTokenFactory;\n}();\nvar CustomTokenFactory_abi = [{\n  constant: true,\n  inputs: [],\n  name: "name",\n  outputs: [{\n    name: "",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_spender",\n    type: "address"\n  }, {\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "approve",\n  outputs: [{\n    name: "success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "totalSupply",\n  outputs: [{\n    name: "supply",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "multiplier",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_from",\n    type: "address"\n  }, {\n    name: "_to",\n    type: "address"\n  }, {\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "transferFrom",\n  outputs: [{\n    name: "success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "address"\n  }],\n  name: "balances",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "decimals",\n  outputs: [{\n    name: "decimals",\n    type: "uint8"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "_decimals",\n  outputs: [{\n    name: "",\n    type: "uint8"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [],\n  name: "transferFunds",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "version",\n  outputs: [{\n    name: "",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "_owner",\n    type: "address"\n  }],\n  name: "balanceOf",\n  outputs: [{\n    name: "balance",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "owner_address",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "symbol",\n  outputs: [{\n    name: "",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "num",\n    type: "uint256"\n  }],\n  name: "mint",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_to",\n    type: "address"\n  }, {\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "transfer",\n  outputs: [{\n    name: "success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "num",\n    type: "uint256"\n  }, {\n    name: "target",\n    type: "address"\n  }],\n  name: "mintFor",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "_owner",\n    type: "address"\n  }, {\n    name: "_spender",\n    type: "address"\n  }],\n  name: "allowance",\n  outputs: [{\n    name: "remaining",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    name: "initial_supply",\n    type: "uint256"\n  }, {\n    name: "decimal_units",\n    type: "uint8"\n  }, {\n    name: "token_name",\n    type: "string"\n  }, {\n    name: "token_symbol",\n    type: "string"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "_to",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "_num",\n    type: "uint256"\n  }],\n  name: "Minted",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "_from",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "_to",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "Transfer",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "_owner",\n    type: "address"\n  }, {\n    indexed: true,\n    name: "_spender",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "Approval",\n  type: "event"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/UserDepositFactory.ts\nfunction UserDepositFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction UserDepositFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction UserDepositFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) UserDepositFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) UserDepositFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar UserDepositFactory_UserDepositFactory =\n/*#__PURE__*/\nfunction () {\n  function UserDepositFactory() {\n    UserDepositFactory_classCallCheck(this, UserDepositFactory);\n  }\n\n  UserDepositFactory_createClass(UserDepositFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, UserDepositFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return UserDepositFactory;\n}();\nvar UserDepositFactory_abi = [{\n  constant: false,\n  inputs: [{\n    name: "amount",\n    type: "uint256"\n  }],\n  name: "planWithdraw",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "owner",\n    type: "address"\n  }],\n  name: "effectiveBalance",\n  outputs: [{\n    name: "remaining_balance",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "withdraw_delay",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "address"\n  }],\n  name: "balances",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "amount",\n    type: "uint256"\n  }],\n  name: "withdraw",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "address"\n  }],\n  name: "withdraw_plans",\n  outputs: [{\n    name: "amount",\n    type: "uint256"\n  }, {\n    name: "withdraw_block",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "beneficiary",\n    type: "address"\n  }, {\n    name: "new_total_deposit",\n    type: "uint256"\n  }],\n  name: "deposit",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "contract_address",\n    type: "address"\n  }],\n  name: "contractExists",\n  outputs: [{\n    name: "",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "whole_balance",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "one_to_n_address",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "sender",\n    type: "address"\n  }, {\n    name: "receiver",\n    type: "address"\n  }, {\n    name: "amount",\n    type: "uint256"\n  }],\n  name: "transfer",\n  outputs: [{\n    name: "success",\n    type: "bool"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "msc_address",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [{\n    name: "",\n    type: "address"\n  }],\n  name: "total_deposit",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "whole_balance_limit",\n  outputs: [{\n    name: "",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  constant: false,\n  inputs: [{\n    name: "_msc_address",\n    type: "address"\n  }, {\n    name: "_one_to_n_address",\n    type: "address"\n  }],\n  name: "init",\n  outputs: [],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  constant: true,\n  inputs: [],\n  name: "token",\n  outputs: [{\n    name: "",\n    type: "address"\n  }],\n  payable: false,\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    name: "_token_address",\n    type: "address"\n  }, {\n    name: "_whole_balance_limit",\n    type: "uint256"\n  }],\n  payable: false,\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "owner",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "newBalance",\n    type: "uint256"\n  }],\n  name: "BalanceReduced",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: "withdrawer",\n    type: "address"\n  }, {\n    indexed: false,\n    name: "plannedBalance",\n    type: "uint256"\n  }],\n  name: "WithdrawPlanned",\n  type: "event"\n}];\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_ropsten.json\nvar deployment_ropsten = __webpack_require__("a0df");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_rinkeby.json\nvar deployment_rinkeby = __webpack_require__("31a7");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_goerli.json\nvar deployment_goerli = __webpack_require__("c998");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_services_ropsten.json\nvar deployment_services_ropsten = __webpack_require__("b4cc");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_services_rinkeby.json\nvar deployment_services_rinkeby = __webpack_require__("0ff6");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_services_goerli.json\nvar deployment_services_goerli = __webpack_require__("4e0b");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/utils.js\n\n\n/**\n * Calculates and returns partial and total amounts of given channel state\n *\n * @param channel - A Channel state to calculate amounts from\n * @returns An object holding own&partner\'s deposit, withdraw, transferred, locked, balance and\n *          capacity.\n */\n\nfunction channelAmounts(channel) {\n  var Zero32 = constants["Zero"];\n  if (channel.state !== ChannelState.open) return {\n    ownDeposit: Zero32,\n    ownWithdraw: Zero32,\n    ownTransferred: Zero32,\n    ownLocked: Zero32,\n    ownBalance: Zero32,\n    ownCapacity: Zero32,\n    partnerDeposit: Zero32,\n    partnerWithdraw: Zero32,\n    partnerTransferred: Zero32,\n    partnerLocked: Zero32,\n    partnerBalance: Zero32,\n    partnerCapacity: Zero32\n  };\n  var ownWithdraw = channel.own.withdraw || Zero32,\n      partnerWithdraw = channel.partner.withdraw || Zero32,\n      ownTransferred = channel.own.balanceProof ? channel.own.balanceProof.transferredAmount : Zero32,\n      partnerTransferred = channel.partner.balanceProof ? channel.partner.balanceProof.transferredAmount : Zero32,\n      ownLocked = channel.own.balanceProof ? channel.own.balanceProof.lockedAmount : Zero32,\n      partnerLocked = channel.partner.balanceProof ? channel.partner.balanceProof.lockedAmount : Zero32,\n      ownBalance = partnerTransferred.sub(ownTransferred),\n      partnerBalance = ownTransferred.sub(partnerTransferred),\n      // == -ownBalance\n  ownCapacity = channel.own.deposit.sub(ownWithdraw).sub(ownLocked).add(ownBalance),\n      partnerCapacity = channel.partner.deposit.sub(partnerWithdraw).sub(partnerLocked).add(partnerBalance);\n  return {\n    ownDeposit: channel.own.deposit,\n    ownWithdraw: ownWithdraw,\n    ownTransferred: ownTransferred,\n    ownLocked: ownLocked,\n    ownBalance: ownBalance,\n    ownCapacity: ownCapacity,\n    partnerDeposit: channel.partner.deposit,\n    partnerWithdraw: partnerWithdraw,\n    partnerTransferred: partnerTransferred,\n    partnerLocked: partnerLocked,\n    partnerBalance: partnerBalance,\n    partnerCapacity: partnerCapacity\n  };\n}\n// EXTERNAL MODULE: ../raiden-ts/node_modules/lodash/fp.js\nvar fp = __webpack_require__("0b23");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/redux.js\nfunction redux_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Like redux\'s combineReducers, but allows passing only a partial reducer mapping\n * redux\'s combineReducers output state must be exactly the mapping passed as parameter,\n * which doesn\'t allow to only provide a partial set of reducers and passthrough the other state\'s\n * keys. This function allows that, also preserving state/object reference when reducers doesn\'t\n * change state value.\n *\n * @param reducers - A mapping of a subset of state\'s key to nested reducers functions\n * @param initialState - global initial state, required when initializing first object with partial\n *                      reducers\n * @returns Full reducer for state S and actions A\n */\nfunction partialCombineReducers(reducers, initialState) {\n  return function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    for (var key in reducers) {\n      var reducer = reducers[key];\n      if (!reducer) continue; // shouldn\'t happen, only here for type safety below\n\n      var subState = state[key] || initialState[key];\n      var newSubState = reducer(subState, action);\n\n      if (newSubState !== subState) {\n        state = Object.assign({}, state, redux_defineProperty({}, key, newSubState));\n      }\n    }\n\n    return state;\n  };\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/actions.js\n\n/* A new head in the blockchain is detected by provider */\n\nvar newBlock = Object(typesafe_actions_umd_production["createStandardAction"])(\'newBlock\')();\n/**\n * A new token network is detected in the TokenNetworkRegistry instance\n * fromBlock is only set on the first time, to fetch and handle past events\n */\n\nvar tokenMonitored = Object(typesafe_actions_umd_production["createStandardAction"])(\'tokenMonitored\')();\n/**\n * Channel actions receive ChannelId as \'meta\' action property\n * This way, \'meta\' can be used equally for request, success and error actions\n */\n\n/* Request a channel to be opened with meta={ tokenNetwork, partner } and payload.settleTimeout */\n\nvar channelOpen = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelOpen\')();\n/* A channel is detected on-chain. Also works as \'success\' for channelOpen action */\n\nvar channelOpened = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelOpened\')();\n/* A channelOpen request action (with meta: ChannelId) failed with payload=Error */\n\nvar channelOpenFailed = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelOpenFailed\').map(function (payload, meta) {\n  return {\n    payload: payload,\n    error: true,\n    meta: meta\n  };\n});\n/* Channel with meta:ChannelId + payload.id should be monitored */\n\nvar channelMonitored = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelMonitored\')();\n/* Request a payload.deposit to be made to channel meta:ChannelId */\n\nvar channelDeposit = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelDeposit\')();\n/* A deposit is detected on-chain. Also works as \'success\' for channelDeposit action */\n\nvar channelDeposited = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelDeposited\')();\n/* A channelDeposit request action (with meta: ChannelId) failed with payload=Error */\n\nvar channelDepositFailed = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelDepositFailed\').map(function (payload, meta) {\n  return {\n    payload: payload,\n    error: true,\n    meta: meta\n  };\n});\n/* A withdraw is detected on-chain */\n\nvar channelWithdrawn = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelWithdrawn\')();\n/* Request channel meta:ChannelId to be closed */\n\nvar channelClose = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelClose\')();\n/* A close channel event is detected on-chain. Also works as \'success\' for channelClose action */\n\nvar channelClosed = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelClosed\')();\n/* A channelClose request action (with meta: ChannelId) failed with payload=Error */\n\nvar channelCloseFailed = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelCloseFailed\').map(function (payload, meta) {\n  return {\n    payload: payload,\n    error: true,\n    meta: meta\n  };\n});\n/* A channel meta:ChannelId becomes settleable, starting from payload.settleableBlock */\n\nvar channelSettleable = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelSettleable\')();\n/* Request channel meta:ChannelId to be settled */\n\nvar channelSettle = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelSettle\')();\n/* A settle channel event is detected on-chain. Also works as \'success\' for channelSettle action */\n\nvar channelSettled = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelSettled\')();\n/* A channelSettle request action (with meta: ChannelId) failed with payload=Error */\n\nvar channelSettleFailed = Object(typesafe_actions_umd_production["createStandardAction"])(\'channelSettleFailed\').map(function (payload, meta) {\n  return {\n    payload: payload,\n    error: true,\n    meta: meta\n  };\n});\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/reducer.js\n\n\n\n\n\n\n // state.blockNumber specific reducer, handles only newBlock action\n\nfunction reducer_blockNumber() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.blockNumber;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  if (Object(typesafe_actions_umd_production["isActionOf"])(newBlock, action)) return action.payload.blockNumber;else return state;\n} // state.tokens specific reducer, handles only tokenMonitored action\n\n\nfunction tokens() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.tokens;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  if (Object(typesafe_actions_umd_production["isActionOf"])(tokenMonitored, action)) return Object(fp["set"])([action.payload.token], action.payload.tokenNetwork, state);else return state;\n} // handles all channel actions and requests\n\n\nfunction channels() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.channels;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (Object(typesafe_actions_umd_production["isActionOf"])(channelOpen, action)) {\n    var path = [action.meta.tokenNetwork, action.meta.partner];\n    if (Object(fp["get"])(path, state)) return state; // there\'s already a channel with partner\n\n    var channel = {\n      state: ChannelState.opening,\n      own: {\n        deposit: constants["Zero"]\n      },\n      partner: {\n        deposit: constants["Zero"]\n      }\n    };\n    return Object(fp["set"])(path, channel, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelOpened, action)) {\n    var _path = [action.meta.tokenNetwork, action.meta.partner],\n        _channel = {\n      state: ChannelState.open,\n      own: {\n        deposit: constants["Zero"]\n      },\n      partner: {\n        deposit: constants["Zero"]\n      },\n      id: action.payload.id,\n      settleTimeout: action.payload.settleTimeout,\n      openBlock: action.payload.openBlock,\n      isFirstParticipant: action.payload.isFirstParticipant\n    };\n    return Object(fp["set"])(_path, _channel, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelOpenFailed, action)) {\n    var _path2 = [action.meta.tokenNetwork, action.meta.partner];\n    if (Object(fp["get"])([].concat(_path2, [\'state\']), state) !== ChannelState.opening) return state;\n    return Object(fp["unset"])(_path2, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelDeposited, action)) {\n    var _path3 = [action.meta.tokenNetwork, action.meta.partner];\n\n    var _channel2 = Object(fp["get"])(_path3, state);\n\n    if (!_channel2 || _channel2.state !== ChannelState.open || _channel2.id !== action.payload.id) return state;\n    if (action.payload.participant === action.meta.partner) _channel2 = Object.assign({}, _channel2, {\n      partner: Object.assign({}, _channel2.partner, {\n        deposit: action.payload.totalDeposit\n      })\n    });else _channel2 = Object.assign({}, _channel2, {\n      own: Object.assign({}, _channel2.own, {\n        deposit: action.payload.totalDeposit\n      })\n    });\n    return Object(fp["set"])(_path3, _channel2, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelWithdrawn, action)) {\n    var _path4 = [action.meta.tokenNetwork, action.meta.partner];\n\n    var _channel3 = Object(fp["get"])(_path4, state);\n\n    if (!_channel3 || _channel3.state !== ChannelState.open || _channel3.id !== action.payload.id) return state;\n    if (action.payload.participant === action.meta.partner) _channel3 = Object.assign({}, _channel3, {\n      partner: Object.assign({}, _channel3.partner, {\n        withdraw: action.payload.totalWithdraw\n      })\n    });else _channel3 = Object.assign({}, _channel3, {\n      own: Object.assign({}, _channel3.own, {\n        withdraw: action.payload.totalWithdraw\n      })\n    });\n    return Object(fp["set"])(_path4, _channel3, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelClose, action)) {\n    var _path5 = [action.meta.tokenNetwork, action.meta.partner];\n\n    var _channel4 = Object(fp["get"])(_path5, state);\n\n    if (!_channel4 || _channel4.state !== ChannelState.open) return state;\n    _channel4 = Object.assign({}, _channel4, {\n      state: ChannelState.closing\n    });\n    return Object(fp["set"])(_path5, _channel4, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelClosed, action)) {\n    var _path6 = [action.meta.tokenNetwork, action.meta.partner];\n\n    var _channel5 = Object(fp["get"])(_path6, state);\n\n    if (!_channel5 || !(_channel5.state === ChannelState.open || _channel5.state === ChannelState.closing) || _channel5.id !== action.payload.id) return state;\n    _channel5 = Object.assign({}, _channel5, {\n      state: ChannelState.closed,\n      closeBlock: action.payload.closeBlock\n    });\n    return Object(fp["set"])(_path6, _channel5, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelSettleable, action)) {\n    var _path7 = [action.meta.tokenNetwork, action.meta.partner];\n\n    var _channel6 = Object(fp["get"])(_path7, state);\n\n    if (!_channel6 || _channel6.state !== ChannelState.closed) return state;\n    _channel6 = Object.assign({}, _channel6, {\n      state: ChannelState.settleable\n    });\n    return Object(fp["set"])(_path7, _channel6, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelSettle, action)) {\n    var _path8 = [action.meta.tokenNetwork, action.meta.partner];\n\n    var _channel7 = Object(fp["get"])(_path8, state);\n\n    if (!_channel7 || _channel7.state !== ChannelState.settleable) return state;\n    _channel7 = Object.assign({}, _channel7, {\n      state: ChannelState.settling\n    });\n    return Object(fp["set"])(_path8, _channel7, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelSettled, action)) {\n    var _path9 = [action.meta.tokenNetwork, action.meta.partner];\n\n    var _channel8 = Object(fp["get"])(_path9, state);\n\n    if (!_channel8 || _channel8.state === ChannelState.opening || _channel8.state === ChannelState.open || _channel8.state === ChannelState.closing || _channel8.id !== action.payload.id) return state;\n    return Object(fp["unset"])(_path9, state);\n  } else return state;\n}\n/**\n * Nested/combined reducer for channels\n * blockNumber, tokens & channels reducers get its own slice of the state, corresponding to the\n * name of the reducer. channels root reducer instead must be handled the complete state instead,\n * so it compose the output with each key/nested/combined state.\n */\n\n\nvar channelsReducer = partialCombineReducers({\n  blockNumber: reducer_blockNumber,\n  tokens: tokens,\n  channels: channels\n}, initialState);\n// CONCATENATED MODULE: ../raiden-ts/dist/path/actions.js\n\nvar pathFind = Object(typesafe_actions_umd_production["createStandardAction"])(\'pathFind\')();\nvar pathFound = Object(typesafe_actions_umd_production["createStandardAction"])(\'pathFound\')();\nvar pathFindFailed = Object(typesafe_actions_umd_production["createStandardAction"])(\'pathFindFailed\').map(function (payload, meta) {\n  return {\n    payload: payload,\n    error: true,\n    meta: meta\n  };\n});\nvar pfsListUpdated = Object(typesafe_actions_umd_production["createStandardAction"])(\'pfsListUpdated\')();\nvar iouPersist = Object(typesafe_actions_umd_production["createStandardAction"])(\'iouPersist\')();\nvar iouClear = Object(typesafe_actions_umd_production["createStandardAction"])(\'iouClear\')();\n// CONCATENATED MODULE: ../raiden-ts/dist/path/reducer.js\n\n\n\n\n\n\nfunction reducer_path() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.path;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (Object(typesafe_actions_umd_production["isActionOf"])(iouPersist, action)) {\n    var _path = [\'iou\', action.meta.tokenNetwork, action.meta.serviceAddress];\n    return Object(fp["set"])(_path, action.payload.iou, state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(iouClear, action)) {\n    var _path2 = [\'iou\', action.meta.tokenNetwork, action.meta.serviceAddress];\n    return Object(fp["unset"])(_path2, state);\n  } else return state;\n}\n/**\n * Nested combined reducer for path\n * Handles the \'path\' substate.\n */\n\n\nvar pathReducer = partialCombineReducers({\n  path: reducer_path\n}, initialState);\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/actions.js\n\n/* MatrixClient instance is ready and logged in to payload.server with credentials payload.setup */\n\nvar matrixSetup = Object(typesafe_actions_umd_production["createStandardAction"])(\'matrixSetup\')();\n/* Request matrix to start monitoring presence updates for meta.address */\n\nvar matrixRequestMonitorPresence = Object(typesafe_actions_umd_production["createStandardAction"])(\'matrixRequestMonitorPresence\')();\n/**\n * Monitored user meta.address presence updated.\n * First event for this address also works as \'success\' for matrixRequestMonitorPresence\n */\n\nvar matrixPresenceUpdate = Object(typesafe_actions_umd_production["createStandardAction"])(\'matrixPresenceUpdate\').map(function (_ref, meta) {\n  var userId = _ref.userId,\n      available = _ref.available,\n      ts = _ref.ts;\n  return {\n    payload: {\n      userId: userId,\n      available: available,\n      ts: ts || Date.now()\n    },\n    meta: meta\n  };\n});\n/* A matrixRequestMonitorPresence request action (with meta.address) failed with payload=Error */\n\nvar matrixRequestMonitorPresenceFailed = Object(typesafe_actions_umd_production["createStandardAction"])(\'matrixRequestMonitorPresenceFailed\').map(function (payload, meta) {\n  return {\n    payload: payload,\n    error: true,\n    meta: meta\n  };\n});\n/* payload.roomId must go front on meta.address\'s room queue */\n\nvar matrixRoom = Object(typesafe_actions_umd_production["createStandardAction"])(\'matrixRoom\')();\n/* payload.roomId must be excluded from meta.address room queue, if present */\n\nvar matrixRoomLeave = Object(typesafe_actions_umd_production["createStandardAction"])(\'matrixRoomLeave\')();\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/reducer.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n\n\n\n\n\n/**\n * state.transport reducer\n * Handles all transport actions and requests\n *\n * @param state - Current RaidenState[\'transport\'] slice\n * @param action - RaidenAction to handle\n * @returns New RaidenState[\'transport\'] slice\n */\n\nfunction transport() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.transport;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (Object(typesafe_actions_umd_production["isActionOf"])(matrixSetup, action)) {\n    return Object.assign({}, state, {\n      matrix: Object.assign({}, state.matrix, action.payload)\n    });\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(matrixRoom, action)) {\n    var path = [\'matrix\', \'rooms\', action.meta.address];\n    return Object(fp["set"])(path, [action.payload.roomId].concat(_toConsumableArray(Object(fp["getOr"])([], path, state).filter(function (room) {\n      return room !== action.payload.roomId;\n    }))), state);\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(matrixRoomLeave, action)) {\n    var _path = [\'matrix\', \'rooms\', action.meta.address];\n    state = Object(fp["set"])(_path, Object(fp["getOr"])([], _path, state).filter(function (r) {\n      return r !== action.payload.roomId;\n    }), state);\n    if (Object(fp["isEmpty"])(Object(fp["get"])(_path, state))) state = Object(fp["unset"])(_path, state);\n    return state;\n  } else return state;\n}\n/**\n * Nested/combined reducer for transport\n * Currently only handles \'transport\' substate\n */\n\n\nvar transportReducer = partialCombineReducers({\n  transport: transport\n}, initialState);\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/utils.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n/**\n * Get the locksroot of a given array of pending locks\n * On Alderaan, it\'s the keccak256 hash of the concatenation of the ordered locks data\n *\n * @param locks - Lock array to calculate the locksroot from\n * @returns hash of the locks array\n */\n\nfunction getLocksroot(locks) {\n  var encoded = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = locks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var lock = _step.value;\n      encoded.push(encode(lock.expiration, 32), encode(lock.amount, 32), lock.secrethash);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return Object(utils["keccak256"])(Object(bytes["concat"])(encoded));\n}\n/**\n * Return the secrethash of a given secret\n * On Alderaan, the sha256 hash is used for the secret.\n *\n * @param secret - Secret to get the hash from\n * @returns hash of the secret\n */\n\nfunction getSecrethash(secret) {\n  return Object(utils["sha256"])(secret);\n}\n/**\n * Generates a random secret of given length, as an HexString<32>\n *\n * @param length - of the secret to generate\n * @returns HexString<32>\n */\n\nfunction makeSecret() {\n  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n  return Object(bytes["hexlify"])(Object(utils["randomBytes"])(length));\n}\n/**\n * Generates a random payment identifier, as an UInt<8> (64 bits)\n *\n * @returns UInt<8>\n */\n\nfunction makePaymentId() {\n  return Object(utils["bigNumberify"])(Object(utils["randomBytes"])(8));\n}\n/**\n * Generates a message identifier, as an UInt<8> (64 bits)\n *\n * @returns UInt<8>\n */\n\nfunction makeMessageId() {\n  return Object(utils["bigNumberify"])(Date.now());\n}\n/**\n * Convert a state.sent: SentTransfer to a public RaidenSentTransfer object\n *\n * @param sent - RaidenState.sent value\n * @returns Public raiden sent transfer info object\n */\n\nfunction raidenSentTransfer(sent) {\n  var _ref = sent.lockExpiredProcessed ? [RaidenSentTransferStatus.expired, sent.lockExpiredProcessed[0]] : sent.unlockProcessed ? [RaidenSentTransferStatus.unlocked, sent.unlockProcessed[0]] : sent.lockExpired ? [RaidenSentTransferStatus.expiring, sent.lockExpired[0]] : sent.unlock ? [RaidenSentTransferStatus.unlocking, sent.unlock[0]] : sent.secretReveal ? [RaidenSentTransferStatus.revealed, sent.secretReveal[0]] : sent.channelClosed // channelClosed before revealing\n  ? [RaidenSentTransferStatus.closed, sent.channelClosed[0]] : sent.refund ? [RaidenSentTransferStatus.refunded, sent.refund[0]] : sent.transferProcessed ? [RaidenSentTransferStatus.received, sent.transferProcessed[0]] : [RaidenSentTransferStatus.pending, sent.transfer[0]],\n      _ref2 = _slicedToArray(_ref, 2),\n      status = _ref2[0],\n      changedAt = _ref2[1],\n      success = sent.secretReveal || sent.unlock ? true : sent.refund || sent.lockExpired || sent.channelClosed ? false : undefined,\n      completed = !!(sent.unlockProcessed || sent.lockExpiredProcessed || sent.channelClosed);\n\n  return {\n    secrethash: sent.transfer[1].lock.secrethash,\n    status: status,\n    initiator: sent.transfer[1].initiator,\n    recipient: sent.transfer[1].recipient,\n    target: sent.transfer[1].target,\n    metadata: sent.transfer[1].metadata,\n    paymentId: sent.transfer[1].payment_identifier,\n    chainId: sent.transfer[1].chain_id.toNumber(),\n    token: sent.transfer[1].token,\n    tokenNetwork: sent.transfer[1].token_network_address,\n    channelId: sent.transfer[1].channel_identifier,\n    value: sent.transfer[1].lock.amount.sub(sent.fee),\n    fee: sent.fee,\n    amount: sent.transfer[1].lock.amount,\n    expirationBlock: sent.transfer[1].lock.expiration.toNumber(),\n    startedAt: new Date(sent.transfer[0]),\n    changedAt: new Date(changedAt),\n    success: success,\n    completed: completed\n  };\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/messages/utils.js\n\n\nvar _CMDIDs;\n\nfunction utils_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}; // import * as t from \'io-ts\';\n\n\n\n\n\n\n\n\n\n\nvar CMDIDs = (_CMDIDs = {}, utils_defineProperty(_CMDIDs, MessageType.DELIVERED, 12), utils_defineProperty(_CMDIDs, MessageType.PROCESSED, 0), utils_defineProperty(_CMDIDs, MessageType.SECRET_REQUEST, 3), utils_defineProperty(_CMDIDs, MessageType.SECRET_REVEAL, 11), utils_defineProperty(_CMDIDs, MessageType.LOCKED_TRANSFER, 7), utils_defineProperty(_CMDIDs, MessageType.REFUND_TRANSFER, 8), utils_defineProperty(_CMDIDs, MessageType.UNLOCK, 4), utils_defineProperty(_CMDIDs, MessageType.LOCK_EXPIRED, 13), utils_defineProperty(_CMDIDs, MessageType.TO_DEVICE, 14), utils_defineProperty(_CMDIDs, MessageType.WITHDRAW_REQUEST, 15), utils_defineProperty(_CMDIDs, MessageType.WITHDRAW_CONFIRMATION, 16), utils_defineProperty(_CMDIDs, MessageType.WITHDRAW_EXPIRED, 17), utils_defineProperty(_CMDIDs, MessageType.PFS_CAPACITY_UPDATE, -1), _CMDIDs); // raiden_contracts.constants.MessageTypeId\n\nvar MessageTypeId;\n\n(function (MessageTypeId) {\n  MessageTypeId[MessageTypeId["BALANCE_PROOF"] = 1] = "BALANCE_PROOF";\n  MessageTypeId[MessageTypeId["WITHDRAW"] = 3] = "WITHDRAW";\n  MessageTypeId[MessageTypeId["IOU"] = 5] = "IOU";\n})(MessageTypeId || (MessageTypeId = {}));\n/**\n * Create the hash of Metadata structure.\n *\n * @param metadata - The LockedTransfer metadata\n * @returns Hash of the metadata.\n */\n\n\nfunction createMetadataHash(metadata) {\n  var routeHashes = metadata.routes.map(function (value) {\n    return Object(utils["keccak256"])(utils["RLP"].encode(value.route));\n  });\n  return Object(utils["keccak256"])(utils["RLP"].encode(routeHashes));\n}\n/**\n * Returns a balance_hash from transferred&locked amounts & locksroot\n *\n * @param transferredAmount - EnvelopeMessage.transferred_amount\n * @param lockedAmount - EnvelopeMessage.locked_amount\n * @param locksroot - Hash of all current locks\n * @returns Hash of the balance\n */\n\nfunction createBalanceHash(transferredAmount, lockedAmount, locksroot) {\n  return transferredAmount.isZero() && lockedAmount.isZero() && locksroot === constants["HashZero"] ? constants["HashZero"] : Object(utils["keccak256"])(Object(bytes["concat"])([encode(transferredAmount, 32), encode(lockedAmount, 32), encode(locksroot, 32)]));\n}\n/**\n * Create the messageHash for a given EnvelopeMessage\n *\n * @param message - EnvelopeMessage to pack\n * @returns Hash of the message pack\n */\n\nfunction createMessageHash(message) {\n  switch (message.type) {\n    case MessageType.LOCKED_TRANSFER:\n    case MessageType.REFUND_TRANSFER:\n      // hash of packed representation of the whole message\n      var packed = Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(message.message_identifier, 8), encode(message.payment_identifier, 8), encode(message.lock.expiration, 32), encode(message.token, 20), encode(message.recipient, 20), encode(message.target, 20), encode(message.initiator, 20), encode(message.lock.secrethash, 32), encode(message.lock.amount, 32)]);\n      if (message.type === MessageType.LOCKED_TRANSFER) packed = Object(bytes["concat"])([packed, createMetadataHash(message.metadata)]);\n      return Object(utils["keccak256"])(packed);\n\n    case MessageType.UNLOCK:\n      return Object(utils["keccak256"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(message.message_identifier, 8), encode(message.payment_identifier, 8), encode(message.secret, 32)]));\n\n    case MessageType.LOCK_EXPIRED:\n      return Object(utils["keccak256"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(message.message_identifier, 8), encode(message.recipient, 20), encode(message.secrethash, 32)]));\n  }\n}\n/**\n * Pack a message in a hex-string format, **without** signature\n * This packed hex-byte-array can then be used for signing.\n * On Raiden python client, this is the output of `_data_to_sign` method of the messages, as the\n * actual packed encoding was once used for binary transport protocols, but nowadays is used only\n * for generating data to be signed, which is the purpose of our implementation.\n *\n * @param message - Message to be packed\n * @returns HexBytes hex-encoded string data representing message in binary format\n */\n\nfunction packMessage(message) {\n  switch (message.type) {\n    case MessageType.DELIVERED:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.delivered_message_identifier, 8)]));\n\n    case MessageType.PROCESSED:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.message_identifier, 8)]));\n\n    case MessageType.LOCKED_TRANSFER:\n    case MessageType.REFUND_TRANSFER:\n    case MessageType.UNLOCK:\n    case MessageType.LOCK_EXPIRED:\n      {\n        var messageHash = createMessageHash(message),\n            balanceHash = createBalanceHash(message.transferred_amount, message.locked_amount, message.locksroot);\n        return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(message.token_network_address, 20), encode(message.chain_id, 32), encode(MessageTypeId.BALANCE_PROOF, 32), encode(message.channel_identifier, 32), encode(balanceHash, 32), encode(message.nonce, 32), encode(messageHash, 32)]));\n      }\n\n    case MessageType.SECRET_REQUEST:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.message_identifier, 8), encode(message.payment_identifier, 8), encode(message.secrethash, 32), encode(message.amount, 32), encode(message.expiration, 32)]));\n\n    case MessageType.SECRET_REVEAL:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.message_identifier, 8), encode(message.secret, 32)]));\n\n    case MessageType.TO_DEVICE:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.message_identifier, 8)]));\n\n    case MessageType.WITHDRAW_REQUEST:\n    case MessageType.WITHDRAW_CONFIRMATION:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(message.token_network_address, 20), encode(message.chain_id, 32), encode(MessageTypeId.WITHDRAW, 32), encode(message.channel_identifier, 32), encode(message.participant, 20), encode(message.total_withdraw, 32), encode(message.expiration, 32)]));\n\n    case MessageType.WITHDRAW_EXPIRED:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.nonce, 32), encode(message.message_identifier, 8), encode(message.token_network_address, 20), encode(message.chain_id, 32), encode(MessageTypeId.WITHDRAW, 32), encode(message.channel_identifier, 32), encode(message.participant, 20), encode(message.total_withdraw, 32), encode(message.expiration, 32)]));\n\n    case MessageType.PFS_CAPACITY_UPDATE:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(message.canonical_identifier.chain_identifier, 32), encode(message.canonical_identifier.token_network_address, 20), encode(message.canonical_identifier.channel_identifier, 32), encode(message.updating_participant, 20), encode(message.other_participant, 20), encode(message.updating_nonce, 8), encode(message.other_nonce, 8), encode(message.updating_capacity, 32), encode(message.other_capacity, 32), encode(message.reveal_timeout, 32)]));\n  }\n}\n/**\n * Typeguard to check if a message contains a valid signature\n *\n * @param message - May or may not be a signed message\n * @returns Boolean if message is signed\n */\n\nfunction isSigned(message) {\n  return Signature.is(message.signature);\n}\n/**\n * Requires a signed message and returns its signer address\n *\n * @param message - Signed message to retrieve signer address\n * @returns Address which signed message\n */\n\nfunction getMessageSigner(message) {\n  return Object(utils["verifyMessage"])(Object(bytes["arrayify"])(packMessage(message)), message.signature);\n}\n/**\n * Get the SignedBalanceProof associated with an EnvelopeMessage\n *\n * @param message - Signed EnvelopeMessage\n * @returns SignedBalanceProof object for message\n */\n\nfunction getBalanceProofFromEnvelopeMessage(message) {\n  return {\n    chainId: message.chain_id,\n    tokenNetworkAddress: message.token_network_address,\n    channelId: message.channel_identifier,\n    nonce: message.nonce,\n    transferredAmount: message.transferred_amount,\n    lockedAmount: message.locked_amount,\n    locksroot: message.locksroot,\n    messageHash: createMessageHash(message),\n    signature: message.signature,\n    sender: getMessageSigner(message)\n  };\n}\n/**\n * Encode a Message as a JSON string\n * Uses lossless-json to encode BigNumbers as JSON \'number\' type, as Raiden\n *\n * @param message - Message object to be serialized\n * @returns JSON string\n */\n\nfunction encodeJsonMessage(message) {\n  return losslessStringify(Signed(Message).encode(message));\n}\n/**\n * Try to decode text as a Message, using lossless-json to decode BigNumbers\n * Throws if can\'t decode, or message is invalid regarding any of the encoded constraints\n *\n * @param text - JSON string to try to decode\n * @returns Message object\n */\n\nfunction decodeJsonMessage(text) {\n  var parsed = losslessParse(text),\n      decoded = Signed(Message).decode(parsed);\n  if (Object(Either["isLeft"])(decoded)) throw ThrowReporter["ThrowReporter"].report(decoded); // throws if decode failed\n\n  return decoded.right;\n}\n/**\n * Pack message and request signer to sign it, and returns signed message\n *\n * @param signer - Signer instance\n * @param message - Unsigned message to pack and sign\n * @returns Promise to signed message\n */\n\nfunction signMessage(signer, message) {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee() {\n    var signature;\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isSigned(message)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt("return", message);\n\n          case 2:\n            console.log("Signing message \\"".concat(message.type, "\\""), message);\n            _context.next = 5;\n            return signer.signMessage(Object(bytes["arrayify"])(packMessage(message)));\n\n          case 5:\n            signature = _context.sent;\n            return _context.abrupt("return", Object.assign({}, message, {\n              signature: signature\n            }));\n\n          case 7:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/actions.js\n\n/** A request to initiate a transfer */\n\nvar actions_transfer = Object(typesafe_actions_umd_production["createStandardAction"])(\'transfer\')();\n/** A LockedTransfer was signed and should be sent to partner */\n\nvar transferSigned = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferSigned\')();\n/** Partner acknowledge they received and processed our LockedTransfer */\n\nvar transferProcessed = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferProcessed\')();\n/** Register a secret */\n\nvar transferSecret = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferSecret\')();\n/** A valid SecretRequest received from target */\n\nvar transferSecretRequest = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferSecretRequest\')();\n/** A SecretReveal sent to target */\n\nvar transferSecretReveal = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferSecretReveal\')();\n/** Unlock request after partner also revealed they know the secret */\n\nvar transferUnlock = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferUnlock\')();\n/** Signed Unlock to be sent to partner */\n\nvar transferUnlocked = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferUnlocked\')();\n/** Partner acknowledge they received and processed our Unlock */\n\nvar transferUnlockProcessed = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferUnlockProcessed\')();\n/** A request to expire a given transfer */\n\nvar transferExpire = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferExpire\')();\n/** A transfer LockExpired message/BalanceProof successfuly generated */\n\nvar transferExpired = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferExpired\')();\n/**\n * A transfer expiration request failed for any reason\n * e.g. user rejected sign promopt. It should eventually get prompted again, on a future newBlock\n * action which sees this transfer should be expired but sent.lockExpired didn\'t get set yet.\n */\n\nvar transferExpireFailed = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferExpireFailed\').map(function (payload, meta) {\n  return {\n    payload: payload,\n    error: true,\n    meta: meta\n  };\n});\n/** Partner acknowledge they received and processed our LockExpired */\n\nvar transferExpireProcessed = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferExpireProcessed\')();\n/** A transfer was refunded */\n\nvar transferRefunded = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferRefunded\')();\n/**\n * A transfer completed successfuly\n *\n * A transfer is considered as having succeeded from the time the secret is revealed to the target,\n * as from there, target and mediators can claim the payment down to us. But the full off-chain\n * happy case completes only after partner/neighbor acknowledges receiving the Unlock.\n * So, we usually only emits this action in the end of the happy case, and it\'ll then contain the\n * unlock\'s balanceProof, which indicates the full off-chain path succeeded.\n * It\'ll be emitted without a balanceProof if something forces the transfer to complete\n * (e.g.  channel closed), the secret was revealed (so target was paid) but for any reason the\n * unlock didn\'t happen yet.\n */\n\nvar transferred = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferred\')();\n/**\n * A transfer failed and can\'t succeed anymore\n *\n * It is emitted as soon as we know the transfer failed definitely, like when a RefundTransfer is\n * received or the lock expires before revealing the secret. It notifies the user (e.g. pending\n * Promises) that the transfer failed and won\'t be paid (eventually, locked amount will be\n * recovered by expiring the lock).\n */\n\nvar transferFailed = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferFailed\').map(function (payload, meta) {\n  return {\n    payload: payload,\n    error: true,\n    meta: meta\n  };\n});\n/** A pending transfer isn\'t needed anymore and should be cleared from state */\n\nvar transferClear = Object(typesafe_actions_umd_production["createStandardAction"])(\'transferClear\')();\n/** A WithdrawRequest was received from partner */\n\nvar withdrawReceiveRequest = Object(typesafe_actions_umd_production["createStandardAction"])(\'withdrawReceiveRequest\')();\n/** A WithdrawConfirmation was signed and must be sent to partner */\n\nvar withdrawSendConfirmation = Object(typesafe_actions_umd_production["createStandardAction"])(\'withdrawSendConfirmation\')();\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/reducer.js\nfunction reducer_toConsumableArray(arr) { return reducer_arrayWithoutHoles(arr) || reducer_iterableToArray(arr) || reducer_nonIterableSpread(); }\n\nfunction reducer_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\n\nfunction reducer_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\n\nfunction reducer_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction reducer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Handles all transfers actions and requests\n *\n * @param state - Current RaidenState\n * @param action - RaidenAction to handle\n * @returns New RaidenState (or current, if action didn\'t change anything)\n */\n\nfunction transfersReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (Object(typesafe_actions_umd_production["isActionOf"])(transferSecret, action)) {\n    if (action.meta.secrethash in state.secrets && state.secrets[action.meta.secrethash].registerBlock) return state; // avoid storing without registerBlock if we already got with\n\n    return Object.assign({}, state, {\n      secrets: Object.assign({}, state.secrets, reducer_defineProperty({}, action.meta.secrethash, action.payload))\n    });\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferSigned, action)) {\n    var transfer = action.payload.message,\n        lock = transfer.lock,\n        secrethash = lock.secrethash; // transferSigned must be the first action, to init SentTransfer state\n\n    if (secrethash in state.sent) return state;\n    var channelPath = [\'channels\', transfer.token_network_address, transfer.recipient];\n    var channel = Object(fp["get"])(channelPath, state);\n    if (!channel) return state;\n    var locks = [].concat(reducer_toConsumableArray(channel.own.locks || []), [lock]),\n        // append lock\n    locksroot = getLocksroot(locks);\n    if (transfer.locksroot !== locksroot || !transfer.nonce.eq((channel.own.balanceProof ? channel.own.balanceProof.nonce : constants["Zero"]).add(1)) || // nonce must be next\n    !transfer.transferred_amount.eq(channel.own.balanceProof ? channel.own.balanceProof.transferredAmount : constants["Zero"]) || !transfer.locked_amount.eq((channel.own.balanceProof ? channel.own.balanceProof.lockedAmount : constants["Zero"]).add(lock.amount))) return state;\n    channel = Object.assign({}, channel, {\n      own: Object.assign({}, channel.own, {\n        locks: locks,\n        // set current/latest channel.own.balanceProof to LockedTransfer\'s\n        balanceProof: getBalanceProofFromEnvelopeMessage(transfer)\n      })\n    });\n    var sentTransfer = {\n      transfer: timed(transfer),\n      fee: action.payload.fee\n    };\n    state = Object(fp["set"])(channelPath, channel, state);\n    state = Object(fp["set"])([\'sent\', secrethash], sentTransfer, state);\n    return state;\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferProcessed, action)) {\n    if (!(action.meta.secrethash in state.sent)) return state;\n    return Object.assign({}, state, {\n      sent: Object.assign({}, state.sent, reducer_defineProperty({}, action.meta.secrethash, Object.assign({}, state.sent[action.meta.secrethash], {\n        transferProcessed: timed(action.payload.message)\n      })))\n    });\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferSecretReveal, action)) {\n    if (!(action.meta.secrethash in state.sent) || state.sent[action.meta.secrethash].secretReveal) return state;\n    return Object.assign({}, state, {\n      sent: Object.assign({}, state.sent, reducer_defineProperty({}, action.meta.secrethash, Object.assign({}, state.sent[action.meta.secrethash], {\n        secretReveal: timed(action.payload.message)\n      })))\n    });\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferUnlocked, action)) {\n    var unlock = action.payload.message,\n        _secrethash = action.meta.secrethash;\n    if (!(_secrethash in state.sent) || state.sent[_secrethash].unlock) return state;\n    var _transfer = state.sent[_secrethash].transfer[1],\n        _lock = _transfer.lock;\n    var _channelPath = [\'channels\', _transfer.token_network_address, _transfer.recipient];\n\n    var _channel = Object(fp["get"])(_channelPath, state);\n\n    if (!_channel || !_channel.own.locks || !_channel.own.balanceProof) return state;\n\n    var _locks = _channel.own.locks.filter(function (l) {\n      return l.secrethash !== _secrethash;\n    }),\n        _locksroot = getLocksroot(_locks);\n\n    if (unlock.locksroot !== _locksroot || !_channel.own.balanceProof.nonce.add(1).eq(unlock.nonce) || // nonce must be next\n    !unlock.transferred_amount.eq(_channel.own.balanceProof.transferredAmount.add(_lock.amount)) || !unlock.locked_amount.eq(_channel.own.balanceProof.lockedAmount.sub(_lock.amount))) return state;\n    _channel = Object.assign({}, _channel, {\n      own: Object.assign({}, _channel.own, {\n        locks: _locks,\n        // set current/latest channel.own.balanceProof to Unlock\'s\n        balanceProof: getBalanceProofFromEnvelopeMessage(unlock)\n      })\n    });\n\n    var _sentTransfer = Object.assign({}, state.sent[_secrethash], {\n      unlock: timed(unlock)\n    });\n\n    state = Object(fp["set"])(_channelPath, _channel, state);\n    state = Object(fp["set"])([\'sent\', _secrethash], _sentTransfer, state);\n    return state;\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferExpired, action)) {\n    var lockExpired = action.payload.message,\n        _secrethash2 = action.meta.secrethash;\n    if (!(_secrethash2 in state.sent) || state.sent[_secrethash2].unlock || // don\'t accept expire if already unlocked\n    state.sent[_secrethash2].lockExpired // already expired\n    ) return state;\n    var _transfer2 = state.sent[_secrethash2].transfer[1],\n        _lock2 = _transfer2.lock;\n    var _channelPath2 = [\'channels\', _transfer2.token_network_address, _transfer2.recipient];\n\n    var _channel2 = Object(fp["get"])(_channelPath2, state);\n\n    if (!_channel2 || !_channel2.own.locks || !_channel2.own.balanceProof) return state;\n\n    var _locks2 = _channel2.own.locks.filter(function (l) {\n      return l.secrethash !== _secrethash2;\n    }),\n        _locksroot2 = getLocksroot(_locks2);\n\n    if (lockExpired.locksroot !== _locksroot2 || !_channel2.own.balanceProof.nonce.add(1).eq(lockExpired.nonce) || // nonce must be next\n    !lockExpired.transferred_amount.eq(_channel2.own.balanceProof.transferredAmount) || !lockExpired.locked_amount.eq(_channel2.own.balanceProof.lockedAmount.sub(_lock2.amount))) return state;\n    _channel2 = Object.assign({}, _channel2, {\n      own: Object.assign({}, _channel2.own, {\n        locks: _locks2,\n        // set current/latest channel.own.balanceProof to LockExpired\'s\n        balanceProof: getBalanceProofFromEnvelopeMessage(lockExpired)\n      })\n    });\n\n    var _sentTransfer2 = Object.assign({}, state.sent[_secrethash2], {\n      lockExpired: timed(lockExpired)\n    });\n\n    state = Object(fp["set"])(_channelPath2, _channel2, state);\n    state = Object(fp["set"])([\'sent\', _secrethash2], _sentTransfer2, state);\n    return state;\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferUnlockProcessed, action)) {\n    if (!(action.meta.secrethash in state.sent)) return state;\n    return Object.assign({}, state, {\n      sent: Object.assign({}, state.sent, reducer_defineProperty({}, action.meta.secrethash, Object.assign({}, state.sent[action.meta.secrethash], {\n        unlockProcessed: timed(action.payload.message)\n      })))\n    });\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferExpireProcessed, action)) {\n    if (!(action.meta.secrethash in state.sent)) return state;\n    return Object.assign({}, state, {\n      sent: Object.assign({}, state.sent, reducer_defineProperty({}, action.meta.secrethash, Object.assign({}, state.sent[action.meta.secrethash], {\n        lockExpiredProcessed: timed(action.payload.message)\n      })))\n    });\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferRefunded, action)) {\n    if (!(action.meta.secrethash in state.sent)) return state;\n    return Object.assign({}, state, {\n      sent: Object.assign({}, state.sent, reducer_defineProperty({}, action.meta.secrethash, Object.assign({}, state.sent[action.meta.secrethash], {\n        refund: timed(action.payload.message)\n      })))\n    });\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(channelClosed, action)) {\n    return Object.assign({}, state, {\n      sent: Object(fp["mapValues"])(function (v) {\n        return (// if transfer was on this channel, persist CloseChannel txHash, else pass\n          v.transfer[1].channel_identifier.eq(action.payload.id) && v.transfer[1].recipient === action.meta.partner && v.transfer[1].token_network_address === action.meta.tokenNetwork ? Object.assign({}, v, {\n            channelClosed: timed(action.payload.txHash)\n          }) : v\n        );\n      })(state.sent)\n    });\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(transferClear, action)) {\n    if (!(action.meta.secrethash in state.sent)) return state;\n    state = Object(fp["unset"])([\'sent\', action.meta.secrethash], state);\n    state = Object(fp["unset"])([\'secrets\', action.meta.secrethash], state);\n    return state;\n  } else if (Object(typesafe_actions_umd_production["isActionOf"])(withdrawSendConfirmation, action)) {\n    var message = action.payload.message,\n        _channelPath3 = [\'channels\', action.meta.tokenNetwork, action.meta.partner];\n\n    var _channel3 = Object(fp["get"])(_channelPath3, state);\n\n    if (!_channel3 || _channel3.state !== ChannelState.open) return state; // current own balanceProof, or zero balance proof, with some known fields filled\n\n    var balanceProof = _channel3.own.balanceProof || {\n      chainId: message.chain_id,\n      tokenNetworkAddress: action.meta.tokenNetwork,\n      channelId: message.channel_identifier,\n      // balance proof data\n      nonce: constants["Zero"],\n      transferredAmount: constants["Zero"],\n      lockedAmount: constants["Zero"],\n      locksroot: constants["HashZero"],\n      messageHash: constants["HashZero"],\n      signature: Object(utils["hexlify"])(SignatureZero),\n      sender: state.address\n    }; // if it\'s the next nonce, update balance proof\n\n    if (message.nonce.eq(balanceProof.nonce.add(1)) && message.expiration.gt(state.blockNumber)) {\n      _channel3 = Object.assign({}, _channel3, {\n        own: Object.assign({}, _channel3.own, {\n          balanceProof: Object.assign({}, balanceProof, {\n            nonce: message.nonce\n          })\n        })\n      });\n      state = Object(fp["set"])(_channelPath3, _channel3, state);\n    }\n\n    return state;\n  } else return state;\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/messages/actions.js\n\n/** One-shot send payload.message to meta.address user in transport */\n\nvar messageSend = Object(typesafe_actions_umd_production["createStandardAction"])(\'messageSend\')();\n/**\n * Success action when message is actually sent\n * messageSend doesn\'t fail (except unexpectedly, like network errors), instead just hang there\n * until a suitable set of conditions is met, i.e.: there\'s a room for recipient\'s address, an\n * online validated user for this address, and it had joined that room, then the message is sent\n * and this success action is emitted. \'payload.message\' and \'meta.address\' should be kept strictly\n * equal to messageSend (even by reference, in case of Message), to ease filtering.\n * Useful to control retry without queueing multiple identical messages while the first is still\n * pending\n */\n\nvar messageSent = Object(typesafe_actions_umd_production["createStandardAction"])(\'messageSent\')();\n/** One-shot send payload.message to a global room in transport */\n\nvar messageGlobalSend = Object(typesafe_actions_umd_production["createStandardAction"])(\'messageGlobalSend\')();\n/**\n * payload.message was received on payload.ts (timestamp) from meta.address\n * payload.userId and payload.roomId are optional and specific to matrix transport, as sender info\n */\n\nvar messageReceived = Object(typesafe_actions_umd_production["createStandardAction"])(\'messageReceived\').map(function (_ref, meta) {\n  var text = _ref.text,\n      message = _ref.message,\n      ts = _ref.ts,\n      userId = _ref.userId,\n      roomId = _ref.roomId;\n  return {\n    payload: {\n      text: text,\n      message: message,\n      ts: ts || Date.now(),\n      userId: userId,\n      roomId: roomId\n    },\n    meta: meta\n  };\n});\n// CONCATENATED MODULE: ../raiden-ts/dist/actions.js\n/**\n * Aggregate types and exported properties from actions from all modules\n */\n\n\n\n\n\n\n\nvar raidenShutdown = Object(typesafe_actions_umd_production["createStandardAction"])(\'raidenShutdown\')();\nvar raidenConfigUpdate = Object(typesafe_actions_umd_production["createStandardAction"])(\'raidenConfigUpdate\')();\nvar RaidenActions = Object.assign({\n  raidenShutdown: raidenShutdown,\n  raidenConfigUpdate: raidenConfigUpdate\n}, actions_namespaceObject, transport_actions_namespaceObject, messages_actions_namespaceObject, transfers_actions_namespaceObject, path_actions_namespaceObject);\n/* Mapping { [type: string]: Action } of a subset of RaidenActions exposed as events */\n\nvar RaidenEvents = Object(lodash["pick"])(RaidenActions, [RaidenActions.raidenShutdown, RaidenActions.newBlock, RaidenActions.matrixPresenceUpdate, RaidenActions.tokenMonitored].map(typesafe_actions_umd_production["getType"]));\n// CONCATENATED MODULE: ../raiden-ts/dist/reducer.js\n\n\n\n\n\n\n\n // update state.config on raidenConfigUpdate action\n\nvar reducer_configReducer = function configReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (Object(typesafe_actions_umd_production["isActionOf"])(raidenConfigUpdate, action)) {\n    if (!Object(fp["isEmpty"])(action.payload.config)) return Object.assign({}, state, {\n      config: Object.assign({}, state.config, action.payload.config)\n    });\n  }\n\n  return state;\n};\n\nvar raidenReducers = {\n  configReducer: reducer_configReducer,\n  channelsReducer: channelsReducer,\n  pathReducer: pathReducer,\n  transportReducer: transportReducer,\n  transfersReducer: transfersReducer\n};\n/**\n * Raiden root reducer\n * Apply action over each submodule root reducer in a flattened manner (iteratively).\n * Notice the submodules reducers aren\'t handled only a partial/deep property of the state\n * (as combineReducers), but instead receive the whole state, so they can act on any part of the\n * state. This approach is similar to `reduce-reducers` util.\n * Each submodule root reducer may then choose to split its concerns into nested or flattened\n * reducers (like this one).\n *\n * @param state - Current RaidenState to reduce\n * @param action - RaidenAction to apply over state\n * @returns New RaidenState\n */\n\nvar reducer_raidenReducer = function raidenReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return Object.values(raidenReducers).reduce(function (s, reducer) {\n    return reducer(s, action);\n  }, state);\n};\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/of.js\nvar of = __webpack_require__("3c89");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/takeWhile.js\nvar takeWhile = __webpack_require__("379c");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/takeUntil.js\nvar takeUntil = __webpack_require__("99e6");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/catchError.js\nvar catchError = __webpack_require__("1c03");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/interval.js\nvar interval = __webpack_require__("1a65");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/publishReplay.js\nvar publishReplay = __webpack_require__("ee13");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/switchMap.js\nvar switchMap = __webpack_require__("e418");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js\nvar withLatestFrom = __webpack_require__("0815");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/groupBy.js\nvar groupBy = __webpack_require__("7182");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/exhaustMap.js\nvar exhaustMap = __webpack_require__("b66b");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js\nvar mergeMapTo = __webpack_require__("8012c");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/tap.js\nvar tap = __webpack_require__("d193");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/index.js\n\n\n// EXTERNAL MODULE: ./node_modules/ethers/utils/networks.js\nvar networks = __webpack_require__("6f0b");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js\nvar fromEventPattern = __webpack_require__("8753");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/combineLatest.js\nvar combineLatest = __webpack_require__("a3fa");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/share.js\nvar share = __webpack_require__("f079");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/ethers.js\n\n\nfunction ethers_slicedToArray(arr, i) { return ethers_arrayWithHoles(arr) || ethers_iterableToArrayLimit(arr, i) || ethers_nonIterableRest(); }\n\nfunction ethers_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction ethers_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction ethers_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ethers_toConsumableArray(arr) { return ethers_arrayWithoutHoles(arr) || ethers_iterableToArray(arr) || ethers_nonIterableSpread(); }\n\nfunction ethers_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\n\nfunction ethers_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\n\nfunction ethers_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar ethers_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\n\n\n\n/**\n * Like rxjs\' fromEvent, but event can be an EventFilter\n *\n * @param target - Object to hook event listener, maybe a Provider or Contract\n * @param event - EventFilter or string representing the event to listen to\n * @param resultSelector - A map of events arguments to output parameters\n *      Default is to pass only first parameter\n * @returns Observable of target.on(event) events\n */\n\nfunction fromEthersEvent(target, event, resultSelector) {\n  return Object(fromEventPattern["a" /* fromEventPattern */])(function (handler) {\n    return target.on(event, handler);\n  }, function (handler) {\n    return target.removeListener(event, handler);\n  }, resultSelector);\n}\n/**\n * getEventsStream returns a stream of T-type tuples (arrays) from Contract\'s\n * events from filters. These events are polled since provider\'s [re]setEventsBlock to newest\n * polled block. If both \'fromBlock$\' and \'lastSeenBlock$\' are specified, also fetch past events\n * since fromBlock up to lastSeenBlock$ === provider.resetEventsBlock - 1\n * T must be a tuple-like type receiving all filters arguments plus the respective Event in the end\n *\n * @param contract - Contract source instance for filters, connected to a provider\n * @param filters - array of OR filters from tokenNetwork\n * @param fromBlock$ - Observable of a past blockNumber since when to fetch past events\n *                     If not provided, last resetEventsBlock is automatically used.\n * @returns Observable of contract\'s events\n */\n\nfunction getEventsStream(contract, filters, fromBlock$) {\n  var provider = contract.provider;\n\n  var logToEvent = function logToEvent(log) {\n    // parse log into [...args, event: Event] array,\n    // the same that contract.on events/callbacks\n    var parsed = contract.interface.parseLog(log);\n    if (!parsed) return;\n    var args = Array.prototype.slice.call(parsed.values); // not all parameters quite needed right now, but let\'s comply with the interface\n\n    var event = Object.assign({}, log, parsed, {\n      args: args,\n      removeListener: function removeListener() {},\n      getBlock: function getBlock() {\n        return provider.getBlock(log.blockHash);\n      },\n      getTransaction: function getTransaction() {\n        return provider.getTransaction(log.transactionHash);\n      },\n      getTransactionReceipt: function getTransactionReceipt() {\n        return provider.getTransactionReceipt(log.transactionHash);\n      },\n      decode: function decode(data, topics) {\n        return parsed.decode(data, topics || log.topics);\n      }\n    });\n    return [].concat(ethers_toConsumableArray(args), [event]);\n  }; // past events (in the closed-interval=[fromBlock, lastSeenBlock]),\n  // fetch once, sort by blockNumber, emit all, complete\n\n\n  var pastEvents$ = empty["a" /* EMPTY */],\n      // of(constant) ensures newEvents$ is registered immediately if fromBlock$ not provided\n  nextBlock$ = Object(of["a" /* of */])(-1);\n\n  if (fromBlock$) {\n    // if fetching pastEvents$, nextBlock$ is used to sync/avoid intersection between Events$\n    // pastEvents$ => [fromBlock$, nextBlock$], newEvents$ => ]nextBlock$, ...latest]\n    nextBlock$ = Object(defer["a" /* defer */])(function () {\n      return provider.blockNumber ? Object(of["a" /* of */])(provider.blockNumber) : fromEthersEvent(provider, \'block\').pipe(Object(first["a" /* first */])(), Object(map["a" /* map */])(function (b) {\n        return provider.blockNumber || b;\n      }));\n    }).pipe(Object(share["a" /* share */])());\n    pastEvents$ = Object(combineLatest["a" /* combineLatest */])(fromBlock$, nextBlock$).pipe(Object(first["a" /* first */])(), Object(switchMap["a" /* switchMap */])(function (_ref) {\n      var _ref2 = ethers_slicedToArray(_ref, 2),\n          fromBlock = _ref2[0],\n          toBlock = _ref2[1];\n\n      return Promise.all(filters.map(function (filter) {\n        return provider.getLogs(Object.assign({}, filter, {\n          fromBlock: fromBlock,\n          toBlock: toBlock\n        }));\n      }));\n    }), // flatten array of each getLogs query response and sort them\n    // emit log array elements as separate logs into stream (unwind)\n    Object(mergeMap["a" /* mergeMap */])(function (logs) {\n      return Object(from["a" /* from */])(Object(lodash["sortBy"])(Object(lodash["flatten"])(logs), [\'blockNumber\']));\n    }), Object(map["a" /* map */])(logToEvent), Object(filter["a" /* filter */])(isntNil));\n  } // new events (in open-interval=]lastSeenBlock, latest])\n  // where lastSeenBlock is the currentBlock at call time\n  // doesn\'t complete, keep emitting events for each new block (if any) until unsubscription\n\n\n  var newEvents$ = nextBlock$.pipe(Object(mergeMap["a" /* mergeMap */])(function () {\n    return Object(from["a" /* from */])(filters);\n  }), Object(mergeMap["a" /* mergeMap */])(function (filter) {\n    return fromEthersEvent(provider, filter);\n  }), Object(map["a" /* map */])(logToEvent), Object(filter["a" /* filter */])(isntNil));\n  return Object(merge["a" /* merge */])(pastEvents$, newEvents$);\n}\n/**\n * Like Provider.getNetwork, but fetches every time instead of using cached property\n *\n * @param provider - Provider to fetch data from\n * @returns Promise of Network info\n */\n\nfunction getNetwork(provider) {\n  return ethers_awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = networks["getNetwork"];\n            _context.t1 = parseInt;\n            _context.next = 4;\n            return provider.send(\'net_version\', []);\n\n          case 4:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            return _context.abrupt("return", (0, _context.t0)(_context.t3));\n\n          case 7:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n/**\n * Patch JsonRpcProvider.send to try personal_sign first, and fallback to eth_sign if it fails\n * Call it once on the provider instance\n *\n * @param provider - A JsonRpcProvider instance to patch\n */\n\nfunction patchSignSend(provider) {\n  var origSend = provider.send;\n\n  provider.send = function (method, params) {\n    return ethers_awaiter(this, void 0, void 0,\n    /*#__PURE__*/\n    regenerator_default.a.mark(function _callee2() {\n      return regenerator_default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(method === \'eth_sign\')) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt("return", origSend.apply(this, [\'personal_sign\', [params[1], params[0]]]).catch(function (err) {\n                // on first error, if personal_sign isn\'t available\n                if (err instanceof Error && (err.message.includes(\'The method personal_sign does not exist\') || err.message.includes(\'Method personal_sign not supported\'))) {\n                  provider.send = origSend; // un-patch\n\n                  return provider.send(method, params); // and retry with eth_sign\n                }\n\n                throw err; // else, re-raise\n              }));\n\n            case 2:\n              return _context2.abrupt("return", origSend.apply(this, [method, params]));\n\n            case 3:\n            case "end":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n  };\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/epics.js\n\n\nvar epics_this = undefined;\n\nfunction epics_slicedToArray(arr, i) { return epics_arrayWithHoles(arr) || epics_iterableToArrayLimit(arr, i) || epics_nonIterableRest(); }\n\nfunction epics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction epics_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction epics_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction epics_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nvar epics_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Fetch current blockNumber, register for new block events and emit newBlock actions\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param provider - RaidenEpicDeps members\n * @returns Observable of newBlock actions\n */\n\nvar epics_initNewBlockEpic = function initNewBlockEpic(_ref, _ref2, _ref3) {\n  epics_objectDestructuringEmpty(_ref);\n\n  epics_objectDestructuringEmpty(_ref2);\n\n  var provider = _ref3.provider;\n  return Object(from["a" /* from */])(provider.getBlockNumber()).pipe(Object(mergeMap["a" /* mergeMap */])(function (blockNumber) {\n    return Object(merge["a" /* merge */])(Object(of["a" /* of */])(blockNumber), fromEthersEvent(provider, \'block\'));\n  }), Object(map["a" /* map */])(function (blockNumber) {\n    return newBlock({\n      blockNumber: blockNumber\n    });\n  }));\n};\n/**\n * Monitor registry for new token networks and monitor them\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param registryContract,contractsInfo - RaidenEpicDeps members\n * @returns Observable of tokenMonitored actions\n */\n\nvar epics_initMonitorRegistryEpic = function initMonitorRegistryEpic(_ref4, state$, _ref5) {\n  epics_objectDestructuringEmpty(_ref4);\n\n  var registryContract = _ref5.registryContract,\n      contractsInfo = _ref5.contractsInfo;\n  return state$.pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (state$) {\n    return state$.pipe(Object(first["a" /* first */])(), Object(switchMap["a" /* switchMap */])(function (state) {\n      return Object(merge["a" /* merge */])( // monitor old (in case of empty tokens) and new registered tokens\n      // and starts monitoring every registered token\n      getEventsStream(registryContract, [registryContract.filters.TokenNetworkCreated(null, null)], Object(lodash["isEmpty"])(state.tokens) ? Object(of["a" /* of */])(contractsInfo.TokenNetworkRegistry.block_number) : undefined).pipe(Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(map["a" /* map */])(function (_ref6) {\n        var _ref7 = epics_slicedToArray(_ref6, 2),\n            _ref7$ = epics_slicedToArray(_ref7[0], 3),\n            token = _ref7$[0],\n            tokenNetwork = _ref7$[1],\n            event = _ref7$[2],\n            state = _ref7[1];\n\n        return tokenMonitored({\n          token: token,\n          tokenNetwork: tokenNetwork,\n          fromBlock: !(token in state.tokens) ? event.blockNumber : undefined\n        });\n      })), // monitor previously monitored tokens\n      Object(from["a" /* from */])(Object.entries(state.tokens)).pipe(Object(map["a" /* map */])(function (_ref8) {\n        var _ref9 = epics_slicedToArray(_ref8, 2),\n            token = _ref9[0],\n            tokenNetwork = _ref9[1];\n\n        return tokenMonitored({\n          token: token,\n          tokenNetwork: tokenNetwork\n        });\n      })));\n    }));\n  }));\n};\n/**\n * Monitor channels previously already on state\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of channelMonitored actions\n */\n\nvar epics_initMonitorChannelsEpic = function initMonitorChannelsEpic(_ref10, state$) {\n  epics_objectDestructuringEmpty(_ref10);\n\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee(state) {\n    var _i2, _Object$entries, _Object$entries$_i, tokenNetwork, obj, _i3, _Object$entries2, _Object$entries2$_i, partner, channel;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _i2 = 0, _Object$entries = Object.entries(state.channels);\n\n          case 1:\n            if (!(_i2 < _Object$entries.length)) {\n              _context.next = 16;\n              break;\n            }\n\n            _Object$entries$_i = epics_slicedToArray(_Object$entries[_i2], 2), tokenNetwork = _Object$entries$_i[0], obj = _Object$entries$_i[1];\n            _i3 = 0, _Object$entries2 = Object.entries(obj);\n\n          case 4:\n            if (!(_i3 < _Object$entries2.length)) {\n              _context.next = 13;\n              break;\n            }\n\n            _Object$entries2$_i = epics_slicedToArray(_Object$entries2[_i3], 2), partner = _Object$entries2$_i[0], channel = _Object$entries2$_i[1];\n\n            if (!(channel.state === ChannelState.opening)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt("continue", 10);\n\n          case 8:\n            _context.next = 10;\n            return channelMonitored({\n              id: channel.id\n            }, {\n              tokenNetwork: tokenNetwork,\n              partner: partner\n            });\n\n          case 10:\n            _i3++;\n            _context.next = 4;\n            break;\n\n          case 13:\n            _i2++;\n            _context.next = 1;\n            break;\n\n          case 16:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n};\n/**\n * Monitor provider to ensure account continues to be available and network stays the same\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param address,network,provider - RaidenEpicDeps members\n * @returns Observable of raidenShutdown actions\n */\n\nvar epics_initMonitorProviderEpic = function initMonitorProviderEpic(_ref11, _ref12, _ref13) {\n  epics_objectDestructuringEmpty(_ref11);\n\n  epics_objectDestructuringEmpty(_ref12);\n\n  var address = _ref13.address,\n      network = _ref13.network,\n      provider = _ref13.provider;\n  return Object(from["a" /* from */])(provider.listAccounts()).pipe( // at init time, check if our address is in provider\'s accounts list\n  // if not, it means Signer is a local Wallet or another non-provider-side account\n  // if yes, poll accounts every 1s and monitors if address is still there\n  // also, every 1s poll current provider network and monitors if it\'s the same\n  // if any check fails, emits RaidenShutdownAction, nothing otherwise\n  // Poll reason from: https://github.com/MetaMask/faq/blob/master/DEVELOPERS.md\n  // first/init-time check\n  Object(map["a" /* map */])(function (accounts) {\n    return accounts.includes(address);\n  }), Object(mergeMap["a" /* mergeMap */])(function (isProviderAccount) {\n    return Object(interval["a" /* interval */])(provider.pollingInterval).pipe(Object(mergeMap["a" /* mergeMap */])(function () {\n      return Object(merge["a" /* merge */])( // if isProviderAccount, also polls and monitors accounts list\n      isProviderAccount ? Object(from["a" /* from */])(provider.listAccounts()).pipe(Object(mergeMap["a" /* mergeMap */])(function (accounts) {\n        return !accounts.includes(address) ? Object(of["a" /* of */])(raidenShutdown({\n          reason: ShutdownReason.ACCOUNT_CHANGED\n        })) : empty["a" /* EMPTY */];\n      })) : empty["a" /* EMPTY */], // unconditionally monitors network changes\n      Object(from["a" /* from */])(getNetwork(provider)).pipe(Object(mergeMap["a" /* mergeMap */])(function (curNetwork) {\n        return curNetwork.chainId !== network.chainId ? Object(of["a" /* of */])(raidenShutdown({\n          reason: ShutdownReason.NETWORK_CHANGED\n        })) : empty["a" /* EMPTY */];\n      })));\n    }));\n  }));\n};\n/**\n * Starts monitoring a token network for events\n * When this action goes through (because a former or new token registry event was deteceted),\n * subscribe to events and emit respective actions to the stream. Currently:\n * - ChannelOpened events with us or by us\n *\n * @param action$ - Observable of tokenMonitored actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of channelOpened actions\n */\n\nvar epics_tokenMonitoredEpic = function tokenMonitoredEpic(action$, _ref14, _ref15) {\n  epics_objectDestructuringEmpty(_ref14);\n\n  var address = _ref15.address,\n      getTokenNetworkContract = _ref15.getTokenNetworkContract;\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(tokenMonitored)), Object(groupBy["a" /* groupBy */])(function (action) {\n    return action.payload.tokenNetwork;\n  }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n    return grouped$.pipe(Object(exhaustMap["a" /* exhaustMap */])(function (action) {\n      var tokenNetworkContract = getTokenNetworkContract(action.payload.tokenNetwork);\n      var filters = [tokenNetworkContract.filters.ChannelOpened(null, address, null, null), tokenNetworkContract.filters.ChannelOpened(null, null, address, null)];\n      return getEventsStream(tokenNetworkContract, filters, // if first time monitoring this token network,\n      // fetch TokenNetwork\'s pastEvents since registry deployment as fromBlock$\n      action.payload.fromBlock ? Object(of["a" /* of */])(action.payload.fromBlock) : undefined).pipe(Object(filter["a" /* filter */])(function (_ref16) {\n        var _ref17 = epics_slicedToArray(_ref16, 3),\n            p1 = _ref17[1],\n            p2 = _ref17[2];\n\n        return p1 === address || p2 === address;\n      }), Object(map["a" /* map */])(function (_ref18) {\n        var _ref19 = epics_slicedToArray(_ref18, 5),\n            id = _ref19[0],\n            p1 = _ref19[1],\n            p2 = _ref19[2],\n            settleTimeout = _ref19[3],\n            event = _ref19[4];\n\n        return channelOpened({\n          id: id.toNumber(),\n          settleTimeout: settleTimeout.toNumber(),\n          openBlock: event.blockNumber,\n          isFirstParticipant: address === p1,\n          txHash: event.transactionHash\n        }, {\n          tokenNetwork: tokenNetworkContract.address,\n          partner: address === p1 ? p2 : p1\n        });\n      }));\n    }));\n  }));\n};\n/**\n * Monitors a channel for channel Events\n * Can be called either at initialization time (for previously known channels on previously\n * monitored TokenNetwork) or by a new detected ChannelOpenedAction. On the later case,\n * also fetches events since Channel.openBlock.\n * Currently monitored events:\n * - ChannelNewDeposit, fires a channelDeposited action\n * - ChannelClosedEvent, fires a channelClosed action\n * - ChannelSettledEvent, fires a channelSettled action and completes that channel observable\n *\n * @param action$ - Observable of channelMonitored actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of channelDeposited,channelClosed,channelSettled actions\n */\n\nvar epics_channelMonitoredEpic = function channelMonitoredEpic(action$, _ref20, _ref21) {\n  epics_objectDestructuringEmpty(_ref20);\n\n  var getTokenNetworkContract = _ref21.getTokenNetworkContract;\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(channelMonitored)), Object(groupBy["a" /* groupBy */])(function (action) {\n    return "".concat(action.payload.id, "#").concat(action.meta.partner, "@").concat(action.meta.tokenNetwork);\n  }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n    return grouped$.pipe(Object(exhaustMap["a" /* exhaustMap */])(function (action) {\n      var tokenNetworkContract = getTokenNetworkContract(action.meta.tokenNetwork);\n      var depositFilter = tokenNetworkContract.filters.ChannelNewDeposit(action.payload.id, null, null),\n          withdrawFilter = tokenNetworkContract.filters.ChannelWithdraw(action.payload.id, null, null),\n          closedFilter = tokenNetworkContract.filters.ChannelClosed(action.payload.id, null, null, null),\n          settledFilter = tokenNetworkContract.filters.ChannelSettled(action.payload.id, null, null, null, null),\n          mergedFilter = {\n        address: tokenNetworkContract.address,\n        topics: [[depositFilter.topics[0], withdrawFilter.topics[0], closedFilter.topics[0], settledFilter.topics[0]], [settledFilter.topics[1]]]\n      };\n      /**\n       * Guards that an event data tuple matches the type of a given filter\n       *\n       * Type must be explicitly passed as generic type parameter, and a corresponding filter\n       * as first parameter\n       *\n       * @param filter - Filter of an event of type T\n       * @param data - event data tuple, where last element is the Event object\n       * @returns Truty if event data matches filter\n       */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      function isEvent(filter, data) {\n        var event = data[data.length - 1];\n        if (!event || !event.topics || !filter.topics) return false;\n        var topic0 = filter.topics[0];\n        return Array.isArray(topic0) ? topic0.includes(event.topics[0]) : topic0 === event.topics[0];\n      }\n\n      return getEventsStream(tokenNetworkContract, [mergedFilter], // if channelMonitored triggered by ChannelOpenedAction,\n      // fetch Channel\'s pastEvents since channelOpened blockNumber as fromBlock$\n      action.payload.fromBlock ? Object(of["a" /* of */])(action.payload.fromBlock) : undefined).pipe(Object(mergeMap["a" /* mergeMap */])(\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee2(data) {\n        var _data, id, participant, totalDeposit, event, _data2, _id, _participant, totalWithdraw, _event, _data3, _id2, _participant2, _event2, _data4, _id3, _event3;\n\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!isEvent(depositFilter, data)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _data = epics_slicedToArray(data, 4), id = _data[0], participant = _data[1], totalDeposit = _data[2], event = _data[3];\n                _context2.next = 4;\n                return channelDeposited({\n                  id: id.toNumber(),\n                  participant: participant,\n                  totalDeposit: totalDeposit,\n                  txHash: event.transactionHash\n                }, action.meta);\n\n              case 4:\n                _context2.next = 22;\n                break;\n\n              case 6:\n                if (!isEvent(withdrawFilter, data)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _data2 = epics_slicedToArray(data, 4), _id = _data2[0], _participant = _data2[1], totalWithdraw = _data2[2], _event = _data2[3];\n                _context2.next = 10;\n                return channelWithdrawn({\n                  id: _id.toNumber(),\n                  participant: _participant,\n                  totalWithdraw: totalWithdraw,\n                  txHash: _event.transactionHash\n                }, action.meta);\n\n              case 10:\n                _context2.next = 22;\n                break;\n\n              case 12:\n                if (!isEvent(closedFilter, data)) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _data3 = epics_slicedToArray(data, 5), _id2 = _data3[0], _participant2 = _data3[1], _event2 = _data3[4];\n                _context2.next = 16;\n                return channelClosed({\n                  id: _id2.toNumber(),\n                  participant: _participant2,\n                  closeBlock: _event2.blockNumber,\n                  txHash: _event2.transactionHash\n                }, action.meta);\n\n              case 16:\n                _context2.next = 22;\n                break;\n\n              case 18:\n                if (!isEvent(settledFilter, data)) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                _data4 = epics_slicedToArray(data, 6), _id3 = _data4[0], _event3 = _data4[5];\n                _context2.next = 22;\n                return channelSettled({\n                  id: _id3.toNumber(),\n                  settleBlock: _event3.blockNumber,\n                  txHash: _event3.transactionHash\n                }, action.meta);\n\n              case 22:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), // takeWhile tends to broad input to generic Action. We need to narrow it explicitly\n      Object(takeWhile["a" /* takeWhile */])(Object(lodash["negate"])(Object(typesafe_actions_umd_production["isActionOf"])(channelSettled)), true));\n    }));\n  }));\n};\n/**\n * A channelOpen action requested by user\n * Needs to be called on a previously monitored tokenNetwork. Calls TokenNetwork.openChannel\n * with given parameters. If tx goes through successfuly, stop as ChannelOpened success action\n * will instead be detected and fired by tokenMonitoredEpic. If anything detectable goes wrong,\n * fires a ChannnelOpenActionFailed instead\n *\n * @param action$ - Observable of channelOpen actions\n * @param state$ - Observable of RaidenStates\n * @param getTokenNetworkContract - RaidenEpicDeps members\n * @returns Observable of channelOpenFailed actions\n */\n\nvar epics_channelOpenEpic = function channelOpenEpic(action$, state$, _ref22) {\n  var getTokenNetworkContract = _ref22.getTokenNetworkContract,\n      config$ = _ref22.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(channelOpen)), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(mergeMap["a" /* mergeMap */])(function (_ref23) {\n    var _ref24 = epics_slicedToArray(_ref23, 3),\n        action = _ref24[0],\n        state = _ref24[1],\n        config = _ref24[2];\n\n    var tokenNetwork = getTokenNetworkContract(action.meta.tokenNetwork);\n    var channelState = Object(lodash["get"])(state.channels, [action.meta.tokenNetwork, action.meta.partner, \'state\']); // proceed only if channel is in \'opening\' state, set by this action\n\n    if (channelState !== ChannelState.opening) return Object(of["a" /* of */])(channelOpenFailed(new Error("Invalid channel state: ".concat(channelState)), action.meta)); // send openChannel transaction !!!\n\n    return Object(from["a" /* from */])(tokenNetwork.functions.openChannel(state.address, action.meta.partner, action.payload.settleTimeout || config.settleTimeout)).pipe(Object(mergeMap["a" /* mergeMap */])(function (tx) {\n      return epics_awaiter(epics_this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee3() {\n        return regenerator_default.a.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return tx.wait();\n\n              case 2:\n                _context3.t0 = _context3.sent;\n                _context3.t1 = tx;\n                return _context3.abrupt("return", {\n                  receipt: _context3.t0,\n                  tx: _context3.t1\n                });\n\n              case 5:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }), Object(map["a" /* map */])(function (_ref25) {\n      var receipt = _ref25.receipt,\n          tx = _ref25.tx;\n      if (!receipt.status) throw new Error("openChannel transaction \\"".concat(tx.hash, "\\" failed"));\n      return tx.hash;\n    }), // if succeeded, return a empty/completed observable\n    // actual ChannelOpenedAction will be detected and handled by tokenMonitoredEpic\n    // if any error happened on tx call/pipeline, mergeMap below won\'t be hit, and catchError\n    // will then emit the channelOpenFailed action instead\n    Object(mergeMapTo["a" /* mergeMapTo */])(empty["a" /* EMPTY */]), Object(catchError["a" /* catchError */])(function (error) {\n      return Object(of["a" /* of */])(channelOpenFailed(error, action.meta));\n    }));\n  }));\n};\n/**\n * When we see a new ChannelOpenedAction event, starts monitoring channel\n *\n * @param action$ - Observable of channelOpened actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of channelMonitored actions\n */\n\nvar epics_channelOpenedEpic = function channelOpenedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(channelOpened)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), // proceed only if channel is in \'open\' state and a deposit is required\n  Object(filter["a" /* filter */])(function (_ref26) {\n    var _ref27 = epics_slicedToArray(_ref26, 2),\n        action = _ref27[0],\n        state = _ref27[1];\n\n    var channel = Object(lodash["get"])(state.channels, [action.meta.tokenNetwork, action.meta.partner]);\n    return !!channel && channel.state === ChannelState.open;\n  }), Object(map["a" /* map */])(function (_ref28) {\n    var _ref29 = epics_slicedToArray(_ref28, 1),\n        action = _ref29[0];\n\n    return channelMonitored({\n      id: action.payload.id,\n      fromBlock: action.payload.openBlock\n    }, action.meta);\n  }));\n};\n/**\n * A ChannelDeposit action requested by user\n * Needs to be called on a previously monitored channel. Calls Token.approve for TokenNetwork\n * and then set respective setTotalDeposit. If all tx go through successfuly, stop as\n * ChannelDeposited success action will instead be detected and reacted by\n * channelMonitoredEpic. If anything detectable goes wrong, fires a ChannelDepositActionFailed\n * instead\n *\n * @param action$ - Observable of channelDeposit actions\n * @param state$ - Observable of RaidenStates\n * @param address,getTokenContract,getTokenNetworkContract - RaidenEpicDeps members\n * @returns Observable of channelDepositFailed actions\n */\n\nvar epics_channelDepositEpic = function channelDepositEpic(action$, state$, _ref30) {\n  var address = _ref30.address,\n      getTokenContract = _ref30.getTokenContract,\n      getTokenNetworkContract = _ref30.getTokenNetworkContract;\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(channelDeposit)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref31) {\n    var _ref32 = epics_slicedToArray(_ref31, 2),\n        action = _ref32[0],\n        state = _ref32[1];\n\n    var token = Object(lodash["findKey"])(state.tokens, function (tn) {\n      return tn === action.meta.tokenNetwork;\n    });\n\n    if (!token) {\n      var error = new Error("token for tokenNetwork \\"".concat(action.meta.tokenNetwork, "\\" not found"));\n      return Object(of["a" /* of */])(channelDepositFailed(error, action.meta));\n    }\n\n    var tokenContract = getTokenContract(token);\n    var tokenNetworkContract = getTokenNetworkContract(action.meta.tokenNetwork);\n    var channel = Object(lodash["get"])(state.channels, [action.meta.tokenNetwork, action.meta.partner]);\n\n    if (!channel || channel.state !== ChannelState.open || channel.id === undefined) {\n      var _error = new Error("channel for \\"".concat(action.meta.tokenNetwork, "\\" and \\"").concat(action.meta.partner, "\\" not found or not in \'open\' state"));\n\n      return Object(of["a" /* of */])(channelDepositFailed(_error, action.meta));\n    }\n\n    var channelId = channel.id; // send approve transaction\n\n    return Object(from["a" /* from */])(tokenContract.functions.approve(action.meta.tokenNetwork, action.payload.deposit)).pipe(Object(tap["a" /* tap */])(function (tx) {\n      return console.log("sent approve tx \\"".concat(tx.hash, "\\" to \\"").concat(token, "\\""));\n    }), Object(mergeMap["a" /* mergeMap */])(function (tx) {\n      return epics_awaiter(epics_this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee4() {\n        return regenerator_default.a.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return tx.wait();\n\n              case 2:\n                _context4.t0 = _context4.sent;\n                _context4.t1 = tx;\n                return _context4.abrupt("return", {\n                  receipt: _context4.t0,\n                  tx: _context4.t1\n                });\n\n              case 5:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }), Object(map["a" /* map */])(function (_ref33) {\n      var receipt = _ref33.receipt,\n          tx = _ref33.tx;\n      if (!receipt.status) throw new Error("token \\"".concat(token, "\\" approve transaction \\"").concat(tx.hash, "\\" failed"));\n      return tx.hash;\n    }), Object(tap["a" /* tap */])(function (txHash) {\n      return console.log("approve tx \\"".concat(txHash, "\\" successfuly mined!"));\n    })).pipe(Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref34) {\n      var _ref35 = epics_slicedToArray(_ref34, 2),\n          state = _ref35[1];\n\n      return (// send setTotalDeposit transaction\n        tokenNetworkContract.functions.setTotalDeposit(channelId, address, state.channels[action.meta.tokenNetwork][action.meta.partner].own.deposit.add(action.payload.deposit), action.meta.partner, {\n          gasLimit: 100e3\n        })\n      );\n    }), Object(tap["a" /* tap */])(function (tx) {\n      return console.log("sent setTotalDeposit tx \\"".concat(tx.hash, "\\" to \\"").concat(action.meta.tokenNetwork, "\\""));\n    }), Object(mergeMap["a" /* mergeMap */])(function (tx) {\n      return epics_awaiter(epics_this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee5() {\n        return regenerator_default.a.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return tx.wait();\n\n              case 2:\n                _context5.t0 = _context5.sent;\n                _context5.t1 = tx;\n                return _context5.abrupt("return", {\n                  receipt: _context5.t0,\n                  tx: _context5.t1\n                });\n\n              case 5:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n    }), Object(map["a" /* map */])(function (_ref36) {\n      var receipt = _ref36.receipt,\n          tx = _ref36.tx;\n      if (!receipt.status) throw new Error("tokenNetwork \\"".concat(action.meta.tokenNetwork, "\\" setTotalDeposit transaction \\"").concat(tx.hash, "\\" failed"));\n      return tx.hash;\n    }), Object(tap["a" /* tap */])(function (txHash) {\n      return console.log("setTotalDeposit tx \\"".concat(txHash, "\\" successfuly mined!"));\n    }), // if succeeded, return a empty/completed observable\n    // actual ChannelDepositedAction will be detected and handled by channelMonitoredEpic\n    // if any error happened on tx call/pipeline, mergeMap below won\'t be hit, and catchError\n    // will then emit the channelDepositFailed action instead\n    Object(mergeMapTo["a" /* mergeMapTo */])(empty["a" /* EMPTY */]), Object(catchError["a" /* catchError */])(function (error) {\n      return Object(of["a" /* of */])(channelDepositFailed(error, action.meta));\n    }));\n  }));\n};\n/**\n * A ChannelClose action requested by user\n * Needs to be called on an opened or closing (for retries) channel.\n * If tx goes through successfuly, stop as ChannelClosed success action will instead be\n * detected and reacted by channelMonitoredEpic. If anything detectable goes wrong, fires a\n * ChannelCloseActionFailed instead\n *\n * @param action$ - Observable of channelClose actions\n * @param state$ - Observable of RaidenStates\n * @param getTokenNetworkContract - RaidenEpicDeps members\n * @returns Observable of channelCloseFailed actions\n */\n\nvar epics_channelCloseEpic = function channelCloseEpic(action$, state$, _ref37) {\n  var address = _ref37.address,\n      network = _ref37.network,\n      getTokenNetworkContract = _ref37.getTokenNetworkContract,\n      signer = _ref37.signer;\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(channelClose)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref38) {\n    var _ref39 = epics_slicedToArray(_ref38, 2),\n        action = _ref39[0],\n        state = _ref39[1];\n\n    var tokenNetworkContract = getTokenNetworkContract(action.meta.tokenNetwork);\n    var channel = Object(lodash["get"])(state.channels, [action.meta.tokenNetwork, action.meta.partner]);\n\n    if (!channel || !(channel.state === ChannelState.open || channel.state === ChannelState.closing) || !channel.id) {\n      var error = new Error("channel for \\"".concat(action.meta.tokenNetwork, "\\" and \\"").concat(action.meta.partner, "\\" not found or not in \'open\' or \'closing\' state"));\n      return Object(of["a" /* of */])(channelCloseFailed(error, action.meta));\n    }\n\n    var channelId = channel.id;\n    var balanceHash = constants["HashZero"],\n        nonce = constants["Zero"],\n        additionalHash = constants["HashZero"],\n        nonClosingSignature = Object(utils["hexlify"])(SignatureZero); // TODO: enable this after we\'re able to receive transfers\n    // if (channel.partner.balanceProof) {\n    //   balanceHash = createBalanceHash(\n    //     channel.partner.balanceProof.transferredAmount,\n    //     channel.partner.balanceProof.lockedAmount,\n    //     channel.partner.balanceProof.locksroot,\n    //   );\n    //   nonce = channel.partner.balanceProof.nonce;\n    //   additionalHash = channel.partner.balanceProof.messageHash;\n    //   nonClosingSignature = channel.partner.balanceProof.signature;\n    // }\n\n    var closingMessage = Object(utils["concat"])([encode(action.meta.tokenNetwork, 20), encode(network.chainId, 32), encode(1, 32), encode(channelId, 32), encode(balanceHash, 32), encode(nonce, 32), encode(additionalHash, 32), encode(nonClosingSignature, 65)]); // UInt8Array of 277 bytes\n    // sign counter balance proof (while we don\'t receive transfers yet, it\'s always zero),\n    // then send closeChannel transaction with our signature\n\n    return Object(from["a" /* from */])(signer.signMessage(closingMessage)).pipe(Object(mergeMap["a" /* mergeMap */])(function (closingSignature) {\n      return tokenNetworkContract.functions.closeChannel(channelId, action.meta.partner, address, balanceHash, nonce, additionalHash, nonClosingSignature, closingSignature);\n    }), Object(tap["a" /* tap */])(function (tx) {\n      return console.log("sent closeChannel tx \\"".concat(tx.hash, "\\" to \\"").concat(action.meta.tokenNetwork, "\\""));\n    }), Object(mergeMap["a" /* mergeMap */])(function (tx) {\n      return epics_awaiter(epics_this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee6() {\n        return regenerator_default.a.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return tx.wait();\n\n              case 2:\n                _context6.t0 = _context6.sent;\n                _context6.t1 = tx;\n                return _context6.abrupt("return", {\n                  receipt: _context6.t0,\n                  tx: _context6.t1\n                });\n\n              case 5:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n    }), Object(map["a" /* map */])(function (_ref40) {\n      var receipt = _ref40.receipt,\n          tx = _ref40.tx;\n      if (!receipt.status) throw new Error("tokenNetwork \\"".concat(action.meta.tokenNetwork, "\\" closeChannel transaction \\"").concat(tx.hash, "\\" failed"));\n      console.log("closeChannel tx \\"".concat(tx.hash, "\\" successfuly mined!"));\n      return tx.hash;\n    }), // if succeeded, return a empty/completed observable\n    // actual ChannelClosedAction will be detected and handled by channelMonitoredEpic\n    // if any error happened on tx call/pipeline, mergeMap below won\'t be hit, and catchError\n    // will then emit the channelCloseFailed action instead\n    Object(mergeMapTo["a" /* mergeMapTo */])(empty["a" /* EMPTY */]), Object(catchError["a" /* catchError */])(function (error) {\n      return Object(of["a" /* of */])(channelCloseFailed(error, action.meta));\n    }));\n  }));\n};\n/**\n * A ChannelSettle action requested by user\n * Needs to be called on an settleable or settling (for retries) channel.\n * If tx goes through successfuly, stop as ChannelSettled success action will instead be\n * detected and reacted by channelMonitoredEpic. If anything detectable goes wrong, fires a\n * ChannelSettleActionFailed instead\n *\n * @param action$ - Observable of channelSettle actions\n * @param state$ - Observable of RaidenStates\n * @param address,getTokenNetworkContract - RaidenEpicDeps members\n * @returns Observable of channelSettleFailed actions\n */\n\nvar epics_channelSettleEpic = function channelSettleEpic(action$, state$, _ref41) {\n  var address = _ref41.address,\n      getTokenNetworkContract = _ref41.getTokenNetworkContract;\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(channelSettle)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref42) {\n    var _ref43 = epics_slicedToArray(_ref42, 2),\n        action = _ref43[0],\n        state = _ref43[1];\n\n    var tokenNetworkContract = getTokenNetworkContract(action.meta.tokenNetwork);\n    var channel = Object(lodash["get"])(state.channels, [action.meta.tokenNetwork, action.meta.partner]);\n\n    if (!channel || !(channel.state === ChannelState.settleable || channel.state === ChannelState.settling) || !channel.id) {\n      var error = new Error("channel for \\"".concat(action.meta.tokenNetwork, "\\" and \\"").concat(action.meta.partner, "\\" not found or not in \'settleable\' or \'settling\' state"));\n      return Object(of["a" /* of */])(channelSettleFailed(error, action.meta));\n    }\n\n    var channelId = channel.id;\n    var zeroBalanceProof = {\n      transferredAmount: constants["Zero"],\n      lockedAmount: constants["Zero"],\n      locksroot: constants["HashZero"]\n    };\n    var part1 = Object.assign({\n      address: action.meta.partner\n    }, channel.partner.balanceProof || zeroBalanceProof),\n        part2 = Object.assign({\n      address: address\n    }, channel.own.balanceProof || zeroBalanceProof);\n\n    if (channel.isFirstParticipant) {\n      var _ref44 = [part2, part1];\n      part1 = _ref44[0];\n      part2 = _ref44[1];\n    } // send settleChannel transaction\n\n\n    return Object(from["a" /* from */])(tokenNetworkContract.functions.settleChannel(channelId, part1.address, part1.transferredAmount, part1.lockedAmount, part1.locksroot, part2.address, part2.transferredAmount, part2.lockedAmount, part2.locksroot)).pipe(Object(tap["a" /* tap */])(function (tx) {\n      return console.log("sent settleChannel tx \\"".concat(tx.hash, "\\" to \\"").concat(action.meta.tokenNetwork, "\\""));\n    }), Object(mergeMap["a" /* mergeMap */])(function (tx) {\n      return epics_awaiter(epics_this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee7() {\n        return regenerator_default.a.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return tx.wait();\n\n              case 2:\n                _context7.t0 = _context7.sent;\n                _context7.t1 = tx;\n                return _context7.abrupt("return", {\n                  receipt: _context7.t0,\n                  tx: _context7.t1\n                });\n\n              case 5:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n    }), Object(map["a" /* map */])(function (_ref45) {\n      var receipt = _ref45.receipt,\n          tx = _ref45.tx;\n      if (!receipt.status) throw new Error("tokenNetwork \\"".concat(action.meta.tokenNetwork, "\\" settleChannel transaction \\"").concat(tx.hash, "\\" failed"));\n      console.log("settleChannel tx \\"".concat(tx.hash, "\\" successfuly mined!"));\n      return tx.hash;\n    }), // if succeeded, return a empty/completed observable\n    // actual ChannelSettledAction will be detected and handled by channelMonitoredEpic\n    // if any error happened on tx call/pipeline, mergeMap below won\'t be hit, and catchError\n    // will then emit the channelSettleFailed action instead\n    Object(mergeMapTo["a" /* mergeMapTo */])(empty["a" /* EMPTY */]), Object(catchError["a" /* catchError */])(function (error) {\n      return Object(of["a" /* of */])(channelSettleFailed(error, action.meta));\n    }));\n  }));\n};\n/**\n * Process newBlocks, emits ChannelSettleableAction if any closed channel is now settleable\n *\n * @param action$ - Observable of newBlock actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of channelSettleable actions\n */\n\nvar epics_channelSettleableEpic = function channelSettleableEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(newBlock)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee8(_ref46) {\n    var _ref47, blockNumber, state, tokenNetwork, partner, channel;\n\n    return regenerator_default.a.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref47 = epics_slicedToArray(_ref46, 2), blockNumber = _ref47[0].payload.blockNumber, state = _ref47[1];\n            _context8.t0 = regenerator_default.a.keys(state.channels);\n\n          case 2:\n            if ((_context8.t1 = _context8.t0()).done) {\n              _context8.next = 15;\n              break;\n            }\n\n            tokenNetwork = _context8.t1.value;\n            _context8.t2 = regenerator_default.a.keys(state.channels[tokenNetwork]);\n\n          case 5:\n            if ((_context8.t3 = _context8.t2()).done) {\n              _context8.next = 13;\n              break;\n            }\n\n            partner = _context8.t3.value;\n            channel = state.channels[tokenNetwork][partner];\n\n            if (!(channel.state === ChannelState.closed && channel.settleTimeout && // closed channels always have settleTimeout & closeBlock set\n            channel.closeBlock && blockNumber > channel.closeBlock + channel.settleTimeout)) {\n              _context8.next = 11;\n              break;\n            }\n\n            _context8.next = 11;\n            return channelSettleable({\n              settleableBlock: blockNumber\n            }, {\n              tokenNetwork: tokenNetwork,\n              partner: partner\n            });\n\n          case 11:\n            _context8.next = 5;\n            break;\n\n          case 13:\n            _context8.next = 2;\n            break;\n\n          case 15:\n          case "end":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  })));\n};\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/fromEvent.js\nvar fromEvent = __webpack_require__("9000");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/throwError.js\nvar throwError = __webpack_require__("9e2e");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/concat.js + 1 modules\nvar concat = __webpack_require__("ecc6");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/observable/timer.js\nvar timer = __webpack_require__("8914");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/toArray.js + 2 modules\nvar toArray = __webpack_require__("9b90");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/take.js\nvar take = __webpack_require__("c363");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/repeatWhen.js\nvar repeatWhen = __webpack_require__("f412");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/delay.js\nvar delay = __webpack_require__("f494");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/timeout.js + 2 modules\nvar timeout = __webpack_require__("7186");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js\nvar throwIfEmpty = __webpack_require__("011a");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/mapTo.js\nvar mapTo = __webpack_require__("8de5");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/retryWhen.js\nvar retryWhen = __webpack_require__("0c7b");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/switchMapTo.js\nvar switchMapTo = __webpack_require__("4e80");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/ignoreElements.js\nvar ignoreElements = __webpack_require__("e2a1");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/finalize.js\nvar finalize = __webpack_require__("09b6");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/startWith.js\nvar startWith = __webpack_require__("0c33");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/fetch/index.js\nvar fetch = __webpack_require__("0d2a");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/matrix-js-sdk/browser-index.js\nvar browser_index = __webpack_require__("183d");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/matrix-js-sdk/lib/logger.js\nvar lib_logger = __webpack_require__("51b1");\nvar logger_default = /*#__PURE__*/__webpack_require__.n(lib_logger);\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/matrix-js-sdk/lib/utils.js\nvar lib_utils = __webpack_require__("fc5d");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/matrix.js\n\n/**\n * Return server name without schema or path\n *\n * @param server - any URL\n * @returns server URL with domain and port (if present), without schema, paths or query params\n */\n\nfunction getServerName(server) {\n  var match = /^(?:\\w*:?\\/\\/)?([^/#?&]+)/.exec(server);\n  return match && match[1];\n}\n/**\n * MatrixClient doesn\'t expose this API, but it does exist, so we create it here\n *\n * @param matrix - an already setup and started MatrixClient\n * @param userId - to fetch status/presence from\n * @returns Promise to object containing status data\n */\n\nfunction getUserPresence(matrix, userId) {\n  var path = Object(lib_utils["encodeUri"])(\'/presence/$userId/status\', {\n    $userId: userId\n  });\n  return matrix._http.authedRequest(undefined, \'GET\', path);\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/lru.js\nfunction lru_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction lru_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction lru_createClass(Constructor, protoProps, staticProps) { if (protoProps) lru_defineProperties(Constructor.prototype, protoProps); if (staticProps) lru_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Simple Map-based LRU cache\n *\n * @param max - Maximum size of cache\n */\nvar LruCache =\n/*#__PURE__*/\nfunction () {\n  function LruCache(max) {\n    lru_classCallCheck(this, LruCache);\n\n    this.values = new Map();\n    this.max = max;\n  }\n\n  lru_createClass(LruCache, [{\n    key: "get",\n    value: function get(key) {\n      var entry = this.values.get(key);\n\n      if (entry) {\n        // peek the entry, re-insert for LRU strategy\n        this.values.delete(key);\n        this.values.set(key, entry);\n      }\n\n      return entry;\n    }\n  }, {\n    key: "put",\n    value: function put(key, value) {\n      if (this.values.size >= this.max) {\n        // least-recently used cache eviction strategy\n        var keyToDelete = this.values.keys().next().value;\n        this.values.delete(keyToDelete);\n      }\n\n      this.values.set(key, value);\n    }\n  }]);\n\n  return LruCache;\n}();\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/utils.js\nfunction transport_utils_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n/**\n * Helper to map/get an aggregated Presences observable from action$ bus\n * Known presences as { address: <last seen MatrixPresenceUpdateAction> } mapping\n * It\'s memoized and shared, so all subscriptions share the same mapped/output object\n *\n * @param action$ - Observable\n * @returns Observable of aggregated Presences from subscription to now\n */\n\nvar getPresences$ = Object(lodash["memoize"])(function (action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(matrixPresenceUpdate)), Object(scan["a" /* scan */])( // scan all presence update actions and populate/output a per-address mapping\n  function (presences, update) {\n    return Object.assign({}, presences, transport_utils_defineProperty({}, update.meta.address, update));\n  }, {}), Object(share["a" /* share */])(), Object(startWith["a" /* startWith */])({}));\n});\n/**\n * Return the array of configured global rooms\n *\n * @param config - object to gather the list from\n * @returns Array of room names\n */\n\nfunction globalRoomNames(config) {\n  return [config.discoveryRoom, config.pfsRoom].filter(isntNil);\n}\n/**\n * Curried function (arity=2) which matches room passed as second argument based on roomId, name or\n * alias passed as first argument\n *\n * @param roomIdOrAlias - Room Id, name, canonical or normal alias for room\n * @param room - Room to test\n * @returns True if room matches term, false otherwise\n */\n\nvar roomMatch = Object(lodash["curry"])(function (roomIdOrAlias, room) {\n  return roomIdOrAlias === room.roomId || roomIdOrAlias === room.name || roomIdOrAlias === room.getCanonicalAlias() || room.getAliases().includes(roomIdOrAlias);\n});\n/**\n * Returns an observable to a (possibly pending) room matching roomId or some alias\n * This method doesn\'t try to join the room, just wait for it to show up in MatrixClient.\n *\n * @param matrix - Client instance to fetch room info from\n * @param roomIdOrAlias - room id or alias to look for\n * @returns Observable to populated room instance\n */\n\nfunction getRoom$(matrix, roomIdOrAlias) {\n  var room = matrix.getRoom(roomIdOrAlias);\n  if (!room) room = matrix.getRooms().find(roomMatch(roomIdOrAlias));\n  if (room) return Object(of["a" /* of */])(room);\n  return Object(fromEvent["a" /* fromEvent */])(matrix, \'Room\').pipe(Object(filter["a" /* filter */])(roomMatch(roomIdOrAlias)), Object(take["a" /* take */])(1));\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/epics.js\n\n\nfunction transport_epics_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction transport_epics_slicedToArray(arr, i) { return transport_epics_arrayWithHoles(arr) || transport_epics_iterableToArrayLimit(arr, i) || transport_epics_nonIterableRest(); }\n\nfunction transport_epics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction transport_epics_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction transport_epics_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // unavailable just means the user didn\'t do anything over a certain amount of time, but they\'re\n// still there, so we consider the user as available/online then\n\nvar AVAILABLE = [\'online\', \'unavailable\'];\nvar userRe = /^@(0x[0-9a-f]{40})[.:]/i;\n/**\n * Search user directory for valid users matching a given address and return latest\n *\n * @param matrix - Matrix client to search users from\n * @param address - Address of interest\n * @returns Observable of user with most recent presence\n */\n\nfunction searchAddressPresence$(matrix, address) {\n  return Object(defer["a" /* defer */])(function () {\n    return (// search for any user containing the address of interest in its userId\n      matrix.searchUserDirectory({\n        term: address.toLowerCase()\n      })\n    );\n  }).pipe( // for every result matches, verify displayName signature is address of interest\n  Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee(_ref) {\n    var results, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, user, match, recovered;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            results = _ref.results;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 4;\n            _iterator = results[Symbol.iterator]();\n\n          case 6:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context.next = 27;\n              break;\n            }\n\n            user = _step.value;\n\n            if (user.display_name) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt("continue", 24);\n\n          case 10:\n            _context.prev = 10;\n            match = userRe.exec(user.user_id);\n\n            if (!(!match || Object(utils["getAddress"])(match[1]) !== address)) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt("continue", 24);\n\n          case 14:\n            recovered = Object(utils["verifyMessage"])(user.user_id, user.display_name);\n\n            if (!(!recovered || recovered !== address)) {\n              _context.next = 17;\n              break;\n            }\n\n            return _context.abrupt("continue", 24);\n\n          case 17:\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context["catch"](10);\n            return _context.abrupt("continue", 24);\n\n          case 22:\n            _context.next = 24;\n            return user.user_id;\n\n          case 24:\n            _iteratorNormalCompletion = true;\n            _context.next = 6;\n            break;\n\n          case 27:\n            _context.next = 33;\n            break;\n\n          case 29:\n            _context.prev = 29;\n            _context.t1 = _context["catch"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t1;\n\n          case 33:\n            _context.prev = 33;\n            _context.prev = 34;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 36:\n            _context.prev = 36;\n\n            if (!_didIteratorError) {\n              _context.next = 39;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 39:\n            return _context.finish(36);\n\n          case 40:\n            return _context.finish(33);\n\n          case 41:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 29, 33, 41], [10, 19], [34,, 36, 40]]);\n  })), Object(mergeMap["a" /* mergeMap */])(function (userId) {\n    return getUserPresence(matrix, userId).then(function (presence) {\n      return Object.assign({}, presence, {\n        user_id: userId\n      });\n    }).catch(function (err) {\n      console.log(\'Error fetching user presence, ignoring:\', err);\n      return undefined;\n    });\n  }), Object(filter["a" /* filter */])(isntNil), Object(toArray["a" /* toArray */])(), // for all matched/verified users, get its presence through dedicated API\n  // it\'s required because, as the user events could already have been handled\n  // and filtered out by matrixPresenceUpdateEpic because it wasn\'t yet a\n  // user-of-interest, we could have missed presence updates, then we need to\n  // fetch it here directly, and from now on, that other epic will monitor its\n  // updates, and sort by most recently seen user\n  Object(map["a" /* map */])(function (presences) {\n    if (!presences.length) throw new Error("Could not find any user with valid signature for ".concat(address));\n    return Object(lodash["minBy"])(presences, \'last_active_ago\');\n  }));\n}\n/**\n * Returns an observable which keeps inviting userId to roomId while user doesn\'t join\n *\n * If user already joined, completes immediatelly.\n *\n * @param matrix - client instance\n * @param roomId - room to invite user to\n * @param userId - user to be invited\n * @param config$ - Observable of config object containing httpTimeout used as iteration delay\n * @returns Cold observable which keep inviting user if needed and then completes.\n */\n\n\nfunction inviteLoop$(matrix, roomId, userId, config$) {\n  return Object(defer["a" /* defer */])(function () {\n    var room = matrix.getRoom(roomId);\n    return room ? // use room already present in matrix instance\n    Object(of["a" /* of */])(room) : // wait for room\n    Object(fromEvent["a" /* fromEvent */])(matrix, \'Room\').pipe(Object(filter["a" /* filter */])(function (room) {\n      return room.roomId === roomId;\n    }), Object(take["a" /* take */])(1));\n  }).pipe( // stop if user already a room member\n  Object(filter["a" /* filter */])(function (room) {\n    var member = room.getMember(userId);\n    return !member || member.membership !== \'join\';\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref2) {\n    var _ref3 = transport_epics_slicedToArray(_ref2, 2),\n        httpTimeout = _ref3[1].httpTimeout;\n\n    return (// defer here ensures invite is re-done on repeat (re-subscription)\n      Object(defer["a" /* defer */])(function () {\n        return matrix.invite(roomId, userId);\n      }).pipe( // while shouldn\'t stop (by unsubscribe or takeUntil)\n      Object(repeatWhen["a" /* repeatWhen */])(function (completed$) {\n        return completed$.pipe(Object(delay["a" /* delay */])(httpTimeout));\n      }), Object(takeUntil["a" /* takeUntil */])( // stop repeat+defer loop above when user joins\n      Object(fromEvent["a" /* fromEvent */])(matrix, \'RoomMember.membership\', function (_ref4, member) {\n        transport_epics_objectDestructuringEmpty(_ref4);\n\n        return member;\n      }).pipe(Object(filter["a" /* filter */])(function (member) {\n        return member.roomId === roomId && member.userId === userId && member.membership === \'join\';\n      }))))\n    );\n  }));\n}\n/**\n * From a yaml list string, return as Array\n * E.g. yamlListToArray(`\n * # comment\n *   - test1\n *   - test2\n *   - test3\n * `) === [\'test1\', \'test2\', \'test3\']\n *\n * @param yml - String containing only YAML list\n * @returns List of strings inside yml-encoded text\n */\n\n\nfunction yamlListToArray(yml) {\n  // match all strings starting with optional spaces followed by a dash + space\n  // capturing only the content of the list item, trimming spaces\n  var reg = /^\\s*-\\s*(.+?)\\s*$/gm;\n  var results = [];\n  var match;\n\n  while (match = reg.exec(yml)) {\n    results.push(match[1]);\n  }\n\n  return results;\n}\n/**\n * Given a server name (schema defaults to https:// and is prepended if missing), returns HTTP GET\n * round trip time (time to response)\n *\n * @param server - Server name with or without schema\n * @param httpTimeout - Optional timeout for the HTTP request\n * @returns Promise to a { server, rtt } object, where `rtt` may be NaN\n */\n\n\nfunction matrixRTT$(server, httpTimeout) {\n  if (!server.includes(\'://\')) server = \'https://\' + server;\n  return Object(defer["a" /* defer */])(function () {\n    var start = Date.now();\n    return Object(fetch["fromFetch"])(server + \'/_matrix/client/versions\').pipe(Object(timeout["a" /* timeout */])(httpTimeout), Object(map["a" /* map */])(function (_ref5) {\n      var ok = _ref5.ok;\n      return ok ? Date.now() : NaN;\n    }), Object(catchError["a" /* catchError */])(function () {\n      return Object(of["a" /* of */])(NaN);\n    }), Object(map["a" /* map */])(function (end) {\n      return {\n        server: server,\n        rtt: end - start\n      };\n    }));\n  });\n}\n/**\n * Returns an observable of servers, sorted by response time\n *\n * @param matrixServerLookup - URL containing an YAML list of servers url\n * @param httpTimeout - httpTimeout to limit queries\n * @returns Observable of { server, rtt } objects, emitted in increasing rtt order\n */\n\n\nfunction fetchSortedMatrixServers$(matrixServerLookup, httpTimeout) {\n  return Object(fetch["fromFetch"])(matrixServerLookup).pipe(Object(mergeMap["a" /* mergeMap */])(function (response) {\n    return !response.ok ? Object(throwError["a" /* throwError */])(new Error("Could not fetch server list from \\"".concat(matrixServerLookup, "\\" => ").concat(response.status))) : response.text();\n  }), Object(timeout["a" /* timeout */])(httpTimeout), Object(mergeMap["a" /* mergeMap */])(function (text) {\n    return yamlListToArray(text);\n  }), Object(mergeMap["a" /* mergeMap */])(function (server) {\n    return matrixRTT$(server, httpTimeout);\n  }), Object(toArray["a" /* toArray */])(), Object(mergeMap["a" /* mergeMap */])(function (rtts) {\n    return Object(lodash["sortBy"])(rtts, [\'rtt\']);\n  }), Object(filter["a" /* filter */])(function (_ref6) {\n    var rtt = _ref6.rtt;\n    return !isNaN(rtt);\n  }), Object(throwIfEmpty["a" /* throwIfEmpty */])(function () {\n    return new Error(\'Could not contact any matrix servers\');\n  }));\n}\n/**\n * Validate and setup a MatrixClient connected to server, possibly using previous \'setup\' data\n * May error if anything goes wrong.\n *\n * @param server - server URL, with schema\n * @param setup - optional previous setup/credentials data\n * @param deps - RaidenEpicDeps-like/partial object\n * @param deps.address - Our address (to compose matrix user)\n * @param deps.signer - Signer to be used to sign password and displayName\n * @param deps.config$ - Used to calculate global rooms to join\n * @returns Observable of one { matrix, server, setup } object\n */\n\n\nfunction setupMatrixClient$(server, setup, _ref7) {\n  var address = _ref7.address,\n      signer = _ref7.signer,\n      config$ = _ref7.config$;\n  var serverName = getServerName(server);\n  if (!serverName) throw new Error("Could not get serverName from \\"".concat(server, "\\""));\n  return Object(defer["a" /* defer */])(function () {\n    if (setup) {\n      // if matrixSetup was already issued before, and credentials are already in state\n      var matrix = Object(browser_index["createClient"])({\n        baseUrl: server,\n        userId: setup.userId,\n        accessToken: setup.accessToken,\n        deviceId: setup.deviceId\n      });\n      return Object(of["a" /* of */])({\n        matrix: matrix,\n        server: server,\n        setup: setup\n      });\n    } else {\n      var _matrix = Object(browser_index["createClient"])({\n        baseUrl: server\n      });\n\n      var userName = address.toLowerCase(),\n          userId = "@".concat(userName, ":").concat(serverName); // create password as signature of serverName, then try login or register\n\n      return Object(from["a" /* from */])(signer.signMessage(serverName)).pipe(Object(mergeMap["a" /* mergeMap */])(function (password) {\n        return Object(from["a" /* from */])(_matrix.loginWithPassword(userName, password)).pipe(Object(catchError["a" /* catchError */])(function () {\n          return _matrix.register(userName, password);\n        }));\n      }), Object(mergeMap["a" /* mergeMap */])(function (_ref8) {\n        var access_token = _ref8.access_token,\n            device_id = _ref8.device_id;\n        // matrix.register implementation doesn\'t set returned credentials\n        // which would require an unnecessary additional login request if we didn\'t\n        // set it here, and login doesn\'t set deviceId, so we set all credential\n        // parameters again here after successful login or register\n        _matrix.deviceId = device_id;\n        _matrix._http.opts.accessToken = access_token;\n        _matrix.credentials = {\n          userId: userId\n        }; // displayName must be signature of full userId for our messages to be accepted\n\n        return Object(from["a" /* from */])(signer.signMessage(userId)).pipe(Object(map["a" /* map */])(function (signedUserId) {\n          return {\n            matrix: _matrix,\n            server: server,\n            setup: {\n              userId: userId,\n              accessToken: access_token,\n              deviceId: device_id,\n              displayName: signedUserId\n            }\n          };\n        }));\n      }));\n    }\n  }).pipe(Object(withLatestFrom["a" /* withLatestFrom */])(config$), // the APIs below are authenticated, and therefore also act as validator\n  Object(mergeMap["a" /* mergeMap */])(function (_ref9) {\n    var _ref10 = transport_epics_slicedToArray(_ref9, 2),\n        _ref10$ = _ref10[0],\n        matrix = _ref10$.matrix,\n        server = _ref10$.server,\n        setup = _ref10$.setup,\n        config = _ref10[1];\n\n    return (// ensure displayName is set even on restarts\n      Object(from["a" /* from */])(matrix.setDisplayName(setup.displayName)).pipe(Object(mergeMap["a" /* mergeMap */])(function () {\n        return globalRoomNames(config);\n      }), Object(map["a" /* map */])(function (globalRoom) {\n        return "#".concat(globalRoom, ":").concat(serverName);\n      }), Object(mergeMap["a" /* mergeMap */])(function (alias) {\n        return matrix.joinRoom(alias);\n      }), Object(toArray["a" /* toArray */])(), // wait all joinRoom promises to complete\n      Object(mapTo["a" /* mapTo */])({\n        matrix: matrix,\n        server: server,\n        setup: setup\n      }))\n    );\n  }));\n}\n/**\n * Initialize matrix transport\n * The matrix client instance will be outputed to RaidenEpicDeps.matrix$ AsyncSubject\n * The setup info (including credentials, for persistence) will be the matrixSetup output action\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param address,network,signer,matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixSetup generated by initializing matrix client\n */\n\n\nvar epics_initMatrixEpic = function initMatrixEpic(_ref11, state$, _ref12) {\n  transport_epics_objectDestructuringEmpty(_ref11);\n\n  var address = _ref12.address,\n      signer = _ref12.signer,\n      matrix$ = _ref12.matrix$,\n      config$ = _ref12.config$;\n  return state$.pipe(Object(first["a" /* first */])(), // at startup\n  Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref13) {\n    var _ref14 = transport_epics_slicedToArray(_ref13, 2),\n        state = _ref14[0],\n        _ref14$ = _ref14[1],\n        matrixServer = _ref14$.matrixServer,\n        matrixServerLookup = _ref14$.matrixServerLookup,\n        httpTimeout = _ref14$.httpTimeout;\n\n    var server = Object(lodash["get"])(state, [\'transport\', \'matrix\', \'server\']),\n        setup = Object(lodash["get"])(state, [\'transport\', \'matrix\', \'setup\']);\n    var servers$Array = [];\n\n    if (matrixServer) {\n      // if config.matrixServer is set, we must use it (possibly re-using stored credentials,\n      // if matching), not fetch from lookup address\n      if (matrixServer === server) servers$Array.push(Object(of["a" /* of */])({\n        server: server,\n        setup: setup\n      }));else servers$Array.push(Object(of["a" /* of */])({\n        server: matrixServer\n      }));\n    } else {\n      // previously used server\n      if (server) servers$Array.push(Object(of["a" /* of */])({\n        server: server,\n        setup: setup\n      })); // fetched servers list\n      // notice it may include stored server again, but no stored setup, which could be the\n      // cause of the  first failure, so we allow it to try again (not necessarily first)\n\n      servers$Array.push(fetchSortedMatrixServers$(matrixServerLookup, httpTimeout));\n    }\n\n    var lastError;\n\n    var andSuppress = function andSuppress(err) {\n      return lastError = err, empty["a" /* EMPTY */];\n    }; // on [re-]subscription (defer), pops next observable and subscribe to it\n\n\n    return Object(defer["a" /* defer */])(function () {\n      return servers$Array.shift() || empty["a" /* EMPTY */];\n    }).pipe(Object(catchError["a" /* catchError */])(andSuppress), // servers$ may error, so store lastError\n    Object(concatMap["a" /* concatMap */])(function (_ref15) {\n      var server = _ref15.server,\n          setup = _ref15.setup;\n      return (// serially, try setting up client and validate its credential\n        setupMatrixClient$(server, setup, {\n          address: address,\n          signer: signer,\n          config$: config$\n        }).pipe( // store and suppress any \'setupMatrixClient$\' error\n        Object(catchError["a" /* catchError */])(andSuppress))\n      );\n    }), // on first setupMatrixClient$\'s success, emit, complete and unsubscribe\n    Object(first["a" /* first */])(), // with errors suppressed, only possible error here is \'no element in sequence\'\n    Object(retryWhen["a" /* retryWhen */])(function (err$) {\n      return (// if there\'re more servers$ observables in queue, emit once to retry from defer;\n        // else, errors output with lastError to unsubscribe\n        err$.pipe(Object(mergeMap["a" /* mergeMap */])(function () {\n          return servers$Array.length ? Object(of["a" /* of */])(null) : Object(throwError["a" /* throwError */])(lastError);\n        }))\n      );\n    }));\n  }), // on success\n  Object(mergeMap["a" /* mergeMap */])(function (_ref16) {\n    var matrix = _ref16.matrix,\n        server = _ref16.server,\n        setup = _ref16.setup;\n    return Object(merge["a" /* merge */])( // wait for matrixSetup to be persisted in state, then resolves matrix$ with client\n    state$.pipe(Object(pluck["a" /* pluck */])(\'transport\', \'matrix\', \'server\'), Object(filter["a" /* filter */])(function (_server) {\n      return !!_server;\n    }), Object(take["a" /* take */])(1), Object(tap["a" /* tap */])(function () {\n      matrix$.next(matrix);\n      matrix$.complete();\n    }), Object(switchMapTo["a" /* switchMapTo */])(matrix$), Object(delay["a" /* delay */])(1e3), // wait 1s before starting matrix, so event listeners can be registered\n    Object(mergeMap["a" /* mergeMap */])(function (matrix) {\n      return matrix.startClient({\n        initialSyncLimit: 0\n      });\n    }), Object(ignoreElements["a" /* ignoreElements */])()), // emit matrixSetup in parallel to be persisted in state\n    Object(of["a" /* of */])(matrixSetup({\n      server: server,\n      setup: setup\n    })), // monitor config.logger & disable or re-enable matrix\'s logger accordingly\n    config$.pipe(Object(pluck["a" /* pluck */])(\'logger\'), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(tap["a" /* tap */])(function (logger) {\n      return logger_default.a.setLevel(logger !== \'\' && (logger !== undefined || "production" === \'development\') ? \'debug\' : \'error\');\n    }), Object(ignoreElements["a" /* ignoreElements */])()));\n  }));\n};\n/**\n * Calls matrix.stopClient when raiden is shutting down, i.e. action$ completes\n *\n * @param action$ - Observable of matrixSetup actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Empty observable (whole side-effect on matrix instance)\n */\n\nvar epics_matrixShutdownEpic = function matrixShutdownEpic(action$, _ref17, _ref18) {\n  transport_epics_objectDestructuringEmpty(_ref17);\n\n  var matrix$ = _ref18.matrix$;\n  return matrix$.pipe(Object(mergeMap["a" /* mergeMap */])(function (matrix) {\n    return action$.pipe(Object(finalize["a" /* finalize */])(function () {\n      return matrix.stopClient();\n    }));\n  }), Object(ignoreElements["a" /* ignoreElements */])());\n};\n/**\n * Handles MatrixRequestMonitorPresenceAction and emits a MatrixPresenceUpdateAction\n * If presence is already known, emits it, else fetch from user profile\n * Even if the presence stays the same, we emit a MatrixPresenceUpdateAction, as this may be a\n * request being waited by a promise or something like that\n * IOW: every request should be followed by a presence update or a failed action, but presence\n * updates may happen later without new requests (e.g. when the user goes offline)\n *\n * @param action$ - Observable of matrixRequestMonitorPresence actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of presence updates or fail action\n */\n\nvar epics_matrixMonitorPresenceEpic = function matrixMonitorPresenceEpic(action$, _ref19, _ref20) {\n  transport_epics_objectDestructuringEmpty(_ref19);\n\n  var matrix$ = _ref20.matrix$;\n  return getPresences$(action$).pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (presences$) {\n    return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(matrixRequestMonitorPresence)), // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n    Object(mergeMap["a" /* mergeMap */])(function (action) {\n      return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n        return {\n          action: action,\n          matrix: matrix\n        };\n      }));\n    }), Object(groupBy["a" /* groupBy */])(function (_ref21) {\n      var action = _ref21.action;\n      return action.meta.address;\n    }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n      return grouped$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(presences$), // if we\'re already fetching presence for this address, no need to fetch again\n      Object(exhaustMap["a" /* exhaustMap */])(function (_ref22) {\n        var _ref23 = transport_epics_slicedToArray(_ref22, 2),\n            _ref23$ = _ref23[0],\n            action = _ref23$.action,\n            matrix = _ref23$.matrix,\n            presences = _ref23[1];\n\n        return action.meta.address in presences ? // we already monitored/saw this user\'s presence\n        Object(of["a" /* of */])(presences[action.meta.address]) : searchAddressPresence$(matrix, action.meta.address).pipe(Object(map["a" /* map */])(function (_ref24) {\n          var presence = _ref24.presence,\n              userId = _ref24.user_id;\n          return matrixPresenceUpdate({\n            userId: userId,\n            available: AVAILABLE.includes(presence)\n          }, action.meta);\n        }), Object(catchError["a" /* catchError */])(function (err) {\n          return Object(of["a" /* of */])(matrixRequestMonitorPresenceFailed(err, action.meta));\n        }));\n      }));\n    }));\n  }));\n};\n/**\n * Monitor peers matrix presence from User.presence events\n * We aggregate all users of interest (i.e. for which a monitor request was emitted at some point)\n * and emit presence updates for any presence change happening to a user validating to this address\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of presence updates\n */\n\nvar epics_matrixPresenceUpdateEpic = function matrixPresenceUpdateEpic(action$, _ref25, _ref26) {\n  transport_epics_objectDestructuringEmpty(_ref25);\n\n  var matrix$ = _ref26.matrix$;\n  return matrix$.pipe( // when matrix finishes initialization, register to matrix presence events\n  Object(switchMap["a" /* switchMap */])(function (matrix) {\n    return (// matrix\'s \'User.presence\' sometimes fail to fire, but generic \'event\' is always fired,\n      // and User (retrieved via matrix.getUser) is up-to-date before \'event\' emits\n      Object(fromEvent["a" /* fromEvent */])(matrix, \'event\').pipe(Object(map["a" /* map */])(function (event) {\n        return {\n          event: event,\n          matrix: matrix\n        };\n      }))\n    );\n  }), Object(filter["a" /* filter */])(function (_ref27) {\n    var event = _ref27.event;\n    return event.getType() === \'m.presence\';\n  }), // parse peer address from userId\n  Object(map["a" /* map */])(function (_ref28) {\n    var event = _ref28.event,\n        matrix = _ref28.matrix;\n    // as \'event\' is emitted after user is (created and) updated, getUser always returns it\n    var user = matrix.getUser(event.getSender());\n    if (!user || !user.presence) return;\n    var match = userRe.exec(user.userId),\n        peerAddress = match && match[1];\n    if (!peerAddress) return; // getAddress will convert any valid address into checksummed-format\n\n    var address = Object(utils["getAddress"])(peerAddress);\n    if (!address) return;\n    return {\n      matrix: matrix,\n      user: user,\n      address: address\n    };\n  }), // filter out events without userId in the right format (startWith hex-address)\n  Object(filter["a" /* filter */])(isntNil), Object(withLatestFrom["a" /* withLatestFrom */])( // observable of all addresses whose presence monitoring was requested since init\n  action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(matrixRequestMonitorPresence)), Object(scan["a" /* scan */])(function (toMonitor, request) {\n    return toMonitor.add(request.meta.address);\n  }, new Set()), Object(startWith["a" /* startWith */])(new Set())), // known presences as { address: <last seen MatrixPresenceUpdateAction> } mapping\n  getPresences$(action$)), // filter out events from users we don\'t care about\n  // i.e.: presence monitoring never requested\n  Object(filter["a" /* filter */])(function (_ref29) {\n    var _ref30 = transport_epics_slicedToArray(_ref29, 2),\n        address = _ref30[0].address,\n        toMonitor = _ref30[1];\n\n    return toMonitor.has(address);\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref31) {\n    var _ref32 = transport_epics_slicedToArray(_ref31, 3),\n        _ref32$ = _ref32[0],\n        matrix = _ref32$.matrix,\n        user = _ref32$.user,\n        address = _ref32$.address,\n        presences = _ref32[2];\n\n    // first filter can\'t tell typescript this property will always be set!\n    var userId = user.userId,\n        presence = user.presence,\n        available = AVAILABLE.includes(presence);\n    if (address in presences && presences[address].payload.userId === userId && presences[address].payload.available === available) // even if signature verification passes, this wouldn\'t change presence, so return early\n      return empty["a" /* EMPTY */]; // fetch profile info if user doesn\'t contain a displayName\n\n    var displayName$ = user.displayName ? Object(of["a" /* of */])(user.displayName) : Object(from["a" /* from */])(matrix.getProfileInfo(userId, \'displayname\')).pipe(Object(pluck["a" /* pluck */])(\'displayname\'), Object(catchError["a" /* catchError */])(function () {\n      return Object(of["a" /* of */])(undefined);\n    }));\n    return displayName$.pipe(Object(map["a" /* map */])(function (displayName) {\n      // errors raised here will be logged and ignored on catchError below\n      if (!displayName) throw new Error("Could not get displayName of \\"".concat(userId, "\\"")); // ecrecover address, validating displayName is the signature of the userId\n\n      var recovered = Object(utils["verifyMessage"])(userId, displayName);\n      if (!recovered || recovered !== address) throw new Error("Could not verify displayName signature of \\"".concat(userId, "\\": got \\"").concat(recovered, "\\""));\n      return recovered;\n    }), Object(map["a" /* map */])(function (address) {\n      return matrixPresenceUpdate({\n        userId: userId,\n        available: available,\n        ts: user.lastPresenceTs\n      }, {\n        address: address\n      });\n    }));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    return console.log(\'Error validating presence event, ignoring\', err), empty["a" /* EMPTY */];\n  }));\n};\n/**\n * Create room (if needed) for a transfer\'s target, channel\'s partner or, as a fallback, for any\n * recipient of a messageSend action\n *\n * @param action$ - Observable of transferSigned|channelMonitored|messageSend actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixRoom actions\n */\n\nvar epics_matrixCreateRoomEpic = function matrixCreateRoomEpic(action$, state$, _ref33) {\n  var matrix$ = _ref33.matrix$;\n  return Object(combineLatest["a" /* combineLatest */])(getPresences$(action$), state$).pipe( // multicasting combined presences+state with a ReplaySubject makes it act as withLatestFrom\n  // but working inside concatMap, which is called only at outer next and subscribe delayed\n  Object(publishReplay["a" /* publishReplay */])(1, undefined, function (presencesStateReplay$) {\n    return (// actual output observable, selects addresses of interest from actions\n      action$.pipe( // ensure there\'s a room for address of interest for each of these actions\n      Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([transferSigned, channelMonitored, messageSend])), Object(map["a" /* map */])(function (action) {\n        return Object(typesafe_actions_umd_production["isActionOf"])(transferSigned, action) ? action.payload.message.target : Object(typesafe_actions_umd_production["isActionOf"])(channelMonitored, action) ? action.meta.partner : action.meta.address;\n      }), // groupby+mergeMap ensures different addresses are processed in parallel, and also\n      // prevents one stuck address observable (e.g. presence delayed) from holding whole queue\n      Object(groupBy["a" /* groupBy */])(function (address) {\n        return address;\n      }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n        return grouped$.pipe( // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n        Object(mergeMap["a" /* mergeMap */])(function (address) {\n          return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n            return {\n              address: address,\n              matrix: matrix\n            };\n          }));\n        }), // exhaustMap is used to prevent bursts of actions for a given address (eg. on startup)\n        // of creating multiple rooms for same address, so we ignore new address items while\n        // previous is being processed. If user roams, matrixInviteEpic will re-invite\n        Object(exhaustMap["a" /* exhaustMap */])(function (_ref34) {\n          var address = _ref34.address,\n              matrix = _ref34.matrix;\n          return (// presencesStateReplay$+take(1) acts like withLatestFrom with cached result\n            presencesStateReplay$.pipe( // wait for user to be monitored\n            Object(filter["a" /* filter */])(function (_ref35) {\n              var _ref36 = transport_epics_slicedToArray(_ref35, 1),\n                  presences = _ref36[0];\n\n              return address in presences;\n            }), Object(take["a" /* take */])(1), // if there\'s already a room in state for address, skip\n            Object(filter["a" /* filter */])(function (_ref37) {\n              var _ref38 = transport_epics_slicedToArray(_ref37, 2),\n                  state = _ref38[1];\n\n              return !Object(lodash["get"])(state.transport, [\'matrix\', \'rooms\', address, 0]);\n            }), // else, create a room, invite known user and persist roomId in state\n            Object(mergeMap["a" /* mergeMap */])(function (_ref39) {\n              var _ref40 = transport_epics_slicedToArray(_ref39, 1),\n                  presences = _ref40[0];\n\n              return matrix.createRoom({\n                visibility: \'private\',\n                invite: [presences[address].payload.userId]\n              });\n            }), Object(map["a" /* map */])(function (_ref41) {\n              var roomId = _ref41.room_id;\n              return matrixRoom({\n                roomId: roomId\n              }, {\n                address: address\n              });\n            }))\n          );\n        }));\n      }))\n    );\n  }));\n};\n/**\n * Invites users coming online to main room we may have with them\n *\n * This also keeps retrying inviting every config.httpTimeout (default=30s) while user doesn\'t\n * accept our invite or don\'t invite or write to us to/in another room.\n *\n * @param action$ - Observable of matrixPresenceUpdate actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps\n * @param deps.matrix$ - MatrixClient AsyncSubject\n * @param deps.config$ - RaidenConfig BehaviorSubject\n * @returns Empty observable (whole side-effect on matrix instance)\n */\n\nvar epics_matrixInviteEpic = function matrixInviteEpic(action$, state$, _ref42) {\n  var matrix$ = _ref42.matrix$,\n      config$ = _ref42.config$;\n  return state$.pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (state$) {\n    return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(matrixPresenceUpdate)), Object(groupBy["a" /* groupBy */])(function (a) {\n      return a.meta.address;\n    }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n      return (// grouped$ is one observable of presence actions per partners address\n        grouped$.pipe( // action comes only after matrix$ is started, so it\'s safe to use withLatestFrom\n        Object(withLatestFrom["a" /* withLatestFrom */])(matrix$), // switchMap on new presence action for address\n        Object(switchMap["a" /* switchMap */])(function (_ref43) {\n          var _ref44 = transport_epics_slicedToArray(_ref43, 2),\n              action = _ref44[0],\n              matrix = _ref44[1];\n\n          return !action.payload.available ? // if not available, do nothing (and unsubscribe from previous observable)\n          empty["a" /* EMPTY */] : state$.pipe(Object(map["a" /* map */])(function (state) {\n            return Object(lodash["get"])(state, [\'transport\', \'matrix\', \'rooms\', action.meta.address, 0]);\n          }), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(switchMap["a" /* switchMap */])(function (roomId) {\n            return Object(concat["a" /* concat */])(Object(of["a" /* of */])(roomId), !roomId ? empty["a" /* EMPTY */] : // re-trigger invite loop if user leaves\n            Object(fromEvent["a" /* fromEvent */])(matrix, \'RoomMember.membership\', function (_ref45, member) {\n              transport_epics_objectDestructuringEmpty(_ref45);\n\n              return member;\n            }).pipe(Object(filter["a" /* filter */])(function (member) {\n              return member.roomId === roomId && member.userId === action.payload.userId && member.membership === \'leave\';\n            }), Object(mapTo["a" /* mapTo */])(roomId)));\n          }), // switchMap on main roomId change\n          Object(switchMap["a" /* switchMap */])(function (roomId) {\n            return !roomId ? // if roomId not set, do nothing and unsubscribe\n            empty["a" /* EMPTY */] : // while subscribed and user didn\'t join, invite every httpTimeout=30s\n            inviteLoop$(matrix, roomId, action.payload.userId, config$);\n          }));\n        }))\n      );\n    }), Object(ignoreElements["a" /* ignoreElements */])());\n  }));\n};\n/**\n * Handle invites sent to us and accepts them iff sent by a monitored user\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixRoom actions\n */\n\nvar epics_matrixHandleInvitesEpic = function matrixHandleInvitesEpic(action$, _ref46, _ref47) {\n  transport_epics_objectDestructuringEmpty(_ref46);\n\n  var matrix$ = _ref47.matrix$,\n      config$ = _ref47.config$;\n  return getPresences$(action$).pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (presences$) {\n    return matrix$.pipe( // when matrix finishes initialization, register to matrix invite events\n    Object(switchMap["a" /* switchMap */])(function (matrix) {\n      return Object(fromEvent["a" /* fromEvent */])(matrix, \'RoomMember.membership\', function (event, member) {\n        return {\n          event: event,\n          member: member,\n          matrix: matrix\n        };\n      });\n    }), Object(filter["a" /* filter */])( // filter for invite events to us\n    function (_ref48) {\n      var member = _ref48.member,\n          matrix = _ref48.matrix;\n      return member.userId === matrix.getUserId() && member.membership === \'invite\';\n    }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref49) {\n      var _ref50 = transport_epics_slicedToArray(_ref49, 2),\n          _ref50$ = _ref50[0],\n          event = _ref50$.event,\n          member = _ref50$.member,\n          matrix = _ref50$.matrix,\n          httpTimeout = _ref50[1].httpTimeout;\n\n      var sender = event.getSender(),\n          senderPresence$ = presences$.pipe(Object(map["a" /* map */])(function (presences) {\n        return Object(lodash["find"])(presences, function (p) {\n          return p.payload.userId === sender;\n        });\n      }), Object(filter["a" /* filter */])(isntNil), Object(take["a" /* take */])(1), // Don\'t wait more than some arbitrary time for this sender presence update to show\n      // up; completes without emitting anything otherwise, ending this pipeline.\n      // This also works as a filter to continue processing invites only for monitored\n      // users, as it\'ll complete without emitting if no MatrixPresenceUpdateAction is\n      // found for sender in time\n      Object(takeUntil["a" /* takeUntil */])(Object(timer["a" /* timer */])(httpTimeout)));\n      return senderPresence$.pipe(Object(map["a" /* map */])(function (senderPresence) {\n        return {\n          matrix: matrix,\n          member: member,\n          senderPresence: senderPresence\n        };\n      }));\n    }), Object(mergeMap["a" /* mergeMap */])(function (_ref51) {\n      var matrix = _ref51.matrix,\n          member = _ref51.member,\n          senderPresence = _ref51.senderPresence;\n      return (// join room and emit MatrixRoomAction to make it default/first option for sender address\n        Object(from["a" /* from */])(matrix.joinRoom(member.roomId, {\n          syncRoom: true\n        })).pipe(Object(map["a" /* map */])(function () {\n          return matrixRoom({\n            roomId: member.roomId\n          }, {\n            address: senderPresence.meta.address\n          });\n        }))\n      );\n    }));\n  }));\n};\n/**\n * Leave any excess room for a partner when creating or joining a new one.\n * Excess rooms are LRU beyond a given threshold (configurable, default=3) in address\'s rooms\n * queue and are checked (only) when a new one is added to it.\n *\n * @param action$ - Observable of matrixRoom actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixRoomLeave actions\n */\n\nvar epics_matrixLeaveExcessRoomsEpic = function matrixLeaveExcessRoomsEpic(action$, state$, _ref52) {\n  var matrix$ = _ref52.matrix$,\n      config$ = _ref52.config$;\n  return action$.pipe( // act whenever a new room is added to the address queue in state\n  Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(matrixRoom)), // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n  Object(mergeMap["a" /* mergeMap */])(function (action) {\n    return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n      return {\n        action: action,\n        matrix: matrix\n      };\n    }));\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(mergeMap["a" /* mergeMap */])(function (_ref53) {\n    var _ref54 = transport_epics_slicedToArray(_ref53, 3),\n        _ref54$ = _ref54[0],\n        action = _ref54$.action,\n        matrix = _ref54$.matrix,\n        state = _ref54[1],\n        matrixExcessRooms = _ref54[2].matrixExcessRooms;\n\n    var rooms = state.transport.matrix.rooms[action.meta.address];\n    return Object(from["a" /* from */])(rooms.filter(function (_ref55, i) {\n      transport_epics_objectDestructuringEmpty(_ref55);\n\n      return i >= matrixExcessRooms;\n    })).pipe(Object(mergeMap["a" /* mergeMap */])(function (roomId) {\n      return matrix.leave(roomId).then(function () {\n        return roomId;\n      });\n    }), Object(map["a" /* map */])(function (roomId) {\n      return matrixRoomLeave({\n        roomId: roomId\n      }, action.meta);\n    }));\n  }));\n};\n/**\n * Leave any room which is neither global nor known as a room for some user of interest\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Empty observable (whole side-effect on matrix instance)\n */\n\nvar epics_matrixLeaveUnknownRoomsEpic = function matrixLeaveUnknownRoomsEpic(_ref56, state$, _ref57) {\n  transport_epics_objectDestructuringEmpty(_ref56);\n\n  var matrix$ = _ref57.matrix$,\n      config$ = _ref57.config$;\n  return matrix$.pipe( // when matrix finishes initialization, register to matrix Room events\n  Object(switchMap["a" /* switchMap */])(function (matrix) {\n    return Object(fromEvent["a" /* fromEvent */])(matrix, \'Room\').pipe(Object(map["a" /* map */])(function (room) {\n      return {\n        matrix: matrix,\n        roomId: room.roomId\n      };\n    }));\n  }), Object(delay["a" /* delay */])(180e3), // this room may become known later for some reason, so wait a little\n  Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), // filter for leave events to us\n  Object(filter["a" /* filter */])(function (_ref58) {\n    var _ref59 = transport_epics_slicedToArray(_ref58, 3),\n        _ref59$ = _ref59[0],\n        matrix = _ref59$.matrix,\n        roomId = _ref59$.roomId,\n        state = _ref59[1],\n        config = _ref59[2];\n\n    var room = matrix.getRoom(roomId);\n    if (!room) return false; // room already gone while waiting\n\n    var globalRooms = globalRoomNames(config);\n    if (room.name && globalRooms.some(function (g) {\n      return room.name.match("#".concat(g, ":"));\n    })) return false;\n    var rooms = Object(lodash["get"])(state, [\'transport\', \'matrix\', \'rooms\'], {});\n\n    for (var address in rooms) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = rooms[address][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _roomId = _step2.value;\n          if (_roomId === room.roomId) return false;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return true;\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref60) {\n    var _ref61 = transport_epics_slicedToArray(_ref60, 1),\n        _ref61$ = _ref61[0],\n        matrix = _ref61$.matrix,\n        roomId = _ref61$.roomId;\n\n    return matrix.leave(roomId);\n  }), Object(ignoreElements["a" /* ignoreElements */])());\n};\n/**\n * If we leave a room for any reason (eg. a kick event), purge it from state\n * Notice excess rooms left by matrixLeaveExcessRoomsEpic are cleaned before the matrix event is\n * detected, and then no MatrixRoomLeaveAction is emitted for them by this epic.\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixRoomLeave actions\n */\n\nvar epics_matrixCleanLeftRoomsEpic = function matrixCleanLeftRoomsEpic(_ref62, state$, _ref63) {\n  transport_epics_objectDestructuringEmpty(_ref62);\n\n  var matrix$ = _ref63.matrix$;\n  return matrix$.pipe( // when matrix finishes initialization, register to matrix invite events\n  Object(switchMap["a" /* switchMap */])(function (matrix) {\n    return Object(fromEvent["a" /* fromEvent */])(matrix, \'Room.myMembership\', function (room, membership) {\n      return {\n        room: room,\n        membership: membership,\n        matrix: matrix\n      };\n    });\n  }), // filter for leave events to us\n  Object(filter["a" /* filter */])(function (_ref64) {\n    var membership = _ref64.membership;\n    return membership === \'leave\';\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee2(_ref65) {\n    var _ref66, room, state, rooms, address, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, roomId;\n\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref66 = transport_epics_slicedToArray(_ref65, 2), room = _ref66[0].room, state = _ref66[1];\n            rooms = Object(lodash["get"])(state, [\'transport\', \'matrix\', \'rooms\'], {});\n            _context2.t0 = regenerator_default.a.keys(rooms);\n\n          case 3:\n            if ((_context2.t1 = _context2.t0()).done) {\n              _context2.next = 34;\n              break;\n            }\n\n            address = _context2.t1.value;\n            _iteratorNormalCompletion3 = true;\n            _didIteratorError3 = false;\n            _iteratorError3 = undefined;\n            _context2.prev = 8;\n            _iterator3 = rooms[address][Symbol.iterator]();\n\n          case 10:\n            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n              _context2.next = 18;\n              break;\n            }\n\n            roomId = _step3.value;\n\n            if (!(roomId === room.roomId)) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.next = 15;\n            return matrixRoomLeave({\n              roomId: roomId\n            }, {\n              address: address\n            });\n\n          case 15:\n            _iteratorNormalCompletion3 = true;\n            _context2.next = 10;\n            break;\n\n          case 18:\n            _context2.next = 24;\n            break;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t2 = _context2["catch"](8);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context2.t2;\n\n          case 24:\n            _context2.prev = 24;\n            _context2.prev = 25;\n\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n\n          case 27:\n            _context2.prev = 27;\n\n            if (!_didIteratorError3) {\n              _context2.next = 30;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 30:\n            return _context2.finish(27);\n\n          case 31:\n            return _context2.finish(24);\n\n          case 32:\n            _context2.next = 3;\n            break;\n\n          case 34:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[8, 20, 24, 32], [25,, 27, 31]]);\n  })));\n};\n/**\n * Handles a [[messageSend]] action and send its message to the first room on queue for address\n *\n * @param action$ - Observable of messageSend actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of messageSent actions\n */\n\nvar epics_matrixMessageSendEpic = function matrixMessageSendEpic(action$, state$, _ref67) {\n  var matrix$ = _ref67.matrix$;\n  return Object(combineLatest["a" /* combineLatest */])(getPresences$(action$), state$).pipe( // multicasting combined presences+state with a ReplaySubject makes it act as withLatestFrom\n  // but working inside concatMap, called only at outer emit and subscription delayed\n  Object(publishReplay["a" /* publishReplay */])(1, undefined, function (presencesStateReplay$) {\n    return (// actual output observable, gets/wait for the user to be in a room, and then sendMessage\n      action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageSend)), // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n      Object(mergeMap["a" /* mergeMap */])(function (action) {\n        return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n          return {\n            action: action,\n            matrix: matrix\n          };\n        }));\n      }), Object(groupBy["a" /* groupBy */])(function (_ref68) {\n        var action = _ref68.action;\n        return action.meta.address;\n      }), // merge all inner/grouped observables, so different user\'s "queues" can be parallel\n      Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n        return (// per-user "queue"\n          grouped$.pipe( // each per-user "queue" (observable) are processed serially (because concatMap)\n          // TODO: batch all pending messages in a single send message request, with retry\n          Object(concatMap["a" /* concatMap */])(function (_ref69) {\n            var action = _ref69.action,\n                matrix = _ref69.matrix;\n            return presencesStateReplay$.pipe( // wait for address to be monitored, online and roomId to be in state.\n            // ReplaySubject ensures it happens immediatelly if all conditions are satisfied\n            Object(filter["a" /* filter */])(function (_ref70) {\n              var _ref71 = transport_epics_slicedToArray(_ref70, 2),\n                  presences = _ref71[0],\n                  state = _ref71[1];\n\n              return action.meta.address in presences && presences[action.meta.address].payload.available && Object(lodash["get"])(state, [\'transport\', \'matrix\', \'rooms\', action.meta.address, 0]);\n            }), Object(map["a" /* map */])(function (_ref72) {\n              var _ref73 = transport_epics_slicedToArray(_ref72, 2),\n                  state = _ref73[1];\n\n              return state.transport.matrix.rooms[action.meta.address][0];\n            }), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), // get/wait room object for roomId\n            // may wait for the room state to be populated (happens after createRoom resolves)\n            Object(switchMap["a" /* switchMap */])(function (roomId) {\n              return getRoom$(matrix, roomId);\n            }), // get up-to-date/last presences at this point in time, which may have been updated\n            Object(withLatestFrom["a" /* withLatestFrom */])(presencesStateReplay$), // get room member for partner userId\n            Object(mergeMap["a" /* mergeMap */])(function (_ref74) {\n              var _ref75 = transport_epics_slicedToArray(_ref74, 2),\n                  room = _ref75[0],\n                  _ref75$ = transport_epics_slicedToArray(_ref75[1], 1),\n                  presences = _ref75$[0];\n\n              // get latest known userId for address at this point in time\n              var userId = presences[action.meta.address].payload.userId;\n              var member = room.getMember(userId); // if it\'s already present in room, return its membership\n\n              if (member && member.membership === \'join\') return Object(of["a" /* of */])(member); // else, wait for the user to join our newly created room\n\n              return Object(fromEvent["a" /* fromEvent */])(matrix, \'RoomMember.membership\', function (_ref76, member) {\n                transport_epics_objectDestructuringEmpty(_ref76);\n\n                return member;\n              }).pipe( // use up-to-date presences again, which may have been updated while\n              // waiting for member join event (e.g. user roamed and was re-invited)\n              Object(withLatestFrom["a" /* withLatestFrom */])(presencesStateReplay$), Object(filter["a" /* filter */])(function (_ref77) {\n                var _ref78 = transport_epics_slicedToArray(_ref77, 2),\n                    member = _ref78[0],\n                    _ref78$ = transport_epics_slicedToArray(_ref78[1], 1),\n                    presences = _ref78$[0];\n\n                return member.roomId === room.roomId && member.userId === presences[action.meta.address].payload.userId && member.membership === \'join\';\n              }), Object(take["a" /* take */])(1), Object(map["a" /* map */])(function (_ref79) {\n                var _ref80 = transport_epics_slicedToArray(_ref79, 1),\n                    member = _ref80[0];\n\n                return member;\n              }));\n            }), Object(take["a" /* take */])(1), // use first room/user which meets all requirements/filters so far\n            // send message!\n            Object(mergeMap["a" /* mergeMap */])(function (member) {\n              var body = typeof action.payload.message === \'string\' ? action.payload.message : encodeJsonMessage(action.payload.message);\n              return matrix.sendEvent(member.roomId, \'m.room.message\', {\n                body: body,\n                msgtype: \'m.text\'\n              }, \'\');\n            }), Object(map["a" /* map */])(function () {\n              return messageSent(action.payload, action.meta);\n            }));\n          }))\n        );\n      }))\n    );\n  }));\n};\n/**\n * Handles a [[messageGlobalSend]] action and send one-shot message to a global room\n *\n * @param action$ - Observable of messageSend actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Empty observable (whole side-effect on matrix instance)\n */\n\nvar epics_matrixMessageGlobalSendEpic = function matrixMessageGlobalSendEpic(action$, _ref81, _ref82) {\n  transport_epics_objectDestructuringEmpty(_ref81);\n\n  var matrix$ = _ref82.matrix$,\n      config$ = _ref82.config$;\n  return (// actual output observable, gets/wait for the user to be in a room, and then sendMessage\n    action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageGlobalSend)), // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n    Object(mergeMap["a" /* mergeMap */])(function (action) {\n      return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n        return {\n          action: action,\n          matrix: matrix\n        };\n      }));\n    }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref83) {\n      var _ref84 = transport_epics_slicedToArray(_ref83, 2),\n          _ref84$ = _ref84[0],\n          action = _ref84$.action,\n          matrix = _ref84$.matrix,\n          config = _ref84[1];\n\n      var globalRooms = globalRoomNames(config);\n\n      if (!globalRooms.includes(action.meta.roomName)) {\n        console.warn(\'messageGlobalSend for unknown global room, ignoring\', action.meta.roomName, globalRooms);\n        return empty["a" /* EMPTY */];\n      }\n\n      var serverName = getServerName(matrix.baseUrl),\n          roomAlias = "#".concat(action.meta.roomName, ":").concat(serverName);\n      return getRoom$(matrix, roomAlias).pipe( // send message!\n      Object(mergeMap["a" /* mergeMap */])(function (room) {\n        var body = typeof action.payload.message === \'string\' ? action.payload.message : encodeJsonMessage(action.payload.message);\n        return matrix.sendEvent(room.roomId, \'m.room.message\', {\n          body: body,\n          msgtype: \'m.text\'\n        }, \'\');\n      }));\n    }), Object(ignoreElements["a" /* ignoreElements */])())\n  );\n};\n/**\n * Subscribe to matrix messages and emits MessageReceivedAction upon receiving a valid message from\n * an user of interest (one valid signature from an address we monitor) in a room we have for them\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of messageReceived actions\n */\n\nvar epics_matrixMessageReceivedEpic = function matrixMessageReceivedEpic(action$, state$, _ref85) {\n  var matrix$ = _ref85.matrix$,\n      config$ = _ref85.config$;\n  return Object(combineLatest["a" /* combineLatest */])(getPresences$(action$), state$).pipe( // multicasting combined presences+state with a ReplaySubject makes it act as withLatestFrom\n  // but working inside concatMap, called only at outer emit and subscription delayed\n  Object(publishReplay["a" /* publishReplay */])(1, undefined, function (presencesStateReplay$) {\n    return (// actual output observable, gets/wait for the user to be in a room, and then sendMessage\n      matrix$.pipe( // when matrix finishes initialization, register to matrix timeline events\n      Object(switchMap["a" /* switchMap */])(function (matrix) {\n        return Object(fromEvent["a" /* fromEvent */])(matrix, \'Room.timeline\', function (event, room) {\n          return {\n            matrix: matrix,\n            event: event,\n            room: room\n          };\n        });\n      }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), // filter for text messages not from us and not from global rooms\n      Object(filter["a" /* filter */])(function (_ref86) {\n        var _ref87 = transport_epics_slicedToArray(_ref86, 2),\n            _ref87$ = _ref87[0],\n            matrix = _ref87$.matrix,\n            event = _ref87$.event,\n            room = _ref87$.room,\n            config = _ref87[1];\n\n        return event.getType() === \'m.room.message\' && event.event.content.msgtype === \'m.text\' && event.getSender() !== matrix.getUserId() && !globalRoomNames(config).some(function (g) {\n          return (// generate an alias for global room of given name, and check if room matches\n            roomMatch("#".concat(g, ":").concat(getServerName(matrix.getHomeserverUrl())), room)\n          );\n        });\n      }), Object(mergeMap["a" /* mergeMap */])(function (_ref88) {\n        var _ref89 = transport_epics_slicedToArray(_ref88, 2),\n            _ref89$ = _ref89[0],\n            event = _ref89$.event,\n            room = _ref89$.room,\n            httpTimeout = _ref89[1].httpTimeout;\n\n        return presencesStateReplay$.pipe(Object(filter["a" /* filter */])(function (_ref90) {\n          var _ref91 = transport_epics_slicedToArray(_ref90, 2),\n              presences = _ref91[0],\n              state = _ref91[1];\n\n          var presence = Object(lodash["find"])(presences, [\'payload.userId\', event.getSender()]);\n          if (!presence) return false;\n          var rooms = Object(lodash["get"])(state, [\'transport\', \'matrix\', \'rooms\', presence.meta.address], []);\n          if (!rooms.includes(room.roomId)) return false;\n          return true;\n        }), Object(take["a" /* take */])(1), // take up to an arbitrary timeout to presence status for the sender\n        // AND the room in which this message was sent to be in sender\'s address room queue\n        Object(takeUntil["a" /* takeUntil */])(Object(timer["a" /* timer */])(httpTimeout)), Object(mergeMap["a" /* mergeMap */])(\n        /*#__PURE__*/\n        regenerator_default.a.mark(function _callee3(_ref92) {\n          var _ref93, presences, presence, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, line, message, signer;\n\n          return regenerator_default.a.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _ref93 = transport_epics_slicedToArray(_ref92, 1), presences = _ref93[0];\n                  presence = Object(lodash["find"])(presences, [\'payload.userId\', event.getSender()]);\n                  _iteratorNormalCompletion4 = true;\n                  _didIteratorError4 = false;\n                  _iteratorError4 = undefined;\n                  _context3.prev = 5;\n                  _iterator4 = (event.event.content.body || \'\').split(\'\\n\')[Symbol.iterator]();\n\n                case 7:\n                  if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n                    _context3.next = 26;\n                    break;\n                  }\n\n                  line = _step4.value;\n                  message = void 0;\n                  _context3.prev = 10;\n                  message = decodeJsonMessage(line);\n                  signer = getMessageSigner(message);\n\n                  if (!(signer !== presence.meta.address)) {\n                    _context3.next = 15;\n                    break;\n                  }\n\n                  throw new Error("Signature mismatch: sender=".concat(presence.meta.address, " != signer=").concat(signer));\n\n                case 15:\n                  _context3.next = 21;\n                  break;\n\n                case 17:\n                  _context3.prev = 17;\n                  _context3.t0 = _context3["catch"](10);\n                  console.warn("Could not decode message: ".concat(line, ": ").concat(_context3.t0));\n                  message = undefined;\n\n                case 21:\n                  _context3.next = 23;\n                  return messageReceived({\n                    text: line,\n                    message: message,\n                    ts: event.event.origin_server_ts,\n                    userId: presence.payload.userId,\n                    roomId: room.roomId\n                  }, presence.meta);\n\n                case 23:\n                  _iteratorNormalCompletion4 = true;\n                  _context3.next = 7;\n                  break;\n\n                case 26:\n                  _context3.next = 32;\n                  break;\n\n                case 28:\n                  _context3.prev = 28;\n                  _context3.t1 = _context3["catch"](5);\n                  _didIteratorError4 = true;\n                  _iteratorError4 = _context3.t1;\n\n                case 32:\n                  _context3.prev = 32;\n                  _context3.prev = 33;\n\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n\n                case 35:\n                  _context3.prev = 35;\n\n                  if (!_didIteratorError4) {\n                    _context3.next = 38;\n                    break;\n                  }\n\n                  throw _iteratorError4;\n\n                case 38:\n                  return _context3.finish(35);\n\n                case 39:\n                  return _context3.finish(32);\n\n                case 40:\n                case "end":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[5, 28, 32, 40], [10, 17], [33,, 35, 39]]);\n        })));\n      }))\n    );\n  }));\n};\n/**\n * If matrix received a message from user in a room we have with them, but not the first on queue,\n * update queue so this room goes to the front and will be used as send message room from now on\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of matrixRoom actions\n */\n\nvar epics_matrixMessageReceivedUpdateRoomEpic = function matrixMessageReceivedUpdateRoomEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(filter["a" /* filter */])(function (_ref94) {\n    var _ref95 = transport_epics_slicedToArray(_ref94, 2),\n        action = _ref95[0],\n        state = _ref95[1];\n\n    var rooms = Object(lodash["get"])(state, [\'transport\', \'matrix\', \'rooms\', action.meta.address], []);\n    return !!action.payload.roomId && rooms.includes(action.payload.roomId) && rooms[0] !== action.payload.roomId;\n  }), Object(map["a" /* map */])(function (_ref96) {\n    var _ref97 = transport_epics_slicedToArray(_ref96, 1),\n        action = _ref97[0];\n\n    return matrixRoom({\n      roomId: action.payload.roomId\n    }, action.meta);\n  }));\n};\n/**\n * Channel monitoring triggers matrix presence monitoring for partner\n *\n * @param action$ - Observable of RaidenActions\n * @returns Observable of matrixRequestMonitorPresence actions\n */\n\nvar epics_matrixMonitorChannelPresenceEpic = function matrixMonitorChannelPresenceEpic(action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(channelMonitored)), Object(map["a" /* map */])(function (action) {\n    return matrixRequestMonitorPresence(undefined, {\n      address: action.meta.partner\n    });\n  }));\n};\n/**\n * Sends Delivered for specific messages\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param signer - RaidenEpicDeps members\n * @returns Observable of messageSend actions\n */\n\nvar epics_deliveredEpic = function deliveredEpic(action$, _ref98, _ref99) {\n  transport_epics_objectDestructuringEmpty(_ref98);\n\n  var signer = _ref99.signer;\n  var cache = new LruCache(32);\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(concatMap["a" /* concatMap */])(function (action) {\n    var message = action.payload.message;\n    if (!message || !(Signed(Processed).is(message) || Signed(SecretRequest).is(message) || Signed(SecretReveal).is(message))) return empty["a" /* EMPTY */];\n    var msgId = message.message_identifier,\n        key = msgId.toString();\n    var cached = cache.get(key);\n    if (cached) return Object(of["a" /* of */])(messageSend({\n      message: cached\n    }, action.meta));\n    var delivered = {\n      type: MessageType.DELIVERED,\n      delivered_message_identifier: msgId\n    };\n    console.log("Signing \\"".concat(delivered.type, "\\" for \\"").concat(message.type, "\\" with id=").concat(msgId.toString()));\n    return Object(from["a" /* from */])(signMessage(signer, delivered)).pipe(Object(tap["a" /* tap */])(function (signed) {\n      return cache.put(key, signed);\n    }), Object(map["a" /* map */])(function (signed) {\n      return messageSend({\n        message: signed\n      }, action.meta);\n    }));\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics.js\n\n\nfunction transfers_epics_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction epics_toConsumableArray(arr) { return epics_arrayWithoutHoles(arr) || epics_iterableToArray(arr) || epics_nonIterableSpread(); }\n\nfunction epics_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\n\nfunction epics_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\n\nfunction epics_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction transfers_epics_slicedToArray(arr, i) { return transfers_epics_arrayWithHoles(arr) || transfers_epics_iterableToArrayLimit(arr, i) || transfers_epics_nonIterableRest(); }\n\nfunction transfers_epics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction transfers_epics_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction transfers_epics_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Return the next nonce for a (possibly missing) balanceProof, or else BigNumber(1)\n *\n * @param balanceProof - Balance proof to increase nonce from\n * @returns Increased nonce, or One if no balance proof provided\n */\n\nfunction nextNonce(balanceProof) {\n  if (balanceProof) return balanceProof.nonce.add(1);else return constants["One"];\n}\n/**\n * Create an observable to compose and sign a LockedTransfer message/transferSigned action\n * As it\'s an async observable which depends on state and may return an action which changes it,\n * the returned observable must be subscribed in a serialized context that ensures non-concurrent\n * write access to the channel\'s balance proof (e.g. concatMap)\n *\n * @param state$ - Observable of current state\n * @param action - transfer request action to be sent\n * @param network,address,signer - RaidenEpicDeps members\n * @returns Observable of transferSigned|transferSecret|transferFailed actions\n */\n\n\nfunction makeAndSignTransfer(state$, action, _ref) {\n  var network = _ref.network,\n      address = _ref.address,\n      signer = _ref.signer,\n      config$ = _ref.config$;\n  return Object(combineLatest["a" /* combineLatest */])(state$, config$).pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (_ref2) {\n    var _ref3 = transfers_epics_slicedToArray(_ref2, 2),\n        state = _ref3[0],\n        revealTimeout = _ref3[1].revealTimeout;\n\n    if (action.meta.secrethash in state.sent) {\n      // don\'t throw to avoid emitting transferFailed, to just wait for already pending transfer\n      console.error(\'transfer already present\', action.meta);\n      return empty["a" /* EMPTY */];\n    } // assume paths are valid and recipient is first hop of first route\n    // compose metadata from it, and use first path fee\n\n\n    var metadata = {\n      routes: action.payload.paths.map(function (_ref4) {\n        var path = _ref4.path;\n        return {\n          route: path\n        };\n      })\n    },\n        fee = action.payload.paths[0].fee,\n        recipient = action.payload.paths[0].path[0];\n    var channel = state.channels[action.payload.tokenNetwork][recipient]; // check below shouldn\'t fail because of route validation in pathFindServiceEpic\n    // used here mostly for type narrowing on channel union\n\n    if (!channel || channel.state !== ChannelState.open) throw new Error(\'not open\');\n    var lock = {\n      amount: action.payload.value.add(fee),\n      expiration: Object(utils["bigNumberify"])(state.blockNumber + revealTimeout * 2),\n      secrethash: action.meta.secrethash\n    },\n        locks = [].concat(epics_toConsumableArray(channel.own.locks || []), [lock]),\n        locksroot = getLocksroot(locks),\n        token = Object(lodash["findKey"])(state.tokens, function (tn) {\n      return tn === action.payload.tokenNetwork;\n    });\n    console.log(\'Signing transfer of value\', action.payload.value.toString(), \'of token\', token, \', to\', action.payload.target, \', through routes\', action.payload.paths, \', paying\', fee.toString(), \'in fees.\');\n    var message = {\n      type: MessageType.LOCKED_TRANSFER,\n      message_identifier: makeMessageId(),\n      chain_id: Object(utils["bigNumberify"])(network.chainId),\n      token_network_address: action.payload.tokenNetwork,\n      channel_identifier: Object(utils["bigNumberify"])(channel.id),\n      nonce: nextNonce(channel.own.balanceProof),\n      transferred_amount: channel.own.balanceProof ? channel.own.balanceProof.transferredAmount : constants["Zero"],\n      locked_amount: (channel.own.balanceProof ? channel.own.balanceProof.lockedAmount : constants["Zero"]).add(lock.amount),\n      locksroot: locksroot,\n      payment_identifier: action.payload.paymentId,\n      token: token,\n      recipient: recipient,\n      lock: lock,\n      target: action.payload.target,\n      initiator: address,\n      metadata: metadata\n    };\n    return Object(from["a" /* from */])(signMessage(signer, message)).pipe(Object(mergeMap["a" /* mergeMap */])(\n    /*#__PURE__*/\n    regenerator_default.a.mark(function _callee(signed) {\n      return regenerator_default.a.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!action.payload.secret) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return transferSecret({\n                secret: action.payload.secret\n              }, action.meta);\n\n            case 3:\n              _context.next = 5;\n              return transferSigned({\n                message: signed,\n                fee: fee\n              }, action.meta);\n\n            case 5:\n            case "end":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    return Object(of["a" /* of */])(transferFailed(err, action.meta));\n  }));\n}\n/**\n * Create an observable to compose and sign a Unlock message/transferUnlocked action\n * As it\'s an async observable which depends on state and may return an action which changes it,\n * the returned observable must be subscribed in a serialized context that ensures non-concurrent\n * write access to the channel\'s balance proof (e.g. concatMap)\n *\n * @param state$ - Observable of current state\n * @param action - transferUnlock request action to be sent\n * @param signer - RaidenEpicDeps members\n * @returns Observable of transferUnlocked actions\n */\n\n\nfunction makeAndSignUnlock(state$, action, _ref5) {\n  var signer = _ref5.signer;\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    var secrethash = action.meta.secrethash;\n    if (!(secrethash in state.sent)) throw new Error(\'unknown transfer\');\n    var transfer = state.sent[secrethash].transfer[1],\n        channel = Object(lodash["get"])(state.channels, [transfer.token_network_address, transfer.recipient]); // shouldn\'t happen, channel close clears transfers, but unlock may already have been queued\n\n    if (!channel || channel.state !== ChannelState.open || !channel.own.balanceProof) throw new Error(\'channel gone, not open or no balanceProof\');\n    var signed$;\n\n    if (state.sent[secrethash].unlock) {\n      // unlock already signed, use cached\n      signed$ = Object(of["a" /* of */])(state.sent[secrethash].unlock[1]);\n    } else {\n      // don\'t forget to check after signature too, may have expired by then\n      if (transfer.lock.expiration.lte(state.blockNumber)) throw new Error(\'lock expired\');\n      var locks = (channel.own.locks || []).filter(function (l) {\n        return l.secrethash !== secrethash;\n      }),\n          locksroot = getLocksroot(locks);\n      var message = {\n        type: MessageType.UNLOCK,\n        message_identifier: makeMessageId(),\n        chain_id: transfer.chain_id,\n        token_network_address: transfer.token_network_address,\n        channel_identifier: transfer.channel_identifier,\n        nonce: nextNonce(channel.own.balanceProof),\n        transferred_amount: channel.own.balanceProof.transferredAmount.add(transfer.lock.amount),\n        locked_amount: channel.own.balanceProof.lockedAmount.sub(transfer.lock.amount),\n        locksroot: locksroot,\n        payment_identifier: transfer.payment_identifier,\n        secret: state.secrets[action.meta.secrethash].secret\n      };\n      signed$ = Object(from["a" /* from */])(signMessage(signer, message));\n    }\n\n    return signed$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n    /*#__PURE__*/\n    regenerator_default.a.mark(function _callee2(_ref6) {\n      var _ref7, signed, state;\n\n      return regenerator_default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref7 = transfers_epics_slicedToArray(_ref6, 2), signed = _ref7[0], state = _ref7[1];\n\n              if (!transfer.lock.expiration.lte(state.blockNumber)) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw new Error(\'lock expired!\');\n\n            case 3:\n              if (!state.sent[secrethash].channelClosed) {\n                _context2.next = 5;\n                break;\n              }\n\n              throw new Error(\'channel closed!\');\n\n            case 5:\n              _context2.next = 7;\n              return transferUnlocked({\n                message: signed\n              }, action.meta);\n\n            case 7:\n            case "end":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    console.error(\'Error when trying to unlock after SecretReveal\', err);\n    return empty["a" /* EMPTY */];\n  }));\n}\n/**\n * Create an observable to compose and sign a LockExpired message/transferExpired action\n * As it\'s an async observable which depends on state and may return an action which changes it,\n * the returned observable must be subscribed in a serialized context that ensures non-concurrent\n * write access to the channel\'s balance proof (e.g. concatMap)\n *\n * @param state$ - Observable of current state\n * @param action - transfer request action to be sent\n * @param signer - RaidenEpicDeps members\n * @returns Observable of transferExpired|transferExpireFailed actions\n */\n\n\nfunction makeAndSignLockExpired(state$, action, _ref8) {\n  var signer = _ref8.signer;\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    var secrethash = action.meta.secrethash;\n    if (!(secrethash in state.sent)) throw new Error(\'unknown transfer\');\n    var transfer = state.sent[secrethash].transfer[1],\n        channel = Object(lodash["get"])(state.channels, [transfer.token_network_address, transfer.recipient]);\n    if (!channel || channel.state !== ChannelState.open || !channel.own.balanceProof) throw new Error(\'channel gone, not open or no balanceProof\');\n    var signed$;\n\n    if (state.sent[secrethash].lockExpired) {\n      // lockExpired already signed, use cached\n      signed$ = Object(of["a" /* of */])(state.sent[secrethash].lockExpired[1]);\n    } else {\n      if (transfer.lock.expiration.gte(state.blockNumber)) throw new Error(\'lock not yet expired\');else if (state.sent[secrethash].unlock) throw new Error(\'transfer already unlocked\');\n      var locks = (channel.own.locks || []).filter(function (l) {\n        return l.secrethash !== secrethash;\n      }),\n          locksroot = getLocksroot(locks);\n      var message = {\n        type: MessageType.LOCK_EXPIRED,\n        message_identifier: makeMessageId(),\n        chain_id: transfer.chain_id,\n        token_network_address: transfer.token_network_address,\n        channel_identifier: transfer.channel_identifier,\n        nonce: nextNonce(channel.own.balanceProof),\n        transferred_amount: channel.own.balanceProof.transferredAmount,\n        locked_amount: channel.own.balanceProof.lockedAmount.sub(transfer.lock.amount),\n        locksroot: locksroot,\n        recipient: transfer.recipient,\n        secrethash: secrethash\n      };\n      signed$ = Object(from["a" /* from */])(signMessage(signer, message));\n    }\n\n    return signed$.pipe( // messageSend LockExpired handled by transferExpiredRetryMessageEpic\n    Object(map["a" /* map */])(function (signed) {\n      return transferExpired({\n        message: signed\n      }, action.meta);\n    }));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    return Object(of["a" /* of */])(transferExpireFailed(err, action.meta));\n  }));\n}\n/**\n * Create an observable to compose and sign a [[WithdrawConfirmation]] message\n *\n * Validate we\'re inside expiration timeout, channel exists and is open, and that total_withdraw is\n * less than or equal withdrawable amount (while we don\'t receive, partner.deposit +\n * own.transferredAmount).\n * We need it inside [[transferGenerateAndSignEnvelopeMessageEpic]] concatMap/lock because we read\n * and change the \'nonce\', even though WithdrawConfirmation doesn\'t carry a full balanceProof.\n * Also, instead of storing the messages in state and retrying, we just cache it and send cached\n * signed message on each received request.\n *\n * TODO: once we\'re able to receive transfers, instead of considering only own.transferredAmount,\n * we must also listen to ChannelWithdraw events, store it alongside pending withdraw requests and\n * take that into account before accepting a transfer and also total balance/capacity for accepting\n * a total_withdraw from a WithdrawRequest.\n *\n * @param state$ - Observable of current state\n * @param action - Withdraw request which caused this handling\n * @param signer - RaidenEpicDeps members\n * @param cache - A Map to store and reuse previously Signed<WithdrawConfirmation>\n * @returns Observable of transferExpired|transferExpireFailed actions\n */\n\n\nfunction makeAndSignWithdrawConfirmation(state$, action, _ref9, cache) {\n  var signer = _ref9.signer;\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    var request = action.payload.message;\n    var channel = Object(lodash["get"])(state.channels, [action.meta.tokenNetwork, action.meta.partner]); // check channel is in valid state and requested total_withdraw is valid\n    // withdrawable amount is: total_withdraw <= partner.deposit + own.transferredAmount\n\n    if (!channel || channel.state !== ChannelState.open || !request.channel_identifier.eq(channel.id)) throw new Error(\'channel gone or not open\');else if (request.expiration.lte(state.blockNumber)) throw new Error(\'WithdrawRequest expired\');else if (request.total_withdraw.gt(channel.partner.deposit.add(channel.own.balanceProof ? channel.own.balanceProof.transferredAmount : constants["Zero"]))) throw new Error(\'invalid total_withdraw, greater than partner.deposit + own.transferredAmount\');\n    var signed$;\n    var key = request.message_identifier.toString();\n    var cached = cache.get(key); // ensure all parameters are equal the cached one before returning it, or else sign again\n\n    if (cached && cached.chain_id.eq(request.chain_id) && cached.token_network_address === request.token_network_address && cached.channel_identifier.eq(request.channel_identifier) && cached.participant === request.participant && cached.total_withdraw.eq(request.total_withdraw) && cached.expiration.eq(request.expiration)) {\n      signed$ = Object(of["a" /* of */])(cached);\n    } else {\n      var confirmation = {\n        type: MessageType.WITHDRAW_CONFIRMATION,\n        message_identifier: request.message_identifier,\n        chain_id: request.chain_id,\n        token_network_address: request.token_network_address,\n        channel_identifier: request.channel_identifier,\n        participant: request.participant,\n        total_withdraw: request.total_withdraw,\n        nonce: nextNonce(channel.own.balanceProof),\n        expiration: request.expiration\n      };\n      signed$ = Object(from["a" /* from */])(signMessage(signer, confirmation)).pipe(Object(tap["a" /* tap */])(function (signed) {\n        return cache.put(key, signed);\n      }));\n    }\n\n    return signed$.pipe(Object(map["a" /* map */])(function (signed) {\n      return withdrawSendConfirmation({\n        message: signed\n      }, action.meta);\n    }));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    console.error(\'Error trying to handle WithdrawRequest, ignoring:\', err);\n    return empty["a" /* EMPTY */];\n  }));\n}\n/**\n * Serialize creation and signing of BalanceProof-changing messages or actions\n * Actions which change any data in any channel balance proof must only ever be created reading\n * state inside the serialization flow provided by the concatMap, and also be composed and produced\n * inside it (inner, subscribed observable)\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps\n * @returns Observable of output actions for this epic\n */\n\n\nvar epics_transferGenerateAndSignEnvelopeMessageEpic = function transferGenerateAndSignEnvelopeMessageEpic(action$, state$, deps) {\n  return state$.pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (state$) {\n    var withdrawCache = new LruCache(32);\n    return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([actions_transfer, transferUnlock, transferExpire, withdrawReceiveRequest])), Object(concatMap["a" /* concatMap */])(function (action) {\n      return Object(typesafe_actions_umd_production["isActionOf"])(actions_transfer, action) ? makeAndSignTransfer(state$, action, deps) : Object(typesafe_actions_umd_production["isActionOf"])(transferUnlock, action) ? makeAndSignUnlock(state$, action, deps) : Object(typesafe_actions_umd_production["isActionOf"])(transferExpire, action) ? makeAndSignLockExpired(state$, action, deps) : makeAndSignWithdrawConfirmation(state$, action, deps, withdrawCache);\n    }));\n  }));\n};\n/**\n * Handles a transferSigned action and retry messageSend until transfer is gone (completed with\n * success or error) OR Processed message for LockedTransfer received.\n * transferSigned for pending LockedTransfer\'s may be re-emitted on startup for pending transfer,\n * to start retrying sending the message again until stop condition is met.\n *\n * @param action$ - Observable of transferSigned actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of messageSend actions\n */\n\nvar epics_transferSignedRetryMessageEpic = function transferSignedRetryMessageEpic(action$, state$) {\n  return state$.pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (state$) {\n    return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(transferSigned)), Object(mergeMap["a" /* mergeMap */])(function (action) {\n      var secrethash = action.meta.secrethash,\n          signed = action.payload.message,\n          send = messageSend({\n        message: signed\n      }, {\n        address: signed.recipient\n      }); // emit Send once immediatelly, then wait until respective messageSent, then completes\n\n      var sendOnceAndWaitSent$ = Object(merge["a" /* merge */])(Object(of["a" /* of */])(send), action$.pipe(Object(filter["a" /* filter */])(function (a) {\n        return Object(typesafe_actions_umd_production["isActionOf"])(messageSent, a) && a.payload.message === send.payload.message && a.meta.address === send.meta.address;\n      }), Object(take["a" /* take */])(1), // don\'t output messageSent, just wait for it before completing\n      Object(ignoreElements["a" /* ignoreElements */])()));\n      return sendOnceAndWaitSent$.pipe( // Resubscribe/retry every 30s after messageSend succeeds with messageSent\n      // Notice first (or any) messageSend can wait for a long time before succeeding, as it\n      // waits for address\'s user in transport to be online and joined room before actually\n      // sending the message. That\'s why repeatWhen emits/resubscribe only some time after\n      // sendOnceAndWaitSent$ completes, instead of a plain \'interval\'\n      // TODO: configurable retry delay, possibly use an exponential backoff timeout strat\n      Object(repeatWhen["a" /* repeatWhen */])(function (completed$) {\n        return completed$.pipe(Object(delay["a" /* delay */])(30e3));\n      }), // until transferProcessed received OR transfer completed OR channelClosed\n      Object(takeUntil["a" /* takeUntil */])(state$.pipe(Object(filter["a" /* filter */])(function (state) {\n        return !!state.sent[secrethash].transferProcessed || !!state.sent[secrethash].unlockProcessed || !!state.sent[secrethash].lockExpiredProcessed || !!state.sent[secrethash].channelClosed;\n      }))));\n    }));\n  }));\n};\n/**\n * Handles a transferUnlocked action and retry messageSend until transfer is gone (completed with\n * success or error).\n * transferUnlocked for pending Unlock\'s may be re-emitted on startup for pending transfer, to\n * start retrying sending the message again until stop condition is met.\n *\n * @param action$ - Observable of transferUnlocked actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of messageSend actions\n */\n\nvar epics_transferUnlockedRetryMessageEpic = function transferUnlockedRetryMessageEpic(action$, state$) {\n  return state$.pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (state$) {\n    return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(transferUnlocked)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref10) {\n      var _ref11 = transfers_epics_slicedToArray(_ref10, 2),\n          action = _ref11[0],\n          state = _ref11[1];\n\n      var secrethash = action.meta.secrethash;\n      if (!(secrethash in state.sent)) return empty["a" /* EMPTY */]; // shouldn\'t happen\n\n      var unlock = action.payload.message,\n          transfer = state.sent[secrethash].transfer[1],\n          send = messageSend({\n        message: unlock\n      }, {\n        address: transfer.recipient\n      }); // emit Send once immediatelly, then wait until respective messageSent, then completes\n\n      var sendOnceAndWaitSent$ = Object(merge["a" /* merge */])(Object(of["a" /* of */])(send), action$.pipe(Object(filter["a" /* filter */])(function (a) {\n        return Object(typesafe_actions_umd_production["isActionOf"])(messageSent, a) && a.payload.message === send.payload.message && a.meta.address === send.meta.address;\n      }), Object(take["a" /* take */])(1), // don\'t output messageSent, just wait for it before completing\n      Object(ignoreElements["a" /* ignoreElements */])()));\n      return sendOnceAndWaitSent$.pipe( // Resubscribe/retry every 30s after messageSend succeeds with messageSent\n      // Notice first (or any) messageSend can wait for a long time before succeeding, as it\n      // waits for address\'s user in transport to be online and joined room before actually\n      // sending the message. That\'s why repeatWhen emits/resubscribe only some time after\n      // sendOnceAndWaitSent$ completes, instead of a plain \'interval\'\n      // TODO: configurable retry delay, possibly use an exponential backoff timeout strat\n      Object(repeatWhen["a" /* repeatWhen */])(function (completed$) {\n        return completed$.pipe(Object(delay["a" /* delay */])(30e3));\n      }), // until transferUnlockProcessed OR channelClosed\n      Object(takeUntil["a" /* takeUntil */])(state$.pipe(Object(filter["a" /* filter */])(function (state) {\n        return !!state.sent[secrethash].unlockProcessed || !!state.sent[secrethash].channelClosed;\n      }))));\n    }));\n  }));\n};\n/**\n * Handles a transferExpired action and retry messageSend until transfer is gone (completed with\n * success or error).\n * transferExpired for pending LockExpired\'s may be re-emitted on startup for pending transfer, to\n * start retrying sending the message again until stop condition is met.\n *\n * @param action$ - Observable of transferExpired actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of messageSend actions\n */\n\nvar epics_transferExpiredRetryMessageEpic = function transferExpiredRetryMessageEpic(action$, state$) {\n  return state$.pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (state$) {\n    return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(transferExpired)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref12) {\n      var _ref13 = transfers_epics_slicedToArray(_ref12, 2),\n          action = _ref13[0],\n          state = _ref13[1];\n\n      var secrethash = action.meta.secrethash;\n      if (!(secrethash in state.sent)) return empty["a" /* EMPTY */]; // shouldn\'t happen\n\n      var lockExpired = action.payload.message,\n          send = messageSend({\n        message: lockExpired\n      }, {\n        address: state.sent[secrethash].transfer[1].recipient\n      }); // emit Send once immediatelly, then wait until respective messageSent, then completes\n\n      var sendOnceAndWaitSent$ = Object(merge["a" /* merge */])(Object(of["a" /* of */])(send), action$.pipe(Object(filter["a" /* filter */])(function (a) {\n        return Object(typesafe_actions_umd_production["isActionOf"])(messageSent, a) && a.payload.message === send.payload.message && a.meta.address === send.meta.address;\n      }), Object(take["a" /* take */])(1), // don\'t output messageSent, just wait for it before completing\n      Object(ignoreElements["a" /* ignoreElements */])()));\n      return sendOnceAndWaitSent$.pipe( // Resubscribe/retry every 30s after messageSend succeeds with messageSent\n      // Notice first (or any) messageSend can wait for a long time before succeeding, as it\n      // waits for address\'s user in transport to be online and joined room before actually\n      // sending the message. That\'s why repeatWhen emits/resubscribe only some time after\n      // sendOnceAndWaitSent$ completes, instead of a plain \'interval\'\n      // TODO: configurable retry delay, possibly use an exponential backoff timeout strat\n      Object(repeatWhen["a" /* repeatWhen */])(function (completed$) {\n        return completed$.pipe(Object(delay["a" /* delay */])(30e3));\n      }), // until transferExpireProcessed OR channelClosed\n      Object(takeUntil["a" /* takeUntil */])(state$.pipe(Object(filter["a" /* filter */])(function (state) {\n        return !!state.sent[secrethash].lockExpiredProcessed || !!state.sent[secrethash].channelClosed;\n      }))));\n    }));\n  }));\n};\n/**\n * Process newBlocks, emits transferExpire (request to compose&sign LockExpired for a transfer)\n * if pending transfer\'s lock expired and transfer didn\'t unlock (succeed) in time\n * Also, emits transferFailed, to notify users that a transfer has failed (although it\'ll only be\n * considered as completed with fail once the transferExpireProcessed arrives).\n *\n * @param action$ - Observable of newBlock|transferExpired|transferExpireFailed actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferExpire|transferFailed actions\n */\n\nvar epics_transferAutoExpireEpic = function transferAutoExpireEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(newBlock)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), // exhaustMap ignores new blocks while previous request batch is still pending\n  Object(exhaustMap["a" /* exhaustMap */])(function (_ref14) {\n    var _ref15 = transfers_epics_slicedToArray(_ref14, 2),\n        blockNumber = _ref15[0].payload.blockNumber,\n        state = _ref15[1];\n\n    var requests$ = [];\n\n    var _loop = function _loop() {\n      var _Object$entries$_i = transfers_epics_slicedToArray(_Object$entries[_i2], 2),\n          key = _Object$entries$_i[0],\n          sent = _Object$entries$_i[1];\n\n      if (sent.unlock || sent.lockExpired || sent.channelClosed || sent.transfer[1].lock.expiration.gte(blockNumber)) return "continue";\n      var secrethash = key; // this observable acts like a Promise: emits request once, completes on success/failure\n\n      var requestAndWait$ = Object(merge["a" /* merge */])( // output once tranferExpire\n      Object(of["a" /* of */])(transferExpire(undefined, {\n        secrethash: secrethash\n      })), // but wait until respective success/failure action is seen before completing\n      action$.pipe(Object(filter["a" /* filter */])(function (a) {\n        return Object(typesafe_actions_umd_production["isActionOf"])([transferExpired, transferExpireFailed], a) && a.meta.secrethash === secrethash;\n      }), Object(take["a" /* take */])(1), // don\'t output success/failure action, just wait for first match to complete\n      Object(ignoreElements["a" /* ignoreElements */])()));\n      requests$.push(requestAndWait$); // notify users that this transfer failed definitely\n\n      requests$.push(Object(of["a" /* of */])(transferFailed(new Error("transfer expired at block=".concat(sent.transfer[1].lock.expiration.toString())), {\n        secrethash: secrethash\n      })));\n    };\n\n    for (var _i2 = 0, _Object$entries = Object.entries(state.sent); _i2 < _Object$entries.length; _i2++) {\n      var _ret = _loop();\n\n      if (_ret === "continue") continue;\n    } // process all requests before completing and restart handling newBlocks (in exhaustMap)\n\n\n    return merge["a" /* merge */].apply(void 0, requests$);\n  }));\n};\n/**\n * Re-queue pending transfer\'s BalanceProof/Envelope messages for retry on init\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferSigned|transferUnlocked actions\n */\n\nvar epics_initQueuePendingEnvelopeMessagesEpic = function initQueuePendingEnvelopeMessagesEpic(_ref16, state$) {\n  transfers_epics_objectDestructuringEmpty(_ref16);\n\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee3(state) {\n    var _i3, _Object$entries2, _Object$entries2$_i, key, sent, secrethash;\n\n    return regenerator_default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _i3 = 0, _Object$entries2 = Object.entries(state.sent);\n\n          case 1:\n            if (!(_i3 < _Object$entries2.length)) {\n              _context3.next = 20;\n              break;\n            }\n\n            _Object$entries2$_i = transfers_epics_slicedToArray(_Object$entries2[_i3], 2), key = _Object$entries2$_i[0], sent = _Object$entries2$_i[1];\n            secrethash = key; // transfer already completed or channelClosed\n\n            if (!(sent.unlockProcessed || sent.lockExpiredProcessed || sent.channelClosed)) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt("continue", 17);\n\n          case 6:\n            _context3.next = 8;\n            return matrixRequestMonitorPresence(undefined, {\n              address: sent.transfer[1].target\n            });\n\n          case 8:\n            if (sent.transferProcessed) {\n              _context3.next = 11;\n              break;\n            }\n\n            _context3.next = 11;\n            return transferSigned({\n              message: sent.transfer[1],\n              fee: sent.fee\n            }, {\n              secrethash: secrethash\n            });\n\n          case 11:\n            if (!sent.unlock) {\n              _context3.next = 14;\n              break;\n            }\n\n            _context3.next = 14;\n            return transferUnlocked({\n              message: sent.unlock[1]\n            }, {\n              secrethash: secrethash\n            });\n\n          case 14:\n            if (!sent.lockExpired) {\n              _context3.next = 17;\n              break;\n            }\n\n            _context3.next = 17;\n            return transferExpired({\n              message: sent.lockExpired[1]\n            }, {\n              secrethash: secrethash\n            });\n\n          case 17:\n            _i3++;\n            _context3.next = 1;\n            break;\n\n          case 20:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })));\n};\n/**\n * Handles receiving a signed Processed for some sent LockedTransfer\n * This will persist the Processed reply in transfer state and stop message retry\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferProcessed actions\n */\n\nvar epics_transferProcessedReceivedEpic = function transferProcessedReceivedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee4(_ref17) {\n    var _ref18, action, state, message, secrethash, _i4, _Object$entries3, _Object$entries3$_i, key, sent;\n\n    return regenerator_default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _ref18 = transfers_epics_slicedToArray(_ref17, 2), action = _ref18[0], state = _ref18[1];\n            message = action.payload.message;\n\n            if (!(!message || !Signed(Processed).is(message))) {\n              _context4.next = 4;\n              break;\n            }\n\n            return _context4.abrupt("return");\n\n          case 4:\n            secrethash = undefined;\n            _i4 = 0, _Object$entries3 = Object.entries(state.sent);\n\n          case 6:\n            if (!(_i4 < _Object$entries3.length)) {\n              _context4.next = 14;\n              break;\n            }\n\n            _Object$entries3$_i = transfers_epics_slicedToArray(_Object$entries3[_i4], 2), key = _Object$entries3$_i[0], sent = _Object$entries3$_i[1];\n\n            if (!(sent.transfer[1].message_identifier.eq(message.message_identifier) && sent.transfer[1].recipient === action.meta.address)) {\n              _context4.next = 11;\n              break;\n            }\n\n            secrethash = key;\n            return _context4.abrupt("break", 14);\n\n          case 11:\n            _i4++;\n            _context4.next = 6;\n            break;\n\n          case 14:\n            if (secrethash) {\n              _context4.next = 16;\n              break;\n            }\n\n            return _context4.abrupt("return");\n\n          case 16:\n            _context4.next = 18;\n            return transferProcessed({\n              message: message\n            }, {\n              secrethash: secrethash\n            });\n\n          case 18:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })));\n};\n/**\n * Handles receiving a signed SecretRequest from target for some sent LockedTransfer\n * Emits a transferSecretRequest action only if all conditions are met\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of output actions for this epic\n */\n\nvar epics_transferSecretRequestedEpic = function transferSecretRequestedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee5(_ref19) {\n    var _ref20, action, state, message, transfer, fee, value;\n\n    return regenerator_default.a.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _ref20 = transfers_epics_slicedToArray(_ref19, 2), action = _ref20[0], state = _ref20[1];\n            message = action.payload.message;\n\n            if (!(!message || !Signed(SecretRequest).is(message))) {\n              _context5.next = 4;\n              break;\n            }\n\n            return _context5.abrupt("return");\n\n          case 4:\n            if (!(!(message.secrethash in state.secrets) || !(message.secrethash in state.sent))) {\n              _context5.next = 6;\n              break;\n            }\n\n            return _context5.abrupt("return");\n\n          case 6:\n            transfer = state.sent[message.secrethash].transfer[1], fee = state.sent[message.secrethash].fee, value = transfer.lock.amount.sub(fee);\n\n            if (!(transfer.target !== action.meta.address || // reveal only to target\n            !transfer.payment_identifier.eq(message.payment_identifier))) {\n              _context5.next = 11;\n              break;\n            }\n\n            console.warn(\'Invalid SecretRequest for transfer\', message, transfer);\n            _context5.next = 22;\n            break;\n\n          case 11:\n            if (!(!message.expiration.lte(transfer.lock.expiration) || !message.expiration.gt(state.blockNumber))) {\n              _context5.next = 15;\n              break;\n            }\n\n            console.warn(\'SecretRequest for expired transfer\', message, transfer);\n            _context5.next = 22;\n            break;\n\n          case 15:\n            if (message.amount.gte(value)) {\n              _context5.next = 19;\n              break;\n            }\n\n            console.warn(\'SecretRequest for amount too small!\', message, transfer);\n            _context5.next = 22;\n            break;\n\n          case 19:\n            if (!message.amount.eq(value)) console.warn(\'Accepted SecretRequest for amount different than sent\', message, transfer);\n            _context5.next = 22;\n            return transferSecretRequest({\n              message: message\n            }, {\n              secrethash: message.secrethash\n            });\n\n          case 22:\n          case "end":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  })));\n};\n/**\n * Handles a transferSecretRequest action to send the respective secret to target\n * It both emits transferSecretReveal (to persist sent SecretReveal in state and indicate that\n * the secret was revealed and thus the transfer should be assumed as succeeded) as well as\n * triggers sending the message once. New SecretRequests will cause a new transferSecretRequest,\n * which will re-send the cached SecretReveal.\n *\n * @param action$ - Observable of transferSecretRequest actions\n * @param state$ - Observable of RaidenStates\n * @param signer - RaidenEpicDeps signer\n * @returns Observable of transferSecretReveal|messageSend actions\n */\n\nvar epics_transferSecretRevealEpic = function transferSecretRevealEpic(action$, state$, _ref21) {\n  var signer = _ref21.signer;\n  return state$.pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (state$) {\n    return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(transferSecretRequest)), Object(concatMap["a" /* concatMap */])(function (action) {\n      return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n        var target = state.sent[action.meta.secrethash].transfer[1].target;\n        var reveal$;\n        if (state.sent[action.meta.secrethash].secretReveal) reveal$ = Object(of["a" /* of */])(state.sent[action.meta.secrethash].secretReveal[1]);else {\n          var message = {\n            type: MessageType.SECRET_REVEAL,\n            message_identifier: makeMessageId(),\n            secret: state.secrets[action.meta.secrethash].secret\n          };\n          reveal$ = Object(from["a" /* from */])(signMessage(signer, message));\n        }\n        return reveal$.pipe(Object(mergeMap["a" /* mergeMap */])(\n        /*#__PURE__*/\n        regenerator_default.a.mark(function _callee6(message) {\n          return regenerator_default.a.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.next = 2;\n                  return transferSecretReveal({\n                    message: message\n                  }, action.meta);\n\n                case 2:\n                  _context6.next = 4;\n                  return messageSend({\n                    message: message\n                  }, {\n                    address: target\n                  });\n\n                case 4:\n                case "end":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        })));\n      }));\n    }));\n  }));\n};\n/**\n * Handles receiving a valid SecretReveal from recipient (neighbor/partner)\n * This indicates that the partner knowws the secret, and we should Unlock to avoid going on-chain.\n * The transferUnlock action is a request for the unlocking to be generated and sent.\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of output actions for this epic\n */\n\nvar epics_transferSecretRevealedEpic = function transferSecretRevealedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee7(_ref22) {\n    var _ref23, action, state, message, secrethash;\n\n    return regenerator_default.a.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _ref23 = transfers_epics_slicedToArray(_ref22, 2), action = _ref23[0], state = _ref23[1];\n            message = action.payload.message;\n\n            if (!(!message || !Signed(SecretReveal).is(message))) {\n              _context7.next = 4;\n              break;\n            }\n\n            return _context7.abrupt("return");\n\n          case 4:\n            secrethash = getSecrethash(message.secret);\n\n            if (!(!(secrethash in state.sent) || action.meta.address !== state.sent[secrethash].transfer[1].recipient || // don\'t unlock if channel closed\n            state.sent[secrethash].channelClosed || // don\'t unlock again if already unlocked, retry handled by transferUnlockedRetryMessageEpic\n            // in the future, we may avoid retry until Processed, and [re]send once per SecretReveal\n            state.sent[secrethash].unlock)) {\n              _context7.next = 7;\n              break;\n            }\n\n            return _context7.abrupt("return");\n\n          case 7:\n            _context7.next = 9;\n            return transferSecret({\n              secret: message.secret\n            }, {\n              secrethash: secrethash\n            });\n\n          case 9:\n            _context7.next = 11;\n            return transferUnlock(undefined, {\n              secrethash: secrethash\n            });\n\n          case 11:\n          case "end":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  })));\n};\n/**\n * Handles receiving a signed Processed for some sent Unlock\n * It sends the success action for transfer (which resolves any pending Promise), marking it as\n * completed successfuly by setting sent.unlockProcessed\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferred|transferUnlockProcessed actions\n */\n\nvar epics_transferUnlockProcessedReceivedEpic = function transferUnlockProcessedReceivedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee8(_ref24) {\n    var _ref25, action, state, message, secrethash, _i5, _Object$entries4, _Object$entries4$_i, key, sent;\n\n    return regenerator_default.a.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref25 = transfers_epics_slicedToArray(_ref24, 2), action = _ref25[0], state = _ref25[1];\n            message = action.payload.message;\n\n            if (!(!message || !Signed(Processed).is(message))) {\n              _context8.next = 4;\n              break;\n            }\n\n            return _context8.abrupt("return");\n\n          case 4:\n            _i5 = 0, _Object$entries4 = Object.entries(state.sent);\n\n          case 5:\n            if (!(_i5 < _Object$entries4.length)) {\n              _context8.next = 13;\n              break;\n            }\n\n            _Object$entries4$_i = transfers_epics_slicedToArray(_Object$entries4[_i5], 2), key = _Object$entries4$_i[0], sent = _Object$entries4$_i[1];\n\n            if (!(sent.unlock && sent.unlock[1].message_identifier.eq(message.message_identifier) && sent.transfer[1].recipient === action.meta.address)) {\n              _context8.next = 10;\n              break;\n            }\n\n            secrethash = key;\n            return _context8.abrupt("break", 13);\n\n          case 10:\n            _i5++;\n            _context8.next = 5;\n            break;\n\n          case 13:\n            if (secrethash) {\n              _context8.next = 15;\n              break;\n            }\n\n            return _context8.abrupt("return");\n\n          case 15:\n            _context8.next = 17;\n            return transferred({\n              balanceProof: getBalanceProofFromEnvelopeMessage(state.sent[secrethash].unlock[1])\n            }, {\n              secrethash: secrethash\n            });\n\n          case 17:\n            _context8.next = 19;\n            return transferUnlockProcessed({\n              message: message\n            }, {\n              secrethash: secrethash\n            });\n\n          case 19:\n          case "end":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  })));\n};\n/**\n * Handles receiving a signed Processed for some sent LockExpired\n * It marks the end of the unhappy case, by setting sent.lockExpiredProcessed\n * transferFailed was already sent at newBlock handling/transferExpire time\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of output actions for this epic\n */\n\nvar epics_transferExpireProcessedEpic = function transferExpireProcessedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee9(_ref26) {\n    var _ref27, action, state, message, secrethash, _i6, _Object$entries5, _Object$entries5$_i, key, sent;\n\n    return regenerator_default.a.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _ref27 = transfers_epics_slicedToArray(_ref26, 2), action = _ref27[0], state = _ref27[1];\n            message = action.payload.message;\n\n            if (!(!message || !Signed(Processed).is(message))) {\n              _context9.next = 4;\n              break;\n            }\n\n            return _context9.abrupt("return");\n\n          case 4:\n            _i6 = 0, _Object$entries5 = Object.entries(state.sent);\n\n          case 5:\n            if (!(_i6 < _Object$entries5.length)) {\n              _context9.next = 13;\n              break;\n            }\n\n            _Object$entries5$_i = transfers_epics_slicedToArray(_Object$entries5[_i6], 2), key = _Object$entries5$_i[0], sent = _Object$entries5$_i[1];\n\n            if (!(sent.lockExpired && sent.lockExpired[1].message_identifier.eq(message.message_identifier) && sent.transfer[1].recipient === action.meta.address)) {\n              _context9.next = 10;\n              break;\n            }\n\n            secrethash = key;\n            return _context9.abrupt("break", 13);\n\n          case 10:\n            _i6++;\n            _context9.next = 5;\n            break;\n\n          case 13:\n            if (secrethash) {\n              _context9.next = 15;\n              break;\n            }\n\n            return _context9.abrupt("return");\n\n          case 15:\n            _context9.next = 17;\n            return transferExpireProcessed({\n              message: message\n            }, {\n              secrethash: secrethash\n            });\n\n          case 17:\n          case "end":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  })));\n};\n/**\n * Complete or fail any pending transfer for any closing or closed channels\n * Transfer is considered successful if secret was revealed (as it could be claimed on-chain),\n * else it\'s considered as failed as couldn\'t succeed inside expiration timeout\n *\n * @param action$ - Observable of channelClose|channelClosed actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferred|transferFailed actions\n */\n\nvar epics_transferChannelClosedEpic = function transferChannelClosedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([channelClose, channelClosed])), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee10(_ref28) {\n    var _ref29, action, state, _i7, _Object$entries6, _Object$entries6$_i, key, sent, secrethash, _transfer;\n\n    return regenerator_default.a.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _ref29 = transfers_epics_slicedToArray(_ref28, 2), action = _ref29[0], state = _ref29[1];\n            _i7 = 0, _Object$entries6 = Object.entries(state.sent);\n\n          case 2:\n            if (!(_i7 < _Object$entries6.length)) {\n              _context10.next = 22;\n              break;\n            }\n\n            _Object$entries6$_i = transfers_epics_slicedToArray(_Object$entries6[_i7], 2), key = _Object$entries6$_i[0], sent = _Object$entries6$_i[1];\n            secrethash = key, _transfer = sent.transfer[1];\n\n            if (!(_transfer.token_network_address !== action.meta.tokenNetwork || _transfer.recipient !== action.meta.partner)) {\n              _context10.next = 7;\n              break;\n            }\n\n            return _context10.abrupt("continue", 19);\n\n          case 7:\n            if (!(!sent.secretReveal && !sent.unlock)) {\n              _context10.next = 12;\n              break;\n            }\n\n            _context10.next = 10;\n            return transferFailed(new Error("Channel closed before revealing or unlocking"), {\n              secrethash: secrethash\n            });\n\n          case 10:\n            _context10.next = 19;\n            break;\n\n          case 12:\n            if (!state.sent[secrethash].unlock) {\n              _context10.next = 17;\n              break;\n            }\n\n            _context10.next = 15;\n            return transferred({\n              balanceProof: getBalanceProofFromEnvelopeMessage(state.sent[secrethash].unlock[1])\n            }, {\n              secrethash: secrethash\n            });\n\n          case 15:\n            _context10.next = 19;\n            break;\n\n          case 17:\n            _context10.next = 19;\n            return transferred({}, {\n              secrethash: secrethash\n            });\n\n          case 19:\n            _i7++;\n            _context10.next = 2;\n            break;\n\n          case 22:\n          case "end":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  })));\n};\n/**\n * Receiving RefundTransfer for pending transfer fails it\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferFailed|transferRefunded actions\n */\n\nvar epics_transferRefundedEpic = function transferRefundedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee11(_ref30) {\n    var _ref31, action, state, message, secrethash, _state$sent$secrethas, transfer;\n\n    return regenerator_default.a.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref31 = transfers_epics_slicedToArray(_ref30, 2), action = _ref31[0], state = _ref31[1];\n            message = action.payload.message;\n\n            if (!(!message || !Signed(RefundTransfer).is(message))) {\n              _context11.next = 4;\n              break;\n            }\n\n            return _context11.abrupt("return");\n\n          case 4:\n            secrethash = message.lock.secrethash;\n\n            if (secrethash in state.sent) {\n              _context11.next = 7;\n              break;\n            }\n\n            return _context11.abrupt("return");\n\n          case 7:\n            _state$sent$secrethas = transfers_epics_slicedToArray(state.sent[secrethash].transfer, 2), transfer = _state$sent$secrethas[1];\n\n            if (!(message.initiator !== transfer.recipient || !message.payment_identifier.eq(transfer.payment_identifier) || !message.lock.amount.eq(transfer.lock.amount) || !message.lock.expiration.eq(transfer.lock.expiration) || state.sent[secrethash].unlock || // already unlocked\n            state.sent[secrethash].lockExpired || // already expired\n            state.sent[secrethash].channelClosed || // channel closed\n            message.lock.expiration.lte(state.blockNumber) // lock expired but transfer didn\'t yet\n            )) {\n              _context11.next = 10;\n              break;\n            }\n\n            return _context11.abrupt("return");\n\n          case 10:\n            _context11.next = 12;\n            return transferRefunded({\n              message: message\n            }, {\n              secrethash: secrethash\n            });\n\n          case 12:\n            _context11.next = 14;\n            return transferFailed(new Error(\'transfer refunded\'), {\n              secrethash: secrethash\n            });\n\n          case 14:\n          case "end":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  })));\n};\n/**\n * Sends Processed for unhandled nonce\'d messages\n *\n * We don\'t yet support receiving nor mediating transfers (LockedTransfer, RefundTransfer), but\n * also don\'t want the partner to keep retrying any messages intended for us indefinitely.\n * That\'s why we decided to just answer them with Processed, to clear their queue. Of course, we\n * still don\'t validate, store state for these messages nor handle them in any way (e.g. requesting\n * secret from initiator), so any transfer is going to expire, and then we also reply Processed for\n * the respective LockExpired.\n * Additionally, we hook in sending Processed for other messages which contain nonces (and require\n * Processed reply to stop being retried) but are safe to be ignored, like WithdrawExpired.\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @param signer - RaidenEpicDeps members\n * @returns Observable of messageSend actions\n */\n\nvar epics_transferReceivedReplyProcessedEpic = function transferReceivedReplyProcessedEpic(action$, _ref32, _ref33) {\n  transfers_epics_objectDestructuringEmpty(_ref32);\n\n  var signer = _ref33.signer;\n  var cache = new LruCache(32);\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(concatMap["a" /* concatMap */])(function (action) {\n    var message = action.payload.message;\n    if (!message || !(Signed(LockedTransfer).is(message) || Signed(RefundTransfer).is(message) || Signed(LockExpired).is(message) || Signed(WithdrawExpired).is(message))) return empty["a" /* EMPTY */];\n    var msgId = message.message_identifier,\n        key = msgId.toString();\n    var cached = cache.get(key);\n    if (cached) return Object(of["a" /* of */])(messageSend({\n      message: cached\n    }, action.meta));\n    var processed = {\n      type: MessageType.PROCESSED,\n      message_identifier: msgId\n    };\n    return Object(from["a" /* from */])(signMessage(signer, processed)).pipe(Object(tap["a" /* tap */])(function (signed) {\n      return cache.put(key, signed);\n    }), Object(map["a" /* map */])(function (signed) {\n      return messageSend({\n        message: signed\n      }, action.meta);\n    }));\n  }));\n};\n/**\n * When receiving a [[WithdrawRequest]] message, create the respective [[withdrawReceiveRequest]]\n * action\n *\n * @param action$ - Observable of messageReceived actions\n * @returns Observable of withdrawReceiveRequest actions\n */\n\nvar epics_withdrawRequestReceivedEpic = function withdrawRequestReceivedEpic(action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(messageReceived)), Object(mergeMap["a" /* mergeMap */])(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee12(action) {\n    var message;\n    return regenerator_default.a.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            message = action.payload.message;\n\n            if (!(!message || !Signed(WithdrawRequest).is(message) || message.participant !== action.meta.address)) {\n              _context12.next = 3;\n              break;\n            }\n\n            return _context12.abrupt("return");\n\n          case 3:\n            _context12.next = 5;\n            return withdrawReceiveRequest({\n              message: message\n            }, {\n              tokenNetwork: message.token_network_address,\n              partner: message.participant,\n              totalWithdraw: message.total_withdraw,\n              expiration: message.expiration.toNumber()\n            });\n\n          case 5:\n          case "end":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  })));\n};\n/**\n * sendMessage when a [[withdrawSendConfirmation]] action is fired\n *\n * @param action$ - Observable of withdrawSendConfirmation actions\n * @returns Observable of messageSend actions\n */\n\nvar epics_withdrawSendConfirmationEpic = function withdrawSendConfirmationEpic(action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(withdrawSendConfirmation)), Object(map["a" /* map */])(function (action) {\n    return messageSend({\n      message: action.payload.message\n    }, {\n      address: action.meta.partner\n    });\n  }));\n};\n// EXTERNAL MODULE: ../raiden-ts/node_modules/rxjs/_esm5/internal/operators/debounceTime.js\nvar debounceTime = __webpack_require__("3eda");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/path/utils.js\n\n\nvar utils_this = undefined;\n\nfunction utils_slicedToArray(arr, i) { return utils_arrayWithHoles(arr) || utils_iterableToArrayLimit(arr, i) || utils_nonIterableRest(); }\n\nfunction utils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction utils_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction utils_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar utils_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Either returns true if given channel can route a payment, or a reason as string if not\n *\n * @param state - current RaidenState\n * @param presences - latest Presences mapping\n * @param tokenNetwork - tokenNetwork where the channel is\n * @param partner - possibly a partner on given tokenNetwork\n * @param value - amount of tokens to check if channel can route\n * @returns true if channel can route, string containing reason if not\n */\n\nfunction channelCanRoute(state, presences, tokenNetwork, partner, value) {\n  if (!(partner in presences) || !presences[partner].payload.available) return "path: partner \\"".concat(partner, "\\" not available in transport");\n  if (!(partner in state.channels[tokenNetwork])) return "path: there\'s no direct channel with partner \\"".concat(partner, "\\"");\n  var channel = state.channels[tokenNetwork][partner];\n  if (channel.state !== ChannelState.open) return "path: channel with \\"".concat(partner, "\\" in state \\"").concat(channel.state, "\\" instead of \\"").concat(ChannelState.open, "\\"");\n\n  var _channelAmounts = channelAmounts(channel),\n      capacity = _channelAmounts.ownCapacity;\n\n  if (capacity.lt(value)) return "path: channel with \\"".concat(partner, "\\" don\'t have enough capacity=").concat(capacity.toString());\n  return true;\n}\nvar serviceRegistryToken = Object(lodash["memoize"])(function (serviceRegistryContract) {\n  return utils_awaiter(utils_this, void 0, void 0,\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt("return", serviceRegistryContract.functions.token());\n\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n});\n/**\n * Returns a cold observable which fetch PFS info & validate for a given server address or URL\n *\n * @param pfsAddrOrUrl - PFS account/address or URL\n * @param deps - RaidenEpicDeps needed for various parameters\n * @returns Observable containing PFS server info\n */\n\nfunction pfsInfo(pfsAddrOrUrl, _ref) {\n  var _this2 = this;\n\n  var serviceRegistryContract = _ref.serviceRegistryContract,\n      network = _ref.network,\n      contractsInfo = _ref.contractsInfo,\n      config$ = _ref.config$;\n\n  /**\n   * Codec for PFS /api/v1/info result schema\n   */\n  var PathInfo = es6["r" /* type */]({\n    message: es6["o" /* string */],\n    network_info: es6["r" /* type */]({\n      // literals will fail if trying to decode anything different from these constants\n      chain_id: es6["h" /* literal */](network.chainId),\n      registry_address: es6["h" /* literal */](contractsInfo.TokenNetworkRegistry.address)\n    }),\n    operator: es6["o" /* string */],\n    payment_address: Address,\n    price_info: UInt(32),\n    version: es6["o" /* string */]\n  }); // if it\'s an address, fetch url from ServiceRegistry, else it\'s already the URL\n\n  var url$ = Address.is(pfsAddrOrUrl) ? Object(from["a" /* from */])(serviceRegistryContract.functions.urls(pfsAddrOrUrl)) : Object(of["a" /* of */])(pfsAddrOrUrl);\n  return url$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref2) {\n    var _ref3 = utils_slicedToArray(_ref2, 2),\n        url = _ref3[0],\n        httpTimeout = _ref3[1].httpTimeout;\n\n    if (!url) throw new Error("Empty URL: ".concat(url));else if (url.includes(\'://\') && !url.startsWith(\'https://\')) throw new Error("Invalid URL schema: ".concat(url)); // default to https for domain-only urls\n    else if (!url.includes(\'://\')) url = "https://".concat(url);\n    var start = Date.now();\n    return Object(fetch["fromFetch"])("".concat(url, "/api/v1/info")).pipe(Object(timeout["a" /* timeout */])(httpTimeout), Object(mergeMap["a" /* mergeMap */])(function (res) {\n      return utils_awaiter(_this2, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee2() {\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = decode;\n                _context2.t1 = PathInfo;\n                _context2.t2 = losslessParse;\n                _context2.next = 5;\n                return res.text();\n\n              case 5:\n                _context2.t3 = _context2.sent;\n                _context2.t4 = (0, _context2.t2)(_context2.t3);\n                _context2.t5 = (0, _context2.t0)(_context2.t1, _context2.t4);\n                _context2.next = 10;\n                return serviceRegistryToken(serviceRegistryContract);\n\n              case 10:\n                _context2.t6 = _context2.sent;\n                return _context2.abrupt("return", [_context2.t5, _context2.t6]);\n\n              case 12:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }), Object(map["a" /* map */])(function (_ref4) {\n      var _ref5 = utils_slicedToArray(_ref4, 2),\n          info = _ref5[0],\n          token = _ref5[1];\n\n      return {\n        address: info.payment_address,\n        url: url,\n        rtt: Date.now() - start,\n        price: info.price_info,\n        token: token\n      };\n    }));\n  }));\n}\n/**\n * Retrieve pfsInfo for these servers & return sorted PFS info\n *\n * Sort order is price then response time (rtt).\n * Throws if no server can be validated, meaning either there\'s none in the current network or\n * we\'re out-of-sync (outdated or ahead of PFS\'s deployment network version).\n *\n * @param pfsList - Array of PFS addresses, as notified by pfsListUpdated action\n * @param deps - RaidenEpicDeps array\n * @returns Observable of online, validated & sorted PFS info array\n */\n\nfunction pfsListInfo(pfsList, deps) {\n  return Object(from["a" /* from */])(pfsList).pipe(Object(mergeMap["a" /* mergeMap */])(function (addr) {\n    return pfsInfo(addr, deps).pipe(Object(catchError["a" /* catchError */])(function (err) {\n      console.warn("Error trying to fetch PFS info for \\"".concat(addr, "\\" - ignoring:"), err);\n      return empty["a" /* EMPTY */];\n    }));\n  }, 5), Object(toArray["a" /* toArray */])(), Object(map["a" /* map */])(function (list) {\n    if (!list.length) throw new Error(\'Could not validate any PFS info. Possibly out-of-sync with PFSs version.\');\n    return list.sort(function (a, b) {\n      var dif = a.price.sub(b.price); // first, sort by price\n\n      if (dif.lt(0)) return -1;else if (dif.gt(0)) return 1; // if it\'s equal, tiebreak on rtt\n      else return a.rtt - b.rtt;\n    });\n  }));\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/path/epics.js\n\n\nvar path_epics_this = undefined;\n\nfunction path_epics_toConsumableArray(arr) { return path_epics_arrayWithoutHoles(arr) || path_epics_iterableToArray(arr) || path_epics_nonIterableSpread(); }\n\nfunction path_epics_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\n\nfunction path_epics_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\n\nfunction path_epics_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction path_epics_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction path_epics_slicedToArray(arr, i) { return path_epics_arrayWithHoles(arr) || path_epics_iterableToArrayLimit(arr, i) || path_epics_nonIterableRest(); }\n\nfunction path_epics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction path_epics_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction path_epics_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar path_epics_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar epics_oneToNAddress = Object(lodash["memoize"])(function (userDepositContract) {\n  return path_epics_awaiter(path_epics_this, void 0, void 0,\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt("return", userDepositContract.functions.one_to_n_address());\n\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n});\n/**\n * Codec for PFS API returned error\n *\n * May contain other fields like error_details, but we don\'t care about them (for now)\n */\n\nvar PathError = es6["l" /* readonly */](es6["r" /* type */]({\n  /* eslint-disable-next-line @typescript-eslint/camelcase */\n  error_code: es6["j" /* number */],\n  errors: es6["o" /* string */]\n}));\n\nvar epics_makeIOU = function makeIOU(sender, receiver, chainId, oneToNAddress, blockNumber) {\n  return {\n    sender: sender,\n    receiver: receiver,\n    chain_id: Object(utils["bigNumberify"])(chainId),\n    amount: constants["Zero"],\n    one_to_n_address: oneToNAddress,\n    expiration_block: Object(utils["bigNumberify"])(blockNumber).add(2 * Math.pow(10, 5))\n  };\n};\n\nvar updateIOU = function updateIOU(iou, price) {\n  return Object.assign({}, iou, {\n    amount: iou.amount.add(price)\n  });\n};\n\nvar epics_packIOU = function packIOU(iou) {\n  return Object(utils["concat"])([encode(iou.one_to_n_address, 20), encode(iou.chain_id, 32), encode(MessageTypeId.IOU, 32), encode(iou.sender, 20), encode(iou.receiver, 20), encode(iou.amount, 32), encode(iou.expiration_block, 32)]);\n};\n\nvar epics_signIOU$ = function signIOU$(iou, signer) {\n  return Object(from["a" /* from */])(signer.signMessage(epics_packIOU(iou))).pipe(Object(map["a" /* map */])(function (signature) {\n    return Object.assign({}, iou, {\n      signature: signature\n    });\n  }));\n};\n\nvar epics_makeAndSignLastIOURequest$ = function makeAndSignLastIOURequest$(sender, receiver, signer) {\n  return Object(defer["a" /* defer */])(function () {\n    var timestamp = new Date().toISOString().split(\'.\')[0],\n        message = Object(utils["concat"])([sender, receiver, Object(utils["toUtf8Bytes"])(timestamp)]);\n    return Object(from["a" /* from */])(signer.signMessage(message)).pipe(Object(map["a" /* map */])(function (signature) {\n      return {\n        sender: sender,\n        receiver: receiver,\n        timestamp: timestamp,\n        signature: signature\n      };\n    }));\n  });\n};\n\nvar epics_prepareNextIOU$ = function prepareNextIOU$(pfs, tokenNetwork, state$, deps) {\n  return state$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(deps.config$), Object(first["a" /* first */])(), Object(switchMap["a" /* switchMap */])(function (_ref) {\n    var _ref2 = path_epics_slicedToArray(_ref, 2),\n        state = _ref2[0],\n        httpTimeout = _ref2[1].httpTimeout;\n\n    var cachedIOU = Object(lodash["get"])(state.path.iou, [tokenNetwork, pfs.address]);\n    return (cachedIOU ? Object(of["a" /* of */])(cachedIOU) : epics_makeAndSignLastIOURequest$(deps.address, pfs.address, deps.signer).pipe(Object(mergeMap["a" /* mergeMap */])(function (payload) {\n      return Object(fetch["fromFetch"])("".concat(pfs.url, "/api/v1/").concat(tokenNetwork, "/payment/iou?").concat(new URLSearchParams(payload).toString()), {\n        method: \'GET\',\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).pipe(Object(timeout["a" /* timeout */])(httpTimeout));\n    }), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref3) {\n      var _ref4 = path_epics_slicedToArray(_ref3, 2),\n          response = _ref4[0],\n          blockNumber = _ref4[1].blockNumber;\n\n      return path_epics_awaiter(path_epics_this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee2() {\n        var text, _decode, lastIou, signer;\n\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(response.status === 404)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.t0 = epics_makeIOU;\n                _context2.t1 = deps.address;\n                _context2.t2 = pfs.address;\n                _context2.t3 = deps.network.chainId;\n                _context2.next = 7;\n                return epics_oneToNAddress(deps.userDepositContract);\n\n              case 7:\n                _context2.t4 = _context2.sent;\n                _context2.t5 = blockNumber;\n                return _context2.abrupt("return", (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3, _context2.t4, _context2.t5));\n\n              case 10:\n                _context2.next = 12;\n                return response.text();\n\n              case 12:\n                text = _context2.sent;\n\n                if (response.ok) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                throw new Error("PFS: last IOU request: code=".concat(response.status, " => body=\\"").concat(text, "\\""));\n\n              case 15:\n                _decode = decode(LastIOUResults, losslessParse(text)), lastIou = _decode.last_iou;\n                signer = Object(utils["verifyMessage"])(epics_packIOU(lastIou), lastIou.signature);\n\n                if (!(signer !== deps.address)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                throw new Error("PFS: last iou signature mismatch: signer=".concat(signer, " instead of us ").concat(deps.address));\n\n              case 19:\n                return _context2.abrupt("return", lastIou);\n\n              case 20:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }))).pipe(Object(map["a" /* map */])(function (iou) {\n      return updateIOU(iou, pfs.price);\n    }), Object(mergeMap["a" /* mergeMap */])(function (iou) {\n      return epics_signIOU$(iou, deps.signer);\n    }));\n  }));\n};\n/**\n * Check if a transfer can be made and return a set of paths for it.\n *\n * @param action$ - Observable of pathFind actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps object\n * @returns Observable of pathFound|pathFindFailed actions\n */\n\n\nvar epics_pathFindServiceEpic = function pathFindServiceEpic(action$, state$, deps) {\n  return Object(combineLatest["a" /* combineLatest */])(state$, getPresences$(action$), deps.config$, // don\'t need to be cached, but here to avoid separate withLatestFrom\n  action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(pfsListUpdated)), Object(pluck["a" /* pluck */])(\'payload\', \'pfsList\'), Object(startWith["a" /* startWith */])([]))).pipe(Object(publishReplay["a" /* publishReplay */])(1, undefined, function (cached$) {\n    return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(pathFind)), Object(concatMap["a" /* concatMap */])(function (action) {\n      return cached$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (_ref5) {\n        var _ref6 = path_epics_slicedToArray(_ref5, 3),\n            state = _ref6[0],\n            presences = _ref6[1],\n            _ref6$ = _ref6[2],\n            configPfs = _ref6$.pfs,\n            httpTimeout = _ref6$.httpTimeout,\n            pfsSafetyMargin = _ref6$.pfsSafetyMargin;\n\n        var _action$meta = action.meta,\n            tokenNetwork = _action$meta.tokenNetwork,\n            target = _action$meta.target;\n        if (!(tokenNetwork in state.channels)) throw new Error("PFS: unknown tokenNetwork ".concat(tokenNetwork));\n        if (!(target in presences) || !presences[target].payload.available) throw new Error("PFS: target ".concat(target, " not online")); // if pathFind received a set of paths, pass it through to validation/cleanup\n\n        if (action.payload.paths) return Object(of["a" /* of */])({\n          paths: action.payload.paths,\n          iou: undefined\n        }); // else, if possible, use a direct transfer\n        else if (channelCanRoute(state, presences, tokenNetwork, target, action.meta.value) === true) {\n            return Object(of["a" /* of */])({\n              paths: [{\n                path: [state.address, target],\n                fee: constants["Zero"]\n              }],\n              iou: undefined\n            });\n          } else if (!action.payload.pfs && configPfs === null) {\n            // pfs not specified in action and disabled (null) in config\n            throw new Error("PFS disabled and no direct route available");\n          } else {\n            // else, request a route from PFS.\n            // pfs$ - Observable which emits one PFS info and then completes\n            var pfs$ = action.payload.pfs ? // first, honor action.payload.pfs\n            Object(of["a" /* of */])(action.payload.pfs) : configPfs != null ? // or if config.pfs isn\'t disabled nor auto (undefined), use it\n            // configPfs is addr or url, so fetch pfsInfo from it\n            pfsInfo(configPfs, deps) : // else (config.pfs undefined, auto mode)\n            cached$.pipe(Object(pluck["a" /* pluck */])(3), // get cached pfsList (4th combined value)\n            // if needed, wait for list to be populated\n            Object(first["a" /* first */])(function (pfsList) {\n              return pfsList.length > 0;\n            }), // fetch pfsInfo from whole list & sort it\n            Object(mergeMap["a" /* mergeMap */])(function (pfsList) {\n              return pfsListInfo(pfsList, deps);\n            }), Object(tap["a" /* tap */])(function (pfss) {\n              return console.log(\'Auto-selecting best PFS from:\', pfss);\n            }), // pop best ranked\n            Object(pluck["a" /* pluck */])(0));\n            return pfs$.pipe(Object(mergeMap["a" /* mergeMap */])(function (pfs) {\n              return pfs.price.isZero() ? Object(of["a" /* of */])({\n                pfs: pfs,\n                iou: undefined\n              }) : epics_prepareNextIOU$(pfs, tokenNetwork, cached$.pipe(Object(pluck["a" /* pluck */])(0))\n              /* cached state$ */\n              , deps).pipe(Object(map["a" /* map */])(function (iou) {\n                return {\n                  pfs: pfs,\n                  iou: iou\n                };\n              }));\n            }), Object(mergeMap["a" /* mergeMap */])(function (_ref7) {\n              var pfs = _ref7.pfs,\n                  iou = _ref7.iou;\n              return Object(fetch["fromFetch"])("".concat(pfs.url, "/api/v1/").concat(tokenNetwork, "/paths"), {\n                method: \'POST\',\n                headers: {\n                  \'Content-Type\': \'application/json\'\n                },\n                body: losslessStringify({\n                  from: deps.address,\n                  to: target,\n                  value: UInt(32).encode(action.meta.value),\n                  max_paths: 10,\n                  iou: iou ? Object.assign({}, iou, {\n                    amount: UInt(32).encode(iou.amount),\n                    expiration_block: UInt(32).encode(iou.expiration_block),\n                    chain_id: UInt(32).encode(iou.chain_id)\n                  }) : undefined\n                })\n              }).pipe(Object(timeout["a" /* timeout */])(httpTimeout), Object(map["a" /* map */])(function (response) {\n                return {\n                  response: response,\n                  iou: iou\n                };\n              }));\n            }), Object(mergeMap["a" /* mergeMap */])(function (_ref8) {\n              var response = _ref8.response,\n                  iou = _ref8.iou;\n              return path_epics_awaiter(path_epics_this, void 0, void 0,\n              /*#__PURE__*/\n              regenerator_default.a.mark(function _callee3() {\n                return regenerator_default.a.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.t0 = response;\n                        _context3.next = 3;\n                        return response.text();\n\n                      case 3:\n                        _context3.t1 = _context3.sent;\n                        _context3.t2 = iou;\n                        return _context3.abrupt("return", {\n                          response: _context3.t0,\n                          text: _context3.t1,\n                          iou: _context3.t2\n                        });\n\n                      case 6:\n                      case "end":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n            }), Object(map["a" /* map */])(function (_ref9) {\n              var response = _ref9.response,\n                  text = _ref9.text,\n                  iou = _ref9.iou;\n              // any decode error here will throw early and end up in catchError\n              var data = losslessParse(text);\n\n              if (!response.ok) {\n                return {\n                  error: decode(PathError, data),\n                  iou: iou\n                };\n              }\n\n              return {\n                paths: decode(PathResults, data).result.map(function (r) {\n                  return {\n                    path: r.path,\n                    // Add PFS safety margin to estimated fees\n                    fee: r.estimated_fee.mul(Math.round(pfsSafetyMargin * 1e6)).div(1e6)\n                  };\n                }),\n                iou: iou\n              };\n            }));\n          }\n      }), Object(withLatestFrom["a" /* withLatestFrom */])(cached$), // validate/cleanup received routes/paths/results\n      Object(mergeMap["a" /* mergeMap */])(function (_ref10) {\n        var _ref11 = path_epics_slicedToArray(_ref10, 2),\n            data = _ref11[0],\n            _ref11$ = path_epics_slicedToArray(_ref11[1], 2),\n            state = _ref11$[0],\n            presences = _ref11$[1];\n\n        return (// looks like mergeMap with generator doesn\'t handle exceptions correctly\n          // use from+iterator from iife generator instead\n          Object(from["a" /* from */])(\n          /*#__PURE__*/\n          regenerator_default.a.mark(function _callee4() {\n            var iou, filteredPaths, invalidatedRecipients, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, path, fee, recipient, canTransferOrReason;\n\n            return regenerator_default.a.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    iou = data.iou;\n\n                    if (!iou) {\n                      _context4.next = 9;\n                      break;\n                    }\n\n                    if (!(data.paths || data.error.error_code === 2201)) {\n                      _context4.next = 7;\n                      break;\n                    }\n\n                    _context4.next = 5;\n                    return iouPersist({\n                      iou: iou\n                    }, {\n                      tokenNetwork: action.meta.tokenNetwork,\n                      serviceAddress: iou.receiver\n                    });\n\n                  case 5:\n                    _context4.next = 9;\n                    break;\n\n                  case 7:\n                    _context4.next = 9;\n                    return iouClear(undefined, {\n                      tokenNetwork: action.meta.tokenNetwork,\n                      serviceAddress: iou.receiver\n                    });\n\n                  case 9:\n                    if (data.paths) {\n                      _context4.next = 11;\n                      break;\n                    }\n\n                    throw new Error("PFS: paths request: code=".concat(data.error.error_code, " => errors=\\"").concat(data.error.errors, "\\""));\n\n                  case 11:\n                    filteredPaths = [], invalidatedRecipients = new Set(); // eslint-disable-next-line prefer-const\n\n                    _iteratorNormalCompletion = true;\n                    _didIteratorError = false;\n                    _iteratorError = undefined;\n                    _context4.prev = 15;\n                    _iterator = data.paths[Symbol.iterator]();\n\n                  case 17:\n                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                      _context4.next = 32;\n                      break;\n                    }\n\n                    _step$value = _step.value, path = _step$value.path, fee = _step$value.fee;\n                    // if route has us as first hop, cleanup/shift\n                    if (path[0] === state.address) path = path.slice(1);\n                    recipient = path[0]; // if this recipient was already invalidated in a previous iteration, skip\n\n                    if (!invalidatedRecipients.has(recipient)) {\n                      _context4.next = 23;\n                      break;\n                    }\n\n                    return _context4.abrupt("continue", 29);\n\n                  case 23:\n                    // if we already found some valid route, allow only new routes through this peer\n                    canTransferOrReason = !filteredPaths.length ? channelCanRoute(state, presences, action.meta.tokenNetwork, recipient, action.meta.value.add(fee)) : recipient !== filteredPaths[0].path[0] ? \'path: already selected another recipient\' : fee.gt(filteredPaths[0].fee) ? \'path: already selected a smaller fee\' : true;\n\n                    if (!(canTransferOrReason !== true)) {\n                      _context4.next = 28;\n                      break;\n                    }\n\n                    console.log(\'Invalidated received route. Reason:\', canTransferOrReason, \'Route:\', path);\n                    invalidatedRecipients.add(recipient);\n                    return _context4.abrupt("continue", 29);\n\n                  case 28:\n                    filteredPaths.push({\n                      path: path,\n                      fee: fee\n                    });\n\n                  case 29:\n                    _iteratorNormalCompletion = true;\n                    _context4.next = 17;\n                    break;\n\n                  case 32:\n                    _context4.next = 38;\n                    break;\n\n                  case 34:\n                    _context4.prev = 34;\n                    _context4.t0 = _context4["catch"](15);\n                    _didIteratorError = true;\n                    _iteratorError = _context4.t0;\n\n                  case 38:\n                    _context4.prev = 38;\n                    _context4.prev = 39;\n\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                      _iterator.return();\n                    }\n\n                  case 41:\n                    _context4.prev = 41;\n\n                    if (!_didIteratorError) {\n                      _context4.next = 44;\n                      break;\n                    }\n\n                    throw _iteratorError;\n\n                  case 44:\n                    return _context4.finish(41);\n\n                  case 45:\n                    return _context4.finish(38);\n\n                  case 46:\n                    if (filteredPaths.length) {\n                      _context4.next = 48;\n                      break;\n                    }\n\n                    throw new Error("PFS: no valid routes found");\n\n                  case 48:\n                    _context4.next = 50;\n                    return pathFound({\n                      paths: filteredPaths\n                    }, action.meta);\n\n                  case 50:\n                  case "end":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4, null, [[15, 34, 38, 46], [39,, 41, 45]]);\n          })())\n        );\n      }), Object(catchError["a" /* catchError */])(function (err) {\n        return Object(of["a" /* of */])(pathFindFailed(err, action.meta));\n      }));\n    }));\n  }));\n};\n/**\n * Sends a [[PFSCapacityUpdate]] to PFS global room on new deposit on our side of channels\n *\n * @param action$ - Observable of channelDeposited actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of messageGlobalSend actions\n */\n\nvar epics_pfsCapacityUpdateEpic = function pfsCapacityUpdateEpic(action$, state$, _ref12) {\n  var address = _ref12.address,\n      network = _ref12.network,\n      signer = _ref12.signer,\n      config$ = _ref12.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(channelDeposited)), Object(filter["a" /* filter */])(function (action) {\n    return action.payload.participant === address;\n  }), Object(debounceTime["a" /* debounceTime */])(10e3), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(filter["a" /* filter */])(function (_ref13) {\n    var _ref14 = path_epics_slicedToArray(_ref13, 3),\n        pfsRoom = _ref14[2].pfsRoom;\n\n    return !!pfsRoom;\n  }), // ignore actions while/if config.pfsRoom isn\'t set\n  Object(mergeMap["a" /* mergeMap */])(function (_ref15) {\n    var _ref16 = path_epics_slicedToArray(_ref15, 3),\n        action = _ref16[0],\n        state = _ref16[1],\n        _ref16$ = _ref16[2],\n        revealTimeout = _ref16$.revealTimeout,\n        pfsRoom = _ref16$.pfsRoom;\n\n    var channel = state.channels[action.meta.tokenNetwork][action.meta.partner];\n    if (!channel || channel.state !== ChannelState.open) return empty["a" /* EMPTY */];\n\n    var _channelAmounts = channelAmounts(channel),\n        ownCapacity = _channelAmounts.ownCapacity,\n        partnerCapacity = _channelAmounts.partnerCapacity;\n\n    var message = {\n      type: MessageType.PFS_CAPACITY_UPDATE,\n      canonical_identifier: {\n        chain_identifier: Object(utils["bigNumberify"])(network.chainId),\n        token_network_address: action.meta.tokenNetwork,\n        channel_identifier: Object(utils["bigNumberify"])(channel.id)\n      },\n      updating_participant: address,\n      other_participant: action.meta.partner,\n      updating_nonce: channel.own.balanceProof ? channel.own.balanceProof.nonce : constants["Zero"],\n      other_nonce: channel.partner.balanceProof ? channel.partner.balanceProof.nonce : constants["Zero"],\n      updating_capacity: ownCapacity,\n      other_capacity: partnerCapacity,\n      reveal_timeout: Object(utils["bigNumberify"])(revealTimeout)\n    };\n    return Object(from["a" /* from */])(signMessage(signer, message)).pipe(Object(map["a" /* map */])(function (signed) {\n      return messageGlobalSend({\n        message: signed\n      }, {\n        roomName: pfsRoom\n      });\n    }));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    console.error(\'Error trying to generate & sign PFSCapacityUpdate\', err);\n    return empty["a" /* EMPTY */];\n  }));\n};\n/**\n * Fetch & monitors ServiceRegistry\'s RegisteredService events, keep track of valid_till expiration\n * and aggregate list of valid service addresses\n *\n * Notice this epic only deals with the events & addresses, and don\'t fetch URLs, which need to be\n * fetched on-demand through [[pfsInfo]] & [[pfsListInfo]].\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps object\n * @returns Observable of pfsListUpdated actions\n */\n\nvar epics_pfsServiceRegistryMonitorEpic = function pfsServiceRegistryMonitorEpic(_ref17, _ref18, _ref19) {\n  path_epics_objectDestructuringEmpty(_ref17);\n\n  path_epics_objectDestructuringEmpty(_ref18);\n\n  var serviceRegistryContract = _ref19.serviceRegistryContract,\n      contractsInfo = _ref19.contractsInfo,\n      config$ = _ref19.config$;\n  return config$.pipe( // monitors config.pfs, and only monitors contract if it\'s undefined\n  Object(pluck["a" /* pluck */])(\'pfs\'), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(switchMap["a" /* switchMap */])(function (pfs) {\n    return pfs !== undefined ? // disable ServiceRegistry monitoring if/while pfs is null=disabled or set\n    empty["a" /* EMPTY */] : // type of elements emitted by getEventsStream (past and new events coming from contract):\n    // [service, valid_till, deposit_amount, deposit_contract, Event]\n    getEventsStream(serviceRegistryContract, [serviceRegistryContract.filters.RegisteredService(null, null, null, null)], Object(of["a" /* of */])(contractsInfo.ServiceRegistry.block_number)).pipe(Object(groupBy["a" /* groupBy */])(function (_ref20) {\n      var _ref21 = path_epics_slicedToArray(_ref20, 1),\n          service = _ref21[0];\n\n      return service;\n    }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n      return grouped$.pipe( // switchMap ensures new events for each server (grouped$) picks latest event\n      Object(switchMap["a" /* switchMap */])(function (_ref22) {\n        var _ref23 = path_epics_slicedToArray(_ref22, 2),\n            service = _ref23[0],\n            valid_till = _ref23[1];\n\n        var now = Date.now(),\n            validTill = valid_till.mul(1000); // milliseconds valid_till\n\n        if (validTill.lt(now)) return empty["a" /* EMPTY */]; // this event already expired\n        // end$ will emit valid=false iff <2^31 ms in the future (setTimeout limit)\n\n        var end$ = validTill.sub(now).lt(constants["Two"].pow(31)) ? Object(of["a" /* of */])({\n          service: service,\n          valid: false\n        }).pipe(Object(delay["a" /* delay */])(new Date(validTill.toNumber()))) : empty["a" /* EMPTY */];\n        return Object(merge["a" /* merge */])(Object(of["a" /* of */])({\n          service: service,\n          valid: true\n        }), end$);\n      }));\n    }), Object(scan["a" /* scan */])(function (acc, _ref24) {\n      var service = _ref24.service,\n          valid = _ref24.valid;\n      return !valid && acc.includes(service) ? acc.filter(function (s) {\n        return s !== service;\n      }) : valid && !acc.includes(service) ? [].concat(path_epics_toConsumableArray(acc), [service]) : acc;\n    }, []), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(debounceTime["a" /* debounceTime */])(1e3), // debounce burst of updates on initial fetch\n    Object(map["a" /* map */])(function (pfsList) {\n      return pfsListUpdated({\n        pfsList: pfsList\n      });\n    }));\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/epics.js\n\n\n\n\n\n\n\n\n\nvar RaidenEpics = Object.assign({}, epics_namespaceObject, transport_epics_namespaceObject, transfers_epics_namespaceObject, path_epics_namespaceObject);\nvar epics_raidenRootEpic = function raidenRootEpic(action$, state$, deps) {\n  // observable which emits once when a raidenShutdown action goes through actions pipeline\n  var shutdownNotification = action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(raidenShutdown))),\n      // actions pipeline, but ends with (including) a raidenShutdown action\n  limitedAction$ = action$.pipe(Object(takeWhile["a" /* takeWhile */])(Object(lodash["negate"])(Object(typesafe_actions_umd_production["isActionOf"])(raidenShutdown)), true)),\n      // states pipeline, but ends when shutdownNotification emits\n  limitedState$ = state$.pipe(Object(takeUntil["a" /* takeUntil */])(shutdownNotification)); // wire state$ & action$ to output subjects, to expose them to Raiden public class,\n  // including complete notifications (these observables don\'t error, because error would end\n  // subscriptions at the returned observable instead of feed-backing them)\n\n  limitedState$.subscribe(deps.stateOutput$);\n  limitedAction$.subscribe(deps.actionOutput$); // wire state.config to deps.config$ BehaviorSubject\n\n  limitedState$.pipe(Object(pluck["a" /* pluck */])(\'config\'), Object(distinctUntilChanged["a" /* distinctUntilChanged */])()).subscribe(deps.config$); // like combineEpics, but completes action$, state$ & output$ when a raidenShutdown goes through\n\n  return Object(from["a" /* from */])(Object.values(RaidenEpics)).pipe(Object(mergeMap["a" /* mergeMap */])(function (epic) {\n    return epic(limitedAction$, limitedState$, deps);\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    return Object(of["a" /* of */])(raidenShutdown({\n      reason: err\n    }));\n  }), Object(takeUntil["a" /* takeUntil */])(shutdownNotification));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/raiden.js\n\n\nfunction raiden_toConsumableArray(arr) { return raiden_arrayWithoutHoles(arr) || raiden_iterableToArray(arr) || raiden_nonIterableSpread(); }\n\nfunction raiden_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\n\nfunction raiden_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\n\nfunction raiden_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction raiden_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction raiden_slicedToArray(arr, i) { return raiden_arrayWithHoles(arr) || raiden_iterableToArrayLimit(arr, i) || raiden_nonIterableRest(); }\n\nfunction raiden_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction raiden_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction raiden_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction raiden_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction raiden_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction raiden_createClass(Constructor, protoProps, staticProps) { if (protoProps) raiden_defineProperties(Constructor.prototype, protoProps); if (staticProps) raiden_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar raiden_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar raiden_Raiden =\n/*#__PURE__*/\nfunction () {\n  function Raiden(provider, network, signer, contractsInfo, state) {\n    var _this = this;\n\n    raiden_classCallCheck(this, Raiden);\n\n    this.resolveName = provider.resolveName.bind(provider);\n    var address = state.address; // use next from latest known blockNumber as start block when polling\n\n    provider.resetEventsBlock(state.blockNumber + 1);\n    var state$ = new BehaviorSubject["a" /* BehaviorSubject */](state);\n    this.state$ = state$;\n    var action$ = new Subject["a" /* Subject */]();\n    this.action$ = action$;\n    this.channels$ = state$.pipe(Object(map["a" /* map */])(function (state) {\n      return Object(lodash["transform"])( // transform state.channels to token-partner-raidenChannel map\n      state.channels, function (result, partner2channel, tokenNetwork) {\n        var token = Object(lodash["findKey"])(state.tokens, function (tn) {\n          return tn === tokenNetwork;\n        });\n        if (!token) return; // shouldn\'t happen, token mapping is always bi-directional\n\n        result[token] = Object(lodash["transform"])( // transform Channel to RaidenChannel, with more info\n        partner2channel, function (partner2raidenChannel, channel, partner) {\n          var _channelAmounts = channelAmounts(channel),\n              ownDeposit = _channelAmounts.ownDeposit,\n              partnerDeposit = _channelAmounts.partnerDeposit,\n              balance = _channelAmounts.ownBalance,\n              capacity = _channelAmounts.ownCapacity;\n\n          partner2raidenChannel[partner] = Object.assign({\n            state: channel.state\n          }, Object(lodash["pick"])(channel, [\'id\', \'settleTimeout\', \'openBlock\', \'closeBlock\']), {\n            token: token,\n            tokenNetwork: tokenNetwork,\n            partner: partner,\n            ownDeposit: ownDeposit,\n            partnerDeposit: partnerDeposit,\n            balance: balance,\n            capacity: capacity\n          });\n        });\n      });\n    }));\n    this.transfers$ = state$.pipe(Object(pluck["a" /* pluck */])(\'sent\'), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(concatMap["a" /* concatMap */])(function (sent) {\n      return Object(from["a" /* from */])(Object.entries(sent));\n    }),\n    /* this scan stores a reference to each [key,value] in \'acc\', and emit as \'changed\' iff it\n     * changes from last time seen. It relies on value references changing only if needed */\n    Object(scan["a" /* scan */])(function (_ref, _ref2) {\n      var acc = _ref.acc;\n\n      var _ref3 = raiden_slicedToArray(_ref2, 2),\n          secrethash = _ref3[0],\n          sent = _ref3[1];\n\n      return (// if ref didn\'t change, emit previous accumulator, without \'changed\' value\n        acc[secrethash] === sent ? {\n          acc: acc\n        } : // else, update ref in \'acc\' and emit value in \'changed\' prop\n        {\n          acc: Object.assign({}, acc, raiden_defineProperty({}, secrethash, sent)),\n          changed: sent\n        }\n      );\n    }, {\n      acc: {}\n    }), Object(pluck["a" /* pluck */])(\'changed\'), Object(filter["a" /* filter */])(isntNil), // filter out if reference didn\'t change from last emit\n    // from here, we get SentTransfer objects which changed from previous state (all on first)\n    Object(map["a" /* map */])(raidenSentTransfer));\n    this.events$ = action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(Object.values(RaidenEvents))));\n    this.getTokenInfo = Object(lodash["memoize"])(function (token) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee() {\n        var tokenContract, _ref4, _ref5, totalSupply, decimals, name, symbol;\n\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (Address.is(token)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 2:\n                tokenContract = this.deps.getTokenContract(token);\n                _context.next = 5;\n                return Promise.all([tokenContract.functions.totalSupply(), tokenContract.functions.decimals(), tokenContract.functions.name().catch(Object(lodash["constant"])(undefined)), tokenContract.functions.symbol().catch(Object(lodash["constant"])(undefined))]);\n\n              case 5:\n                _ref4 = _context.sent;\n                _ref5 = raiden_slicedToArray(_ref4, 4);\n                totalSupply = _ref5[0];\n                decimals = _ref5[1];\n                name = _ref5[2];\n                symbol = _ref5[3];\n                return _context.abrupt("return", {\n                  totalSupply: totalSupply,\n                  decimals: decimals,\n                  name: name,\n                  symbol: symbol\n                });\n\n              case 12:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }); // pipe pfsListUpdated action payloead to pfsList$ replay subject, to keep latest seen emission\n    // around. Epics don\'t need this, as they can monitor/multicast action$ directly\n\n    var pfsList$ = new ReplaySubject["a" /* ReplaySubject */](1);\n    this.pfsList$ = pfsList$;\n    action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])(pfsListUpdated)), Object(pluck["a" /* pluck */])(\'payload\', \'pfsList\')).subscribe(pfsList$);\n    var middlewares = [Object(redux_logger["createLogger"])({\n      predicate: function predicate() {\n        return _this.deps.config$.value.logger !== \'\' && (_this.deps.config$.value.logger !== undefined || "production" === \'development\');\n      },\n      level: function level() {\n        return _this.deps.config$.value.logger || \'debug\';\n      }\n    })];\n    this.deps = {\n      stateOutput$: state$,\n      actionOutput$: action$,\n      config$: new BehaviorSubject["a" /* BehaviorSubject */](state.config),\n      matrix$: new AsyncSubject["a" /* AsyncSubject */](),\n      provider: provider,\n      network: network,\n      signer: signer,\n      address: address,\n      contractsInfo: contractsInfo,\n      registryContract: TokenNetworkRegistryFactory_TokenNetworkRegistryFactory.connect(contractsInfo.TokenNetworkRegistry.address, signer),\n      getTokenNetworkContract: Object(lodash["memoize"])(function (address) {\n        return TokenNetworkFactory_TokenNetworkFactory.connect(address, signer);\n      }),\n      getTokenContract: Object(lodash["memoize"])(function (address) {\n        return HumanStandardTokenFactory_HumanStandardTokenFactory.connect(address, signer);\n      }),\n      serviceRegistryContract: ServiceRegistryFactory_ServiceRegistryFactory.connect(contractsInfo.ServiceRegistry.address, signer),\n      userDepositContract: UserDepositFactory_UserDepositFactory.connect(contractsInfo.UserDeposit.address, signer)\n    };\n    this.userDepositTokenAddress = Object(lodash["memoize"])(function () {\n      return raiden_awaiter(_this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee2() {\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.deps.userDepositContract.functions.token();\n\n              case 2:\n                return _context2.abrupt("return", _context2.sent);\n\n              case 3:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }); // minimum blockNumber of contracts deployment as start scan block\n\n    this.epicMiddleware = Object(createEpicMiddleware["a" /* createEpicMiddleware */])({\n      dependencies: this.deps\n    });\n    this.store = Object(redux["b" /* createStore */])(reducer_raidenReducer, state, redux["a" /* applyMiddleware */].apply(void 0, middlewares.concat([this.epicMiddleware])));\n  }\n  /**\n   * Async helper factory to make a Raiden instance from more common parameters.\n   *\n   * An async factory is needed so we can do the needed async requests to construct the required\n   * parameters ahead of construction time, and avoid partial initialization then\n   *\n   * @param connection - A URL or provider to connect to, one of:\n   *     <ul>\n   *       <li>JsonRpcProvider instance,</li>\n   *       <li>a Metamask\'s web3.currentProvider object or,</li>\n   *       <li>a hostname or remote json-rpc connection string</li>\n   *     </ul>\n   * @param account - An account to use as main account, one of:\n   *     <ul>\n   *       <li>Signer instance (e.g. Wallet) loadded with account/private key or</li>\n   *       <li>hex-encoded string address of a remote account in provider or</li>\n   *       <li>hex-encoded string local private key or</li>\n   *       <li>number index of a remote account loaded in provider\n   *            (e.g. 0 for Metamask\'s loaded account)</li>\n   *     </ul>\n   * @param storageOrState - Storage/localStorage-like synchronous object where to load and store\n   *     current state or initial RaidenState-like object instead. In this case, user must listen\n   *     state$ changes and update them on whichever persistency option is used\n   * @param contracts - Contracts deployment info\n   * @param config - Raiden configuration\n   * @returns Promise to Raiden SDK client instance\n   **/\n\n\n  raiden_createClass(Raiden, [{\n    key: "start",\n\n    /**\n     * Starts redux/observables by subscribing to all epics and emitting initial state and action\n     *\n     * No event should be emitted before start is called\n     */\n    value: function start() {\n      if (!this.epicMiddleware) throw new Error(\'Already started or stopped!\');\n      this.epicMiddleware.run(epics_raidenRootEpic); // prevent start from being called again, turns this.started to true\n\n      this.epicMiddleware = undefined; // dispatch a first, noop action, to next first state$ as current/initial state\n\n      this.store.dispatch(raidenConfigUpdate({\n        config: {}\n      }));\n    }\n    /**\n     * Gets the running state of the instance\n     *\n     * @returns undefined if not yet started, true if running, false if already stopped\n     */\n\n  }, {\n    key: "stop",\n\n    /**\n     * Triggers all epics to be unsubscribed\n     */\n    value: function stop() {\n      // start still can\'t be called again, but turns this.started to false\n      this.epicMiddleware = null;\n      this.store.dispatch(raidenShutdown({\n        reason: ShutdownReason.STOP\n      }));\n    }\n  }, {\n    key: "getBlockNumber",\n\n    /**\n     * Returns a promise to current block number, as seen in provider and state\n     *\n     * @returns Promise to current block number\n     */\n    value: function getBlockNumber() {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee3() {\n        return regenerator_default.a.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = this.deps.provider.blockNumber;\n\n                if (_context3.t0) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this.deps.provider.getBlockNumber();\n\n              case 4:\n                _context3.t0 = _context3.sent;\n\n              case 5:\n                return _context3.abrupt("return", _context3.t0);\n\n              case 6:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Getter for current Raiden Config\n     *\n     * @returns Current Raiden config\n     */\n\n  }, {\n    key: "updateConfig",\n\n    /**\n     * Update Raiden Config with a partial (shallow) object\n     *\n     * @param config - Partial object containing keys and values to update in config\n     */\n    value: function updateConfig(config) {\n      this.store.dispatch(raidenConfigUpdate({\n        config: config\n      }));\n    }\n    /**\n     * Get ETH balance for given address or self\n     *\n     * @param address - Optional target address. If omitted, gets own balance\n     * @returns BigNumber of ETH balance\n     */\n\n  }, {\n    key: "getBalance",\n    value: function getBalance(address) {\n      address = address || this.address;\n      if (!Address.is(address)) throw new Error(\'Invalid address\');\n      return this.deps.provider.getBalance(address);\n    }\n    /**\n     * Get token balance and token decimals for given address or self\n     *\n     * @param token - Token address to fetch balance. Must be one of the monitored tokens.\n     * @param address - Optional target address. If omitted, gets own balance\n     * @returns BigNumber containing address\'s token balance\n     */\n\n  }, {\n    key: "getTokenBalance",\n    value: function getTokenBalance(token, address) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee4() {\n        var tokenContract;\n        return regenerator_default.a.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                address = address || this.address;\n\n                if (!(!Address.is(address) || !Address.is(token))) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 3:\n                tokenContract = this.deps.getTokenContract(token);\n                return _context4.abrupt("return", tokenContract.functions.balanceOf(address));\n\n              case 5:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * Returns a list of all token addresses registered as token networks in registry\n     *\n     * @returns Promise to list of token addresses\n     */\n\n  }, {\n    key: "getTokenList",\n    value: function getTokenList() {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee5() {\n        return regenerator_default.a.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt("return", this.state$.pipe(Object(first["a" /* first */])(function (state) {\n                  return !Object(lodash["isEmpty"])(state.tokens);\n                }), Object(map["a" /* map */])(function (state) {\n                  return Object.keys(state.tokens);\n                })).toPromise());\n\n              case 1:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Open a channel on the tokenNetwork for given token address with partner\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param partner - Partner address\n     * @param options - (optional) option parameter\n     * @param options.settleTimeout - Custom, one-time settle timeout\n     * @returns txHash of channelOpen call, iff it succeeded\n     */\n\n  }, {\n    key: "openChannel",\n    value: function openChannel(token, partner) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee6() {\n        var state, tokenNetwork, promise;\n        return regenerator_default.a.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(!Address.is(token) || !Address.is(partner))) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 2:\n                state = this.state;\n                tokenNetwork = state.tokens[token];\n\n                if (tokenNetwork) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                throw new Error(\'Unknown token network\');\n\n              case 6:\n                promise = this.action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([channelOpened, channelOpenFailed])), Object(filter["a" /* filter */])(function (action) {\n                  return action.meta.tokenNetwork === tokenNetwork && action.meta.partner === partner;\n                }), Object(first["a" /* first */])(), Object(map["a" /* map */])(function (action) {\n                  if (Object(typesafe_actions_umd_production["isActionOf"])(channelOpenFailed, action)) throw action.payload;\n                  return action.payload.txHash;\n                })).toPromise();\n                this.store.dispatch(channelOpen(Object.assign({}, options), {\n                  tokenNetwork: tokenNetwork,\n                  partner: partner\n                }));\n                return _context6.abrupt("return", promise);\n\n              case 9:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n    /**\n     * Deposit tokens on channel between us and partner on tokenNetwork for token\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param partner - Partner address\n     * @param amount - Number of tokens to deposit on channel\n     * @returns txHash of setTotalDeposit call, iff it succeeded\n     */\n\n  }, {\n    key: "depositChannel",\n    value: function depositChannel(token, partner, amount) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee7() {\n        var state, tokenNetwork, deposit, promise;\n        return regenerator_default.a.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(!Address.is(token) || !Address.is(partner))) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 2:\n                state = this.state;\n                tokenNetwork = state.tokens[token];\n\n                if (tokenNetwork) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                throw new Error(\'Unknown token network\');\n\n              case 6:\n                deposit = decode(UInt(32), amount);\n                promise = this.action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([channelDeposited, channelDepositFailed])), Object(filter["a" /* filter */])(function (action) {\n                  return action.meta.tokenNetwork === tokenNetwork && action.meta.partner === partner;\n                }), Object(first["a" /* first */])(), Object(map["a" /* map */])(function (action) {\n                  if (Object(typesafe_actions_umd_production["isActionOf"])(channelDepositFailed, action)) throw action.payload;\n                  return action.payload.txHash;\n                })).toPromise();\n                this.store.dispatch(channelDeposit({\n                  deposit: deposit\n                }, {\n                  tokenNetwork: tokenNetwork,\n                  partner: partner\n                }));\n                return _context7.abrupt("return", promise);\n\n              case 10:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n    /**\n     * Close channel between us and partner on tokenNetwork for token\n     * This method will fail if called on a channel not in \'opened\' or \'closing\' state.\n     * When calling this method on an \'opened\' channel, its state becomes \'closing\', and from there\n     * on, no payments can be performed on the channel. If for any reason the closeChannel\n     * transaction fails, channel\'s state stays as \'closing\', and this method can be called again\n     * to retry sending \'closeChannel\' transaction. After it\'s successful, channel becomes \'closed\',\n     * and can be settled after \'settleTimeout\' blocks (when it then becomes \'settleable\').\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param partner - Partner address\n     * @returns txHash of closeChannel call, iff it succeeded\n     */\n\n  }, {\n    key: "closeChannel",\n    value: function closeChannel(token, partner) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee8() {\n        var state, tokenNetwork, promise;\n        return regenerator_default.a.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(!Address.is(token) || !Address.is(partner))) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 2:\n                state = this.state;\n                tokenNetwork = state.tokens[token];\n\n                if (tokenNetwork) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                throw new Error(\'Unknown token network\');\n\n              case 6:\n                promise = this.action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([channelClosed, channelCloseFailed])), Object(filter["a" /* filter */])(function (action) {\n                  return action.meta.tokenNetwork === tokenNetwork && action.meta.partner === partner;\n                }), Object(first["a" /* first */])(), Object(map["a" /* map */])(function (action) {\n                  if (Object(typesafe_actions_umd_production["isActionOf"])(channelCloseFailed, action)) throw action.payload;\n                  return action.payload.txHash;\n                })).toPromise();\n                this.store.dispatch(channelClose(undefined, {\n                  tokenNetwork: tokenNetwork,\n                  partner: partner\n                }));\n                return _context8.abrupt("return", promise);\n\n              case 9:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n    /**\n     * Settle channel between us and partner on tokenNetwork for token\n     * This method will fail if called on a channel not in \'settleable\' or \'settling\' state.\n     * Channel becomes \'settleable\' settleTimeout blocks after closed (detected automatically\n     * while Raiden Light Client is running or later on restart). When calling it, channel state\n     * becomes \'settling\'. If for any reason transaction fails, it\'ll stay on this state, and this\n     * method can be called again to re-send a settleChannel transaction.\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param partner - Partner address\n     * @returns txHash of settleChannel call, iff it succeeded\n     */\n\n  }, {\n    key: "settleChannel",\n    value: function settleChannel(token, partner) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee9() {\n        var state, tokenNetwork, promise;\n        return regenerator_default.a.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(!Address.is(token) || !Address.is(partner))) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 2:\n                state = this.state;\n                tokenNetwork = state.tokens[token];\n\n                if (tokenNetwork) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                throw new Error(\'Unknown token network\');\n\n              case 6:\n                // wait for the corresponding success or error action\n                promise = this.action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([channelSettled, channelSettleFailed])), Object(filter["a" /* filter */])(function (action) {\n                  return action.meta.tokenNetwork === tokenNetwork && action.meta.partner === partner;\n                }), Object(first["a" /* first */])(), Object(map["a" /* map */])(function (action) {\n                  if (Object(typesafe_actions_umd_production["isActionOf"])(channelSettleFailed, action)) throw action.payload;\n                  return action.payload.txHash;\n                })).toPromise();\n                this.store.dispatch(channelSettle(undefined, {\n                  tokenNetwork: tokenNetwork,\n                  partner: partner\n                }));\n                return _context9.abrupt("return", promise);\n\n              case 9:\n              case "end":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n    /**\n     * Returns object describing address\'s users availability on transport\n     * After calling this method, any further presence update to valid transport peers of this\n     * address will trigger a corresponding MatrixPresenceUpdateAction on events$\n     *\n     * @param address - checksummed address to be monitored\n     * @returns Promise to object describing availability and last event timestamp\n     */\n\n  }, {\n    key: "getAvailability",\n    value: function getAvailability(address) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee10() {\n        var promise;\n        return regenerator_default.a.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (Address.is(address)) {\n                  _context10.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 2:\n                promise = this.action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([matrixPresenceUpdate, matrixRequestMonitorPresenceFailed])), Object(filter["a" /* filter */])(function (action) {\n                  return action.meta.address === address;\n                }), Object(first["a" /* first */])(), Object(map["a" /* map */])(function (action) {\n                  if (Object(typesafe_actions_umd_production["isActionOf"])(matrixRequestMonitorPresenceFailed, action)) throw action.payload;\n                  return action.payload;\n                })).toPromise();\n                this.store.dispatch(matrixRequestMonitorPresence(undefined, {\n                  address: address\n                }));\n                return _context10.abrupt("return", promise);\n\n              case 5:\n              case "end":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n    /**\n     * Send a Locked Transfer!\n     * This will reject if LockedTransfer signature prompt is canceled/signature fails, or be\n     * resolved to the transfer unique identifier (secrethash) otherwise, and transfer status can be\n     * queried with this id on this.transfers$ observable, which will just have emitted the \'pending\'\n     * transfer. Any following transfer state change will be notified through this observable.\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param target - Target address (must be getAvailability before)\n     * @param value - Amount to try to transfer\n     * @param options - Optional parameters for transfer:\n     *    <ul>\n     *      <li>paymentId - payment identifier, a random one will be generated if missing</li>\n     *      <li>secret - Secret to register, a random one will be generated if missing</li>\n     *      <li>secrethash - Must match secret, if both provided, or else, secret must be\n     *          informed to target by other means, and reveal can\'t be performed</li>\n     *      <li>paths - Used to specify possible routes & fees instead of querying PFS.</li>\n     *      <li>pfs - Use this PFS instead of configured or automatically choosen ones.\n     *          Is ignored if paths were already provided. If neither are set and config.pfs is not\n     *          disabled (null), use it if set or if undefined (auto mode), fetches the best\n     *          PFS from ServiceRegistry and automatically fetch routes from it.</li>\n     *    </ul>\n     * @returns A promise to transfer\'s secrethash (unique id) when it\'s accepted\n     */\n\n  }, {\n    key: "transfer",\n    value: function transfer(token, target, value) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee11() {\n        var _this2 = this;\n\n        var tokenNetwork, decodedValue, paymentId, paths, pfs, secret, secrethash;\n        return regenerator_default.a.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(!Address.is(token) || !Address.is(target))) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 2:\n                tokenNetwork = this.state.tokens[token];\n\n                if (tokenNetwork) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                throw new Error(\'Unknown token network\');\n\n              case 5:\n                decodedValue = decode(UInt(32), value), paymentId = options.paymentId ? decode(UInt(8), options.paymentId) : makePaymentId(), paths = options.paths ? decode(Paths, options.paths) : undefined, pfs = options.pfs ? decode(PFS, options.pfs) : undefined;\n\n                if (!(options.secret !== undefined && !Secret.is(options.secret))) {\n                  _context11.next = 8;\n                  break;\n                }\n\n                throw new Error(\'Invalid options.secret\');\n\n              case 8:\n                if (!(options.secrethash !== undefined && !Hash.is(options.secrethash))) {\n                  _context11.next = 10;\n                  break;\n                }\n\n                throw new Error(\'Invalid options.secrethash\');\n\n              case 10:\n                // use provided secret or create one if no secrethash was provided\n                secret = options.secret ? options.secret : !options.secrethash ? makeSecret() : undefined, secrethash = options.secrethash || getSecrethash(secret);\n\n                if (!(secret && getSecrethash(secret) !== secrethash)) {\n                  _context11.next = 13;\n                  break;\n                }\n\n                throw new Error(\'Provided secrethash must match the sha256 hash of provided secret\');\n\n              case 13:\n                return _context11.abrupt("return", Object(merge["a" /* merge */])( // wait for pathFind response\n                this.action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([pathFound, pathFindFailed])), Object(first["a" /* first */])(function (action) {\n                  return action.meta.tokenNetwork === tokenNetwork && action.meta.target === target && action.meta.value.eq(value);\n                }), Object(map["a" /* map */])(function (action) {\n                  if (Object(typesafe_actions_umd_production["isActionOf"])(pathFindFailed, action)) throw action.payload;\n                  return action.payload.paths;\n                })), // request pathFind; even if paths were provided, send it again for validation\n                // this is done at \'merge\' subscription time (i.e. when above action filter is subscribed)\n                Object(defer["a" /* defer */])(function () {\n                  _this2.store.dispatch(pathFind({\n                    paths: paths,\n                    pfs: pfs\n                  }, {\n                    tokenNetwork: tokenNetwork,\n                    target: target,\n                    value: decodedValue\n                  }));\n\n                  return empty["a" /* EMPTY */];\n                })).pipe(Object(mergeMap["a" /* mergeMap */])(function (paths) {\n                  return Object(merge["a" /* merge */])( // wait for transfer response\n                  _this2.action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([transferSigned, transferFailed])), Object(first["a" /* first */])(function (action) {\n                    return action.meta.secrethash === secrethash;\n                  }), Object(map["a" /* map */])(function (action) {\n                    if (Object(typesafe_actions_umd_production["isActionOf"])(transferFailed, action)) throw action.payload;\n                    return secrethash;\n                  })), // request transfer with returned/validated paths at \'merge\' subscription time\n                  Object(defer["a" /* defer */])(function () {\n                    _this2.store.dispatch(actions_transfer({\n                      tokenNetwork: tokenNetwork,\n                      target: target,\n                      value: decodedValue,\n                      paths: paths,\n                      paymentId: paymentId,\n                      secret: secret\n                    }, {\n                      secrethash: secrethash\n                    }));\n\n                    return empty["a" /* EMPTY */];\n                  }));\n                })).toPromise());\n\n              case 14:\n              case "end":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n    /**\n     * Request a path from PFS\n     *\n     * If a direct route is possible, it\'ll be returned. Else if PFS is set up, a request will be\n     * performed and the cleaned/validated path results will be resolved.\n     * Else, if no route can be found, promise is rejected with respective error.\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param target - Target address (must be getAvailability before)\n     * @param value - Minimum capacity required on routes\n     * @param options - Optional parameters\n     * @param options.pfs - Use this PFS instead of configured or automatically choosen ones\n     * @returns A promise to returned routes/paths result\n     */\n\n  }, {\n    key: "findRoutes",\n    value: function findRoutes(token, target, value) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee12() {\n        var tokenNetwork, decodedValue, pfs, promise;\n        return regenerator_default.a.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!(!Address.is(token) || !Address.is(target))) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address\');\n\n              case 2:\n                tokenNetwork = this.state.tokens[token];\n\n                if (tokenNetwork) {\n                  _context12.next = 5;\n                  break;\n                }\n\n                throw new Error(\'Unknown token network\');\n\n              case 5:\n                decodedValue = decode(UInt(32), value), pfs = options.pfs ? decode(PFS, options.pfs) : undefined;\n                promise = this.action$.pipe(Object(filter["a" /* filter */])(Object(typesafe_actions_umd_production["isActionOf"])([pathFound, pathFindFailed])), Object(first["a" /* first */])(function (action) {\n                  return action.meta.tokenNetwork === tokenNetwork && action.meta.target === target && action.meta.value.eq(value);\n                }), Object(map["a" /* map */])(function (action) {\n                  if (Object(typesafe_actions_umd_production["isActionOf"])(pathFindFailed, action)) throw action.payload;\n                  return action.payload.paths;\n                })).toPromise();\n                this.store.dispatch(pathFind({\n                  pfs: pfs\n                }, {\n                  tokenNetwork: tokenNetwork,\n                  target: target,\n                  value: decodedValue\n                }));\n                return _context12.abrupt("return", promise);\n\n              case 9:\n              case "end":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n    /**\n     * Returns a sorted array of info of available PFS\n     *\n     * It uses data polled from ServiceRegistry, which is available only when config.pfs is\n     * undefined, instead of set or disabled (null), and will reject if not.\n     * It can reject if the validated list is empty, meaning we can be out-of-sync (we\'re outdated or\n     * they are) with PFSs deployment, or no PFS is available on this TokenNetwork/blockchain.\n     *\n     * @returns Promise to array of PFS, which is the interface which describes a PFS\n     */\n\n  }, {\n    key: "findPFS",\n    value: function findPFS() {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee13() {\n        var _this3 = this;\n\n        return regenerator_default.a.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(this.config.pfs !== undefined)) {\n                  _context13.next = 2;\n                  break;\n                }\n\n                throw new Error("config.pfs isn\'t auto (undefined)");\n\n              case 2:\n                return _context13.abrupt("return", this.pfsList$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (pfsList) {\n                  return pfsListInfo(pfsList, _this3.deps);\n                })).toPromise());\n\n              case 3:\n              case "end":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n    /**\n     * Mints the amount of tokens of the provided token address.\n     * Throws an error, if\n     * <ol>\n     *  <li>Executed on main net</li>\n     *  <li>`token` is not a valid address</li>\n     *  <li>Token could not be minted</li>\n     * </ol>\n     *\n     * @param token - Address of the token to be minted\n     * @param amount - Amount to be minted\n     * @returns transaction\n     */\n\n  }, {\n    key: "mint",\n    value: function mint(token, amount) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee14() {\n        var customTokenContract, tx, receipt;\n        return regenerator_default.a.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                if (Address.is(token)) {\n                  _context14.next = 2;\n                  break;\n                }\n\n                throw new Error(\'Invalid address.\');\n\n              case 2:\n                if (!(this.deps.network.name === \'homestead\')) {\n                  _context14.next = 4;\n                  break;\n                }\n\n                throw new Error(\'Minting is only allowed on test networks.\');\n\n              case 4:\n                // Mint token\n                customTokenContract = CustomTokenFactory_CustomTokenFactory.connect(token, this.deps.signer);\n                _context14.next = 7;\n                return customTokenContract.functions.mint(decode(UInt(32), amount));\n\n              case 7:\n                tx = _context14.sent;\n                _context14.next = 10;\n                return tx.wait();\n\n              case 10:\n                receipt = _context14.sent;\n\n                if (receipt.status) {\n                  _context14.next = 13;\n                  break;\n                }\n\n                throw new Error(\'Failed to mint token.\');\n\n              case 13:\n                return _context14.abrupt("return", tx.hash);\n\n              case 14:\n              case "end":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n    /**\n     * Fetches balance of UserDeposit Contract for SDK\'s account minus cached spent IOUs\n     *\n     * @returns Promise to UDC remaining capacity\n     */\n\n  }, {\n    key: "getUDCCapacity",\n    value: function getUDCCapacity() {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee15() {\n        var balance, blockNumber, owedAmount;\n        return regenerator_default.a.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.deps.userDepositContract.functions.balances(this.deps.address);\n\n              case 2:\n                balance = _context15.sent;\n                blockNumber = this.state.blockNumber;\n                owedAmount = Object.values(this.state.path.iou).reduce(function (acc, value) {\n                  var nonExpiredIOUs = Object.values(value).filter(function (value) {\n                    return value.expiration_block.gte(blockNumber);\n                  });\n                  acc.push.apply(acc, raiden_toConsumableArray(nonExpiredIOUs));\n                  return acc;\n                }, new Array()).reduce(function (acc, iou) {\n                  return acc.add(iou.amount);\n                }, constants["Zero"]);\n                return _context15.abrupt("return", balance.sub(owedAmount));\n\n              case 6:\n              case "end":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n    }\n    /**\n     * Deposits the amount to the UserDeposit contract with the target/signer as a beneficiary.\n     * The deposited amount can be used as a collateral in order to sign valid IOUs that will\n     * be accepted by the Services.\n     *\n     * Throws an error, in the following cases:\n     * <ol>\n     *  <li>The amount specified equals to zero</li>\n     *  <li>The target has an insufficient token balance</li>\n     *  <li>The "approve" transaction fails with an error</li>\n     *  <li>The "deposit" transaction fails with an error</li>\n     * </ol>\n     *\n     * @param amount - The amount to deposit on behalf of the target/beneficiary.\n     * @returns transaction hash\n     */\n\n  }, {\n    key: "depositToUDC",\n    value: function depositToUDC(amount) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee16() {\n        var depositAmount, _this$deps, userDepositContract, address, tokenAddress, serviceToken, balance, approveTx, approveReceipt, currentUDCBalance, depositTx, depositReceipt;\n\n        return regenerator_default.a.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                depositAmount = Object(utils["bigNumberify"])(amount);\n\n                if (depositAmount.gt(constants["Zero"])) {\n                  _context16.next = 3;\n                  break;\n                }\n\n                throw new Error(\'Please deposit a positive amount.\');\n\n              case 3:\n                _this$deps = this.deps, userDepositContract = _this$deps.userDepositContract, address = _this$deps.address;\n                _context16.next = 6;\n                return this.userDepositTokenAddress();\n\n              case 6:\n                tokenAddress = _context16.sent;\n                serviceToken = HumanStandardTokenFactory_HumanStandardTokenFactory.connect(tokenAddress, this.deps.signer);\n                _context16.next = 10;\n                return serviceToken.functions.balanceOf(address);\n\n              case 10:\n                balance = _context16.sent;\n\n                if (!balance.lt(amount)) {\n                  _context16.next = 13;\n                  break;\n                }\n\n                throw new Error("Insufficient token balance (".concat(balance, ")."));\n\n              case 13:\n                _context16.next = 15;\n                return serviceToken.functions.approve(userDepositContract.address, depositAmount);\n\n              case 15:\n                approveTx = _context16.sent;\n                _context16.next = 18;\n                return approveTx.wait();\n\n              case 18:\n                approveReceipt = _context16.sent;\n\n                if (approveReceipt.status) {\n                  _context16.next = 21;\n                  break;\n                }\n\n                throw new Error(\'Approve transaction failed.\');\n\n              case 21:\n                _context16.next = 23;\n                return userDepositContract.functions.balances(address);\n\n              case 23:\n                currentUDCBalance = _context16.sent;\n                _context16.next = 26;\n                return userDepositContract.functions.deposit(address, currentUDCBalance.add(depositAmount));\n\n              case 26:\n                depositTx = _context16.sent;\n                _context16.next = 29;\n                return depositTx.wait();\n\n              case 29:\n                depositReceipt = _context16.sent;\n\n                if (depositReceipt.status) {\n                  _context16.next = 32;\n                  break;\n                }\n\n                throw new Error(\'Deposit transaction failed.\');\n\n              case 32:\n                return _context16.abrupt("return", depositTx.hash);\n\n              case 33:\n              case "end":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: "started",\n    get: function get() {\n      // !epicMiddleware -> undefined | null -> undefined ? true/started : null/stopped;\n      if (!this.epicMiddleware) return this.epicMiddleware === undefined; // else -> !!epicMiddleware -> not yet started -> returns undefined\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return this.store.getState();\n    }\n    /**\n     * Get current account address\n     *\n     * @returns Instance address\n     */\n\n  }, {\n    key: "address",\n    get: function get() {\n      return this.deps.address;\n    }\n    /**\n     * Get current network from provider\n     *\n     * @returns Network object containing blockchain\'s name & chainId\n     */\n\n  }, {\n    key: "network",\n    get: function get() {\n      return this.deps.network;\n    }\n  }, {\n    key: "config",\n    get: function get() {\n      return this.state.config;\n    }\n  }], [{\n    key: "create",\n    value: function create(connection, account, storageOrState, contracts, config) {\n      return raiden_awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      regenerator_default.a.mark(function _callee17() {\n        var provider, network, signer, accounts, address, loadedState, isStorage, onState, onStateComplete, ns, loaded, debouncedState, raiden;\n        return regenerator_default.a.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                isStorage = function _ref6(storageOrState) {\n                  return storageOrState && typeof storageOrState.getItem === \'function\';\n                };\n\n                if (typeof connection === \'string\') {\n                  provider = new providers["JsonRpcProvider"](connection);\n                } else if (connection instanceof providers["JsonRpcProvider"]) {\n                  provider = connection;\n                } else {\n                  provider = new providers["Web3Provider"](connection);\n                } // Patch provider\'s sign method (https://github.com/raiden-network/light-client/issues/223)\n\n\n                patchSignSend(provider);\n                _context17.next = 5;\n                return provider.getNetwork();\n\n              case 5:\n                network = _context17.sent;\n\n                if (contracts) {\n                  _context17.next = 17;\n                  break;\n                }\n\n                _context17.t0 = network.name;\n                _context17.next = _context17.t0 === \'rinkeby\' ? 10 : _context17.t0 === \'ropsten\' ? 12 : _context17.t0 === \'goerli\' ? 14 : 16;\n                break;\n\n              case 10:\n                contracts = Object.assign({}, deployment_rinkeby.contracts, deployment_services_rinkeby.contracts);\n                return _context17.abrupt("break", 17);\n\n              case 12:\n                contracts = Object.assign({}, deployment_ropsten.contracts, deployment_services_ropsten.contracts);\n                return _context17.abrupt("break", 17);\n\n              case 14:\n                contracts = Object.assign({}, deployment_goerli.contracts, deployment_services_goerli.contracts);\n                return _context17.abrupt("break", 17);\n\n              case 16:\n                throw new Error("No deploy info provided nor recognized network: ".concat(JSON.stringify(network)));\n\n              case 17:\n                if (!ethers_min["Signer"].isSigner(account)) {\n                  _context17.next = 29;\n                  break;\n                }\n\n                if (!(account.provider === provider)) {\n                  _context17.next = 22;\n                  break;\n                }\n\n                signer = account;\n                _context17.next = 27;\n                break;\n\n              case 22:\n                if (!(account instanceof wallet["Wallet"])) {\n                  _context17.next = 26;\n                  break;\n                }\n\n                signer = account.connect(provider);\n                _context17.next = 27;\n                break;\n\n              case 26:\n                throw new Error("Signer ".concat(account, " not connected to ").concat(provider));\n\n              case 27:\n                _context17.next = 47;\n                break;\n\n              case 29:\n                if (!(typeof account === \'number\')) {\n                  _context17.next = 33;\n                  break;\n                }\n\n                // index of account in provider\n                signer = provider.getSigner(account);\n                _context17.next = 47;\n                break;\n\n              case 33:\n                if (!Address.is(account)) {\n                  _context17.next = 42;\n                  break;\n                }\n\n                _context17.next = 36;\n                return provider.listAccounts();\n\n              case 36:\n                accounts = _context17.sent;\n\n                if (accounts.includes(account)) {\n                  _context17.next = 39;\n                  break;\n                }\n\n                throw new Error("Account \\"".concat(account, "\\" not found in provider, got=").concat(accounts));\n\n              case 39:\n                signer = provider.getSigner(account);\n                _context17.next = 47;\n                break;\n\n              case 42:\n                if (!PrivateKey.is(account)) {\n                  _context17.next = 46;\n                  break;\n                }\n\n                // private key\n                signer = new wallet["Wallet"](account, provider);\n                _context17.next = 47;\n                break;\n\n              case 46:\n                throw new Error(\'String account must be either a 0x-encoded address or private key\');\n\n              case 47:\n                _context17.next = 49;\n                return signer.getAddress();\n\n              case 49:\n                address = _context17.sent;\n                // build an initial state and default config!\n                loadedState = makeInitialState({\n                  network: network,\n                  address: address,\n                  contractsInfo: contracts\n                }, {\n                  config: config\n                }); // type guard\n\n                onState = undefined, onStateComplete = undefined;\n\n                if (!(storageOrState && isStorage(storageOrState))) {\n                  _context17.next = 72;\n                  break;\n                }\n\n                ns = "raiden_".concat(network.name || network.chainId, "_").concat(contracts.TokenNetworkRegistry.address, "_").concat(address);\n                _context17.t1 = lodash["merge"];\n                _context17.t2 = {};\n                _context17.t3 = loadedState;\n                _context17.t4 = losslessParse;\n                _context17.next = 60;\n                return storageOrState.getItem(ns);\n\n              case 60:\n                _context17.t5 = _context17.sent;\n\n                if (_context17.t5) {\n                  _context17.next = 63;\n                  break;\n                }\n\n                _context17.t5 = \'null\';\n\n              case 63:\n                _context17.t6 = _context17.t5;\n                _context17.t7 = (0, _context17.t4)(_context17.t6);\n                loaded = (0, _context17.t1)(_context17.t2, _context17.t3, _context17.t7);\n                loadedState = decodeRaidenState(loaded); // to be subscribed on raiden.state$\n\n                debouncedState = Object(lodash["debounce"])(function (state) {\n                  storageOrState.setItem(ns, encodeRaidenState(state));\n                }, 1000, {\n                  maxWait: 5000\n                });\n                onState = debouncedState;\n\n                onStateComplete = function onStateComplete() {\n                  return debouncedState.flush();\n                };\n\n                _context17.next = 73;\n                break;\n\n              case 72:\n                if (storageOrState && RaidenState.is(storageOrState)) {\n                  loadedState = storageOrState;\n                } else if (storageOrState\n                /* typeof storageOrState === unknown */\n                ) {\n                    loadedState = decodeRaidenState(storageOrState);\n                  }\n\n              case 73:\n                if (!(address !== loadedState.address)) {\n                  _context17.next = 75;\n                  break;\n                }\n\n                throw new Error("Mismatch between provided account and loaded state: \\"".concat(address, "\\" !== \\"").concat(loadedState.address, "\\""));\n\n              case 75:\n                if (!(network.chainId !== loadedState.chainId || contracts.TokenNetworkRegistry.address !== loadedState.registry)) {\n                  _context17.next = 77;\n                  break;\n                }\n\n                throw new Error("Mismatch between network or registry address and loaded state");\n\n              case 77:\n                raiden = new Raiden(provider, network, signer, contracts, loadedState);\n                if (onState) raiden.state$.subscribe(onState, onStateComplete, onStateComplete);\n                return _context17.abrupt("return", raiden);\n\n              case 80:\n              case "end":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n    }\n  }]);\n\n  return Raiden;\n}();\n/* harmony default export */ var dist_raiden = (raiden_Raiden);\n// CONCATENATED MODULE: ../raiden-ts/dist/index.js\n/* unused concated harmony import RaidenState */\n/* unused concated harmony import ShutdownReason */\n/* unused concated harmony import RaidenSentTransferStatus */\n/* concated harmony reexport ChannelState */__webpack_require__.d(__webpack_exports__, "a", function() { return ChannelState; });\n/* concated harmony reexport Raiden */__webpack_require__.d(__webpack_exports__, "b", function() { return raiden_Raiden; });\n/* unused concated harmony import RaidenConfig */\n/* unused concated harmony import decode */\n/* unused concated harmony import isntNil */\n/* unused concated harmony import BigNumberC */\n/* unused concated harmony import HexString */\n/* unused concated harmony import Int */\n/* unused concated harmony import UInt */\n/* unused concated harmony import Signature */\n/* unused concated harmony import Hash */\n/* unused concated harmony import Secret */\n/* unused concated harmony import PrivateKey */\n/* unused concated harmony import Address */\n/* unused concated harmony import Timed */\n/* unused concated harmony import timed */\n/* unused concated harmony import Signed */\n/* istanbul ignore file */\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///f455\n')}});