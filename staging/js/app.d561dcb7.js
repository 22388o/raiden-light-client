(function(e){function n(n){for(var Q,s,U=n[0],c=n[1],a=n[2],i=0,r=[];i<U.length;i++)s=U[i],Object.prototype.hasOwnProperty.call(F,s)&&F[s]&&r.push(F[s][0]),F[s]=0;for(Q in c)Object.prototype.hasOwnProperty.call(c,Q)&&(e[Q]=c[Q]);l&&l(n);while(r.length)r.shift()();return B.push.apply(B,a||[]),t()}function t(){for(var e,n=0;n<B.length;n++){for(var t=B[n],Q=!0,s=1;s<t.length;s++){var U=t[s];0!==F[U]&&(Q=!1)}Q&&(B.splice(n--,1),e=c(c.s=t[0]))}return e}var Q={},s={app:0},F={app:0},B=[];function U(e){return c.p+"js/"+({}[e]||e)+"."+{"chunk-08151fa2":"248f1e1e","chunk-4c34ba5c":"f3ae5db4","chunk-5e7189c2":"17e35c26","chunk-488fc1f2":"6548e12e","chunk-b14359ce":"efc1fe7c","chunk-15f0b7af":"cc04dab4","chunk-7bc2c414":"6642ea59","chunk-552b1730":"de88027e","chunk-d3b2fbc4":"55975ca2","chunk-27f3174b":"5fca6fb2","chunk-43b69ccc":"f8d9e6d4","chunk-7e432e88":"7cc83e6e","chunk-e17a21de":"6fe8044e"}[e]+".js"}function c(n){if(Q[n])return Q[n].exports;var t=Q[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,c),t.l=!0,t.exports}c.e=function(e){var n=[],t={"chunk-08151fa2":1,"chunk-4c34ba5c":1,"chunk-5e7189c2":1,"chunk-488fc1f2":1,"chunk-b14359ce":1,"chunk-15f0b7af":1,"chunk-7bc2c414":1,"chunk-552b1730":1,"chunk-d3b2fbc4":1,"chunk-27f3174b":1,"chunk-43b69ccc":1,"chunk-7e432e88":1,"chunk-e17a21de":1};s[e]?n.push(s[e]):0!==s[e]&&t[e]&&n.push(s[e]=new Promise((function(n,t){for(var Q="css/"+({}[e]||e)+"."+{"chunk-08151fa2":"b6ac451a","chunk-4c34ba5c":"39ba85ce","chunk-5e7189c2":"295d09cf","chunk-488fc1f2":"6d6e40eb","chunk-b14359ce":"59b8ab97","chunk-15f0b7af":"1d5a726d","chunk-7bc2c414":"4ec49789","chunk-552b1730":"b6b89419","chunk-d3b2fbc4":"8da4d130","chunk-27f3174b":"4454c863","chunk-43b69ccc":"c60dbc20","chunk-7e432e88":"f27e0b35","chunk-e17a21de":"1740c2a4"}[e]+".css",F=c.p+Q,B=document.getElementsByTagName("link"),U=0;U<B.length;U++){var a=B[U],i=a.getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(i===Q||i===F))return n()}var r=document.getElementsByTagName("style");for(U=0;U<r.length;U++){a=r[U],i=a.getAttribute("data-href");if(i===Q||i===F)return n()}var l=document.createElement("link");l.rel="stylesheet",l.type="text/css",l.onload=n,l.onerror=function(n){var Q=n&&n.target&&n.target.src||F,B=new Error("Loading CSS chunk "+e+" failed.\n("+Q+")");B.code="CSS_CHUNK_LOAD_FAILED",B.request=Q,delete s[e],l.parentNode.removeChild(l),t(B)},l.href=F;var I=document.getElementsByTagName("head")[0];I.appendChild(l)})).then((function(){s[e]=0})));var Q=F[e];if(0!==Q)if(Q)n.push(Q[2]);else{var B=new Promise((function(n,t){Q=F[e]=[n,t]}));n.push(Q[2]=B);var a,i=document.createElement("script");i.charset="utf-8",i.timeout=120,c.nc&&i.setAttribute("nonce",c.nc),i.src=U(e);var r=new Error;a=function(n){i.onerror=i.onload=null,clearTimeout(l);var t=F[e];if(0!==t){if(t){var Q=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;r.message="Loading chunk "+e+" failed.\n("+Q+": "+s+")",r.name="ChunkLoadError",r.type=Q,r.request=s,t[1](r)}F[e]=void 0}};var l=setTimeout((function(){a({type:"timeout",target:i})}),12e4);i.onerror=i.onload=a,document.head.appendChild(i)}return Promise.all(n)},c.m=e,c.c=Q,c.d=function(e,n,t){c.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},c.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,n){if(1&n&&(e=c(e)),8&n)return e;if(4&n&&"object"===typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(c.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var Q in e)c.d(t,Q,function(n){return e[n]}.bind(null,Q));return t},c.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return c.d(n,"a",n),n},c.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},c.p="/staging/",c.oe=function(e){throw console.error(e),e};var a=window["webpackJsonp"]=window["webpackJsonp"]||[],i=a.push.bind(a);a.push=n,a=a.slice();for(var r=0;r<a.length;r++)n(a[r]);var l=i;B.push([0,"chunk-vendors"]),t()})({0:function(e,n,t){e.exports=t("cd49")},"09b0":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXJJZGVudGljb24udnVlP2E3MWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMDliMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///09b0\n")},"0f75":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Filters; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2b0e");\n/* harmony import */ var _utils_balance_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("a3d5");\n/* harmony import */ var lodash_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("6625");\n/* harmony import */ var lodash_split__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_split__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_capitalize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("e9a71");\n/* harmony import */ var lodash_capitalize__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_capitalize__WEBPACK_IMPORTED_MODULE_3__);\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\nvar Filters = /*#__PURE__*/function () {\n  function Filters() {\n    _classCallCheck(this, Filters);\n  }\n\n  _createClass(Filters, null, [{\n    key: "truncate",\n    value: function truncate(value) {\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n      var separator = \'...\';\n\n      if (value.length <= width) {\n        return value;\n      } else {\n        var substWidth = Math.floor(width / 2);\n        return value.substr(0, substWidth) + separator + value.substr(value.length - substWidth);\n      }\n    }\n  }, {\n    key: "decimals",\n    value: function decimals(value) {\n      var _decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n      return parseFloat(value).toFixed(_decimals);\n    }\n  }, {\n    key: "upper",\n    value: function upper(value) {\n      if (!value) {\n        return \'\';\n      }\n\n      return value.toLocaleUpperCase();\n    }\n  }, {\n    key: "displayFormat",\n    value: function displayFormat(amount, decimals) {\n      var units = _utils_balance_utils__WEBPACK_IMPORTED_MODULE_1__[/* BalanceUtils */ "a"].toUnits(amount, decimals || 18);\n      var deposit = parseFloat(units);\n\n      if (deposit === 0) {\n        return \'0.0\';\n      } else if (deposit < 0.000001) {\n        return \'<0.000001\';\n      } else {\n        var _split = lodash_split__WEBPACK_IMPORTED_MODULE_2___default()(units, \'.\'),\n            _split2 = _slicedToArray(_split, 2),\n            integerPart = _split2[0],\n            decimalPart = _split2[1];\n\n        if (decimalPart && decimalPart.length > 6) {\n          var newDecimal = decimalPart.substring(0, 6);\n          return "\\u2248".concat(integerPart, ".").concat(newDecimal);\n        } else {\n          return units;\n        }\n      }\n    }\n  }, {\n    key: "capitalizeFirst",\n    value: function capitalizeFirst(value) {\n      return lodash_capitalize__WEBPACK_IMPORTED_MODULE_3___default()(value);\n    }\n  }]);\n\n  return Filters;\n}();\n\n\n\nFilters.toUnits = function (wei, decimals) {\n  return _utils_balance_utils__WEBPACK_IMPORTED_MODULE_1__[/* BalanceUtils */ "a"].toUnits(wei, decimals || 18);\n};\n\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'truncate\', Filters.truncate);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'decimals\', Filters.decimals);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'upper\', Filters.upper);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'displayFormat\', Filters.displayFormat);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'capitalizeFirst\', Filters.capitalizeFirst);\nvue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].filter(\'toUnits\', Filters.toUnits);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZmlsdGVycy50cz85NzZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTs7SUFFcUIsTzs7Ozs7Ozs2QkFDSCxLLEVBQWlDO0FBQUEsVUFBbEIsS0FBa0IsdUVBQUYsRUFBRTtBQUMvQyxVQUFNLFNBQVMsR0FBRyxLQUFsQjs7QUFDQSxVQUFJLEtBQUssQ0FBQyxNQUFOLElBQWdCLEtBQXBCLEVBQTJCO0FBQ3pCLGVBQU8sS0FBUDtBQUNELE9BRkQsTUFFTztBQUNMLFlBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBSyxHQUFHLENBQW5CLENBQW5CO0FBQ0EsZUFDRSxLQUFLLENBQUMsTUFBTixDQUFhLENBQWIsRUFBZ0IsVUFBaEIsSUFDQSxTQURBLEdBRUEsS0FBSyxDQUFDLE1BQU4sQ0FBYSxLQUFLLENBQUMsTUFBTixHQUFlLFVBQTVCLENBSEY7QUFLRDtBQUNGOzs7NkJBRWUsSyxFQUFtQztBQUFBLFVBQXBCLFNBQW9CLHVFQUFELENBQUM7O0FBQ2pELGFBQU8sVUFBVSxDQUFDLEtBQUQsQ0FBVixDQUFrQixPQUFsQixDQUEwQixTQUExQixDQUFQO0FBQ0Q7OzswQkFFWSxLLEVBQWM7QUFDekIsVUFBSSxDQUFDLEtBQUwsRUFBWTtBQUNWLGVBQU8sRUFBUDtBQUNEOztBQUNELGFBQU8sS0FBSyxDQUFDLGlCQUFOLEVBQVA7QUFDRDs7O2tDQUVvQixNLEVBQW1CLFEsRUFBaUI7QUFDdkQsVUFBTSxLQUFLLEdBQUcseUVBQVksQ0FBQyxPQUFiLENBQXFCLE1BQXJCLEVBQTZCLFFBQVEsSUFBSSxFQUF6QyxDQUFkO0FBQ0EsVUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLEtBQUQsQ0FBMUI7O0FBQ0EsVUFBSSxPQUFPLEtBQUssQ0FBaEIsRUFBbUI7QUFDakIsZUFBTyxLQUFQO0FBQ0QsT0FGRCxNQUVPLElBQUksT0FBTyxHQUFHLFFBQWQsRUFBd0I7QUFDN0IsZUFBTyxXQUFQO0FBQ0QsT0FGTSxNQUVBO0FBQUEscUJBQzhCLG1EQUFLLENBQUMsS0FBRCxFQUFRLEdBQVIsQ0FEbkM7QUFBQTtBQUFBLFlBQ0UsV0FERjtBQUFBLFlBQ2UsV0FEZjs7QUFHTCxZQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBWixHQUFxQixDQUF4QyxFQUEyQztBQUN6QyxjQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsU0FBWixDQUFzQixDQUF0QixFQUF5QixDQUF6QixDQUFqQjtBQUNBLGlDQUFXLFdBQVgsY0FBMEIsVUFBMUI7QUFDRCxTQUhELE1BR087QUFDTCxpQkFBTyxLQUFQO0FBQ0Q7QUFDRjtBQUNGOzs7b0NBRXNCLEssRUFBYTtBQUNsQyxhQUFPLHdEQUFVLENBQUMsS0FBRCxDQUFqQjtBQUNEOzs7Ozs7OztBQUVNLGtCQUFVLFVBQUMsR0FBRCxFQUFpQixRQUFqQjtBQUFBLFNBQ2YseUVBQVksQ0FBQyxPQUFiLENBQXFCLEdBQXJCLEVBQTBCLFFBQVEsSUFBSSxFQUF0QyxDQURlO0FBQUEsQ0FBVjs7QUFJVCxtREFBRyxDQUFDLE1BQUosQ0FBVyxVQUFYLEVBQXVCLE9BQU8sQ0FBQyxRQUEvQjtBQUNBLG1EQUFHLENBQUMsTUFBSixDQUFXLFVBQVgsRUFBdUIsT0FBTyxDQUFDLFFBQS9CO0FBQ0EsbURBQUcsQ0FBQyxNQUFKLENBQVcsT0FBWCxFQUFvQixPQUFPLENBQUMsS0FBNUI7QUFDQSxtREFBRyxDQUFDLE1BQUosQ0FBVyxlQUFYLEVBQTRCLE9BQU8sQ0FBQyxhQUFwQztBQUNBLG1EQUFHLENBQUMsTUFBSixDQUFXLGlCQUFYLEVBQThCLE9BQU8sQ0FBQyxlQUF0QztBQUNBLG1EQUFHLENBQUMsTUFBSixDQUFXLFNBQVgsRUFBc0IsT0FBTyxDQUFDLE9BQTlCIiwiZmlsZSI6IjBmNzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tICdldGhlcnMvdXRpbHMnO1xuaW1wb3J0IHsgQmFsYW5jZVV0aWxzIH0gZnJvbSAnQC91dGlscy9iYWxhbmNlLXV0aWxzJztcbmltcG9ydCBzcGxpdCBmcm9tICdsb2Rhc2gvc3BsaXQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnbG9kYXNoL2NhcGl0YWxpemUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWx0ZXJzIHtcbiAgc3RhdGljIHRydW5jYXRlKHZhbHVlOiBzdHJpbmcsIHdpZHRoOiBudW1iZXIgPSAxMikge1xuICAgIGNvbnN0IHNlcGFyYXRvciA9ICcuLi4nO1xuICAgIGlmICh2YWx1ZS5sZW5ndGggPD0gd2lkdGgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3Vic3RXaWR0aCA9IE1hdGguZmxvb3Iod2lkdGggLyAyKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHZhbHVlLnN1YnN0cigwLCBzdWJzdFdpZHRoKSArXG4gICAgICAgIHNlcGFyYXRvciArXG4gICAgICAgIHZhbHVlLnN1YnN0cih2YWx1ZS5sZW5ndGggLSBzdWJzdFdpZHRoKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZGVjaW1hbHModmFsdWU6IHN0cmluZywgZGVjaW1hbHM6IG51bWJlciA9IDMpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkudG9GaXhlZChkZWNpbWFscyk7XG4gIH1cblxuICBzdGF0aWMgdXBwZXIodmFsdWU/OiBzdHJpbmcpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICB9XG5cbiAgc3RhdGljIGRpc3BsYXlGb3JtYXQoYW1vdW50OiBCaWdOdW1iZXIsIGRlY2ltYWxzPzogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCB1bml0cyA9IEJhbGFuY2VVdGlscy50b1VuaXRzKGFtb3VudCwgZGVjaW1hbHMgfHwgMTgpO1xuICAgIGNvbnN0IGRlcG9zaXQgPSBwYXJzZUZsb2F0KHVuaXRzKTtcbiAgICBpZiAoZGVwb3NpdCA9PT0gMCkge1xuICAgICAgcmV0dXJuICcwLjAnO1xuICAgIH0gZWxzZSBpZiAoZGVwb3NpdCA8IDAuMDAwMDAxKSB7XG4gICAgICByZXR1cm4gJzwwLjAwMDAwMSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IFtpbnRlZ2VyUGFydCwgZGVjaW1hbFBhcnRdID0gc3BsaXQodW5pdHMsICcuJyk7XG5cbiAgICAgIGlmIChkZWNpbWFsUGFydCAmJiBkZWNpbWFsUGFydC5sZW5ndGggPiA2KSB7XG4gICAgICAgIGxldCBuZXdEZWNpbWFsID0gZGVjaW1hbFBhcnQuc3Vic3RyaW5nKDAsIDYpO1xuICAgICAgICByZXR1cm4gYOKJiCR7aW50ZWdlclBhcnR9LiR7bmV3RGVjaW1hbH1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuaXRzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjYXBpdGFsaXplRmlyc3QodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGNhcGl0YWxpemUodmFsdWUpO1xuICB9XG5cbiAgc3RhdGljIHRvVW5pdHMgPSAod2VpOiBCaWdOdW1iZXIsIGRlY2ltYWxzPzogbnVtYmVyKSA9PlxuICAgIEJhbGFuY2VVdGlscy50b1VuaXRzKHdlaSwgZGVjaW1hbHMgfHwgMTgpO1xufVxuXG5WdWUuZmlsdGVyKCd0cnVuY2F0ZScsIEZpbHRlcnMudHJ1bmNhdGUpO1xuVnVlLmZpbHRlcignZGVjaW1hbHMnLCBGaWx0ZXJzLmRlY2ltYWxzKTtcblZ1ZS5maWx0ZXIoJ3VwcGVyJywgRmlsdGVycy51cHBlcik7XG5WdWUuZmlsdGVyKCdkaXNwbGF5Rm9ybWF0JywgRmlsdGVycy5kaXNwbGF5Rm9ybWF0KTtcblZ1ZS5maWx0ZXIoJ2NhcGl0YWxpemVGaXJzdCcsIEZpbHRlcnMuY2FwaXRhbGl6ZUZpcnN0KTtcblZ1ZS5maWx0ZXIoJ3RvVW5pdHMnLCBGaWx0ZXJzLnRvVW5pdHMpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0f75\n')},"0ff6":function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":4,\\"contracts\\":{\\"ServiceRegistry\\":{\\"address\\":\\"0x6a922ADB133502d9Bf55aa9897580C1be159a8b2\\",\\"transaction_hash\\":\\"0xd206df08ae6d2107efcfae3c666456580f2d9b2a62d8f3fdcaa95c86e66ffbcc\\",\\"block_number\\":5907112,\\"gas_cost\\":1980416,\\"constructor_arguments\\":[\\"0xec3BD5D6CE7c29b434ec77a638c0F4E6441225e8\\",\\"0x0000000000000000000000000000000000000000\\",2e+21,6,5,17280000,1000,17280000]},\\"UserDeposit\\":{\\"address\\":\\"0x7a6afd06Ef28dA0479cfd47CbCF68B9E4fd6fFbe\\",\\"transaction_hash\\":\\"0x3ad7e5b3080fd8ef6018b296a8a87047b1a91536c2247161cd07ea5ff96a1141\\",\\"block_number\\":5907113,\\"gas_cost\\":1530254,\\"constructor_arguments\\":[\\"0xec3BD5D6CE7c29b434ec77a638c0F4E6441225e8\\",1.157920892373162e+77]},\\"MonitoringService\\":{\\"address\\":\\"0x709282aE42C9Df6F156F8A92fC110Fed039DCdB3\\",\\"transaction_hash\\":\\"0x7809b24fa2f04603dab3cc9f7a2a2c310f244dcbbb93960542b4f7eb15475142\\",\\"block_number\\":5907114,\\"gas_cost\\":1949685,\\"constructor_arguments\\":[\\"0xec3BD5D6CE7c29b434ec77a638c0F4E6441225e8\\",\\"0x6a922ADB133502d9Bf55aa9897580C1be159a8b2\\",\\"0x7a6afd06Ef28dA0479cfd47CbCF68B9E4fd6fFbe\\",\\"0x9B5ef38daA6Cb7f9914cd4635504B63BB410e0F1\\"]},\\"OneToN\\":{\\"address\\":\\"0x083a0411483b3Fb9eb9ccfb1F07003BF8f27D094\\",\\"transaction_hash\\":\\"0x63d88efd315657d9b8e370a04f77b290d06909d5211248f5c05695539438c2e3\\",\\"block_number\\":5907115,\\"gas_cost\\":1097569,\\"constructor_arguments\\":[\\"0x7a6afd06Ef28dA0479cfd47CbCF68B9E4fd6fFbe\\",4,\\"0x6a922ADB133502d9Bf55aa9897580C1be159a8b2\\"]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIwZmY2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0ff6\n')},1:function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVmZmVyIChpZ25vcmVkKT9mNmZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoaWdub3JlZCkgKi8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},"152b":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("9ab4");\n/* harmony import */ var vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("60a3");\n/* harmony import */ var _router_route_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("80bf");\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\nvar NavigationMixin = /*#__PURE__*/function (_Vue) {\n  _inherits(NavigationMixin, _Vue);\n\n  var _super = _createSuper(NavigationMixin);\n\n  function NavigationMixin() {\n    _classCallCheck(this, NavigationMixin);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NavigationMixin, [{\n    key: "navigateToSelectHub",\n    value: function navigateToSelectHub(token) {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].SELECT_HUB,\n        params: {\n          token: token\n        }\n      });\n    }\n  }, {\n    key: "navigateToHome",\n    value: function navigateToHome() {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].HOME\n      }).catch(function () {});\n    }\n  }, {\n    key: "navigateToOpenChannel",\n    value: function navigateToOpenChannel(token, partner) {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].OPEN_CHANNEL,\n        params: {\n          token: token,\n          partner: partner\n        }\n      });\n    }\n  }, {\n    key: "navigateToChannels",\n    value: function navigateToChannels(token) {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].CHANNELS,\n        params: {\n          token: token\n        }\n      });\n    }\n  }, {\n    key: "navigateToSelectTransferTarget",\n    value: function navigateToSelectTransferTarget(token, target, amount) {\n      var route = {\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].TRANSFER,\n        params: {\n          token: token\n        },\n        query: {}\n      };\n\n      if (target && amount) {\n        route.query = {\n          target: target,\n          amount: amount\n        };\n      }\n\n      this.$router.push(route);\n    }\n  }, {\n    key: "navigateToTokenSelect",\n    value: function navigateToTokenSelect() {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].SELECT_TOKEN\n      });\n    }\n  }, {\n    key: "navigateToTransferSteps",\n    value: function navigateToTransferSteps(target, amount) {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].TRANSFER_STEPS,\n        params: {\n          target: target\n        },\n        query: {\n          amount: amount\n        }\n      });\n    }\n  }, {\n    key: "navigateToGeneralHome",\n    value: function navigateToGeneralHome() {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].GENERAL_HOME\n      });\n    }\n  }, {\n    key: "navigateToBackupState",\n    value: function navigateToBackupState() {\n      this.$router.push({\n        name: _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].BACKUP_STATE\n      });\n    }\n  }, {\n    key: "onGeneralBackClicked",\n    value: function onGeneralBackClicked() {\n      this.$router.go(-1);\n    }\n  }, {\n    key: "onBackClicked",\n    value: function onBackClicked() {\n      switch (this.$route.name) {\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].TRANSFER_STEPS:\n          this.navigateToSelectTransferTarget(this.$route.params.token, this.$route.params.target, this.$route.params.amount);\n          break;\n\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].TRANSFER:\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].CHANNELS:\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].SELECT_TOKEN:\n          this.navigateToHome();\n          break;\n\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].SELECT_HUB:\n          this.navigateToTokenSelect();\n          break;\n\n        case _router_route_names__WEBPACK_IMPORTED_MODULE_2__[/* RouteNames */ "a"].OPEN_CHANNEL:\n          this.navigateToSelectHub(this.$route.params.token);\n          break;\n      }\n    }\n  }]);\n\n  return NavigationMixin;\n}(vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__[/* Vue */ "e"]);\n\nNavigationMixin = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ "b"])([vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__[/* Component */ "a"]], NavigationMixin);\n/* harmony default export */ __webpack_exports__["a"] = (NavigationMixin);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWl4aW5zL25hdmlnYXRpb24tbWl4aW4udHM/MDk1YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBR0EsSUFBcUIsZUFBckI7QUFBQTs7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLHdDQUNzQixLQUR0QixFQUNtQztBQUMvQixXQUFLLE9BQUwsQ0FBYSxJQUFiLENBQWtCO0FBQ2hCLFlBQUksRUFBRSxzRUFBVSxDQUFDLFVBREQ7QUFFaEIsY0FBTSxFQUFFO0FBQ04sZUFBSyxFQUFFO0FBREQ7QUFGUSxPQUFsQjtBQU1EO0FBUkg7QUFBQTtBQUFBLHFDQVVnQjtBQUNaLFdBQUssT0FBTCxDQUNHLElBREgsQ0FDUTtBQUNKLFlBQUksRUFBRSxzRUFBVSxDQUFDO0FBRGIsT0FEUixFQUlHLEtBSkgsQ0FJUyxZQUFLLENBQUcsQ0FKakI7QUFLRDtBQWhCSDtBQUFBO0FBQUEsMENBa0J3QixLQWxCeEIsRUFrQnVDLE9BbEJ2QyxFQWtCc0Q7QUFDbEQsV0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQjtBQUNoQixZQUFJLEVBQUUsc0VBQVUsQ0FBQyxZQUREO0FBRWhCLGNBQU0sRUFBRTtBQUNOLGVBQUssRUFBRSxLQUREO0FBRU4saUJBQU8sRUFBRTtBQUZIO0FBRlEsT0FBbEI7QUFPRDtBQTFCSDtBQUFBO0FBQUEsdUNBNEJxQixLQTVCckIsRUE0QmtDO0FBQzlCLFdBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0I7QUFDaEIsWUFBSSxFQUFFLHNFQUFVLENBQUMsUUFERDtBQUVoQixjQUFNLEVBQUU7QUFDTixlQUFLLEVBQUU7QUFERDtBQUZRLE9BQWxCO0FBTUQ7QUFuQ0g7QUFBQTtBQUFBLG1EQXNDSSxLQXRDSixFQXVDSSxNQXZDSixFQXdDSSxNQXhDSixFQXdDbUI7QUFFZixVQUFNLEtBQUssR0FBRztBQUNaLFlBQUksRUFBRSxzRUFBVSxDQUFDLFFBREw7QUFFWixjQUFNLEVBQUU7QUFBRSxlQUFLLEVBQUU7QUFBVCxTQUZJO0FBR1osYUFBSyxFQUFFO0FBSEssT0FBZDs7QUFLQSxVQUFJLE1BQU0sSUFBSSxNQUFkLEVBQXNCO0FBQ3BCLGFBQUssQ0FBQyxLQUFOLEdBQWM7QUFBRSxnQkFBTSxFQUFOLE1BQUY7QUFBVSxnQkFBTSxFQUFOO0FBQVYsU0FBZDtBQUNEOztBQUNELFdBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsS0FBbEI7QUFDRDtBQW5ESDtBQUFBO0FBQUEsNENBcUR1QjtBQUNuQixXQUFLLE9BQUwsQ0FBYSxJQUFiLENBQWtCO0FBQ2hCLFlBQUksRUFBRSxzRUFBVSxDQUFDO0FBREQsT0FBbEI7QUFHRDtBQXpESDtBQUFBO0FBQUEsNENBMkQwQixNQTNEMUIsRUEyRDBDLE1BM0QxQyxFQTJEd0Q7QUFDcEQsV0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQjtBQUNoQixZQUFJLEVBQUUsc0VBQVUsQ0FBQyxjQUREO0FBRWhCLGNBQU0sRUFBRTtBQUFFLGdCQUFNLEVBQU47QUFBRixTQUZRO0FBR2hCLGFBQUssRUFBRTtBQUFFLGdCQUFNLEVBQU47QUFBRjtBQUhTLE9BQWxCO0FBS0Q7QUFqRUg7QUFBQTtBQUFBLDRDQW1FdUI7QUFDbkIsV0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQjtBQUNoQixZQUFJLEVBQUUsc0VBQVUsQ0FBQztBQURELE9BQWxCO0FBR0Q7QUF2RUg7QUFBQTtBQUFBLDRDQXlFdUI7QUFDbkIsV0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQjtBQUNoQixZQUFJLEVBQUUsc0VBQVUsQ0FBQztBQURELE9BQWxCO0FBR0Q7QUE3RUg7QUFBQTtBQUFBLDJDQStFc0I7QUFDbEIsV0FBSyxPQUFMLENBQWEsRUFBYixDQUFnQixDQUFDLENBQWpCO0FBQ0Q7QUFqRkg7QUFBQTtBQUFBLG9DQW1GZTtBQUNYLGNBQVEsS0FBSyxNQUFMLENBQVksSUFBcEI7QUFDRSxhQUFLLHNFQUFVLENBQUMsY0FBaEI7QUFDRSxlQUFLLDhCQUFMLENBQ0UsS0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixLQURyQixFQUVFLEtBQUssTUFBTCxDQUFZLE1BQVosQ0FBbUIsTUFGckIsRUFHRSxLQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLE1BSHJCO0FBS0E7O0FBQ0YsYUFBSyxzRUFBVSxDQUFDLFFBQWhCO0FBQ0EsYUFBSyxzRUFBVSxDQUFDLFFBQWhCO0FBQ0EsYUFBSyxzRUFBVSxDQUFDLFlBQWhCO0FBQ0UsZUFBSyxjQUFMO0FBQ0E7O0FBQ0YsYUFBSyxzRUFBVSxDQUFDLFVBQWhCO0FBQ0UsZUFBSyxxQkFBTDtBQUNBOztBQUNGLGFBQUssc0VBQVUsQ0FBQyxZQUFoQjtBQUNFLGVBQUssbUJBQUwsQ0FBeUIsS0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixLQUE1QztBQUNBO0FBbEJKO0FBb0JEO0FBeEdIOztBQUFBO0FBQUEsRUFBNkMsa0VBQTdDOztBQUFxQixlQUFlLHFFQURuQyx3RUFDbUMsR0FBZixlQUFlLENBQWY7QUFBQSx3RSIsImZpbGUiOiIxNTJiLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJztcbmltcG9ydCB7IFJvdXRlTmFtZXMgfSBmcm9tICdAL3JvdXRlci9yb3V0ZS1uYW1lcyc7XG5cbkBDb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRpb25NaXhpbiBleHRlbmRzIFZ1ZSB7XG4gIG5hdmlnYXRlVG9TZWxlY3RIdWIodG9rZW46IHN0cmluZykge1xuICAgIHRoaXMuJHJvdXRlci5wdXNoKHtcbiAgICAgIG5hbWU6IFJvdXRlTmFtZXMuU0VMRUNUX0hVQixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB0b2tlbjogdG9rZW5cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9Ib21lKCkge1xuICAgIHRoaXMuJHJvdXRlclxuICAgICAgLnB1c2goe1xuICAgICAgICBuYW1lOiBSb3V0ZU5hbWVzLkhPTUVcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge30pO1xuICB9XG5cbiAgbmF2aWdhdGVUb09wZW5DaGFubmVsKHRva2VuOiBzdHJpbmcsIHBhcnRuZXI6IHN0cmluZykge1xuICAgIHRoaXMuJHJvdXRlci5wdXNoKHtcbiAgICAgIG5hbWU6IFJvdXRlTmFtZXMuT1BFTl9DSEFOTkVMLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgcGFydG5lcjogcGFydG5lclxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmF2aWdhdGVUb0NoYW5uZWxzKHRva2VuOiBzdHJpbmcpIHtcbiAgICB0aGlzLiRyb3V0ZXIucHVzaCh7XG4gICAgICBuYW1lOiBSb3V0ZU5hbWVzLkNIQU5ORUxTLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHRva2VuOiB0b2tlblxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmF2aWdhdGVUb1NlbGVjdFRyYW5zZmVyVGFyZ2V0KFxuICAgIHRva2VuOiBzdHJpbmcsXG4gICAgdGFyZ2V0Pzogc3RyaW5nLFxuICAgIGFtb3VudD86IHN0cmluZ1xuICApIHtcbiAgICBjb25zdCByb3V0ZSA9IHtcbiAgICAgIG5hbWU6IFJvdXRlTmFtZXMuVFJBTlNGRVIsXG4gICAgICBwYXJhbXM6IHsgdG9rZW46IHRva2VuIH0sXG4gICAgICBxdWVyeToge31cbiAgICB9O1xuICAgIGlmICh0YXJnZXQgJiYgYW1vdW50KSB7XG4gICAgICByb3V0ZS5xdWVyeSA9IHsgdGFyZ2V0LCBhbW91bnQgfTtcbiAgICB9XG4gICAgdGhpcy4kcm91dGVyLnB1c2gocm91dGUpO1xuICB9XG5cbiAgbmF2aWdhdGVUb1Rva2VuU2VsZWN0KCkge1xuICAgIHRoaXMuJHJvdXRlci5wdXNoKHtcbiAgICAgIG5hbWU6IFJvdXRlTmFtZXMuU0VMRUNUX1RPS0VOXG4gICAgfSk7XG4gIH1cblxuICBuYXZpZ2F0ZVRvVHJhbnNmZXJTdGVwcyh0YXJnZXQ6IHN0cmluZywgYW1vdW50OiBzdHJpbmcpIHtcbiAgICB0aGlzLiRyb3V0ZXIucHVzaCh7XG4gICAgICBuYW1lOiBSb3V0ZU5hbWVzLlRSQU5TRkVSX1NURVBTLFxuICAgICAgcGFyYW1zOiB7IHRhcmdldCB9LFxuICAgICAgcXVlcnk6IHsgYW1vdW50IH1cbiAgICB9KTtcbiAgfVxuXG4gIG5hdmlnYXRlVG9HZW5lcmFsSG9tZSgpIHtcbiAgICB0aGlzLiRyb3V0ZXIucHVzaCh7XG4gICAgICBuYW1lOiBSb3V0ZU5hbWVzLkdFTkVSQUxfSE9NRVxuICAgIH0pO1xuICB9XG5cbiAgbmF2aWdhdGVUb0JhY2t1cFN0YXRlKCkge1xuICAgIHRoaXMuJHJvdXRlci5wdXNoKHtcbiAgICAgIG5hbWU6IFJvdXRlTmFtZXMuQkFDS1VQX1NUQVRFXG4gICAgfSk7XG4gIH1cblxuICBvbkdlbmVyYWxCYWNrQ2xpY2tlZCgpIHtcbiAgICB0aGlzLiRyb3V0ZXIuZ28oLTEpO1xuICB9XG5cbiAgb25CYWNrQ2xpY2tlZCgpIHtcbiAgICBzd2l0Y2ggKHRoaXMuJHJvdXRlLm5hbWUpIHtcbiAgICAgIGNhc2UgUm91dGVOYW1lcy5UUkFOU0ZFUl9TVEVQUzpcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvU2VsZWN0VHJhbnNmZXJUYXJnZXQoXG4gICAgICAgICAgdGhpcy4kcm91dGUucGFyYW1zLnRva2VuLFxuICAgICAgICAgIHRoaXMuJHJvdXRlLnBhcmFtcy50YXJnZXQsXG4gICAgICAgICAgdGhpcy4kcm91dGUucGFyYW1zLmFtb3VudFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUm91dGVOYW1lcy5UUkFOU0ZFUjpcbiAgICAgIGNhc2UgUm91dGVOYW1lcy5DSEFOTkVMUzpcbiAgICAgIGNhc2UgUm91dGVOYW1lcy5TRUxFQ1RfVE9LRU46XG4gICAgICAgIHRoaXMubmF2aWdhdGVUb0hvbWUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJvdXRlTmFtZXMuU0VMRUNUX0hVQjpcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvVG9rZW5TZWxlY3QoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJvdXRlTmFtZXMuT1BFTl9DSEFOTkVMOlxuICAgICAgICB0aGlzLm5hdmlnYXRlVG9TZWxlY3RIdWIodGhpcy4kcm91dGUucGFyYW1zLnRva2VuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///152b\n')},1922:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SYWlkZW5EaWFsb2cudnVlPzMyNjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTkyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1922\n")},"1a2b":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoTokens_vue_vue_type_style_index_0_id_4f16408a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("f45e");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoTokens_vue_vue_type_style_index_0_id_4f16408a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoTokens_vue_vue_type_style_index_0_id_4f16408a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoTokens_vue_vue_type_style_index_0_id_4f16408a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob1Rva2Vucy52dWU/M2NmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBZ2xCLENBQWdCLDhtQkFBRyxFQUFDIiwiZmlsZSI6IjFhMmIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05vVG9rZW5zLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTRmMTY0MDhhJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ob1Rva2Vucy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00ZjE2NDA4YSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1a2b\n')},2:function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCk/MjZiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKGlnbm9yZWQpICovIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},"233e":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/HeaderIdenticon.vue?vue&type=template&id=b740b99e&scoped=true&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"header-identicon"},[(_vm.pendingTransferAmount)?_c(\'v-tooltip\',{attrs:{"bottom":""},scopedSlots:_vm._u([{key:"activator",fn:function(ref){\nvar on = ref.on;\nreturn [_c(\'v-badge\',{attrs:{"color":"primary","bordered":"","content":_vm.pendingTransferAmount,"overlap":""}},[_c(\'v-img\',_vm._g({staticClass:"header-identicon__blockie",attrs:{"src":_vm.$blockie(_vm.defaultAccount),"contain":"","aspect-ratio":"1"}},on))],1)]}}],null,false,1705622633)},[_c(\'span\',[_vm._v(" "+_vm._s(_vm.$tc(\'app-header.pending-transfers\', _vm.pendingTransferAmount, { amount: _vm.pendingTransferAmount }))+" ")])]):_c(\'v-img\',{class:{\n      \'header-identicon__blockie\': _vm.defaultAccount,\n      \'header-identicon__blockie header-identicon__blockie__grayscale\': !_vm.defaultAccount\n    },attrs:{"src":_vm.$blockie(_vm.defaultAccount),"contain":"","aspect-ratio":"1"}})],1)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/HeaderIdenticon.vue?vue&type=template&id=b740b99e&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__("9ab4");\n\n// EXTERNAL MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\nvar vue_property_decorator = __webpack_require__("60a3");\n\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__("2f62");\n\n// EXTERNAL MODULE: ./src/mixins/blockie-mixin.ts\nvar blockie_mixin = __webpack_require__("77fd");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/HeaderIdenticon.vue?vue&type=script&lang=ts&\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\nvar HeaderIdenticon = /*#__PURE__*/function (_Mixins) {\n  _inherits(HeaderIdenticon, _Mixins);\n\n  var _super = _createSuper(HeaderIdenticon);\n\n  function HeaderIdenticon() {\n    _classCallCheck(this, HeaderIdenticon);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HeaderIdenticon, [{\n    key: "pendingTransferAmount",\n    get: function get() {\n      return Object.keys(this.pendingTransfers).length;\n    }\n  }]);\n\n  return HeaderIdenticon;\n}(Object(vue_property_decorator["c" /* Mixins */])(blockie_mixin["a" /* default */]));\n\nHeaderIdenticon = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  computed: _objectSpread({}, Object(vuex_esm["c" /* mapState */])([\'defaultAccount\']), {}, Object(vuex_esm["b" /* mapGetters */])([\'pendingTransfers\']))\n})], HeaderIdenticon);\n/* harmony default export */ var HeaderIdenticonvue_type_script_lang_ts_ = (HeaderIdenticon);\n// CONCATENATED MODULE: ./src/components/HeaderIdenticon.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_HeaderIdenticonvue_type_script_lang_ts_ = (HeaderIdenticonvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/HeaderIdenticon.vue?vue&type=style&index=0&id=b740b99e&scoped=true&lang=scss&\nvar HeaderIdenticonvue_type_style_index_0_id_b740b99e_scoped_true_lang_scss_ = __webpack_require__("be88");\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("2877");\n\n// EXTERNAL MODULE: ./node_modules/vuetify-loader/lib/runtime/installComponents.js\nvar installComponents = __webpack_require__("6544");\nvar installComponents_default = /*#__PURE__*/__webpack_require__.n(installComponents);\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VBadge/VBadge.js\nvar VBadge = __webpack_require__("4ca6");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VImg/VImg.js + 2 modules\nvar VImg = __webpack_require__("adda");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VTooltip/VTooltip.js\nvar VTooltip = __webpack_require__("3a2f");\n\n// CONCATENATED MODULE: ./src/components/HeaderIdenticon.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_HeaderIdenticonvue_type_script_lang_ts_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "b740b99e",\n  null\n  \n)\n\n/* harmony default export */ var components_HeaderIdenticon = __webpack_exports__["a"] = (component.exports);\n\n/* vuetify-loader */\n\n\n\n\ninstallComponents_default()(component, {VBadge: VBadge["a" /* default */],VImg: VImg["a" /* default */],VTooltip: VTooltip["a" /* default */]})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXJJZGVudGljb24udnVlP2ZjNDUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVySWRlbnRpY29uLnZ1ZT8wYmU1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlYWRlcklkZW50aWNvbi52dWU/Y2Y5YiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXJJZGVudGljb24udnVlPzZhYTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLGlCQUFpQiwrQkFBK0IsOENBQThDLE9BQU8sWUFBWSxzQkFBc0I7QUFDaE87QUFDQSxzQkFBc0IsT0FBTyxrRkFBa0YscUJBQXFCLCtDQUErQyx3RUFBd0UsWUFBWSx5QkFBeUIsbUdBQW1HLG9DQUFvQyx3QkFBd0I7QUFDL2I7QUFDQTtBQUNBLEtBQUssUUFBUSx3RUFBd0U7QUFDckY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbUNBO0FBQ0E7QUFDQTs7QUFTQSxJQUFxQixlQUFyQjtBQUFBOztBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUEsd0JBSTJCO0FBQ3ZCLGFBQU8sTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFLLGdCQUFqQixFQUFtQyxNQUExQztBQUNEO0FBTkg7O0FBQUE7QUFBQSxFQUE2QyxnREFBTSxDQUFDLGdDQUFELENBQW5EOztBQUFxQixlQUFlLDRDQU5uQyxtREFBUyxDQUFDO0FBQ1QsVUFBUSxvQkFDSCxvQ0FBUSxDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQURMLE1BRUgsc0NBQVUsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FGUDtBQURDLENBQUQsQ0FNMEIsR0FBZixlQUFlLENBQWY7QUFBQSwyRjs7QUNwRGdhLENBQWdCLDhIQUFHLEVBQUMsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQS9WO0FBQ3ZDO0FBQ0w7QUFDc0M7OztBQUdwRztBQUMwRjtBQUMxRixnQkFBZ0IsOENBQVU7QUFDMUIsRUFBRSxrREFBTTtBQUNSLEVBQUUsTUFBTTtBQUNSLEVBQUUsZUFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFZSwyR0FBaUI7O0FBRWhDO0FBQ21HO0FBQzVDO0FBQ0o7QUFDUTtBQUMzRCwyQkFBaUIsYUFBYSxpQ0FBTSxDQUFDLDZCQUFJLENBQUMscUNBQVEsQ0FBQyIsImZpbGUiOiIyMzNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaGVhZGVyLWlkZW50aWNvblwifSxbKF92bS5wZW5kaW5nVHJhbnNmZXJBbW91bnQpP19jKCd2LXRvb2x0aXAnLHthdHRyczp7XCJib3R0b21cIjpcIlwifSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6XCJhY3RpdmF0b3JcIixmbjpmdW5jdGlvbihyZWYpe1xudmFyIG9uID0gcmVmLm9uO1xucmV0dXJuIFtfYygndi1iYWRnZScse2F0dHJzOntcImNvbG9yXCI6XCJwcmltYXJ5XCIsXCJib3JkZXJlZFwiOlwiXCIsXCJjb250ZW50XCI6X3ZtLnBlbmRpbmdUcmFuc2ZlckFtb3VudCxcIm92ZXJsYXBcIjpcIlwifX0sW19jKCd2LWltZycsX3ZtLl9nKHtzdGF0aWNDbGFzczpcImhlYWRlci1pZGVudGljb25fX2Jsb2NraWVcIixhdHRyczp7XCJzcmNcIjpfdm0uJGJsb2NraWUoX3ZtLmRlZmF1bHRBY2NvdW50KSxcImNvbnRhaW5cIjpcIlwiLFwiYXNwZWN0LXJhdGlvXCI6XCIxXCJ9fSxvbikpXSwxKV19fV0sbnVsbCxmYWxzZSwxNzA1NjIyNjMzKX0sW19jKCdzcGFuJyxbX3ZtLl92KFwiIFwiK192bS5fcyhfdm0uJHRjKCdhcHAtaGVhZGVyLnBlbmRpbmctdHJhbnNmZXJzJywgX3ZtLnBlbmRpbmdUcmFuc2ZlckFtb3VudCwgeyBhbW91bnQ6IF92bS5wZW5kaW5nVHJhbnNmZXJBbW91bnQgfSkpK1wiIFwiKV0pXSk6X2MoJ3YtaW1nJyx7Y2xhc3M6e1xuICAgICAgJ2hlYWRlci1pZGVudGljb25fX2Jsb2NraWUnOiBfdm0uZGVmYXVsdEFjY291bnQsXG4gICAgICAnaGVhZGVyLWlkZW50aWNvbl9fYmxvY2tpZSBoZWFkZXItaWRlbnRpY29uX19ibG9ja2llX19ncmF5c2NhbGUnOiAhX3ZtLmRlZmF1bHRBY2NvdW50XG4gICAgfSxhdHRyczp7XCJzcmNcIjpfdm0uJGJsb2NraWUoX3ZtLmRlZmF1bHRBY2NvdW50KSxcImNvbnRhaW5cIjpcIlwiLFwiYXNwZWN0LXJhdGlvXCI6XCIxXCJ9fSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBNaXhpbnMgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJztcbmltcG9ydCB7IG1hcEdldHRlcnMsIG1hcFN0YXRlIH0gZnJvbSAndnVleCc7XG5pbXBvcnQgQmxvY2tpZU1peGluIGZyb20gJ0AvbWl4aW5zL2Jsb2NraWUtbWl4aW4nO1xuaW1wb3J0IHsgVHJhbnNmZXJzIH0gZnJvbSAnQC90eXBlcyc7XG5cbkBDb21wb25lbnQoe1xuICBjb21wdXRlZDoge1xuICAgIC4uLm1hcFN0YXRlKFsnZGVmYXVsdEFjY291bnQnXSksXG4gICAgLi4ubWFwR2V0dGVycyhbJ3BlbmRpbmdUcmFuc2ZlcnMnXSlcbiAgfVxufSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWRlcklkZW50aWNvbiBleHRlbmRzIE1peGlucyhCbG9ja2llTWl4aW4pIHtcbiAgZGVmYXVsdEFjY291bnQhOiBzdHJpbmc7XG4gIHBlbmRpbmdUcmFuc2ZlcnMhOiBUcmFuc2ZlcnM7XG5cbiAgZ2V0IHBlbmRpbmdUcmFuc2ZlckFtb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnBlbmRpbmdUcmFuc2ZlcnMpLmxlbmd0aDtcbiAgfVxufVxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTE0LTAhLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0xNC0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9IZWFkZXJJZGVudGljb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTQtMCEuLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTE0LTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hlYWRlcklkZW50aWNvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0hlYWRlcklkZW50aWNvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Yjc0MGI5OWUmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vSGVhZGVySWRlbnRpY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vSGVhZGVySWRlbnRpY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9IZWFkZXJJZGVudGljb24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9Yjc0MGI5OWUmc2NvcGVkPXRydWUmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCJiNzQwYjk5ZVwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0c1xuXG4vKiB2dWV0aWZ5LWxvYWRlciAqL1xuaW1wb3J0IGluc3RhbGxDb21wb25lbnRzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9ydW50aW1lL2luc3RhbGxDb21wb25lbnRzLmpzXCJcbmltcG9ydCB7IFZCYWRnZSB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJhZGdlJztcbmltcG9ydCB7IFZJbWcgfSBmcm9tICd2dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZJbWcnO1xuaW1wb3J0IHsgVlRvb2x0aXAgfSBmcm9tICd2dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUb29sdGlwJztcbmluc3RhbGxDb21wb25lbnRzKGNvbXBvbmVudCwge1ZCYWRnZSxWSW1nLFZUb29sdGlwfSlcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///233e\n')},3:function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCk/NGQ2MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKGlnbm9yZWQpICovIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")},"31a7":function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":4,\\"contracts\\":{\\"SecretRegistry\\":{\\"address\\":\\"0x7714DA9D9c577F0b89FE4774193d646F07b880c5\\",\\"transaction_hash\\":\\"0x3377ccdc9624bd432a89b6e3d068fe8dd01949f2f52b4e0538843b88b9fbcdab\\",\\"block_number\\":5907003,\\"gas_cost\\":247082,\\"constructor_arguments\\":[]},\\"TokenNetworkRegistry\\":{\\"address\\":\\"0x9B5ef38daA6Cb7f9914cd4635504B63BB410e0F1\\",\\"transaction_hash\\":\\"0x84fcd1320182f5255b93609e17056fb84a0edf4752ca6841a8a271bea7981ce4\\",\\"block_number\\":5907005,\\"gas_cost\\":4001114,\\"constructor_arguments\\":[\\"0x7714DA9D9c577F0b89FE4774193d646F07b880c5\\",4,20,555428,1.157920892373162e+77]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIzMWE3LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31a7\n')},"3c58":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ConnectDialog_vue_vue_type_style_index_0_id_3604c23c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("f33c");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ConnectDialog_vue_vue_type_style_index_0_id_3604c23c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ConnectDialog_vue_vue_type_style_index_0_id_3604c23c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ConnectDialog_vue_vue_type_style_index_0_id_3604c23c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db25uZWN0RGlhbG9nLnZ1ZT83MGEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFxbEIsQ0FBZ0IsbW5CQUFHLEVBQUMiLCJmaWxlIjoiM2M1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTgtb25lT2YtMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTgtb25lT2YtMS0yIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS0yMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29ubmVjdERpYWxvZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zNjA0YzIzYyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTgtb25lT2YtMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTgtb25lT2YtMS0yIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS0yMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29ubmVjdERpYWxvZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zNjA0YzIzYyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3c58\n')},4:function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vY3J5cHRvIChpZ25vcmVkKT9iNWU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoaWdub3JlZCkgKi8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},"49f8":function(module,exports,__webpack_require__){eval('var map = {\n\t"./en.json": "edd4"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = "49f8";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbG9jYWxlcyBzeW5jIFtBLVphLXowLTktXyxcXHNdK1xcLmpzb24kLz80ZGE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQ5ZjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vZW4uanNvblwiOiBcImVkZDRcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiNDlmOFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49f8\n')},"4e0b2":function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":5,\\"contracts\\":{\\"ServiceRegistry\\":{\\"address\\":\\"0x1d238cdacA8fFFD56F722B587aA010d6B438B077\\",\\"transaction_hash\\":\\"0x3bdd7711721781ba977cf436d8cc77312e27b1467102927169e8aa6c3a3abdf0\\",\\"block_number\\":2114518,\\"gas_cost\\":1980416,\\"constructor_arguments\\":[\\"0x4074fD4d460d0c31cbEdC3f59B2D98626D063952\\",\\"0x0000000000000000000000000000000000000000\\",2e+21,6,5,17280000,1000,17280000]},\\"UserDeposit\\":{\\"address\\":\\"0xDd9282Ad0A36052af41c85863F8C51eEbDC68E0A\\",\\"transaction_hash\\":\\"0xabb4bf75eb1946f6342c21959d6443140ab7378f33d9a5bdb1f3a039083b1214\\",\\"block_number\\":2114520,\\"gas_cost\\":1530254,\\"constructor_arguments\\":[\\"0x4074fD4d460d0c31cbEdC3f59B2D98626D063952\\",1.157920892373162e+77]},\\"MonitoringService\\":{\\"address\\":\\"0x850C3E4914417eC41230177c2821B9514c2e2bC9\\",\\"transaction_hash\\":\\"0x2cf29dea37d02049295ffa5ea9f744cff82995c0c547f79f6bdd7f27abeae0b4\\",\\"block_number\\":2114521,\\"gas_cost\\":1949685,\\"constructor_arguments\\":[\\"0x4074fD4d460d0c31cbEdC3f59B2D98626D063952\\",\\"0x1d238cdacA8fFFD56F722B587aA010d6B438B077\\",\\"0xDd9282Ad0A36052af41c85863F8C51eEbDC68E0A\\",\\"0x9b0c8C8C75904CEf5B7a8dbF59c3459Ea85c6526\\"]},\\"OneToN\\":{\\"address\\":\\"0xe4C2C47F070152c03a564C2c681C3FbD78234156\\",\\"transaction_hash\\":\\"0xe5d1fa41d7b72feeaed494c42bd98860c49c396fe1961f9f2f5567a392018816\\",\\"block_number\\":2114523,\\"gas_cost\\":1097569,\\"constructor_arguments\\":[\\"0xDd9282Ad0A36052af41c85863F8C51eEbDC68E0A\\",5,\\"0x1d238cdacA8fFFD56F722B587aA010d6B438B077\\"]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0ZTBiMi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4e0b2\n')},"4e0d":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_02ef831a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("9a9c");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_02ef831a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_02ef831a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_id_02ef831a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvSG9tZS52dWU/N2YxMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBNGtCLENBQWdCLDBtQkFBRyxFQUFDIiwiZmlsZSI6IjRlMGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hvbWUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MDJlZjgzMWEmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hvbWUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MDJlZjgzMWEmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4e0d\n')},"508d":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RaidenDialog_vue_vue_type_style_index_0_id_23c69e33_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("1922");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RaidenDialog_vue_vue_type_style_index_0_id_23c69e33_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RaidenDialog_vue_vue_type_style_index_0_id_23c69e33_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RaidenDialog_vue_vue_type_style_index_0_id_23c69e33_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SYWlkZW5EaWFsb2cudnVlPzY3MDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQW9sQixDQUFnQixrbkJBQUcsRUFBQyIsImZpbGUiOiI1MDhkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SYWlkZW5EaWFsb2cudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MjNjNjllMzMmc2NvcGVkPXRydWUmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JhaWRlbkRpYWxvZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yM2M2OWUzMyZzY29wZWQ9dHJ1ZSZsYW5nPXNjc3MmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///508d\n')},"51ce":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY3Rpb25CdXR0b24udnVlPzZhMTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51ce\n")},"51ea":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHBIZWFkZXIudnVlP2U2Y2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTFlYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51ea\n")},"73da":function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/back_arrow.268247fb.svg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2JhY2tfYXJyb3cuc3ZnP2MzN2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiI3M2RhLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2JhY2tfYXJyb3cuMjY4MjQ3ZmIuc3ZnXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///73da\n')},"750b":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ActionButton.vue?vue&type=template&id=de9d7fe4&scoped=true&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-row\',{staticClass:"action-button",class:{ sticky: _vm.sticky },attrs:{"no-gutters":"","align-content":"center","justify":"center"}},[_c(\'v-col\',{staticClass:"text-center",attrs:{"cols":_vm.sticky ? 12 : 10}},[_c(\'v-btn\',{staticClass:"text-capitalize action-button__button",class:{\n        sticky: _vm.sticky,\n        \'action-button__button--ghost\': _vm.ghost,\n        \'action-button__button--full-width\': _vm.fullWidth\n      },attrs:{"type":"submit","disabled":!_vm.enabled,"loading":_vm.loading,"depressed":"","large":""},on:{"click":function($event){return _vm.click()}}},[_vm._v(" "+_vm._s(_vm.text)+" "),(_vm.arrow)?_c(\'v-icon\',{attrs:{"right":""}},[_vm._v("keyboard_arrow_right")]):_vm._e()],1)],1)],1)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/ActionButton.vue?vue&type=template&id=de9d7fe4&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__("9ab4");\n\n// EXTERNAL MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\nvar vue_property_decorator = __webpack_require__("60a3");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ActionButton.vue?vue&type=script&lang=ts&\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\nvar ActionButton = /*#__PURE__*/function (_Vue) {\n  _inherits(ActionButton, _Vue);\n\n  var _super = _createSuper(ActionButton);\n\n  function ActionButton() {\n    _classCallCheck(this, ActionButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ActionButton, [{\n    key: "click",\n    value: function click() {}\n  }]);\n\n  return ActionButton;\n}(vue_property_decorator["e" /* Vue */]);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: true,\n  type: Boolean\n})], ActionButton.prototype, "enabled", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: true\n})], ActionButton.prototype, "text", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  default: false\n})], ActionButton.prototype, "loading", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  default: false\n})], ActionButton.prototype, "sticky", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  default: false\n})], ActionButton.prototype, "arrow", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  default: false\n})], ActionButton.prototype, "ghost", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  default: false\n})], ActionButton.prototype, "fullWidth", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["b" /* Emit */])()], ActionButton.prototype, "click", null);\n\nActionButton = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({})], ActionButton);\n/* harmony default export */ var ActionButtonvue_type_script_lang_ts_ = (ActionButton);\n// CONCATENATED MODULE: ./src/components/ActionButton.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_ActionButtonvue_type_script_lang_ts_ = (ActionButtonvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/ActionButton.vue?vue&type=style&index=0&id=de9d7fe4&lang=scss&scoped=true&\nvar ActionButtonvue_type_style_index_0_id_de9d7fe4_lang_scss_scoped_true_ = __webpack_require__("c6c9");\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("2877");\n\n// EXTERNAL MODULE: ./node_modules/vuetify-loader/lib/runtime/installComponents.js\nvar installComponents = __webpack_require__("6544");\nvar installComponents_default = /*#__PURE__*/__webpack_require__.n(installComponents);\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VBtn/VBtn.js\nvar VBtn = __webpack_require__("8336");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VCol.js\nvar VCol = __webpack_require__("62ad");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VIcon/VIcon.js\nvar VIcon = __webpack_require__("132d");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VRow.js\nvar VRow = __webpack_require__("0fd9");\n\n// CONCATENATED MODULE: ./src/components/ActionButton.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_ActionButtonvue_type_script_lang_ts_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "de9d7fe4",\n  null\n  \n)\n\n/* harmony default export */ var components_ActionButton = __webpack_exports__["a"] = (component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\ninstallComponents_default()(component, {VBtn: VBtn["a" /* default */],VCol: VCol["a" /* default */],VIcon: VIcon["a" /* default */],VRow: VRow["a" /* default */]})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY3Rpb25CdXR0b24udnVlP2MzZGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQWN0aW9uQnV0dG9uLnZ1ZT8xMmQwIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FjdGlvbkJ1dHRvbi52dWU/YTFkZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY3Rpb25CdXR0b24udnVlPzlkYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLG1CQUFtQixtQ0FBbUMscUJBQXFCLFFBQVEsNkRBQTZELGNBQWMsaUNBQWlDLDZCQUE2QixjQUFjO0FBQ25VO0FBQ0E7QUFDQTtBQUNBLE9BQU8sUUFBUSx3RkFBd0YsS0FBSyx5QkFBeUIscUJBQXFCLDREQUE0RCxPQUFPLFlBQVk7QUFDek87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeUJBOztBQUdBLElBQXFCLFlBQXJCO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQSw0QkF1Qk8sQ0FBSztBQXZCWjs7QUFBQTtBQUFBLEVBQTBDLHFDQUExQzs7QUFFRSx5Q0FEQyw4Q0FBSSxDQUFDO0FBQUUsVUFBUSxFQUFFLElBQVo7QUFBa0IsTUFBSSxFQUFFO0FBQXhCLENBQUQsQ0FDTCxHLHNCQUFBLEUsU0FBQSxFLEtBQWtCLENBQWxCOztBQUdBLHlDQURDLDhDQUFJLENBQUM7QUFBRSxVQUFRLEVBQUU7QUFBWixDQUFELENBQ0wsRyxzQkFBQSxFLE1BQUEsRSxLQUFjLENBQWQ7O0FBR0EseUNBREMsOENBQUksQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ0wsRyxzQkFBQSxFLFNBQUEsRSxLQUFrQixDQUFsQjs7QUFHQSx5Q0FEQyw4Q0FBSSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDTCxHLHNCQUFBLEUsUUFBQSxFLEtBQWlCLENBQWpCOztBQUdBLHlDQURDLDhDQUFJLENBQUM7QUFBRSxNQUFJLEVBQUUsT0FBUjtBQUFpQixTQUFPLEVBQUU7QUFBMUIsQ0FBRCxDQUNMLEcsc0JBQUEsRSxPQUFBLEUsS0FBZ0IsQ0FBaEI7O0FBR0EseUNBREMsOENBQUksQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ0wsRyxzQkFBQSxFLE9BQUEsRSxLQUFnQixDQUFoQjs7QUFHQSx5Q0FEQyw4Q0FBSSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDTCxHLHNCQUFBLEUsV0FBQSxFLEtBQW9CLENBQXBCOztBQUdBLHlDQURDLDhDQUFJLEVBQ0wsRyxzQkFBQSxFLE9BQUEsRUFBVSxJQUFWOztBQXZCbUIsWUFBWSw0Q0FEaEMsbURBQVMsQ0FBQyxFQUFELENBQ3VCLEdBQVosWUFBWSxDQUFaO0FBQUEscUY7O0FDakM2WixDQUFnQix3SEFBRyxFQUFDLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0EvVjtBQUN2QztBQUNMO0FBQ3NDOzs7QUFHakc7QUFDMEY7QUFDMUYsZ0JBQWdCLDhDQUFVO0FBQzFCLEVBQUUsK0NBQU07QUFDUixFQUFFLE1BQU07QUFDUixFQUFFLGVBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRWUsd0dBQWlCOztBQUVoQztBQUNtRztBQUNoRDtBQUNDO0FBQ0M7QUFDRDtBQUNwRCwyQkFBaUIsYUFBYSw2QkFBSSxDQUFDLDZCQUFJLENBQUMsK0JBQUssQ0FBQyw2QkFBSSxDQUFDIiwiZmlsZSI6Ijc1MGIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygndi1yb3cnLHtzdGF0aWNDbGFzczpcImFjdGlvbi1idXR0b25cIixjbGFzczp7IHN0aWNreTogX3ZtLnN0aWNreSB9LGF0dHJzOntcIm5vLWd1dHRlcnNcIjpcIlwiLFwiYWxpZ24tY29udGVudFwiOlwiY2VudGVyXCIsXCJqdXN0aWZ5XCI6XCJjZW50ZXJcIn19LFtfYygndi1jb2wnLHtzdGF0aWNDbGFzczpcInRleHQtY2VudGVyXCIsYXR0cnM6e1wiY29sc1wiOl92bS5zdGlja3kgPyAxMiA6IDEwfX0sW19jKCd2LWJ0bicse3N0YXRpY0NsYXNzOlwidGV4dC1jYXBpdGFsaXplIGFjdGlvbi1idXR0b25fX2J1dHRvblwiLGNsYXNzOntcbiAgICAgICAgc3RpY2t5OiBfdm0uc3RpY2t5LFxuICAgICAgICAnYWN0aW9uLWJ1dHRvbl9fYnV0dG9uLS1naG9zdCc6IF92bS5naG9zdCxcbiAgICAgICAgJ2FjdGlvbi1idXR0b25fX2J1dHRvbi0tZnVsbC13aWR0aCc6IF92bS5mdWxsV2lkdGhcbiAgICAgIH0sYXR0cnM6e1widHlwZVwiOlwic3VibWl0XCIsXCJkaXNhYmxlZFwiOiFfdm0uZW5hYmxlZCxcImxvYWRpbmdcIjpfdm0ubG9hZGluZyxcImRlcHJlc3NlZFwiOlwiXCIsXCJsYXJnZVwiOlwiXCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLmNsaWNrKCl9fX0sW192bS5fdihcIiBcIitfdm0uX3MoX3ZtLnRleHQpK1wiIFwiKSwoX3ZtLmFycm93KT9fYygndi1pY29uJyx7YXR0cnM6e1wicmlnaHRcIjpcIlwifX0sW192bS5fdihcImtleWJvYXJkX2Fycm93X3JpZ2h0XCIpXSk6X3ZtLl9lKCldLDEpXSwxKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRW1pdCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XG5cbkBDb21wb25lbnQoe30pXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25CdXR0b24gZXh0ZW5kcyBWdWUge1xuICBAUHJvcCh7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiBCb29sZWFuIH0pXG4gIGVuYWJsZWQhOiBib29sZWFuO1xuXG4gIEBQcm9wKHsgcmVxdWlyZWQ6IHRydWUgfSlcbiAgdGV4dCE6IHN0cmluZztcblxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXG4gIGxvYWRpbmchOiBib29sZWFuO1xuXG4gIEBQcm9wKHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSlcbiAgc3RpY2t5PzogYm9vbGVhbjtcblxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXG4gIGFycm93PzogYm9vbGVhbjtcblxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXG4gIGdob3N0PzogYm9vbGVhbjtcblxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXG4gIGZ1bGxXaWR0aD86IGJvb2xlYW47XG5cbiAgQEVtaXQoKVxuICBjbGljaygpIHt9XG59XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTQtMCEuLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTE0LTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FjdGlvbkJ1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xNC0wIS4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS0yMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQWN0aW9uQnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQWN0aW9uQnV0dG9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1kZTlkN2ZlNCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BY3Rpb25CdXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9BY3Rpb25CdXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0FjdGlvbkJ1dHRvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1kZTlkN2ZlNCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImRlOWQ3ZmU0XCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzXG5cbi8qIHZ1ZXRpZnktbG9hZGVyICovXG5pbXBvcnQgaW5zdGFsbENvbXBvbmVudHMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL3J1bnRpbWUvaW5zdGFsbENvbXBvbmVudHMuanNcIlxuaW1wb3J0IHsgVkJ0biB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJ0bic7XG5pbXBvcnQgeyBWQ29sIH0gZnJvbSAndnVldGlmeS9saWIvY29tcG9uZW50cy9WR3JpZCc7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkljb24nO1xuaW1wb3J0IHsgVlJvdyB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkdyaWQnO1xuaW5zdGFsbENvbXBvbmVudHMoY29tcG9uZW50LCB7VkJ0bixWQ29sLFZJY29uLFZSb3d9KVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///750b\n')},"753f":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoAccessMessage_vue_vue_type_style_index_0_id_7b92b083_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("94e9");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoAccessMessage_vue_vue_type_style_index_0_id_7b92b083_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoAccessMessage_vue_vue_type_style_index_0_id_7b92b083_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NoAccessMessage_vue_vue_type_style_index_0_id_7b92b083_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob0FjY2Vzc01lc3NhZ2UudnVlPzk2MzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQXVsQixDQUFnQixxbkJBQUcsRUFBQyIsImZpbGUiOiI3NTNmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ob0FjY2Vzc01lc3NhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9N2I5MmIwODMmc2NvcGVkPXRydWUmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05vQWNjZXNzTWVzc2FnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03YjkyYjA4MyZzY29wZWQ9dHJ1ZSZsYW5nPXNjc3MmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///753f\n')},"77fd":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("9ab4");\n/* harmony import */ var vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("60a3");\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\nvar BlockieMixin = /*#__PURE__*/function (_Vue) {\n  _inherits(BlockieMixin, _Vue);\n\n  var _super = _createSuper(BlockieMixin);\n\n  function BlockieMixin() {\n    _classCallCheck(this, BlockieMixin);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BlockieMixin, [{\n    key: "$blockie",\n    value: function $blockie(address) {\n      if (address) {\n        return this.$identicon.getIdenticon(address);\n      } else {\n        return this.$identicon.getIdenticon(\'0x000\');\n      }\n    }\n  }]);\n\n  return BlockieMixin;\n}(vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__[/* Vue */ "e"]);\n\nBlockieMixin = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ "b"])([vue_property_decorator__WEBPACK_IMPORTED_MODULE_1__[/* Component */ "a"]], BlockieMixin);\n/* harmony default export */ __webpack_exports__["a"] = (BlockieMixin);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWl4aW5zL2Jsb2NraWUtbWl4aW4udHM/NzE3MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBR0EsSUFBcUIsWUFBckI7QUFBQTs7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLDZCQUNXLE9BRFgsRUFDMkI7QUFDdkIsVUFBSSxPQUFKLEVBQWE7QUFDWCxlQUFPLEtBQUssVUFBTCxDQUFnQixZQUFoQixDQUE2QixPQUE3QixDQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBTyxLQUFLLFVBQUwsQ0FBZ0IsWUFBaEIsQ0FBNkIsT0FBN0IsQ0FBUDtBQUNEO0FBQ0Y7QUFQSDs7QUFBQTtBQUFBLEVBQTBDLGtFQUExQzs7QUFBcUIsWUFBWSxxRUFEaEMsd0VBQ2dDLEdBQVosWUFBWSxDQUFaO0FBQUEscUUiLCJmaWxlIjoiNzdmZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XG5cbkBDb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsb2NraWVNaXhpbiBleHRlbmRzIFZ1ZSB7XG4gICRibG9ja2llKGFkZHJlc3M/OiBzdHJpbmcpIHtcbiAgICBpZiAoYWRkcmVzcykge1xuICAgICAgcmV0dXJuIHRoaXMuJGlkZW50aWNvbi5nZXRJZGVudGljb24oYWRkcmVzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLiRpZGVudGljb24uZ2V0SWRlbnRpY29uKCcweDAwMCcpO1xuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///77fd\n')},"80bf":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RouteNames; });\nvar RouteNames;\n\n(function (RouteNames) {\n  RouteNames["TRANSFER"] = "transfer";\n  RouteNames["TRANSFER_STEPS"] = "transfer-steps";\n  RouteNames["SELECT_TOKEN"] = "select-token";\n  RouteNames["SELECT_HUB"] = "select-hub";\n  RouteNames["HOME"] = "home";\n  RouteNames["CHANNELS"] = "channels";\n  RouteNames["OPEN_CHANNEL"] = "open-channel";\n  RouteNames["GENERAL"] = "general";\n  RouteNames["GENERAL_HOME"] = "general-home";\n  RouteNames["BACKUP_STATE"] = "backup-state";\n})(RouteNames || (RouteNames = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVyL3JvdXRlLW5hbWVzLnRzPzk4MDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxJQUFZLFVBQVo7O0FBQUEsV0FBWSxVQUFaLEVBQXNCO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0QsQ0FYRCxFQUFZLFVBQVUsS0FBVixVQUFVLE1BQXRCIiwiZmlsZSI6IjgwYmYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBSb3V0ZU5hbWVzIHtcbiAgVFJBTlNGRVIgPSAndHJhbnNmZXInLFxuICBUUkFOU0ZFUl9TVEVQUyA9ICd0cmFuc2Zlci1zdGVwcycsXG4gIFNFTEVDVF9UT0tFTiA9ICdzZWxlY3QtdG9rZW4nLFxuICBTRUxFQ1RfSFVCID0gJ3NlbGVjdC1odWInLFxuICBIT01FID0gJ2hvbWUnLFxuICBDSEFOTkVMUyA9ICdjaGFubmVscycsXG4gIE9QRU5fQ0hBTk5FTCA9ICdvcGVuLWNoYW5uZWwnLFxuICBHRU5FUkFMID0gJ2dlbmVyYWwnLFxuICBHRU5FUkFMX0hPTUUgPSAnZ2VuZXJhbC1ob21lJyxcbiAgQkFDS1VQX1NUQVRFID0gJ2JhY2t1cC1zdGF0ZSdcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///80bf\n')},"87a2":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return emptyDescription; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return emptyTokenModel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return PlaceHolderNetwork; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DeniedReason; });\nvar emptyDescription = function emptyDescription() {\n  return {\n    label: \'\',\n    title: \'\',\n    description: \'\'\n  };\n};\nvar emptyTokenModel = function emptyTokenModel() {\n  return {\n    name: \'\',\n    symbol: \'\',\n    address: \'\',\n    opening: 0,\n    open: 0,\n    closing: 0,\n    closed: 0,\n    settling: 0,\n    settled: 0\n  };\n};\nvar PlaceHolderNetwork = {\n  name: \'\',\n  chainId: -1\n};\nvar DeniedReason;\n\n(function (DeniedReason) {\n  DeniedReason[DeniedReason["UNDEFINED"] = 0] = "UNDEFINED";\n  DeniedReason[DeniedReason["NO_ACCOUNT"] = 1] = "NO_ACCOUNT";\n  DeniedReason[DeniedReason["UNSUPPORTED_NETWORK"] = 2] = "UNSUPPORTED_NETWORK";\n  DeniedReason[DeniedReason["INITIALIZATION_FAILED"] = 3] = "INITIALIZATION_FAILED";\n  DeniedReason[DeniedReason["RDN_STATE_MIGRATION"] = 4] = "RDN_STATE_MIGRATION";\n})(DeniedReason || (DeniedReason = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvdHlwZXMudHM/MDNmZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1RUE7QUFBQTtBQUFBO0FBQUE7QUFBTyxJQUFNLGdCQUFnQixHQUFHLFNBQW5CLGdCQUFtQjtBQUFBLFNBQXdCO0FBQ3RELFNBQUssRUFBRSxFQUQrQztBQUV0RCxTQUFLLEVBQUUsRUFGK0M7QUFHdEQsZUFBVyxFQUFFO0FBSHlDLEdBQXhCO0FBQUEsQ0FBekI7QUFNQSxJQUFNLGVBQWUsR0FBRyxTQUFsQixlQUFrQjtBQUFBLFNBQXNCO0FBQ25ELFFBQUksRUFBRSxFQUQ2QztBQUVuRCxVQUFNLEVBQUUsRUFGMkM7QUFHbkQsV0FBTyxFQUFFLEVBSDBDO0FBSW5ELFdBQU8sRUFBRSxDQUowQztBQUtuRCxRQUFJLEVBQUUsQ0FMNkM7QUFNbkQsV0FBTyxFQUFFLENBTjBDO0FBT25ELFVBQU0sRUFBRSxDQVAyQztBQVFuRCxZQUFRLEVBQUUsQ0FSeUM7QUFTbkQsV0FBTyxFQUFFO0FBVDBDLEdBQXRCO0FBQUEsQ0FBeEI7QUFZQSxJQUFNLGtCQUFrQixHQUFZO0FBQ3pDLE1BQUksRUFBRSxFQURtQztBQUV6QyxTQUFPLEVBQUUsQ0FBQztBQUYrQixDQUFwQztBQUtQLElBQVksWUFBWjs7QUFBQSxXQUFZLFlBQVosRUFBd0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNELENBTkQsRUFBWSxZQUFZLEtBQVosWUFBWSxNQUF4QiIsImZpbGUiOiI4N2EyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlnTnVtYmVyLCBCaWdOdW1iZXJpc2gsIE5ldHdvcmsgfSBmcm9tICdldGhlcnMvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRva2VuIHtcbiAgcmVhZG9ubHkgYWRkcmVzczogc3RyaW5nO1xuICByZWFkb25seSBkZWNpbWFscz86IG51bWJlcjtcbiAgcmVhZG9ubHkgYmFsYW5jZT86IEJpZ051bWJlcmlzaDtcbiAgcmVhZG9ubHkgc3ltYm9sPzogc3RyaW5nO1xuICByZWFkb25seSBuYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZXNlbmNlcyB7XG4gIFthZGRyZXNzOiBzdHJpbmddOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjY1Rva2VuTW9kZWwge1xuICBuYW1lOiBzdHJpbmc7XG4gIHN5bWJvbDogc3RyaW5nO1xuICBhZGRyZXNzOiBzdHJpbmc7XG4gIG9wZW5pbmc6IG51bWJlcjtcbiAgb3BlbjogbnVtYmVyO1xuICBjbG9zaW5nOiBudW1iZXI7XG4gIGNsb3NlZDogbnVtYmVyO1xuICBzZXR0bGluZzogbnVtYmVyO1xuICBzZXR0bGVkOiBudW1iZXI7XG5cbiAgW2luZGV4OiBzdHJpbmddOiBudW1iZXIgfCBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9rZW5Nb2RlbCBleHRlbmRzIEFjY1Rva2VuTW9kZWwge1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHN5bWJvbDogc3RyaW5nO1xuICByZWFkb25seSBhZGRyZXNzOiBzdHJpbmc7XG4gIHJlYWRvbmx5IG9wZW5pbmc6IG51bWJlcjtcbiAgcmVhZG9ubHkgb3BlbjogbnVtYmVyO1xuICByZWFkb25seSBjbG9zaW5nOiBudW1iZXI7XG4gIHJlYWRvbmx5IGNsb3NlZDogbnVtYmVyO1xuICByZWFkb25seSBzZXR0bGluZzogbnVtYmVyO1xuICByZWFkb25seSBzZXR0bGVkOiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIFByb2dyZXNzIHtcbiAgcmVhZG9ubHkgY3VycmVudDogbnVtYmVyO1xuICByZWFkb25seSB0b3RhbDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0ZXBEZXNjcmlwdGlvbiB7XG4gIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGUge1xuICByZWFkb25seSBrZXk6IG51bWJlcjtcbiAgcmVhZG9ubHkgaG9wczogbnVtYmVyO1xuICByZWFkb25seSBwYXRoOiBzdHJpbmdbXTtcbiAgcmVhZG9ubHkgZmVlOiBCaWdOdW1iZXI7XG4gIHJlYWRvbmx5IGRpc3BsYXlGZWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2ZlciB7XG4gIHBmc0FkZHJlc3M/OiBzdHJpbmc7XG4gIHNlcnZpY2VGZWU/OiBCaWdOdW1iZXI7XG4gIHNlcnZpY2VUb2tlbj86IFRva2VuO1xuICBtZWRpYXRpb25GZWU/OiBCaWdOdW1iZXI7XG4gIHRhcmdldDogc3RyaW5nO1xuICBob3BzOiBudW1iZXI7XG4gIHBheW1lbnRJZDogQmlnTnVtYmVyaXNoO1xuICB0cmFuc2ZlckFtb3VudDogQmlnTnVtYmVyO1xuICB0cmFuc2ZlclRva2VuOiBUb2tlbjtcbiAgdHJhbnNmZXJUb3RhbDogQmlnTnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgZW1wdHlEZXNjcmlwdGlvbiA9ICgpOiBTdGVwRGVzY3JpcHRpb24gPT4gKHtcbiAgbGFiZWw6ICcnLFxuICB0aXRsZTogJycsXG4gIGRlc2NyaXB0aW9uOiAnJ1xufSk7XG5cbmV4cG9ydCBjb25zdCBlbXB0eVRva2VuTW9kZWwgPSAoKTogQWNjVG9rZW5Nb2RlbCA9PiAoe1xuICBuYW1lOiAnJyxcbiAgc3ltYm9sOiAnJyxcbiAgYWRkcmVzczogJycsXG4gIG9wZW5pbmc6IDAsXG4gIG9wZW46IDAsXG4gIGNsb3Npbmc6IDAsXG4gIGNsb3NlZDogMCxcbiAgc2V0dGxpbmc6IDAsXG4gIHNldHRsZWQ6IDBcbn0pO1xuXG5leHBvcnQgY29uc3QgUGxhY2VIb2xkZXJOZXR3b3JrOiBOZXR3b3JrID0ge1xuICBuYW1lOiAnJyxcbiAgY2hhaW5JZDogLTFcbn07XG5cbmV4cG9ydCBlbnVtIERlbmllZFJlYXNvbiB7XG4gIFVOREVGSU5FRCxcbiAgTk9fQUNDT1VOVCxcbiAgVU5TVVBQT1JURURfTkVUV09SSyxcbiAgSU5JVElBTElaQVRJT05fRkFJTEVELFxuICBSRE5fU1RBVEVfTUlHUkFUSU9OXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///87a2\n')},"8aa9":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return setupLogStore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getLogsFromStore; });\n/* harmony import */ var _home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a34a");\n/* harmony import */ var _home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("5c7d");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("3f4f");\n\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar collectionName = \'logs\';\nvar db;\n/* istanbul ignore next */\n\nfunction serializeError(e) {\n  // special handling of Errors, since firefox doesn\'t like to structure-clone it\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n  var strError = e.toString();\n\n  if (!e.stack) {\n    return strError;\n  } else if (e.stack.startsWith(strError)) {\n    return e.stack; // chrome includes error str repr on top of stack\n  } else {\n    return "".concat(strError, "\\n").concat(e.stack);\n  }\n}\n/* istanbul ignore next */\n\n\nfunction filterMessage(message) {\n  if (message[0] === \'%c prev state\') return;\n  if (message[0] === \'—— log end ——\') return;\n  message = message.map(function (e) {\n    return e instanceof Error ? serializeError(e) : (e === null || e === void 0 ? void 0 : e.payload) instanceof Error // error action\n    ? _objectSpread({}, e, {\n      payload: serializeError(e.payload)\n    }) : e;\n  });\n  if (typeof message[1] === \'string\' && message[1].startsWith(\'color:\')) message.splice(1, 1);\n  return message;\n}\n/* istanbul ignore next */\n\n\nfunction serialize(e) {\n  if (typeof e === \'string\') return e;\n\n  try {\n    return JSON.stringify(e);\n  } catch (err) {\n    try {\n      return e.toString();\n    } catch (err) {\n      return \'<unserializable>\';\n    }\n  }\n}\n/* istanbul ignore next */\n\n\nfunction setupLogStore() {\n  return _setupLogStore.apply(this, arguments);\n}\n\nfunction _setupLogStore() {\n  _setupLogStore = _asyncToGenerator( /*#__PURE__*/_home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {\n    var dbName,\n        additionalLoggers,\n        _loop,\n        _i,\n        _arr,\n        _args = arguments;\n\n    return _home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dbName = _args.length > 0 && _args[0] !== undefined ? _args[0] : \'raiden\';\n            additionalLoggers = _args.length > 1 && _args[1] !== undefined ? _args[1] : [\'matrix\'];\n\n            if (!(typeof db !== \'undefined\')) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt("return");\n\n          case 4:\n            _context.next = 6;\n            return Object(idb__WEBPACK_IMPORTED_MODULE_2__[/* openDB */ "a"])(dbName, 1, {\n              upgrade: function upgrade(db) {\n                var logsStore = db.createObjectStore(collectionName);\n                logsStore.createIndex(\'by-logger\', \'logger\');\n                logsStore.createIndex(\'by-level\', \'level\');\n              }\n            });\n\n          case 6:\n            db = _context.sent;\n\n            _loop = function _loop() {\n              var log = _arr[_i];\n              var origFactory = log.methodFactory;\n\n              log.methodFactory = function (methodName, level, loggerName) {\n                var rawMethod = origFactory(methodName, level, loggerName);\n                return function () {\n                  for (var _len = arguments.length, message = new Array(_len), _key = 0; _key < _len; _key++) {\n                    message[_key] = arguments[_key];\n                  }\n\n                  rawMethod.apply(void 0, message);\n                  var filtered = filterMessage(message);\n                  if (!filtered) return;\n                  db.put(collectionName, {\n                    logger: loggerName,\n                    level: methodName,\n                    message: message\n                  }, Date.now()).catch(function () {\n                    return db.put(collectionName, {\n                      logger: loggerName,\n                      level: methodName,\n                      message: message.map(serialize)\n                    }, Date.now());\n                  });\n                };\n              };\n            };\n\n            for (_i = 0, _arr = [loglevel__WEBPACK_IMPORTED_MODULE_1___default.a].concat(_toConsumableArray(additionalLoggers.map(loglevel__WEBPACK_IMPORTED_MODULE_1___default.a.getLogger))); _i < _arr.length; _i++) {\n              _loop();\n            }\n\n          case 9:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _setupLogStore.apply(this, arguments);\n}\n\nfunction getLogsFromStore() {\n  return _getLogsFromStore.apply(this, arguments);\n}\n\nfunction _getLogsFromStore() {\n  _getLogsFromStore = _asyncToGenerator( /*#__PURE__*/_home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {\n    var content, cursor, lastTime, _cursor$value, logger, level, message, line, time;\n\n    return _home_circleci_src_raiden_dapp_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            content = \'\';\n            _context2.next = 3;\n            return db.transaction(collectionName).store.openCursor();\n\n          case 3:\n            cursor = _context2.sent;\n            lastTime = Date.now();\n\n          case 5:\n            if (!cursor) {\n              _context2.next = 16;\n              break;\n            }\n\n            _cursor$value = cursor.value, logger = _cursor$value.logger, level = _cursor$value.level, message = _cursor$value.message;\n            line = message.map(function (m) {\n              return typeof m === \'string\' ? m : JSON.stringify(m);\n            }).join(\' \');\n            lastTime = +cursor.key;\n            time = new Date(cursor.key).toISOString();\n            content += "".concat(time, " @ ").concat(logger, " [").concat(level, "] \\t=> ").concat(line, "\\n");\n            _context2.next = 13;\n            return cursor.continue();\n\n          case 13:\n            cursor = _context2.sent;\n            _context2.next = 5;\n            break;\n\n          case 16:\n            return _context2.abrupt("return", [lastTime, content]);\n\n          case 17:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getLogsFromStore.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8aa9\n')},"8e33":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/BlurredOverlay.vue?vue&type=template&id=1d51571c&scoped=true&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.show)?_c(\'div\',{staticClass:"blurred-overlay",class:{ fullscreen: _vm.fullscreen }},[_vm._t("default")],2):_vm._e()}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/BlurredOverlay.vue?vue&type=template&id=1d51571c&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__("9ab4");\n\n// EXTERNAL MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\nvar vue_property_decorator = __webpack_require__("60a3");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/BlurredOverlay.vue?vue&type=script&lang=ts&\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\nvar BlurredOverlay = /*#__PURE__*/function (_Vue) {\n  _inherits(BlurredOverlay, _Vue);\n\n  var _super = _createSuper(BlurredOverlay);\n\n  function BlurredOverlay() {\n    _classCallCheck(this, BlurredOverlay);\n\n    return _super.apply(this, arguments);\n  }\n\n  return BlurredOverlay;\n}(vue_property_decorator["e" /* Vue */]);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  type: Boolean,\n  required: true\n})], BlurredOverlay.prototype, "show", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: false,\n  default: false,\n  type: Boolean\n})], BlurredOverlay.prototype, "fullscreen", void 0);\n\nBlurredOverlay = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({})], BlurredOverlay);\n/* harmony default export */ var BlurredOverlayvue_type_script_lang_ts_ = (BlurredOverlay);\n// CONCATENATED MODULE: ./src/components/BlurredOverlay.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_BlurredOverlayvue_type_script_lang_ts_ = (BlurredOverlayvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/BlurredOverlay.vue?vue&type=style&index=0&id=1d51571c&scoped=true&lang=scss&\nvar BlurredOverlayvue_type_style_index_0_id_1d51571c_scoped_true_lang_scss_ = __webpack_require__("cb0b");\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("2877");\n\n// CONCATENATED MODULE: ./src/components/BlurredOverlay.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_BlurredOverlayvue_type_script_lang_ts_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "1d51571c",\n  null\n  \n)\n\n/* harmony default export */ var components_BlurredOverlay = __webpack_exports__["a"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9CbHVycmVkT3ZlcmxheS52dWU/ZjI3OSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9CbHVycmVkT3ZlcmxheS52dWU/ZWRjMSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9CbHVycmVkT3ZlcmxheS52dWU/MzZmNyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9CbHVycmVkT3ZlcmxheS52dWU/ZjM0MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0IsNEJBQTRCLHFDQUFxQyw4QkFBOEI7QUFDeEw7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNNQTs7QUFHQSxJQUFxQixjQUFyQjtBQUFBOztBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBLEVBQTRDLHFDQUE1Qzs7QUFFRSx5Q0FEQyw4Q0FBSSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsVUFBUSxFQUFFO0FBQTNCLENBQUQsQ0FDTCxHLHdCQUFBLEUsTUFBQSxFLEtBQWUsQ0FBZjs7QUFFQSx5Q0FEQyw4Q0FBSSxDQUFDO0FBQUUsVUFBUSxFQUFFLEtBQVo7QUFBbUIsU0FBTyxFQUFFLEtBQTVCO0FBQW1DLE1BQUksRUFBRTtBQUF6QyxDQUFELENBQ0wsRyx3QkFBQSxFLFlBQUEsRSxLQUFxQixDQUFyQjs7QUFKbUIsY0FBYyw0Q0FEbEMsbURBQVMsQ0FBQyxFQUFELENBQ3lCLEdBQWQsY0FBYyxDQUFkO0FBQUEseUY7O0FDVitaLENBQWdCLDRIQUFHLEVBQUMsQzs7Ozs7Ozs7QUNBL1Y7QUFDdkM7QUFDTDtBQUNzQzs7O0FBR25HO0FBQzBGO0FBQzFGLGdCQUFnQiw4Q0FBVTtBQUMxQixFQUFFLGlEQUFNO0FBQ1IsRUFBRSxNQUFNO0FBQ1IsRUFBRSxlQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVlLDBHIiwiZmlsZSI6IjhlMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiAoX3ZtLnNob3cpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImJsdXJyZWQtb3ZlcmxheVwiLGNsYXNzOnsgZnVsbHNjcmVlbjogX3ZtLmZ1bGxzY3JlZW4gfX0sW192bS5fdChcImRlZmF1bHRcIildLDIpOl92bS5fZSgpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJcblxuXG5cblxuXG5cbmltcG9ydCB7IENvbXBvbmVudCwgVnVlLCBQcm9wIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XG5cbkBDb21wb25lbnQoe30pXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbHVycmVkT3ZlcmxheSBleHRlbmRzIFZ1ZSB7XG4gIEBQcm9wKHsgdHlwZTogQm9vbGVhbiwgcmVxdWlyZWQ6IHRydWUgfSlcbiAgc2hvdyE6IGJvb2xlYW47XG4gIEBQcm9wKHsgcmVxdWlyZWQ6IGZhbHNlLCBkZWZhdWx0OiBmYWxzZSwgdHlwZTogQm9vbGVhbiB9KVxuICBmdWxsc2NyZWVuITogYm9vbGVhbjtcbn1cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xNC0wIS4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS0yMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQmx1cnJlZE92ZXJsYXkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTQtMCEuLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTE0LTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0JsdXJyZWRPdmVybGF5LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQmx1cnJlZE92ZXJsYXkudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTFkNTE1NzFjJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0JsdXJyZWRPdmVybGF5LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmx1cnJlZE92ZXJsYXkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0JsdXJyZWRPdmVybGF5LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTFkNTE1NzFjJnNjb3BlZD10cnVlJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMWQ1MTU3MWNcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8e33\n')},9302:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/AddressDisplay.vue?vue&type=template&id=dda182e6&scoped=true&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"address__container"},[_c(\'v-tooltip\',{attrs:{"bottom":"","close-delay":"1400"},scopedSlots:_vm._u([{key:"activator",fn:function(ref){\nvar on = ref.on;\nreturn [_c(\'p\',_vm._g({staticClass:"address__label",on:{"click":_vm.copy}},on),[_vm._v(" "+_vm._s(_vm.addressOutput)+" ")])]}}])},[_c(\'div\',{staticClass:"address__tooltip"},[_c(\'input\',{ref:"copy",staticClass:"address__input",domProps:{"value":_vm.address}}),_c(\'div\',[_vm._v(" "+_vm._s(_vm.copied ? _vm.$t(\'address-display.copied\') : _vm.$t(\'address-display.copy\'))+" ")])])])],1)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/AddressDisplay.vue?vue&type=template&id=dda182e6&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__("9ab4");\n\n// EXTERNAL MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\nvar vue_property_decorator = __webpack_require__("60a3");\n\n// EXTERNAL MODULE: ./src/filters.ts\nvar filters = __webpack_require__("0f75");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/AddressDisplay.vue?vue&type=script&lang=ts&\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\nvar AddressDisplayvue_type_script_lang_ts_AddressDisplay = /*#__PURE__*/function (_Vue) {\n  _inherits(AddressDisplay, _Vue);\n\n  var _super = _createSuper(AddressDisplay);\n\n  function AddressDisplay() {\n    var _this;\n\n    _classCallCheck(this, AddressDisplay);\n\n    _this = _super.apply(this, arguments);\n    _this.copied = false;\n    _this.timeout = 0;\n    return _this;\n  }\n\n  _createClass(AddressDisplay, [{\n    key: "selectAddress",\n    value: function selectAddress(input) {\n      if (input) {\n        input.focus();\n        input.select();\n      }\n    }\n  }, {\n    key: "deselectAddress",\n    value: function deselectAddress(input) {\n      if (input) {\n        input.blur();\n      }\n    }\n  }, {\n    key: "copy",\n    value: function copy(event) {\n      var _this2 = this;\n\n      event.stopPropagation(); // Select address\n\n      this.selectAddress(this.$refs.copy);\n      this.copied = document.execCommand(\'copy\'); // Deselect text\n\n      this.deselectAddress(this.$refs.copy);\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(function () {\n        _this2.copied = false;\n      }, 2000);\n    }\n  }, {\n    key: "addressOutput",\n    get: function get() {\n      return this.fullAddress ? this.address : filters["a" /* default */].truncate(this.address, 8);\n    }\n  }]);\n\n  return AddressDisplay;\n}(vue_property_decorator["e" /* Vue */]);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: true\n})], AddressDisplayvue_type_script_lang_ts_AddressDisplay.prototype, "address", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: false,\n  default: false,\n  type: Boolean\n})], AddressDisplayvue_type_script_lang_ts_AddressDisplay.prototype, "fullAddress", void 0);\n\nAddressDisplayvue_type_script_lang_ts_AddressDisplay = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({})], AddressDisplayvue_type_script_lang_ts_AddressDisplay);\n/* harmony default export */ var AddressDisplayvue_type_script_lang_ts_ = (AddressDisplayvue_type_script_lang_ts_AddressDisplay);\n// CONCATENATED MODULE: ./src/components/AddressDisplay.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_AddressDisplayvue_type_script_lang_ts_ = (AddressDisplayvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/AddressDisplay.vue?vue&type=style&index=0&id=dda182e6&lang=scss&scoped=true&\nvar AddressDisplayvue_type_style_index_0_id_dda182e6_lang_scss_scoped_true_ = __webpack_require__("a130");\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("2877");\n\n// EXTERNAL MODULE: ./node_modules/vuetify-loader/lib/runtime/installComponents.js\nvar installComponents = __webpack_require__("6544");\nvar installComponents_default = /*#__PURE__*/__webpack_require__.n(installComponents);\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VTooltip/VTooltip.js\nvar VTooltip = __webpack_require__("3a2f");\n\n// CONCATENATED MODULE: ./src/components/AddressDisplay.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_AddressDisplayvue_type_script_lang_ts_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "dda182e6",\n  null\n  \n)\n\n/* harmony default export */ var components_AddressDisplay = __webpack_exports__["a"] = (component.exports);\n\n/* vuetify-loader */\n\n\ninstallComponents_default()(component, {VTooltip: VTooltip["a" /* default */]})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BZGRyZXNzRGlzcGxheS52dWU/YzI4NiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BZGRyZXNzRGlzcGxheS52dWU/NDczMiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BZGRyZXNzRGlzcGxheS52dWU/YjY1ZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BZGRyZXNzRGlzcGxheS52dWU/NTQ2NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLGlDQUFpQyxrQkFBa0IsT0FBTyxpQ0FBaUMsc0JBQXNCO0FBQzNOO0FBQ0EsdUJBQXVCLGlDQUFpQyxrQkFBa0Isb0RBQW9ELEdBQUcsWUFBWSwrQkFBK0IsY0FBYyxrREFBa0QscUJBQXFCO0FBQ2pROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2tCQTtBQUNBOztBQUdBLElBQXFCLG9EQUFyQjtBQUFBOztBQUFBOztBQUFBO0FBQUE7O0FBQUE7OztBQU9FLG1CQUFrQixLQUFsQjtBQUNRLG9CQUFrQixDQUFsQjtBQVJWO0FBNkNDOztBQTdDRDtBQUFBO0FBQUEsa0NBY2dCLEtBZGhCLEVBY3dDO0FBQ3BDLFVBQUksS0FBSixFQUFXO0FBQ1QsYUFBSyxDQUFDLEtBQU47QUFDQSxhQUFLLENBQUMsTUFBTjtBQUNEO0FBQ0Y7QUFuQkg7QUFBQTtBQUFBLG9DQXFCa0IsS0FyQmxCLEVBcUIwQztBQUN0QyxVQUFJLEtBQUosRUFBVztBQUNULGFBQUssQ0FBQyxJQUFOO0FBQ0Q7QUFDRjtBQXpCSDtBQUFBO0FBQUEseUJBMkJPLEtBM0JQLEVBMkJ3QjtBQUFBOztBQUNwQixXQUFLLENBQUMsZUFBTixHQURvQixDQUdwQjs7QUFDQSxXQUFLLGFBQUwsQ0FBbUIsS0FBSyxLQUFMLENBQVcsSUFBOUI7QUFDQSxXQUFLLE1BQUwsR0FBYyxRQUFRLENBQUMsV0FBVCxDQUFxQixNQUFyQixDQUFkLENBTG9CLENBT3BCOztBQUNBLFdBQUssZUFBTCxDQUFxQixLQUFLLEtBQUwsQ0FBVyxJQUFoQzs7QUFFQSxVQUFJLEtBQUssT0FBVCxFQUFrQjtBQUNoQixvQkFBWSxDQUFDLEtBQUssT0FBTixDQUFaO0FBQ0Q7O0FBRUQsV0FBSyxPQUFMLEdBQWdCLFVBQVUsQ0FBQyxZQUFLO0FBQzlCLGNBQUksQ0FBQyxNQUFMLEdBQWMsS0FBZDtBQUNELE9BRnlCLEVBRXZCLElBRnVCLENBQTFCO0FBR0Q7QUE1Q0g7QUFBQTtBQUFBLHdCQVVtQjtBQUNmLGFBQU8sS0FBSyxXQUFMLEdBQW1CLEtBQUssT0FBeEIsR0FBa0MsMEJBQU8sQ0FBQyxRQUFSLENBQWlCLEtBQUssT0FBdEIsRUFBK0IsQ0FBL0IsQ0FBekM7QUFDRDtBQVpIOztBQUFBO0FBQUEsRUFBNEMscUNBQTVDOztBQUVFLHlDQURDLDhDQUFJLENBQUM7QUFBRSxVQUFRLEVBQUU7QUFBWixDQUFELENBQ0wsRyw4REFBQSxFLFNBQUEsRSxLQUFpQixDQUFqQjs7QUFHQSx5Q0FEQyw4Q0FBSSxDQUFDO0FBQUUsVUFBUSxFQUFFLEtBQVo7QUFBbUIsU0FBTyxFQUFFLEtBQTVCO0FBQW1DLE1BQUksRUFBRTtBQUF6QyxDQUFELENBQ0wsRyw4REFBQSxFLGFBQUEsRSxLQUFzQixDQUF0Qjs7QUFMbUIsb0RBQWMsNENBRGxDLG1EQUFTLENBQUMsRUFBRCxDQUN5QixHQUFkLG9EQUFjLENBQWQ7QUFBQSwrSDs7QUN6QitaLENBQWdCLDRIQUFHLEVBQUMsQzs7Ozs7Ozs7Ozs7Ozs7O0FDQS9WO0FBQ3ZDO0FBQ0w7QUFDc0M7OztBQUduRztBQUMwRjtBQUMxRixnQkFBZ0IsOENBQVU7QUFDMUIsRUFBRSxpREFBTTtBQUNSLEVBQUUsTUFBTTtBQUNSLEVBQUUsZUFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFZSwwR0FBaUI7O0FBRWhDO0FBQ21HO0FBQ3hDO0FBQzNELDJCQUFpQixhQUFhLHFDQUFRLENBQUMiLCJmaWxlIjoiOTMwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFkZHJlc3NfX2NvbnRhaW5lclwifSxbX2MoJ3YtdG9vbHRpcCcse2F0dHJzOntcImJvdHRvbVwiOlwiXCIsXCJjbG9zZS1kZWxheVwiOlwiMTQwMFwifSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6XCJhY3RpdmF0b3JcIixmbjpmdW5jdGlvbihyZWYpe1xudmFyIG9uID0gcmVmLm9uO1xucmV0dXJuIFtfYygncCcsX3ZtLl9nKHtzdGF0aWNDbGFzczpcImFkZHJlc3NfX2xhYmVsXCIsb246e1wiY2xpY2tcIjpfdm0uY29weX19LG9uKSxbX3ZtLl92KFwiIFwiK192bS5fcyhfdm0uYWRkcmVzc091dHB1dCkrXCIgXCIpXSldfX1dKX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFkZHJlc3NfX3Rvb2x0aXBcIn0sW19jKCdpbnB1dCcse3JlZjpcImNvcHlcIixzdGF0aWNDbGFzczpcImFkZHJlc3NfX2lucHV0XCIsZG9tUHJvcHM6e1widmFsdWVcIjpfdm0uYWRkcmVzc319KSxfYygnZGl2JyxbX3ZtLl92KFwiIFwiK192bS5fcyhfdm0uY29waWVkID8gX3ZtLiR0KCdhZGRyZXNzLWRpc3BsYXkuY29waWVkJykgOiBfdm0uJHQoJ2FkZHJlc3MtZGlzcGxheS5jb3B5JykpK1wiIFwiKV0pXSldKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XG5pbXBvcnQgRmlsdGVycyBmcm9tICcuLi9maWx0ZXJzJztcblxuQENvbXBvbmVudCh7fSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFkZHJlc3NEaXNwbGF5IGV4dGVuZHMgVnVlIHtcbiAgQFByb3AoeyByZXF1aXJlZDogdHJ1ZSB9KVxuICBhZGRyZXNzITogc3RyaW5nO1xuXG4gIEBQcm9wKHsgcmVxdWlyZWQ6IGZhbHNlLCBkZWZhdWx0OiBmYWxzZSwgdHlwZTogQm9vbGVhbiB9KVxuICBmdWxsQWRkcmVzcyE6IGJvb2xlYW47XG5cbiAgY29waWVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgdGltZW91dDogbnVtYmVyID0gMDtcblxuICBnZXQgYWRkcmVzc091dHB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5mdWxsQWRkcmVzcyA/IHRoaXMuYWRkcmVzcyA6IEZpbHRlcnMudHJ1bmNhdGUodGhpcy5hZGRyZXNzLCA4KTtcbiAgfVxuXG4gIHNlbGVjdEFkZHJlc3MoaW5wdXQ/OiBIVE1MSW5wdXRFbGVtZW50KTogdm9pZCB7XG4gICAgaWYgKGlucHV0KSB7XG4gICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgaW5wdXQuc2VsZWN0KCk7XG4gICAgfVxuICB9XG5cbiAgZGVzZWxlY3RBZGRyZXNzKGlucHV0PzogSFRNTElucHV0RWxlbWVudCk6IHZvaWQge1xuICAgIGlmIChpbnB1dCkge1xuICAgICAgaW5wdXQuYmx1cigpO1xuICAgIH1cbiAgfVxuXG4gIGNvcHkoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIC8vIFNlbGVjdCBhZGRyZXNzXG4gICAgdGhpcy5zZWxlY3RBZGRyZXNzKHRoaXMuJHJlZnMuY29weSBhcyBIVE1MSW5wdXRFbGVtZW50KTtcbiAgICB0aGlzLmNvcGllZCA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG5cbiAgICAvLyBEZXNlbGVjdCB0ZXh0XG4gICAgdGhpcy5kZXNlbGVjdEFkZHJlc3ModGhpcy4kcmVmcy5jb3B5IGFzIEhUTUxJbnB1dEVsZW1lbnQpO1xuXG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuXG4gICAgdGhpcy50aW1lb3V0ID0gKHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jb3BpZWQgPSBmYWxzZTtcbiAgICB9LCAyMDAwKSBhcyB1bmtub3duKSBhcyBudW1iZXI7XG4gIH1cbn1cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xNC0wIS4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS0yMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQWRkcmVzc0Rpc3BsYXkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTQtMCEuLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTE0LTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FkZHJlc3NEaXNwbGF5LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQWRkcmVzc0Rpc3BsYXkudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRkYTE4MmU2JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FkZHJlc3NEaXNwbGF5LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQWRkcmVzc0Rpc3BsYXkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0FkZHJlc3NEaXNwbGF5LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWRkYTE4MmU2Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiZGRhMTgyZTZcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHNcblxuLyogdnVldGlmeS1sb2FkZXIgKi9cbmltcG9ydCBpbnN0YWxsQ29tcG9uZW50cyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvcnVudGltZS9pbnN0YWxsQ29tcG9uZW50cy5qc1wiXG5pbXBvcnQgeyBWVG9vbHRpcCB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRvb2x0aXAnO1xuaW5zdGFsbENvbXBvbmVudHMoY29tcG9uZW50LCB7VlRvb2x0aXB9KVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9302\n')},"94e9":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob0FjY2Vzc01lc3NhZ2UudnVlP2EyNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTRlOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94e9\n")},"9a9c":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvSG9tZS52dWU/MGNlYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI5YTljLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9a9c\n")},"9b19":function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/logo.5c4b022d.svg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2xvZ28uc3ZnPzExMTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiI5YjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2xvZ28uNWM0YjAyMmQuc3ZnXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9b19\n')},"9e24":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AppHeader_vue_vue_type_style_index_0_id_6ccf2084_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("51ea");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AppHeader_vue_vue_type_style_index_0_id_6ccf2084_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AppHeader_vue_vue_type_style_index_0_id_6ccf2084_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AppHeader_vue_vue_type_style_index_0_id_6ccf2084_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHBIZWFkZXIudnVlP2E0MGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQWlsQixDQUFnQiwrbUJBQUcsRUFBQyIsImZpbGUiOiI5ZTI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHBIZWFkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NmNjZjIwODQmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcEhlYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD02Y2NmMjA4NCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9e24\n')},a0df:function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":3,\\"contracts\\":{\\"SecretRegistry\\":{\\"address\\":\\"0xC1b67a7e53511e59B96B35472c3eB1c1f84C2baf\\",\\"transaction_hash\\":\\"0x59a02287485ff7ac0153022959f0bbe4a044242ba94bb53f7dedbafd4d35fb4e\\",\\"block_number\\":7255736,\\"gas_cost\\":247082,\\"constructor_arguments\\":[]},\\"TokenNetworkRegistry\\":{\\"address\\":\\"0x3DE1B1E10Ae71C3E3b793e545A047d1B4FAB587a\\",\\"transaction_hash\\":\\"0x20ae67f204baca19726e040399ab2fc45fd3e8abdd16eb3d67abeca2eab31d45\\",\\"block_number\\":7255738,\\"gas_cost\\":4001114,\\"constructor_arguments\\":[\\"0xC1b67a7e53511e59B96B35472c3eB1c1f84C2baf\\",3,20,555428,1.157920892373162e+77]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhMGRmLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a0df\n')},a130:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AddressDisplay_vue_vue_type_style_index_0_id_dda182e6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("e1fc");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AddressDisplay_vue_vue_type_style_index_0_id_dda182e6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AddressDisplay_vue_vue_type_style_index_0_id_dda182e6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_AddressDisplay_vue_vue_type_style_index_0_id_dda182e6_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BZGRyZXNzRGlzcGxheS52dWU/NjQwNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBc2xCLENBQWdCLG9uQkFBRyxFQUFDIiwiZmlsZSI6ImExMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FkZHJlc3NEaXNwbGF5LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWRkYTE4MmU2Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BZGRyZXNzRGlzcGxheS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1kZGExODJlNiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a130\n')},a3d5:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BalanceUtils; });\n/* harmony import */ var ethers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6934");\n/* harmony import */ var ethers_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ethers_utils__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar BalanceUtils = /*#__PURE__*/function () {\n  function BalanceUtils() {\n    _classCallCheck(this, BalanceUtils);\n  }\n\n  _createClass(BalanceUtils, null, [{\n    key: "toEth",\n    value: function toEth(wei) {\n      return Object(ethers_utils__WEBPACK_IMPORTED_MODULE_0__["formatEther"])(wei);\n    }\n  }, {\n    key: "toUnits",\n    value: function toUnits(wei, decimals) {\n      return Object(ethers_utils__WEBPACK_IMPORTED_MODULE_0__["formatUnits"])(wei, decimals);\n    }\n  }, {\n    key: "decimalsOverflow",\n    value: function decimalsOverflow(depositTokens, decimals) {\n      var decimalPart;\n\n      if (depositTokens.indexOf(\'.\') > 0) {\n        decimalPart = depositTokens.split(\'.\')[1];\n      } else {\n        decimalPart = \'\';\n      }\n\n      return decimalPart.length > decimals;\n    }\n  }, {\n    key: "parse",\n    value: function parse(deposit, decimals) {\n      return Object(ethers_utils__WEBPACK_IMPORTED_MODULE_0__["parseUnits"])(deposit, decimals);\n    }\n  }]);\n\n  return BalanceUtils;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYmFsYW5jZS11dGlscy50cz9kOWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBRU8sSUFBTSxZQUFiO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQSwwQkFDZSxHQURmLEVBQzZCO0FBQ3pCLGFBQU8sZ0VBQVcsQ0FBQyxHQUFELENBQWxCO0FBQ0Q7QUFISDtBQUFBO0FBQUEsNEJBS2lCLEdBTGpCLEVBS2lDLFFBTGpDLEVBS2lEO0FBQzdDLGFBQU8sZ0VBQVcsQ0FBQyxHQUFELEVBQU0sUUFBTixDQUFsQjtBQUNEO0FBUEg7QUFBQTtBQUFBLHFDQVMwQixhQVQxQixFQVNpRCxRQVRqRCxFQVNpRTtBQUM3RCxVQUFJLFdBQUo7O0FBQ0EsVUFBSSxhQUFhLENBQUMsT0FBZCxDQUFzQixHQUF0QixJQUE2QixDQUFqQyxFQUFvQztBQUNsQyxtQkFBVyxHQUFHLGFBQWEsQ0FBQyxLQUFkLENBQW9CLEdBQXBCLEVBQXlCLENBQXpCLENBQWQ7QUFDRCxPQUZELE1BRU87QUFDTCxtQkFBVyxHQUFHLEVBQWQ7QUFDRDs7QUFDRCxhQUFPLFdBQVcsQ0FBQyxNQUFaLEdBQXFCLFFBQTVCO0FBQ0Q7QUFqQkg7QUFBQTtBQUFBLDBCQW1CZSxPQW5CZixFQW1CZ0MsUUFuQmhDLEVBbUJnRDtBQUM1QyxhQUFPLCtEQUFVLENBQUMsT0FBRCxFQUFVLFFBQVYsQ0FBakI7QUFDRDtBQXJCSDs7QUFBQTtBQUFBIiwiZmlsZSI6ImEzZDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaWdOdW1iZXIsIHBhcnNlVW5pdHMsIGZvcm1hdFVuaXRzLCBmb3JtYXRFdGhlciB9IGZyb20gJ2V0aGVycy91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBCYWxhbmNlVXRpbHMge1xuICBzdGF0aWMgdG9FdGgod2VpOiBCaWdOdW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBmb3JtYXRFdGhlcih3ZWkpO1xuICB9XG5cbiAgc3RhdGljIHRvVW5pdHMod2VpOiBCaWdOdW1iZXIsIGRlY2ltYWxzOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBmb3JtYXRVbml0cyh3ZWksIGRlY2ltYWxzKTtcbiAgfVxuXG4gIHN0YXRpYyBkZWNpbWFsc092ZXJmbG93KGRlcG9zaXRUb2tlbnM6IHN0cmluZywgZGVjaW1hbHM6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGxldCBkZWNpbWFsUGFydDogc3RyaW5nO1xuICAgIGlmIChkZXBvc2l0VG9rZW5zLmluZGV4T2YoJy4nKSA+IDApIHtcbiAgICAgIGRlY2ltYWxQYXJ0ID0gZGVwb3NpdFRva2Vucy5zcGxpdCgnLicpWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWNpbWFsUGFydCA9ICcnO1xuICAgIH1cbiAgICByZXR1cm4gZGVjaW1hbFBhcnQubGVuZ3RoID4gZGVjaW1hbHM7XG4gIH1cblxuICBzdGF0aWMgcGFyc2UoZGVwb3NpdDogc3RyaW5nLCBkZWNpbWFsczogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHBhcnNlVW5pdHMoZGVwb3NpdCwgZGVjaW1hbHMpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a3d5\n')},a491:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9kNmZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6ImE0OTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a491\n")},a53d:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_52aa355e_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a491");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_52aa355e_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_52aa355e_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_52aa355e_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT80N2IyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFtakIsQ0FBZ0IseW1CQUFHLEVBQUMiLCJmaWxlIjoiYTUzZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTgtb25lT2YtMS0wIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTgtb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS0yMS0wIS4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTUyYWEzNTVlJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTJhYTM1NWUmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///a53d\n')},a683:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/RaidenDialog.vue?vue&type=template&id=23c69e33&scoped=true&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'blurred-overlay\',{attrs:{"show":_vm.visible,"fullscreen":""}},[_c(\'v-dialog\',{attrs:{"value":_vm.visible,"width":"350","hide-overlay":"","dark":"","persistent":_vm.hideClose},on:{"click:outside":function($event){return _vm.close()}}},[_c(\'v-card\',{staticClass:"raiden-dialog"},[(!_vm.hideClose)?_c(\'v-btn\',{staticClass:"raiden-dialog__close",attrs:{"icon":""},on:{"click":function($event){return _vm.close()}}},[_c(\'v-icon\',[_vm._v("mdi-close")])],1):_vm._e(),_vm._t("default")],2)],1)],1)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/RaidenDialog.vue?vue&type=template&id=23c69e33&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__("9ab4");\n\n// EXTERNAL MODULE: ./src/components/BlurredOverlay.vue + 4 modules\nvar BlurredOverlay = __webpack_require__("8e33");\n\n// EXTERNAL MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\nvar vue_property_decorator = __webpack_require__("60a3");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/RaidenDialog.vue?vue&type=script&lang=ts&\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\nvar RaidenDialog = /*#__PURE__*/function (_Vue) {\n  _inherits(RaidenDialog, _Vue);\n\n  var _super = _createSuper(RaidenDialog);\n\n  function RaidenDialog() {\n    _classCallCheck(this, RaidenDialog);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RaidenDialog, [{\n    key: "close",\n    value: function close() {}\n  }]);\n\n  return RaidenDialog;\n}(vue_property_decorator["e" /* Vue */]);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: true,\n  default: false,\n  type: Boolean\n})], RaidenDialog.prototype, "visible", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: false,\n  default: false,\n  type: Boolean\n})], RaidenDialog.prototype, "hideClose", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["b" /* Emit */])()], RaidenDialog.prototype, "close", null);\n\nRaidenDialog = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  components: {\n    BlurredOverlay: BlurredOverlay["a" /* default */]\n  }\n})], RaidenDialog);\n/* harmony default export */ var RaidenDialogvue_type_script_lang_ts_ = (RaidenDialog);\n// CONCATENATED MODULE: ./src/components/RaidenDialog.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_RaidenDialogvue_type_script_lang_ts_ = (RaidenDialogvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/RaidenDialog.vue?vue&type=style&index=0&id=23c69e33&scoped=true&lang=scss&\nvar RaidenDialogvue_type_style_index_0_id_23c69e33_scoped_true_lang_scss_ = __webpack_require__("508d");\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("2877");\n\n// EXTERNAL MODULE: ./node_modules/vuetify-loader/lib/runtime/installComponents.js\nvar installComponents = __webpack_require__("6544");\nvar installComponents_default = /*#__PURE__*/__webpack_require__.n(installComponents);\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VBtn/VBtn.js\nvar VBtn = __webpack_require__("8336");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VCard/VCard.js\nvar VCard = __webpack_require__("b0af");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VDialog/VDialog.js + 1 modules\nvar VDialog = __webpack_require__("169a");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VIcon/VIcon.js\nvar VIcon = __webpack_require__("132d");\n\n// CONCATENATED MODULE: ./src/components/RaidenDialog.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_RaidenDialogvue_type_script_lang_ts_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "23c69e33",\n  null\n  \n)\n\n/* harmony default export */ var components_RaidenDialog = __webpack_exports__["a"] = (component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\ninstallComponents_default()(component, {VBtn: VBtn["a" /* default */],VCard: VCard["a" /* default */],VDialog: VDialog["a" /* default */],VIcon: VIcon["a" /* default */]})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SYWlkZW5EaWFsb2cudnVlPzhjODgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmFpZGVuRGlhbG9nLnZ1ZT85NjRhIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhaWRlbkRpYWxvZy52dWU/NDJkNiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SYWlkZW5EaWFsb2cudnVlPzNmMDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLDZCQUE2QixPQUFPLG9DQUFvQyxpQkFBaUIsT0FBTyx5RkFBeUYsS0FBSyxpQ0FBaUMscUJBQXFCLGVBQWUsNEJBQTRCLCtCQUErQiwwQ0FBMEMsVUFBVSxLQUFLLHlCQUF5QixxQkFBcUI7QUFDOWY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeUJBO0FBQ0E7O0FBR0EsSUFBcUIsWUFBckI7QUFBQTs7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLDRCQU9PLENBQUs7QUFQWjs7QUFBQTtBQUFBLEVBQTBDLHFDQUExQzs7QUFFRSx5Q0FEQyw4Q0FBSSxDQUFDO0FBQUUsVUFBUSxFQUFFLElBQVo7QUFBa0IsU0FBTyxFQUFFLEtBQTNCO0FBQWtDLE1BQUksRUFBRTtBQUF4QyxDQUFELENBQ0wsRyxzQkFBQSxFLFNBQUEsRSxLQUFrQixDQUFsQjs7QUFFQSx5Q0FEQyw4Q0FBSSxDQUFDO0FBQUUsVUFBUSxFQUFFLEtBQVo7QUFBbUIsU0FBTyxFQUFFLEtBQTVCO0FBQW1DLE1BQUksRUFBRTtBQUF6QyxDQUFELENBQ0wsRyxzQkFBQSxFLFdBQUEsRSxLQUFvQixDQUFwQjs7QUFHQSx5Q0FEQyw4Q0FBSSxFQUNMLEcsc0JBQUEsRSxPQUFBLEVBQVUsSUFBVjs7QUFQbUIsWUFBWSw0Q0FEaEMsbURBQVMsQ0FBQztBQUFFLFlBQVUsRUFBRTtBQUFFLGtCQUFjLEVBQWQsaUNBQWM7QUFBaEI7QUFBZCxDQUFELENBQ3VCLEdBQVosWUFBWSxDQUFaO0FBQUEscUY7O0FDOUI2WixDQUFnQix3SEFBRyxFQUFDLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0EvVjtBQUN2QztBQUNMO0FBQ3NDOzs7QUFHakc7QUFDMEY7QUFDMUYsZ0JBQWdCLDhDQUFVO0FBQzFCLEVBQUUsK0NBQU07QUFDUixFQUFFLE1BQU07QUFDUixFQUFFLGVBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRWUsd0dBQWlCOztBQUVoQztBQUNtRztBQUNoRDtBQUNFO0FBQ0k7QUFDSjtBQUNyRCwyQkFBaUIsYUFBYSw2QkFBSSxDQUFDLCtCQUFLLENBQUMsbUNBQU8sQ0FBQywrQkFBSyxDQUFDIiwiZmlsZSI6ImE2ODMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnYmx1cnJlZC1vdmVybGF5Jyx7YXR0cnM6e1wic2hvd1wiOl92bS52aXNpYmxlLFwiZnVsbHNjcmVlblwiOlwiXCJ9fSxbX2MoJ3YtZGlhbG9nJyx7YXR0cnM6e1widmFsdWVcIjpfdm0udmlzaWJsZSxcIndpZHRoXCI6XCIzNTBcIixcImhpZGUtb3ZlcmxheVwiOlwiXCIsXCJkYXJrXCI6XCJcIixcInBlcnNpc3RlbnRcIjpfdm0uaGlkZUNsb3NlfSxvbjp7XCJjbGljazpvdXRzaWRlXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLmNsb3NlKCl9fX0sW19jKCd2LWNhcmQnLHtzdGF0aWNDbGFzczpcInJhaWRlbi1kaWFsb2dcIn0sWyghX3ZtLmhpZGVDbG9zZSk/X2MoJ3YtYnRuJyx7c3RhdGljQ2xhc3M6XCJyYWlkZW4tZGlhbG9nX19jbG9zZVwiLGF0dHJzOntcImljb25cIjpcIlwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5jbG9zZSgpfX19LFtfYygndi1pY29uJyxbX3ZtLl92KFwibWRpLWNsb3NlXCIpXSldLDEpOl92bS5fZSgpLF92bS5fdChcImRlZmF1bHRcIildLDIpXSwxKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5pbXBvcnQgQmx1cnJlZE92ZXJsYXkgZnJvbSAnQC9jb21wb25lbnRzL0JsdXJyZWRPdmVybGF5LnZ1ZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEVtaXQsIFZ1ZSwgUHJvcCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xuXG5AQ29tcG9uZW50KHsgY29tcG9uZW50czogeyBCbHVycmVkT3ZlcmxheSB9IH0pXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYWlkZW5EaWFsb2cgZXh0ZW5kcyBWdWUge1xuICBAUHJvcCh7IHJlcXVpcmVkOiB0cnVlLCBkZWZhdWx0OiBmYWxzZSwgdHlwZTogQm9vbGVhbiB9KVxuICB2aXNpYmxlITogYm9vbGVhbjtcbiAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIGRlZmF1bHQ6IGZhbHNlLCB0eXBlOiBCb29sZWFuIH0pXG4gIGhpZGVDbG9zZSE6IGJvb2xlYW47XG5cbiAgQEVtaXQoKVxuICBjbG9zZSgpIHt9XG59XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTQtMCEuLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTE0LTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JhaWRlbkRpYWxvZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xNC0wIS4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS0yMS0wIS4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUmFpZGVuRGlhbG9nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vUmFpZGVuRGlhbG9nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yM2M2OWUzMyZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9SYWlkZW5EaWFsb2cudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9SYWlkZW5EaWFsb2cudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL1JhaWRlbkRpYWxvZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yM2M2OWUzMyZzY29wZWQ9dHJ1ZSZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjIzYzY5ZTMzXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzXG5cbi8qIHZ1ZXRpZnktbG9hZGVyICovXG5pbXBvcnQgaW5zdGFsbENvbXBvbmVudHMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS1sb2FkZXIvbGliL3J1bnRpbWUvaW5zdGFsbENvbXBvbmVudHMuanNcIlxuaW1wb3J0IHsgVkJ0biB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJ0bic7XG5pbXBvcnQgeyBWQ2FyZCB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcmQnO1xuaW1wb3J0IHsgVkRpYWxvZyB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkRpYWxvZyc7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gJ3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkljb24nO1xuaW5zdGFsbENvbXBvbmVudHMoY29tcG9uZW50LCB7VkJ0bixWQ2FyZCxWRGlhbG9nLFZJY29ufSlcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///a683\n')},b4cc:function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":3,\\"contracts\\":{\\"ServiceRegistry\\":{\\"address\\":\\"0x8b6358D7bD07dF6a0454383249975C5575a2C4c0\\",\\"transaction_hash\\":\\"0xc7bb55a286aa1dba66dc08a8197be50e8b4dc2658ff1867a998e292c30e5cc2c\\",\\"block_number\\":7255768,\\"gas_cost\\":1980416,\\"constructor_arguments\\":[\\"0x83e827B34e85F6f9019296299d0c13d9BE2B9D70\\",\\"0x0000000000000000000000000000000000000000\\",2e+21,6,5,17280000,1000,17280000]},\\"UserDeposit\\":{\\"address\\":\\"0x87Dd0D812161Dc6D210254c7e7B81E3aD3FfD4EF\\",\\"transaction_hash\\":\\"0x9f6a524f5ce39584637d2d60a9726e1f4137de10cd892b46852f1b903680f008\\",\\"block_number\\":7255770,\\"gas_cost\\":1530254,\\"constructor_arguments\\":[\\"0x83e827B34e85F6f9019296299d0c13d9BE2B9D70\\",1.157920892373162e+77]},\\"MonitoringService\\":{\\"address\\":\\"0xFE94CfD16926af2EfD31C3F7F7d60D40180cA552\\",\\"transaction_hash\\":\\"0xd3bcc2d4d6b7cf9c0d899cc6bdde3f9ebc88769c925d0c77fa736138e5d4e4f3\\",\\"block_number\\":7255775,\\"gas_cost\\":1949685,\\"constructor_arguments\\":[\\"0x83e827B34e85F6f9019296299d0c13d9BE2B9D70\\",\\"0x8b6358D7bD07dF6a0454383249975C5575a2C4c0\\",\\"0x87Dd0D812161Dc6D210254c7e7B81E3aD3FfD4EF\\",\\"0x3DE1B1E10Ae71C3E3b793e545A047d1B4FAB587a\\"]},\\"OneToN\\":{\\"address\\":\\"0x69A69251f281eEf1926fdF7744BcE48163493E9f\\",\\"transaction_hash\\":\\"0x70e3b1d71a77a85357c14f8e1e1b9ed73696f59025e93358a540a9bfbe9c8d7f\\",\\"block_number\\":7255778,\\"gas_cost\\":1097569,\\"constructor_arguments\\":[\\"0x87Dd0D812161Dc6D210254c7e7B81E3aD3FfD4EF\\",3,\\"0x8b6358D7bD07dF6a0454383249975C5575a2C4c0\\"]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJiNGNjLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///b4cc\n')},be88:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_HeaderIdenticon_vue_vue_type_style_index_0_id_b740b99e_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("09b0");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_HeaderIdenticon_vue_vue_type_style_index_0_id_b740b99e_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_HeaderIdenticon_vue_vue_type_style_index_0_id_b740b99e_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_HeaderIdenticon_vue_vue_type_style_index_0_id_b740b99e_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXJJZGVudGljb24udnVlPzgwZjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQXVsQixDQUFnQixxbkJBQUcsRUFBQyIsImZpbGUiOiJiZTg4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9IZWFkZXJJZGVudGljb24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9Yjc0MGI5OWUmc2NvcGVkPXRydWUmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hlYWRlcklkZW50aWNvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1iNzQwYjk5ZSZzY29wZWQ9dHJ1ZSZsYW5nPXNjc3MmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///be88\n')},bf6c:function(module){eval('module.exports = JSON.parse("{\\"sdk\\":\\"0.6.0\\",\\"contracts\\":\\"0.36.2\\"}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJiZjZjLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///bf6c\n')},c6c9:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ActionButton_vue_vue_type_style_index_0_id_de9d7fe4_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("51ce");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ActionButton_vue_vue_type_style_index_0_id_de9d7fe4_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ActionButton_vue_vue_type_style_index_0_id_de9d7fe4_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ActionButton_vue_vue_type_style_index_0_id_de9d7fe4_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BY3Rpb25CdXR0b24udnVlP2EwYmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQW9sQixDQUFnQixrbkJBQUcsRUFBQyIsImZpbGUiOiJjNmM5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BY3Rpb25CdXR0b24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZGU5ZDdmZTQmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FjdGlvbkJ1dHRvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1kZTlkN2ZlNCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///c6c9\n')},c998:function(module){eval('module.exports = JSON.parse("{\\"contracts_version\\":null,\\"chain_id\\":5,\\"contracts\\":{\\"SecretRegistry\\":{\\"address\\":\\"0xfe26Dc87Fd7Ed01AC3429d7913738e2fae018BB6\\",\\"transaction_hash\\":\\"0xf015b6c93951e645c45d4632dcd25de2869bd6613b5b59c53e2453c168c36447\\",\\"block_number\\":2114499,\\"gas_cost\\":247082,\\"constructor_arguments\\":[]},\\"TokenNetworkRegistry\\":{\\"address\\":\\"0x9b0c8C8C75904CEf5B7a8dbF59c3459Ea85c6526\\",\\"transaction_hash\\":\\"0xa77a53156131d50af579a3ab22e80af01eb3e40405292d78e80c8c4d238d4886\\",\\"block_number\\":2114501,\\"gas_cost\\":4001114,\\"constructor_arguments\\":[\\"0xfe26Dc87Fd7Ed01AC3429d7913738e2fae018BB6\\",5,20,555428,1.157920892373162e+77]}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjOTk4LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///c998\n')},cb0b:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_BlurredOverlay_vue_vue_type_style_index_0_id_1d51571c_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("df2d");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_BlurredOverlay_vue_vue_type_style_index_0_id_1d51571c_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_BlurredOverlay_vue_vue_type_style_index_0_id_1d51571c_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_ref_21_0_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_BlurredOverlay_vue_vue_type_style_index_0_id_1d51571c_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9CbHVycmVkT3ZlcmxheS52dWU/ZmM0MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBc2xCLENBQWdCLG9uQkFBRyxFQUFDIiwiZmlsZSI6ImNiMGIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnktbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMjEtMCEuLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0JsdXJyZWRPdmVybGF5LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTFkNTE1NzFjJnNjb3BlZD10cnVlJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tOC1vbmVPZi0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOC1vbmVPZi0xLTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTgtb25lT2YtMS0zIS4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5LWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTIxLTAhLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9CbHVycmVkT3ZlcmxheS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xZDUxNTcxYyZzY29wZWQ9dHJ1ZSZsYW5nPXNjc3MmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///cb0b\n')},cd49:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.runtime.esm.js\nvar vue_runtime_esm = __webpack_require__("2b0e");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=template&id=52aa355e&scoped=true&\nvar Appvue_type_template_id_52aa355e_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-app\',{attrs:{"dark":""}},[_c(\'div\',{attrs:{"id":"application-wrapper"}},[_c(\'router-view\',{attrs:{"name":"modal"}}),_c(\'div\',{attrs:{"id":"application-content"}},[_c(\'app-header\'),_c(\'v-content\',[_c(\'v-container\',{staticClass:"application__container fill-height",attrs:{"fluid":""}},[_c(\'router-view\')],1)],1)],1)],1),_c(\'div\',{staticClass:"policy"},[_c(\'a\',{attrs:{"href":"https://raiden.network/privacy.html","target":"_blank"}},[_vm._v(" "+_vm._s(_vm.$t(\'application.privacy-policy\'))+" ")])]),_c(\'offline-snackbar\'),_c(\'update-snackbar\')],1)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/App.vue?vue&type=template&id=52aa355e&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__("9ab4");\n\n// EXTERNAL MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\nvar vue_property_decorator = __webpack_require__("60a3");\n\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__("2f62");\n\n// EXTERNAL MODULE: ./src/mixins/navigation-mixin.ts\nvar navigation_mixin = __webpack_require__("152b");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/AppHeader.vue?vue&type=template&id=6ccf2084&scoped=true&\nvar AppHeadervue_type_template_id_6ccf2084_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"app-header"},[_c(\'v-row\',{staticClass:"app-header__top",attrs:{"justify":"center","align":"center","no-gutters":""}},[_c(\'v-col\',{attrs:{"cols":"12"}},[_c(\'div\',{staticClass:"app-header__top__content"},[_c(\'div\',{staticClass:"app-header__top__content__back"},[(_vm.canGoBack)?_c(\'v-btn\',{attrs:{"height":"40px","width":"40px","text":"","icon":""},on:{"click":function($event){return _vm.onBackClicked()}}},[_c(\'v-img\',{attrs:{"src":__webpack_require__("73da"),"max-width":"34px"}})],1):_vm._e()],1),_c(\'v-spacer\'),_c(\'v-col\',[_c(\'div\',{staticClass:"app-header__top__content__title"},[_vm._v(" "+_vm._s(_vm.$route.meta.title)+" ")]),(!_vm.loading && _vm.defaultAccount)?_c(\'div\',{staticClass:"app-header__top__content__network"},[_vm._v(" "+_vm._s(_vm.network)+" ")]):_vm._e()]),_c(\'v-spacer\'),_c(\'span\',{staticClass:"app-header__account-wrapper"},[_c(\'header-identicon\',{nativeOn:{"click":function($event){return _vm.navigateToGeneralHome()}}})],1)],1)])],1),_c(\'v-row\',{staticClass:"app-header__bottom",attrs:{"align":"center","no-gutters":""}},[(!_vm.loading && _vm.defaultAccount)?_c(\'v-col\',{attrs:{"cols":"12"}},[_c(\'div\',{staticClass:"app-header__bottom__address text-left"},[_c(\'address-display\',{attrs:{"address":_vm.defaultAccount}})],1)]):_vm._e()],1)],1)}\nvar AppHeadervue_type_template_id_6ccf2084_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/AppHeader.vue?vue&type=template&id=6ccf2084&scoped=true&\n\n// EXTERNAL MODULE: ./src/router/route-names.ts\nvar route_names = __webpack_require__("80bf");\n\n// EXTERNAL MODULE: ./src/components/HeaderIdenticon.vue + 4 modules\nvar HeaderIdenticon = __webpack_require__("233e");\n\n// EXTERNAL MODULE: ./src/components/AddressDisplay.vue + 4 modules\nvar AddressDisplay = __webpack_require__("9302");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/AppHeader.vue?vue&type=script&lang=ts&\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\nvar AppHeadervue_type_script_lang_ts_AppHeader = /*#__PURE__*/function (_Mixins) {\n  _inherits(AppHeader, _Mixins);\n\n  var _super = _createSuper(AppHeader);\n\n  function AppHeader() {\n    _classCallCheck(this, AppHeader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AppHeader, [{\n    key: "canGoBack",\n    get: function get() {\n      var routesWithoutBackBtn = [route_names["a" /* RouteNames */].HOME, route_names["a" /* RouteNames */].TRANSFER];\n      return !routesWithoutBackBtn.includes(this.$route.name);\n    }\n  }]);\n\n  return AppHeader;\n}(Object(vue_property_decorator["c" /* Mixins */])(navigation_mixin["a" /* default */]));\n\nAppHeadervue_type_script_lang_ts_AppHeader = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  components: {\n    HeaderIdenticon: HeaderIdenticon["a" /* default */],\n    AddressDisplay: AddressDisplay["a" /* default */]\n  },\n  computed: _objectSpread({}, Object(vuex_esm["c" /* mapState */])([\'loading\', \'defaultAccount\']), {}, Object(vuex_esm["b" /* mapGetters */])([\'network\']))\n})], AppHeadervue_type_script_lang_ts_AppHeader);\n/* harmony default export */ var AppHeadervue_type_script_lang_ts_ = (AppHeadervue_type_script_lang_ts_AppHeader);\n// CONCATENATED MODULE: ./src/components/AppHeader.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_AppHeadervue_type_script_lang_ts_ = (AppHeadervue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/AppHeader.vue?vue&type=style&index=0&id=6ccf2084&lang=scss&scoped=true&\nvar AppHeadervue_type_style_index_0_id_6ccf2084_lang_scss_scoped_true_ = __webpack_require__("9e24");\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("2877");\n\n// EXTERNAL MODULE: ./node_modules/vuetify-loader/lib/runtime/installComponents.js\nvar installComponents = __webpack_require__("6544");\nvar installComponents_default = /*#__PURE__*/__webpack_require__.n(installComponents);\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VBtn/VBtn.js\nvar VBtn = __webpack_require__("8336");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VCol.js\nvar VCol = __webpack_require__("62ad");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VImg/VImg.js + 2 modules\nvar VImg = __webpack_require__("adda");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VRow.js\nvar VRow = __webpack_require__("0fd9");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VSpacer.js\nvar VSpacer = __webpack_require__("2fa4");\n\n// CONCATENATED MODULE: ./src/components/AppHeader.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_AppHeadervue_type_script_lang_ts_,\n  AppHeadervue_type_template_id_6ccf2084_scoped_true_render,\n  AppHeadervue_type_template_id_6ccf2084_scoped_true_staticRenderFns,\n  false,\n  null,\n  "6ccf2084",\n  null\n  \n)\n\n/* harmony default export */ var components_AppHeader = (component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\n\ninstallComponents_default()(component, {VBtn: VBtn["a" /* default */],VCol: VCol["a" /* default */],VImg: VImg["a" /* default */],VRow: VRow["a" /* default */],VSpacer: VSpacer["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/OfflineSnackbar.vue?vue&type=template&id=11200242&\nvar OfflineSnackbarvue_type_template_id_11200242_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.offline)?_c(\'span\',[_c(\'blurred-overlay\',{attrs:{"show":_vm.offline,"fullscreen":true}}),_c(\'v-snackbar\',{attrs:{"timeout":0,"color":"error"},model:{value:(_vm.offline),callback:function ($$v) {_vm.offline=$$v},expression:"offline"}},[_vm._v(" "+_vm._s(_vm.$t(\'general.offline\'))+" "),_c(\'v-icon\',[_vm._v("mdi-alert")])],1)],1):_vm._e()}\nvar OfflineSnackbarvue_type_template_id_11200242_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/OfflineSnackbar.vue?vue&type=template&id=11200242&\n\n// EXTERNAL MODULE: ./src/components/BlurredOverlay.vue + 4 modules\nvar BlurredOverlay = __webpack_require__("8e33");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/OfflineSnackbar.vue?vue&type=script&lang=ts&\nfunction OfflineSnackbarvue_type_script_lang_ts_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { OfflineSnackbarvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { OfflineSnackbarvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return OfflineSnackbarvue_type_script_lang_ts_typeof(obj); }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) OfflineSnackbarvue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) OfflineSnackbarvue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_createSuper(Derived) { return function () { var Super = OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf(Derived), result; if (OfflineSnackbarvue_type_script_lang_ts_isNativeReflectConstruct()) { var NewTarget = OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return OfflineSnackbarvue_type_script_lang_ts_possibleConstructorReturn(this, result); }; }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (OfflineSnackbarvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return OfflineSnackbarvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf(o) { OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return OfflineSnackbarvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) OfflineSnackbarvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction OfflineSnackbarvue_type_script_lang_ts_setPrototypeOf(o, p) { OfflineSnackbarvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return OfflineSnackbarvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\nvar OfflineSnackbar = /*#__PURE__*/function (_Vue) {\n  OfflineSnackbarvue_type_script_lang_ts_inherits(OfflineSnackbar, _Vue);\n\n  var _super = OfflineSnackbarvue_type_script_lang_ts_createSuper(OfflineSnackbar);\n\n  function OfflineSnackbar() {\n    var _this;\n\n    OfflineSnackbarvue_type_script_lang_ts_classCallCheck(this, OfflineSnackbar);\n\n    _this = _super.apply(this, arguments);\n    _this.offline = false;\n    return _this;\n  }\n\n  OfflineSnackbarvue_type_script_lang_ts_createClass(OfflineSnackbar, [{\n    key: "handleOnline",\n    value: function handleOnline() {\n      this.offline = false;\n    }\n  }, {\n    key: "handleOffline",\n    value: function handleOffline() {\n      this.offline = true;\n    }\n  }, {\n    key: "mounted",\n    value: function mounted() {\n      this.offline = !navigator.onLine;\n      window.addEventListener(\'offline\', this.handleOffline);\n      window.addEventListener(\'online\', this.handleOnline);\n    }\n  }, {\n    key: "beforeDestroy",\n    value: function beforeDestroy() {\n      window.removeEventListener(\'offline\', this.handleOffline);\n      window.removeEventListener(\'online\', this.handleOnline);\n    }\n  }]);\n\n  return OfflineSnackbar;\n}(vue_property_decorator["e" /* Vue */]);\n\nOfflineSnackbar = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  components: {\n    BlurredOverlay: BlurredOverlay["a" /* default */]\n  }\n})], OfflineSnackbar);\n/* harmony default export */ var OfflineSnackbarvue_type_script_lang_ts_ = (OfflineSnackbar);\n// CONCATENATED MODULE: ./src/components/OfflineSnackbar.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_OfflineSnackbarvue_type_script_lang_ts_ = (OfflineSnackbarvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VIcon/VIcon.js\nvar VIcon = __webpack_require__("132d");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VSnackbar/VSnackbar.js\nvar VSnackbar = __webpack_require__("2db4");\n\n// CONCATENATED MODULE: ./src/components/OfflineSnackbar.vue\n\n\n\n\n\n/* normalize component */\n\nvar OfflineSnackbar_component = Object(componentNormalizer["a" /* default */])(\n  components_OfflineSnackbarvue_type_script_lang_ts_,\n  OfflineSnackbarvue_type_template_id_11200242_render,\n  OfflineSnackbarvue_type_template_id_11200242_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var components_OfflineSnackbar = (OfflineSnackbar_component.exports);\n\n/* vuetify-loader */\n\n\n\ninstallComponents_default()(OfflineSnackbar_component, {VIcon: VIcon["a" /* default */],VSnackbar: VSnackbar["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/UpdateSnackbar.vue?vue&type=template&id=1d4ed306&\nvar UpdateSnackbarvue_type_template_id_1d4ed306_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.updateAvailable)?_c(\'span\',[_c(\'blurred-overlay\',{attrs:{"show":_vm.updateAvailable,"fullscreen":true}}),_c(\'v-snackbar\',{attrs:{"timeout":0,"color":"primary"},model:{value:(_vm.updateAvailable),callback:function ($$v) {_vm.updateAvailable=$$v},expression:"updateAvailable"}},[_vm._v(" "+_vm._s(_vm.$t(\'update.available\'))+" "),_c(\'v-btn\',{attrs:{"dark":"","text":"","loading":_vm.isUpdating},on:{"click":_vm.update}},[_vm._v(" "+_vm._s(_vm.$t(\'update.update\'))+" ")])],1)],1):_vm._e()}\nvar UpdateSnackbarvue_type_template_id_1d4ed306_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/UpdateSnackbar.vue?vue&type=template&id=1d4ed306&\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/UpdateSnackbar.vue?vue&type=script&lang=ts&\nfunction UpdateSnackbarvue_type_script_lang_ts_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { UpdateSnackbarvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { UpdateSnackbarvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return UpdateSnackbarvue_type_script_lang_ts_typeof(obj); }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) UpdateSnackbarvue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) UpdateSnackbarvue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_createSuper(Derived) { return function () { var Super = UpdateSnackbarvue_type_script_lang_ts_getPrototypeOf(Derived), result; if (UpdateSnackbarvue_type_script_lang_ts_isNativeReflectConstruct()) { var NewTarget = UpdateSnackbarvue_type_script_lang_ts_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return UpdateSnackbarvue_type_script_lang_ts_possibleConstructorReturn(this, result); }; }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (UpdateSnackbarvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return UpdateSnackbarvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_getPrototypeOf(o) { UpdateSnackbarvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UpdateSnackbarvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) UpdateSnackbarvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction UpdateSnackbarvue_type_script_lang_ts_setPrototypeOf(o, p) { UpdateSnackbarvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UpdateSnackbarvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n/* istanbul ignore file */\n\n\n\n\nvar UpdateSnackbar = /*#__PURE__*/function (_Vue) {\n  UpdateSnackbarvue_type_script_lang_ts_inherits(UpdateSnackbar, _Vue);\n\n  var _super = UpdateSnackbarvue_type_script_lang_ts_createSuper(UpdateSnackbar);\n\n  function UpdateSnackbar() {\n    var _this;\n\n    UpdateSnackbarvue_type_script_lang_ts_classCallCheck(this, UpdateSnackbar);\n\n    _this = _super.apply(this, arguments);\n    _this.isUpdating = false;\n    _this.updateAvailable = false;\n    _this.swRegistration = null;\n    return _this;\n  }\n\n  UpdateSnackbarvue_type_script_lang_ts_createClass(UpdateSnackbar, [{\n    key: "created",\n    value: function created() {\n      var _this2 = this;\n\n      document.addEventListener(\'swUpdated\', this.handleSWUpdate, {\n        once: true\n      });\n      navigator.serviceWorker.addEventListener(\'controllerchange\', function () {\n        setTimeout(function () {\n          _this2.updateAvailable = false;\n          window.location.reload();\n        }, 1500);\n      });\n    }\n  }, {\n    key: "beforeDestroy",\n    value: function beforeDestroy() {\n      document.removeEventListener(\'swUpdated\', this.handleSWUpdate);\n    }\n  }, {\n    key: "handleSWUpdate",\n    value: function handleSWUpdate(event) {\n      this.swRegistration = event.detail;\n      this.updateAvailable = true;\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      this.isUpdating = true;\n\n      if (!this.swRegistration || !this.swRegistration.waiting) {\n        return;\n      }\n\n      this.swRegistration.waiting.postMessage(\'skipWaiting\');\n    }\n  }]);\n\n  return UpdateSnackbar;\n}(vue_property_decorator["e" /* Vue */]);\n\nUpdateSnackbar = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  components: {\n    BlurredOverlay: BlurredOverlay["a" /* default */]\n  }\n})], UpdateSnackbar);\n/* harmony default export */ var UpdateSnackbarvue_type_script_lang_ts_ = (UpdateSnackbar);\n// CONCATENATED MODULE: ./src/components/UpdateSnackbar.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_UpdateSnackbarvue_type_script_lang_ts_ = (UpdateSnackbarvue_type_script_lang_ts_); \n// CONCATENATED MODULE: ./src/components/UpdateSnackbar.vue\n\n\n\n\n\n/* normalize component */\n\nvar UpdateSnackbar_component = Object(componentNormalizer["a" /* default */])(\n  components_UpdateSnackbarvue_type_script_lang_ts_,\n  UpdateSnackbarvue_type_template_id_1d4ed306_render,\n  UpdateSnackbarvue_type_template_id_1d4ed306_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var components_UpdateSnackbar = (UpdateSnackbar_component.exports);\n\n/* vuetify-loader */\n\n\n\ninstallComponents_default()(UpdateSnackbar_component, {VBtn: VBtn["a" /* default */],VSnackbar: VSnackbar["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=script&lang=ts&\nfunction Appvue_type_script_lang_ts_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Appvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { Appvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Appvue_type_script_lang_ts_typeof(obj); }\n\nfunction Appvue_type_script_lang_ts_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction Appvue_type_script_lang_ts_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Appvue_type_script_lang_ts_ownKeys(Object(source), true).forEach(function (key) { Appvue_type_script_lang_ts_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Appvue_type_script_lang_ts_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Appvue_type_script_lang_ts_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Appvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Appvue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Appvue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) Appvue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) Appvue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Appvue_type_script_lang_ts_createSuper(Derived) { return function () { var Super = Appvue_type_script_lang_ts_getPrototypeOf(Derived), result; if (Appvue_type_script_lang_ts_isNativeReflectConstruct()) { var NewTarget = Appvue_type_script_lang_ts_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Appvue_type_script_lang_ts_possibleConstructorReturn(this, result); }; }\n\nfunction Appvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (Appvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return Appvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction Appvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Appvue_type_script_lang_ts_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction Appvue_type_script_lang_ts_getPrototypeOf(o) { Appvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Appvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction Appvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Appvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction Appvue_type_script_lang_ts_setPrototypeOf(o, p) { Appvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Appvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\nvar App = /*#__PURE__*/function (_Mixins) {\n  Appvue_type_script_lang_ts_inherits(App, _Mixins);\n\n  var _super = Appvue_type_script_lang_ts_createSuper(App);\n\n  function App() {\n    Appvue_type_script_lang_ts_classCallCheck(this, App);\n\n    return _super.apply(this, arguments);\n  }\n\n  Appvue_type_script_lang_ts_createClass(App, [{\n    key: "onIsConnectedChange",\n    value: function onIsConnectedChange() {\n      if (!this.isConnected) {\n        this.navigateToHome();\n      }\n    }\n  }, {\n    key: "destroyed",\n    value: function destroyed() {\n      this.$raiden.disconnect();\n    }\n  }]);\n\n  return App;\n}(Object(vue_property_decorator["c" /* Mixins */])(navigation_mixin["a" /* default */]));\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["f" /* Watch */])(\'isConnected\', {\n  immediate: true\n})], App.prototype, "onIsConnectedChange", null);\n\nApp = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  computed: Appvue_type_script_lang_ts_objectSpread({}, Object(vuex_esm["b" /* mapGetters */])([\'isConnected\'])),\n  components: {\n    AppHeader: components_AppHeader,\n    OfflineSnackbar: components_OfflineSnackbar,\n    UpdateSnackbar: components_UpdateSnackbar\n  }\n})], App);\n/* harmony default export */ var Appvue_type_script_lang_ts_ = (App);\n// CONCATENATED MODULE: ./src/App.vue?vue&type=script&lang=ts&\n /* harmony default export */ var src_Appvue_type_script_lang_ts_ = (Appvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/App.vue?vue&type=style&index=0&id=52aa355e&lang=scss&scoped=true&\nvar Appvue_type_style_index_0_id_52aa355e_lang_scss_scoped_true_ = __webpack_require__("a53d");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VApp/VApp.js\nvar VApp = __webpack_require__("7496");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VGrid/VContainer.js + 1 modules\nvar VContainer = __webpack_require__("a523");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VContent/VContent.js + 1 modules\nvar VContent = __webpack_require__("a75b");\n\n// CONCATENATED MODULE: ./src/App.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar App_component = Object(componentNormalizer["a" /* default */])(\n  src_Appvue_type_script_lang_ts_,\n  Appvue_type_template_id_52aa355e_scoped_true_render,\n  staticRenderFns,\n  false,\n  null,\n  "52aa355e",\n  null\n  \n)\n\n/* harmony default export */ var src_App = (App_component.exports);\n\n/* vuetify-loader */\n\n\n\n\ninstallComponents_default()(App_component, {VApp: VApp["a" /* default */],VContainer: VContainer["a" /* default */],VContent: VContent["a" /* default */]})\n\n// EXTERNAL MODULE: ./node_modules/vue-class-component/dist/vue-class-component.esm.js\nvar vue_class_component_esm = __webpack_require__("2fe1");\n\n// CONCATENATED MODULE: ./src/plugins/class-component.hooks.ts\n/* istanbul ignore file */\n // Register the router hooks with their names\n\nvue_class_component_esm["b" /* default */].registerHooks([\'beforeRouteEnter\', \'beforeRouteLeave\', \'beforeRouteUpdate\' // for vue-router 2.2+\n]);\n// EXTERNAL MODULE: ./src/filters.ts\nvar filters = __webpack_require__("0f75");\n\n// EXTERNAL MODULE: ./node_modules/vue-router/dist/vue-router.esm.js\nvar vue_router_esm = __webpack_require__("8c4f");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=template&id=02ef831a&scoped=true&\nvar Homevue_type_template_id_02ef831a_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-container\',{staticClass:"home",attrs:{"fluid":""}},[(!_vm.inaccessible && _vm.isConnected)?_c(\'no-tokens\'):_c(\'div\',[_c(\'v-row\',{attrs:{"no-gutters":""}},[_c(\'v-col\',{attrs:{"cols":"12"}},[_c(\'div\',{staticClass:"home__logo-container"},[_c(\'v-img\',{staticClass:"home__logo-container__logo",attrs:{"src":__webpack_require__("9b19"),"aspect-ratio":"1","contain":""}})],1)])],1),_c(\'v-row\',{attrs:{"no-gutters":""}},[_c(\'v-col\',{attrs:{"cols":"12"}},[_c(\'div\',{staticClass:"home__app-welcome text-center"},[_vm._v(" "+_vm._s(_vm.$t(\'home.welcome\'))+" ")])])],1),_c(\'v-row\',{attrs:{"no-gutters":""}},[_c(\'v-col\',{attrs:{"cols":"12"}},[_c(\'div\',{staticClass:"home__disclaimer text-center font-weight-light"},[_vm._v(" "+_vm._s(_vm.$t(\'home.disclaimer\'))+" ")]),_c(\'i18n\',{staticClass:"home__getting-started text-center font-weight-light",attrs:{"path":"home.getting-started.description","tag":"div"}},[_c(\'a\',{attrs:{"href":"https://github.com/raiden-network/light-client#getting-started","target":"_blank"}},[_vm._v(" "+_vm._s(_vm.$t(\'home.getting-started.link-name\'))+" ")])])],1)],1),_c(\'action-button\',{attrs:{"enabled":"","text":_vm.$t(\'home.connect-button\'),"sticky":""},on:{"click":function($event){_vm.connectDialog = true}}}),_c(\'connect-dialog\',{attrs:{"connecting":_vm.connecting,"connecting-subkey":_vm.connectingSubkey,"visible":_vm.connectDialog},on:{"connect":_vm.connect,"close":function($event){_vm.connectDialog = false}}})],1)],1)}\nvar Homevue_type_template_id_02ef831a_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/views/Home.vue?vue&type=template&id=02ef831a&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__("a34a");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// EXTERNAL MODULE: ./src/model/types.ts\nvar types = __webpack_require__("87a2");\n\n// EXTERNAL MODULE: ./src/components/ActionButton.vue + 4 modules\nvar ActionButton = __webpack_require__("750b");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ConnectDialog.vue?vue&type=template&id=3604c23c&scoped=true&\nvar ConnectDialogvue_type_template_id_3604c23c_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'raiden-dialog\',{staticClass:"connect",attrs:{"visible":_vm.visible,"hide-close":_vm.hideClose},on:{"close":_vm.close}},[_c(\'v-card-title\',[_vm._v(" "+_vm._s(_vm.$t(\'home.connect-dialog.connect-title\'))+" ")]),(_vm.injectedProvider)?_c(\'div\',[_c(\'div\',{staticClass:"connect__button"},[_c(\'action-button\',{attrs:{"text":_vm.$t(\'home.connect-dialog.web3-provider\'),"enabled":!_vm.connecting && !_vm.connectingSubkey,"loading":_vm.connecting},on:{"click":function($event){return _vm.connect(_vm.stateBackup)}}})],1),_c(\'div\',{staticClass:"text-center font-weight-light"},[_vm._v(" "+_vm._s(_vm.$t(\'home.connect-dialog.divider\'))+" ")]),(!_vm.connectingSubkey)?_c(\'i18n\',{staticClass:"connect__raiden-account text-center font-weight-light",attrs:{"path":"home.connect-dialog.raiden-account.description","tag":"div"}},[(!_vm.connecting)?_c(\'a\',{on:{"click":function($event){return _vm.connect(_vm.stateBackup, true)}}},[_vm._v(" "+_vm._s(_vm.$t(\'home.connect-dialog.raiden-account.link-name\'))+" ")]):_c(\'span\',[_vm._v(" "+_vm._s(_vm.$t(\'home.connect-dialog.raiden-account.link-name\'))+" ")])]):_c(\'div\',{staticClass:"connect__raiden-account-spinner text-center"},[_c(\'v-progress-circular\',{attrs:{"size":30,"width":1,"indeterminate":""}})],1)],1):_vm._e(),(_vm.accessDenied)?_c(\'no-access-message\',{attrs:{"reason":_vm.accessDenied}}):_vm._e(),(!_vm.injectedProvider)?_c(\'v-card-text\',[_c(\'div\',{staticClass:"text-center"},[_vm._v(" "+_vm._s(_vm.$t(\'home.connect-dialog.no-provider\'))+" ")])]):_vm._e()],1)}\nvar ConnectDialogvue_type_template_id_3604c23c_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/ConnectDialog.vue?vue&type=template&id=3604c23c&scoped=true&\n\n// CONCATENATED MODULE: ./src/services/web3-provider.ts\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction web3_provider_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction web3_provider_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction web3_provider_createClass(Constructor, protoProps, staticProps) { if (protoProps) web3_provider_defineProperties(Constructor.prototype, protoProps); if (staticProps) web3_provider_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar web3_provider_Web3Provider = /*#__PURE__*/function () {\n  function Web3Provider() {\n    web3_provider_classCallCheck(this, Web3Provider);\n  }\n\n  web3_provider_createClass(Web3Provider, null, [{\n    key: "provider",\n    value: function () {\n      var _provider = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee(config) {\n        var ethereum, provider;\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                ethereum = window.ethereum;\n                provider = null;\n\n                if (!config) {\n                  _context.next = 6;\n                  break;\n                }\n\n                provider = "https://".concat(config.INFURA_ENDPOINT);\n                _context.next = 13;\n                break;\n\n              case 6:\n                if (!(typeof ethereum !== \'undefined\')) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 9;\n                return ethereum.enable();\n\n              case 9:\n                provider = ethereum;\n                _context.next = 13;\n                break;\n\n              case 12:\n                if (window.web3) {\n                  provider = window.web3.currentProvider;\n                }\n\n              case 13:\n                /* istanbul ignore next */\n                if (provider && provider.isMetaMask) {\n                  provider.autoRefreshOnNetworkChange = false;\n                  provider.on(\'networkChanged\', function () {\n                    return window.location.replace(window.location.origin);\n                  });\n                }\n\n                return _context.abrupt("return", provider);\n\n              case 15:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function provider(_x) {\n        return _provider.apply(this, arguments);\n      }\n\n      return provider;\n    }()\n  }]);\n\n  return Web3Provider;\n}();\n\nweb3_provider_Web3Provider.injectedWeb3Available = function () {\n  return window.ethereum || window.web3;\n};\n// EXTERNAL MODULE: ./src/components/RaidenDialog.vue + 4 modules\nvar RaidenDialog = __webpack_require__("a683");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/NoAccessMessage.vue?vue&type=template&id=7b92b083&scoped=true&\nvar NoAccessMessagevue_type_template_id_7b92b083_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'v-alert\',{staticClass:"no-access-message",attrs:{"value":true,"color":"error","icon":"warning"}},[_c(\'div\',{staticClass:"font-weight-light no-access-message__message"},[(_vm.networkUnsupported)?_c(\'span\',[_vm._v(" "+_vm._s(_vm.$t(\'no-access.unsupported-network\'))+" ")]):_vm._e(),(_vm.initializationFailed)?_c(\'span\',[_vm._v(" "+_vm._s(_vm.$t(\'no-access.sdk-initialization-failure\'))+" ")]):_vm._e(),(_vm.rdnStateMigration)?_c(\'span\',[_vm._v(" "+_vm._s(_vm.$t(\'no-access.rdn-state-migration\'))+" ")]):_c(\'span\',[_vm._v(_vm._s(_vm.$t(\'no-access.generic-error\')))])])])}\nvar NoAccessMessagevue_type_template_id_7b92b083_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/NoAccessMessage.vue?vue&type=template&id=7b92b083&scoped=true&\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/NoAccessMessage.vue?vue&type=script&lang=ts&\nfunction NoAccessMessagevue_type_script_lang_ts_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { NoAccessMessagevue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { NoAccessMessagevue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return NoAccessMessagevue_type_script_lang_ts_typeof(obj); }\n\nfunction NoAccessMessagevue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction NoAccessMessagevue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction NoAccessMessagevue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) NoAccessMessagevue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) NoAccessMessagevue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction NoAccessMessagevue_type_script_lang_ts_createSuper(Derived) { return function () { var Super = NoAccessMessagevue_type_script_lang_ts_getPrototypeOf(Derived), result; if (NoAccessMessagevue_type_script_lang_ts_isNativeReflectConstruct()) { var NewTarget = NoAccessMessagevue_type_script_lang_ts_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return NoAccessMessagevue_type_script_lang_ts_possibleConstructorReturn(this, result); }; }\n\nfunction NoAccessMessagevue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (NoAccessMessagevue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return NoAccessMessagevue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction NoAccessMessagevue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction NoAccessMessagevue_type_script_lang_ts_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction NoAccessMessagevue_type_script_lang_ts_getPrototypeOf(o) { NoAccessMessagevue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return NoAccessMessagevue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction NoAccessMessagevue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) NoAccessMessagevue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction NoAccessMessagevue_type_script_lang_ts_setPrototypeOf(o, p) { NoAccessMessagevue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return NoAccessMessagevue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\nvar NoAccessMessagevue_type_script_lang_ts_NoAccessMessage = /*#__PURE__*/function (_Vue) {\n  NoAccessMessagevue_type_script_lang_ts_inherits(NoAccessMessage, _Vue);\n\n  var _super = NoAccessMessagevue_type_script_lang_ts_createSuper(NoAccessMessage);\n\n  function NoAccessMessage() {\n    NoAccessMessagevue_type_script_lang_ts_classCallCheck(this, NoAccessMessage);\n\n    return _super.apply(this, arguments);\n  }\n\n  NoAccessMessagevue_type_script_lang_ts_createClass(NoAccessMessage, [{\n    key: "networkUnsupported",\n    get: function get() {\n      return this.reason === types["a" /* DeniedReason */].UNSUPPORTED_NETWORK;\n    }\n  }, {\n    key: "initializationFailed",\n    get: function get() {\n      return this.reason === types["a" /* DeniedReason */].INITIALIZATION_FAILED;\n    }\n  }, {\n    key: "rdnStateMigration",\n    get: function get() {\n      return this.reason === types["a" /* DeniedReason */].RDN_STATE_MIGRATION;\n    }\n  }]);\n\n  return NoAccessMessage;\n}(vue_property_decorator["e" /* Vue */]);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: true\n})], NoAccessMessagevue_type_script_lang_ts_NoAccessMessage.prototype, "reason", void 0);\n\nNoAccessMessagevue_type_script_lang_ts_NoAccessMessage = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({})], NoAccessMessagevue_type_script_lang_ts_NoAccessMessage);\n/* harmony default export */ var NoAccessMessagevue_type_script_lang_ts_ = (NoAccessMessagevue_type_script_lang_ts_NoAccessMessage);\n// CONCATENATED MODULE: ./src/components/NoAccessMessage.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_NoAccessMessagevue_type_script_lang_ts_ = (NoAccessMessagevue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/NoAccessMessage.vue?vue&type=style&index=0&id=7b92b083&scoped=true&lang=scss&\nvar NoAccessMessagevue_type_style_index_0_id_7b92b083_scoped_true_lang_scss_ = __webpack_require__("753f");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VAlert/VAlert.js\nvar VAlert = __webpack_require__("0798");\n\n// CONCATENATED MODULE: ./src/components/NoAccessMessage.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar NoAccessMessage_component = Object(componentNormalizer["a" /* default */])(\n  components_NoAccessMessagevue_type_script_lang_ts_,\n  NoAccessMessagevue_type_template_id_7b92b083_scoped_true_render,\n  NoAccessMessagevue_type_template_id_7b92b083_scoped_true_staticRenderFns,\n  false,\n  null,\n  "7b92b083",\n  null\n  \n)\n\n/* harmony default export */ var components_NoAccessMessage = (NoAccessMessage_component.exports);\n\n/* vuetify-loader */\n\n\ninstallComponents_default()(NoAccessMessage_component, {VAlert: VAlert["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/ConnectDialog.vue?vue&type=script&lang=ts&\nfunction ConnectDialogvue_type_script_lang_ts_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { ConnectDialogvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { ConnectDialogvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return ConnectDialogvue_type_script_lang_ts_typeof(obj); }\n\nfunction ConnectDialogvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ConnectDialogvue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ConnectDialogvue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) ConnectDialogvue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) ConnectDialogvue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction ConnectDialogvue_type_script_lang_ts_createSuper(Derived) { return function () { var Super = ConnectDialogvue_type_script_lang_ts_getPrototypeOf(Derived), result; if (ConnectDialogvue_type_script_lang_ts_isNativeReflectConstruct()) { var NewTarget = ConnectDialogvue_type_script_lang_ts_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ConnectDialogvue_type_script_lang_ts_possibleConstructorReturn(this, result); }; }\n\nfunction ConnectDialogvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (ConnectDialogvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return ConnectDialogvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction ConnectDialogvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction ConnectDialogvue_type_script_lang_ts_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ConnectDialogvue_type_script_lang_ts_getPrototypeOf(o) { ConnectDialogvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ConnectDialogvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction ConnectDialogvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) ConnectDialogvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction ConnectDialogvue_type_script_lang_ts_setPrototypeOf(o, p) { ConnectDialogvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ConnectDialogvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\nvar ConnectDialogvue_type_script_lang_ts_ConnectDialog = /*#__PURE__*/function (_Vue) {\n  ConnectDialogvue_type_script_lang_ts_inherits(ConnectDialog, _Vue);\n\n  var _super = ConnectDialogvue_type_script_lang_ts_createSuper(ConnectDialog);\n\n  function ConnectDialog() {\n    var _this;\n\n    ConnectDialogvue_type_script_lang_ts_classCallCheck(this, ConnectDialog);\n\n    _this = _super.apply(this, arguments);\n    _this.hideClose = false;\n    return _this;\n  }\n\n  ConnectDialogvue_type_script_lang_ts_createClass(ConnectDialog, [{\n    key: "close",\n    value: function close() {}\n  }, {\n    key: "connect",\n    value: function connect(uploadedState, subkey) {\n      return {\n        uploadedState: uploadedState,\n        subkey: subkey\n      };\n    }\n  }, {\n    key: "injectedProvider",\n    get: function get() {\n      return web3_provider_Web3Provider.injectedWeb3Available();\n    }\n  }]);\n\n  return ConnectDialog;\n}(vue_property_decorator["e" /* Vue */]);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  required: true,\n  type: Boolean,\n  default: false\n})], ConnectDialogvue_type_script_lang_ts_ConnectDialog.prototype, "visible", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  default: false,\n  required: true,\n  type: Boolean\n})], ConnectDialogvue_type_script_lang_ts_ConnectDialog.prototype, "connecting", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["d" /* Prop */])({\n  default: false,\n  required: true,\n  type: Boolean\n})], ConnectDialogvue_type_script_lang_ts_ConnectDialog.prototype, "connectingSubkey", void 0);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["b" /* Emit */])()], ConnectDialogvue_type_script_lang_ts_ConnectDialog.prototype, "close", null);\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["b" /* Emit */])()], ConnectDialogvue_type_script_lang_ts_ConnectDialog.prototype, "connect", null);\n\nConnectDialogvue_type_script_lang_ts_ConnectDialog = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  components: {\n    RaidenDialog: RaidenDialog["a" /* default */],\n    ActionButton: ActionButton["a" /* default */],\n    NoAccessMessage: components_NoAccessMessage\n  },\n  computed: Object(vuex_esm["c" /* mapState */])([\'stateBackup\', \'accessDenied\'])\n})], ConnectDialogvue_type_script_lang_ts_ConnectDialog);\n/* harmony default export */ var ConnectDialogvue_type_script_lang_ts_ = (ConnectDialogvue_type_script_lang_ts_ConnectDialog);\n// CONCATENATED MODULE: ./src/components/ConnectDialog.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_ConnectDialogvue_type_script_lang_ts_ = (ConnectDialogvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/ConnectDialog.vue?vue&type=style&index=0&id=3604c23c&lang=scss&scoped=true&\nvar ConnectDialogvue_type_style_index_0_id_3604c23c_lang_scss_scoped_true_ = __webpack_require__("3c58");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VCard/index.js\nvar VCard = __webpack_require__("99d9");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/components/VProgressCircular/VProgressCircular.js\nvar VProgressCircular = __webpack_require__("490a");\n\n// CONCATENATED MODULE: ./src/components/ConnectDialog.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar ConnectDialog_component = Object(componentNormalizer["a" /* default */])(\n  components_ConnectDialogvue_type_script_lang_ts_,\n  ConnectDialogvue_type_template_id_3604c23c_scoped_true_render,\n  ConnectDialogvue_type_template_id_3604c23c_scoped_true_staticRenderFns,\n  false,\n  null,\n  "3604c23c",\n  null\n  \n)\n\n/* harmony default export */ var components_ConnectDialog = (ConnectDialog_component.exports);\n\n/* vuetify-loader */\n\n\n\n\ninstallComponents_default()(ConnectDialog_component, {VCardText: VCard["b" /* VCardText */],VCardTitle: VCard["c" /* VCardTitle */],VProgressCircular: VProgressCircular["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"e349156a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/NoTokens.vue?vue&type=template&id=4f16408a&scoped=true&\nvar NoTokensvue_type_template_id_4f16408a_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (!_vm.tokens.length)?_c(\'v-container\',{staticClass:"new-token fill-height",attrs:{"fluid":""}},[_c(\'v-row\',{attrs:{"align":"center","justify":"center","no-gutters":""}},[_c(\'v-col\',{staticClass:"new-token__button",attrs:{"cols":"12"}},[_c(\'v-btn\',{attrs:{"fab":"","color":"primary"},on:{"click":function($event){return _vm.navigateToTokenSelect()}}},[_c(\'v-icon\',{attrs:{"large":""}},[_vm._v("mdi-plus")])],1)],1),_c(\'v-col\',{staticClass:"new-token__header",attrs:{"cols":"12"}},[_vm._v(" "+_vm._s(_vm.$t(\'tokens.connect-new\'))+" ")])],1)],1):_vm._e()}\nvar NoTokensvue_type_template_id_4f16408a_scoped_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./src/components/NoTokens.vue?vue&type=template&id=4f16408a&scoped=true&\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/NoTokens.vue?vue&type=script&lang=ts&\nfunction NoTokensvue_type_script_lang_ts_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { NoTokensvue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { NoTokensvue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return NoTokensvue_type_script_lang_ts_typeof(obj); }\n\nfunction NoTokensvue_type_script_lang_ts_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction NoTokensvue_type_script_lang_ts_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { NoTokensvue_type_script_lang_ts_ownKeys(Object(source), true).forEach(function (key) { NoTokensvue_type_script_lang_ts_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { NoTokensvue_type_script_lang_ts_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction NoTokensvue_type_script_lang_ts_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction NoTokensvue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction NoTokensvue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction NoTokensvue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) NoTokensvue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) NoTokensvue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction NoTokensvue_type_script_lang_ts_createSuper(Derived) { return function () { var Super = NoTokensvue_type_script_lang_ts_getPrototypeOf(Derived), result; if (NoTokensvue_type_script_lang_ts_isNativeReflectConstruct()) { var NewTarget = NoTokensvue_type_script_lang_ts_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return NoTokensvue_type_script_lang_ts_possibleConstructorReturn(this, result); }; }\n\nfunction NoTokensvue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (NoTokensvue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return NoTokensvue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction NoTokensvue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction NoTokensvue_type_script_lang_ts_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction NoTokensvue_type_script_lang_ts_getPrototypeOf(o) { NoTokensvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return NoTokensvue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction NoTokensvue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) NoTokensvue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction NoTokensvue_type_script_lang_ts_setPrototypeOf(o, p) { NoTokensvue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return NoTokensvue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\n\nvar NoTokens = /*#__PURE__*/function (_Mixins) {\n  NoTokensvue_type_script_lang_ts_inherits(NoTokens, _Mixins);\n\n  var _super = NoTokensvue_type_script_lang_ts_createSuper(NoTokens);\n\n  function NoTokens() {\n    NoTokensvue_type_script_lang_ts_classCallCheck(this, NoTokens);\n\n    return _super.apply(this, arguments);\n  }\n\n  NoTokensvue_type_script_lang_ts_createClass(NoTokens, [{\n    key: "onChange",\n    value: function onChange(tokens) {\n      if (tokens.length) {\n        this.navigateToSelectTransferTarget(tokens[0].address);\n      }\n    }\n  }]);\n\n  return NoTokens;\n}(Object(vue_property_decorator["c" /* Mixins */])(navigation_mixin["a" /* default */]));\n\nObject(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["f" /* Watch */])(\'tokens\', {\n  immediate: true\n})], NoTokens.prototype, "onChange", null);\n\nNoTokens = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  computed: NoTokensvue_type_script_lang_ts_objectSpread({}, Object(vuex_esm["b" /* mapGetters */])([\'tokens\']))\n})], NoTokens);\n/* harmony default export */ var NoTokensvue_type_script_lang_ts_ = (NoTokens);\n// CONCATENATED MODULE: ./src/components/NoTokens.vue?vue&type=script&lang=ts&\n /* harmony default export */ var components_NoTokensvue_type_script_lang_ts_ = (NoTokensvue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/components/NoTokens.vue?vue&type=style&index=0&id=4f16408a&lang=scss&scoped=true&\nvar NoTokensvue_type_style_index_0_id_4f16408a_lang_scss_scoped_true_ = __webpack_require__("1a2b");\n\n// CONCATENATED MODULE: ./src/components/NoTokens.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar NoTokens_component = Object(componentNormalizer["a" /* default */])(\n  components_NoTokensvue_type_script_lang_ts_,\n  NoTokensvue_type_template_id_4f16408a_scoped_true_render,\n  NoTokensvue_type_template_id_4f16408a_scoped_true_staticRenderFns,\n  false,\n  null,\n  "4f16408a",\n  null\n  \n)\n\n/* harmony default export */ var components_NoTokens = (NoTokens_component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\n\ninstallComponents_default()(NoTokens_component, {VBtn: VBtn["a" /* default */],VCol: VCol["a" /* default */],VContainer: VContainer["a" /* default */],VIcon: VIcon["a" /* default */],VRow: VRow["a" /* default */]})\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vuetify-loader/lib/loader.js??ref--21-0!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/Home.vue?vue&type=script&lang=ts&\n\n\nfunction Homevue_type_script_lang_ts_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Homevue_type_script_lang_ts_typeof = function _typeof(obj) { return typeof obj; }; } else { Homevue_type_script_lang_ts_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Homevue_type_script_lang_ts_typeof(obj); }\n\nfunction Homevue_type_script_lang_ts_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction Homevue_type_script_lang_ts_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Homevue_type_script_lang_ts_ownKeys(Object(source), true).forEach(function (key) { Homevue_type_script_lang_ts_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Homevue_type_script_lang_ts_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Homevue_type_script_lang_ts_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Homevue_type_script_lang_ts_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction Homevue_type_script_lang_ts_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Homevue_type_script_lang_ts_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Homevue_type_script_lang_ts_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction Homevue_type_script_lang_ts_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Homevue_type_script_lang_ts_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Homevue_type_script_lang_ts_createClass(Constructor, protoProps, staticProps) { if (protoProps) Homevue_type_script_lang_ts_defineProperties(Constructor.prototype, protoProps); if (staticProps) Homevue_type_script_lang_ts_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Homevue_type_script_lang_ts_createSuper(Derived) { return function () { var Super = Homevue_type_script_lang_ts_getPrototypeOf(Derived), result; if (Homevue_type_script_lang_ts_isNativeReflectConstruct()) { var NewTarget = Homevue_type_script_lang_ts_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Homevue_type_script_lang_ts_possibleConstructorReturn(this, result); }; }\n\nfunction Homevue_type_script_lang_ts_possibleConstructorReturn(self, call) { if (call && (Homevue_type_script_lang_ts_typeof(call) === "object" || typeof call === "function")) { return call; } return Homevue_type_script_lang_ts_assertThisInitialized(self); }\n\nfunction Homevue_type_script_lang_ts_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Homevue_type_script_lang_ts_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction Homevue_type_script_lang_ts_getPrototypeOf(o) { Homevue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Homevue_type_script_lang_ts_getPrototypeOf(o); }\n\nfunction Homevue_type_script_lang_ts_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Homevue_type_script_lang_ts_setPrototypeOf(subClass, superClass); }\n\nfunction Homevue_type_script_lang_ts_setPrototypeOf(o, p) { Homevue_type_script_lang_ts_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Homevue_type_script_lang_ts_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\nvar Homevue_type_script_lang_ts_Home = /*#__PURE__*/function (_Vue) {\n  Homevue_type_script_lang_ts_inherits(Home, _Vue);\n\n  var _super = Homevue_type_script_lang_ts_createSuper(Home);\n\n  function Home() {\n    var _this;\n\n    Homevue_type_script_lang_ts_classCallCheck(this, Home);\n\n    _this = _super.apply(this, arguments);\n    _this.connectDialog = false;\n    _this.connecting = false;\n    _this.connectingSubkey = false;\n    return _this;\n  }\n\n  Homevue_type_script_lang_ts_createClass(Home, [{\n    key: "connect",\n    value: function () {\n      var _connect = Homevue_type_script_lang_ts_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee(connectOptions) {\n        var stateBackup, subkey;\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                stateBackup = connectOptions.uploadedState;\n                subkey = connectOptions.subkey;\n\n                if (subkey) {\n                  this.connectingSubkey = true;\n                } else {\n                  this.connecting = true;\n                }\n\n                this.$store.commit(\'reset\');\n                _context.next = 6;\n                return this.$raiden.connect(stateBackup, subkey);\n\n              case 6:\n                this.connectingSubkey = false;\n                this.connecting = false;\n\n                if (!this.accessDenied) {\n                  this.connectDialog = false;\n                }\n\n              case 9:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect(_x) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: "inaccessible",\n    get: function get() {\n      return this.connecting || this.loading || this.accessDenied !== types["a" /* DeniedReason */].UNDEFINED;\n    }\n  }]);\n\n  return Home;\n}(vue_property_decorator["e" /* Vue */]);\n\nHomevue_type_script_lang_ts_Home = Object(tslib_es6["b" /* __decorate */])([Object(vue_property_decorator["a" /* Component */])({\n  computed: Homevue_type_script_lang_ts_objectSpread({}, Object(vuex_esm["c" /* mapState */])([\'loading\', \'accessDenied\']), {}, Object(vuex_esm["b" /* mapGetters */])([\'isConnected\'])),\n  components: {\n    ActionButton: ActionButton["a" /* default */],\n    ConnectDialog: components_ConnectDialog,\n    NoTokens: components_NoTokens\n  }\n})], Homevue_type_script_lang_ts_Home);\n/* harmony default export */ var Homevue_type_script_lang_ts_ = (Homevue_type_script_lang_ts_Home);\n// CONCATENATED MODULE: ./src/views/Home.vue?vue&type=script&lang=ts&\n /* harmony default export */ var views_Homevue_type_script_lang_ts_ = (Homevue_type_script_lang_ts_); \n// EXTERNAL MODULE: ./src/views/Home.vue?vue&type=style&index=0&id=02ef831a&lang=scss&scoped=true&\nvar Homevue_type_style_index_0_id_02ef831a_lang_scss_scoped_true_ = __webpack_require__("4e0d");\n\n// CONCATENATED MODULE: ./src/views/Home.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar Home_component = Object(componentNormalizer["a" /* default */])(\n  views_Homevue_type_script_lang_ts_,\n  Homevue_type_template_id_02ef831a_scoped_true_render,\n  Homevue_type_template_id_02ef831a_scoped_true_staticRenderFns,\n  false,\n  null,\n  "02ef831a",\n  null\n  \n)\n\n/* harmony default export */ var views_Home = (Home_component.exports);\n\n/* vuetify-loader */\n\n\n\n\n\ninstallComponents_default()(Home_component, {VCol: VCol["a" /* default */],VContainer: VContainer["a" /* default */],VImg: VImg["a" /* default */],VRow: VRow["a" /* default */]})\n\n// CONCATENATED MODULE: ./src/router/index.ts\n\n\n\n\nvue_runtime_esm["a" /* default */].use(vue_router_esm["a" /* default */]);\n/* istanbul ignore next */\n\nvar router = new vue_router_esm["a" /* default */]({\n  mode: \'history\',\n  base: "/staging/",\n  routes: [{\n    path: \'/\',\n    name: route_names["a" /* RouteNames */].HOME,\n    meta: {\n      title: \'Raiden dApp\'\n    },\n    component: views_Home\n  }, {\n    path: \'*\',\n    redirect: \'/\'\n  }, {\n    path: \'/transfer/:token\',\n    name: route_names["a" /* RouteNames */].TRANSFER,\n    meta: {\n      title: \'Transfer\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-15f0b7af"), __webpack_require__.e("chunk-08151fa2"), __webpack_require__.e("chunk-4c34ba5c"), __webpack_require__.e("chunk-5e7189c2"), __webpack_require__.e("chunk-7bc2c414")]).then(__webpack_require__.bind(null, "69aa"));\n    }\n  }, {\n    path: \'/transfer/:token/:target\',\n    name: route_names["a" /* RouteNames */].TRANSFER_STEPS,\n    meta: {\n      title: \'Transfer\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-15f0b7af"), __webpack_require__.e("chunk-08151fa2"), __webpack_require__.e("chunk-d3b2fbc4")]).then(__webpack_require__.bind(null, "feae"));\n    }\n  }, {\n    path: \'/connect\',\n    name: route_names["a" /* RouteNames */].SELECT_TOKEN,\n    meta: {\n      title: \'Select Token\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-15f0b7af"), __webpack_require__.e("chunk-27f3174b")]).then(__webpack_require__.bind(null, "7724"));\n    }\n  }, {\n    path: \'/connect/:token\',\n    name: route_names["a" /* RouteNames */].SELECT_HUB,\n    meta: {\n      title: \'Select Hub\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-08151fa2"), __webpack_require__.e("chunk-4c34ba5c"), __webpack_require__.e("chunk-5e7189c2"), __webpack_require__.e("chunk-488fc1f2")]).then(__webpack_require__.bind(null, "c405"));\n    }\n  }, {\n    path: \'/connect/:token/:partner\',\n    name: route_names["a" /* RouteNames */].OPEN_CHANNEL,\n    meta: {\n      title: \'Open Channel\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-08151fa2"), __webpack_require__.e("chunk-4c34ba5c"), __webpack_require__.e("chunk-b14359ce")]).then(__webpack_require__.bind(null, "7542"));\n    }\n  }, {\n    path: \'/channels/:token\',\n    name: route_names["a" /* RouteNames */].CHANNELS,\n    meta: {\n      title: \'Channels\'\n    },\n    component: function component() {\n      return Promise.all(/* import() */[__webpack_require__.e("chunk-15f0b7af"), __webpack_require__.e("chunk-08151fa2"), __webpack_require__.e("chunk-552b1730")]).then(__webpack_require__.bind(null, "3010"));\n    }\n  }, {\n    path: \'/general\',\n    name: route_names["a" /* RouteNames */].GENERAL,\n    beforeEnter: function beforeEnter(to, from, next) {\n      // Remembers the route that was visited just before the General view is opened and\n      // then loads the General view in a separate <router-view>. The last visited route\n      // is loaded when clicking out of the General view.\n      if (from.name === null) {\n        next({\n          name: route_names["a" /* RouteNames */].HOME\n        });\n      } else if (to.matched.length) {\n        to.matched[0].components.default = from.matched[0].components.default;\n\n        to.matched[0].components.modal = function () {\n          return __webpack_require__.e(/* import() */ "chunk-e17a21de").then(__webpack_require__.bind(null, "18b0"));\n        };\n      }\n\n      next();\n    },\n    children: [{\n      path: \'general-home\',\n      name: route_names["a" /* RouteNames */].GENERAL_HOME,\n      meta: {\n        title: \'General\'\n      },\n      component: function component() {\n        return Promise.all(/* import() */[__webpack_require__.e("chunk-15f0b7af"), __webpack_require__.e("chunk-7e432e88")]).then(__webpack_require__.bind(null, "3a87"));\n      }\n    }, {\n      path: \'backup-state\',\n      name: route_names["a" /* RouteNames */].BACKUP_STATE,\n      meta: {\n        title: \'Backup State\'\n      },\n      component: function component() {\n        return Promise.all(/* import() */[__webpack_require__.e("chunk-15f0b7af"), __webpack_require__.e("chunk-43b69ccc")]).then(__webpack_require__.bind(null, "797d"));\n      }\n    }]\n  }]\n});\n/* harmony default export */ var src_router = (router);\n// EXTERNAL MODULE: ../raiden-ts/dist/index.js + 66 modules\nvar dist = __webpack_require__("f455");\n\n// EXTERNAL MODULE: ./node_modules/lodash/map.js\nvar map = __webpack_require__("dd61");\nvar map_default = /*#__PURE__*/__webpack_require__.n(map);\n\n// EXTERNAL MODULE: ./node_modules/lodash/flatMap.js\nvar flatMap = __webpack_require__("e9a8d");\nvar flatMap_default = /*#__PURE__*/__webpack_require__.n(flatMap);\n\n// EXTERNAL MODULE: ./node_modules/lodash/filter.js\nvar filter = __webpack_require__("9380");\nvar filter_default = /*#__PURE__*/__webpack_require__.n(filter);\n\n// EXTERNAL MODULE: ./node_modules/lodash/clone.js\nvar clone = __webpack_require__("b8ce");\nvar clone_default = /*#__PURE__*/__webpack_require__.n(clone);\n\n// EXTERNAL MODULE: ./node_modules/lodash/reduce.js\nvar reduce = __webpack_require__("c5a2");\nvar reduce_default = /*#__PURE__*/__webpack_require__.n(reduce);\n\n// EXTERNAL MODULE: ./node_modules/lodash/orderBy.js\nvar orderBy = __webpack_require__("93c6");\nvar orderBy_default = /*#__PURE__*/__webpack_require__.n(orderBy);\n\n// EXTERNAL MODULE: ./node_modules/lodash/isEqual.js\nvar isEqual = __webpack_require__("63ea");\nvar isEqual_default = /*#__PURE__*/__webpack_require__.n(isEqual);\n\n// EXTERNAL MODULE: ./node_modules/lodash/isEmpty.js\nvar isEmpty = __webpack_require__("13ea");\nvar isEmpty_default = /*#__PURE__*/__webpack_require__.n(isEmpty);\n\n// CONCATENATED MODULE: ./src/store/index.ts\nfunction store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { store_ownKeys(Object(source), true).forEach(function (key) { store_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvue_runtime_esm["a" /* default */].use(vuex_esm["a" /* default */]);\nvar _defaultState = {\n  loading: true,\n  defaultAccount: \'\',\n  accountBalance: \'0.0\',\n  raidenAccountBalance: \'\',\n  providerDetected: true,\n  accessDenied: types["a" /* DeniedReason */].UNDEFINED,\n  channels: {},\n  tokens: {},\n  transfers: {},\n  presences: {},\n  network: types["b" /* PlaceHolderNetwork */],\n  stateBackup: \'\'\n};\nfunction defaultState() {\n  return clone_default()(_defaultState);\n}\nvar store = {\n  state: defaultState(),\n  mutations: {\n    noProvider: function noProvider(state) {\n      state.providerDetected = false;\n    },\n    accessDenied: function accessDenied(state, reason) {\n      state.accessDenied = reason;\n    },\n    account: function account(state, _account) {\n      state.defaultAccount = _account;\n    },\n    loadComplete: function loadComplete(state) {\n      state.loading = false;\n    },\n    balance: function balance(state, _balance) {\n      state.accountBalance = _balance;\n    },\n    raidenAccountBalance: function raidenAccountBalance(state, balance) {\n      state.raidenAccountBalance = balance;\n    },\n    updateChannels: function updateChannels(state, channels) {\n      state.channels = channels;\n    },\n    updateTokens: function updateTokens(state, tokens) {\n      for (var _i = 0, _Object$entries = Object.entries(tokens); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            address = _Object$entries$_i[0],\n            token = _Object$entries$_i[1];\n\n        if (address in state.tokens && isEqual_default()(token, state.tokens[address])) continue;else if (address in state.tokens) state.tokens[address] = store_objectSpread({}, state.tokens[address], {}, token);else state.tokens = store_objectSpread({}, state.tokens, store_defineProperty({}, address, token));\n      }\n    },\n    updatePresence: function updatePresence(state, presence) {\n      state.presences = store_objectSpread({}, state.presences, {}, presence);\n    },\n    network: function network(state, _network) {\n      state.network = _network;\n    },\n    reset: function reset(state) {\n      Object.assign(state, defaultState());\n    },\n    updateTransfers: function updateTransfers(state, transfer) {\n      state.transfers = store_objectSpread({}, state.transfers, store_defineProperty({}, transfer.secrethash, transfer));\n    },\n    backupState: function backupState(state, uploadedState) {\n      state.stateBackup = uploadedState;\n    }\n  },\n  actions: {},\n  getters: {\n    tokens: function tokens(state) {\n      var reducer = function reducer(acc, channel) {\n        acc.address = channel.token;\n        acc[channel.state] += 1;\n        return acc;\n      };\n\n      return map_default()(filter_default()(flatMap_default()(state.channels), function (channels) {\n        return !isEmpty_default()(channels);\n      }), function (tokenChannels) {\n        var model = reduce_default()(tokenChannels, reducer, Object(types["d" /* emptyTokenModel */])());\n        var tokenInfo = state.tokens[model.address];\n\n        if (tokenInfo) {\n          model.name = tokenInfo.name || \'\';\n          model.symbol = tokenInfo.symbol || \'\';\n        }\n\n        return model;\n      });\n    },\n    allTokens: function allTokens(state) {\n      return Object.values(state.tokens);\n    },\n    channels: function channels(state) {\n      return function (tokenAddress) {\n        var channels = [];\n        var tokenChannels = state.channels[tokenAddress];\n\n        if (tokenChannels && !isEmpty_default()(tokenChannels)) {\n          channels = flatMap_default()(tokenChannels);\n        }\n\n        return channels;\n      };\n    },\n    token: function token(state) {\n      return function (tokenAddress) {\n        if (tokenAddress in state.tokens) {\n          return state.tokens[tokenAddress];\n        } else {\n          return null;\n        }\n      };\n    },\n    network: function network(state) {\n      return state.network.name || "Chain ".concat(state.network.chainId);\n    },\n    channelWithBiggestCapacity: function channelWithBiggestCapacity(_, getters) {\n      return function (tokenAddress) {\n        var channels = getters.channels(tokenAddress);\n        var openChannels = channels.filter(function (value) {\n          return value.state === dist["a" /* ChannelState */].open;\n        });\n        return orderBy_default()(openChannels, [\'capacity\'], [\'desc\'])[0];\n      };\n    },\n    pendingTransfers: function pendingTransfers(_ref) {\n      var transfers = _ref.transfers;\n      return Object.keys(transfers).filter(function (secretHash) {\n        var completed = transfers[secretHash].completed; // return whether transfer is pending or not\n\n        return !completed;\n      }).reduce(function (pendingTransfers, secretHash) {\n        pendingTransfers[secretHash] = transfers[secretHash];\n        return pendingTransfers;\n      }, {});\n    },\n    transfer: function transfer(state) {\n      return function (paymentId) {\n        var secretHash = Object.keys(state.transfers).find(function (secretHash) {\n          return state.transfers[secretHash].paymentId === paymentId;\n        });\n\n        if (secretHash) {\n          return state.transfers[secretHash];\n        }\n\n        return undefined;\n      };\n    },\n    isConnected: function isConnected(state) {\n      return !!(state.defaultAccount && state.defaultAccount !== \'\');\n    },\n    balance: function balance(state) {\n      return state.raidenAccountBalance ? state.raidenAccountBalance : state.accountBalance;\n    }\n  }\n};\n/* harmony default export */ var src_store = (new vuex_esm["a" /* default */].Store(store));\n// EXTERNAL MODULE: ./src/utils/logstore.ts\nvar logstore = __webpack_require__("8aa9");\n\n// CONCATENATED MODULE: ./src/class-component-hooks.ts\n/* istanbul ignore file */\n // Register the router hooks with their names\n\nvue_class_component_esm["b" /* default */].registerHooks([\'beforeRouteEnter\', \'beforeRouteLeave\', \'beforeRouteUpdate\']);\n// EXTERNAL MODULE: ./src/utils/balance-utils.ts\nvar balance_utils = __webpack_require__("a3d5");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js\nvar operators_filter = __webpack_require__("5670");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js\nvar exhaustMap = __webpack_require__("e95d");\n\n// EXTERNAL MODULE: ./node_modules/tiny-async-pool/dist/node.js\nvar node = __webpack_require__("7f4b");\nvar node_default = /*#__PURE__*/__webpack_require__.n(node);\n\n// CONCATENATED MODULE: ./src/services/config-provider.ts\n\n\nfunction config_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction config_provider_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { config_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { config_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction config_provider_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction config_provider_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction config_provider_createClass(Constructor, protoProps, staticProps) { if (protoProps) config_provider_defineProperties(Constructor.prototype, protoProps); if (staticProps) config_provider_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar config_provider_ConfigProvider = /*#__PURE__*/function () {\n  function ConfigProvider() {\n    config_provider_classCallCheck(this, ConfigProvider);\n  }\n\n  config_provider_createClass(ConfigProvider, null, [{\n    key: "fetch",\n    value: function (_fetch) {\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }( /*#__PURE__*/function () {\n      var _ref = config_provider_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee(url) {\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!url) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return fetch(url);\n\n              case 3:\n                _context.next = 5;\n                return _context.sent.json();\n\n              case 5:\n                return _context.abrupt("return", _context.sent);\n\n              case 6:\n                return _context.abrupt("return", undefined);\n\n              case 7:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x2) {\n        return _ref.apply(this, arguments);\n      };\n    }())\n  }]);\n\n  return ConfigProvider;\n}();\n// CONCATENATED MODULE: ./src/services/raiden-service.ts\n\n\nfunction raiden_service_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { raiden_service_typeof = function _typeof(obj) { return typeof obj; }; } else { raiden_service_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return raiden_service_typeof(obj); }\n\nfunction raiden_service_createSuper(Derived) { return function () { var Super = raiden_service_getPrototypeOf(Derived), result; if (raiden_service_isNativeReflectConstruct()) { var NewTarget = raiden_service_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return raiden_service_possibleConstructorReturn(this, result); }; }\n\nfunction raiden_service_possibleConstructorReturn(self, call) { if (call && (raiden_service_typeof(call) === "object" || typeof call === "function")) { return call; } return raiden_service_assertThisInitialized(self); }\n\nfunction raiden_service_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction raiden_service_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) raiden_service_setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, raiden_service_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return raiden_service_setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (raiden_service_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) raiden_service_setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction raiden_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\n\nfunction raiden_service_setPrototypeOf(o, p) { raiden_service_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return raiden_service_setPrototypeOf(o, p); }\n\nfunction raiden_service_getPrototypeOf(o) { raiden_service_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return raiden_service_getPrototypeOf(o); }\n\nfunction raiden_service_slicedToArray(arr, i) { return raiden_service_arrayWithHoles(arr) || raiden_service_iterableToArrayLimit(arr, i) || raiden_service_unsupportedIterableToArray(arr, i) || raiden_service_nonIterableRest(); }\n\nfunction raiden_service_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction raiden_service_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction raiden_service_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction raiden_service_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = raiden_service_unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction raiden_service_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return raiden_service_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return raiden_service_arrayLikeToArray(o, minLen); }\n\nfunction raiden_service_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction raiden_service_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction raiden_service_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { raiden_service_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { raiden_service_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction raiden_service_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction raiden_service_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction raiden_service_createClass(Constructor, protoProps, staticProps) { if (protoProps) raiden_service_defineProperties(Constructor.prototype, protoProps); if (staticProps) raiden_service_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\nvar raiden_service_RaidenService = /*#__PURE__*/function () {\n  function RaidenService(store) {\n    raiden_service_classCallCheck(this, RaidenService);\n\n    this._userDepositTokenAddress = \'\';\n    this._raiden = undefined;\n    this.store = store;\n  }\n\n  raiden_service_createClass(RaidenService, [{\n    key: "fetchTokenList",\n    value: function () {\n      var _fetchTokenList = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n        var allTokens, toFetch, placeholders, _iterator, _step, token;\n\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.raiden.getTokenList();\n\n              case 2:\n                allTokens = _context.sent;\n                toFetch = [];\n                placeholders = {};\n                _iterator = _createForOfIteratorHelper(allTokens);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    token = _step.value;\n                    toFetch.push(token);\n                    placeholders[token] = {\n                      address: token\n                    };\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                this.store.commit(\'updateTokens\', placeholders);\n                _context.next = 10;\n                return this.fetchTokenData(toFetch);\n\n              case 10:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchTokenList() {\n        return _fetchTokenList.apply(this, arguments);\n      }\n\n      return fetchTokenList;\n    }()\n  }, {\n    key: "ensResolve",\n    value: function () {\n      var _ensResolve = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee2(name) {\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.raiden.resolveName(name);\n\n              case 3:\n                return _context2.abrupt("return", _context2.sent);\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2["catch"](0);\n                throw new EnsResolveFailed(_context2.t0);\n\n              case 9:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n\n      function ensResolve(_x) {\n        return _ensResolve.apply(this, arguments);\n      }\n\n      return ensResolve;\n    }()\n  }, {\n    key: "connect",\n    value: function () {\n      var _connect = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee3(stateBackup, subkey) {\n        var _this = this;\n\n        var raidenPackageConfigUrl, config, provider, raiden, account, deniedReason;\n        return regenerator_default.a.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                raidenPackageConfigUrl = Object({"NODE_ENV":"production","VUE_APP_PFS":"https://pfs.raidentransport.test001.env.raiden.network","VUE_APP_TRANSPORT":"https://raidentransport.test001.env.raiden.network","VUE_APP_HUB":"hub.raiden.eth","VUE_APP_I18N_LOCALE":"en","VUE_APP_I18N_FALLBACK_LOCALE":"en","BASE_URL":"/staging/"}).VUE_APP_RAIDEN_PACKAGE;\n\n                if (!raidenPackageConfigUrl) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.next = 5;\n                return config_provider_ConfigProvider.fetch(raidenPackageConfigUrl);\n\n              case 5:\n                config = _context3.sent;\n                _context3.next = 8;\n                return web3_provider_Web3Provider.provider(config);\n\n              case 8:\n                provider = _context3.sent;\n                _context3.next = 14;\n                break;\n\n              case 11:\n                _context3.next = 13;\n                return web3_provider_Web3Provider.provider();\n\n              case 13:\n                provider = _context3.sent;\n\n              case 14:\n                if (provider) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                this.store.commit(\'noProvider\');\n                _context3.next = 54;\n                break;\n\n              case 18:\n                if (!config) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                _context3.next = 21;\n                return RaidenService.createRaiden(provider, config.PRIVATE_KEY, stateBackup, subkey);\n\n              case 21:\n                raiden = _context3.sent;\n                _context3.next = 27;\n                break;\n\n              case 24:\n                _context3.next = 26;\n                return RaidenService.createRaiden(provider, undefined, stateBackup, subkey);\n\n              case 26:\n                raiden = _context3.sent;\n\n              case 27:\n                this._raiden = raiden;\n                _context3.next = 30;\n                return this.getAccount();\n\n              case 30:\n                account = _context3.sent;\n                this.store.commit(\'account\', account);\n                _context3.next = 34;\n                return raiden.userDepositTokenAddress();\n\n              case 34:\n                this._userDepositTokenAddress = _context3.sent;\n                // update connected tokens data on each newBlock\n                raiden.events$.pipe(Object(operators_filter["a" /* filter */])(function (value) {\n                  return value.type === \'newBlock\';\n                }), Object(exhaustMap["a" /* exhaustMap */])(function () {\n                  return _this.fetchTokenData(_this.store.getters.tokens.map(function (m) {\n                    return m.address;\n                  }));\n                })).subscribe();\n                raiden.events$.pipe(Object(operators_filter["a" /* filter */])(function (value) {\n                  return value.type === \'raidenShutdown\';\n                })).subscribe(function () {\n                  return _this.store.commit(\'reset\');\n                });\n                raiden.events$.subscribe(function (value) {\n                  if (value.type === \'tokenMonitored\') {\n                    _this.store.commit(\'updateTokens\', raiden_service_defineProperty({}, value.payload.token, {\n                      address: value.payload.token\n                    }));\n                  } // Update presences on matrix presence updates\n\n\n                  if (value.type === \'matrix/presence/success\') {\n                    _this.store.commit(\'updatePresence\', raiden_service_defineProperty({}, value.meta.address, value.payload.available));\n                  }\n                });\n                raiden.channels$.subscribe(function (value) {\n                  _this.store.commit(\'updateChannels\', value);\n                }); // Subscribe to our pending transfers\n\n                raiden.transfers$.subscribe(function (transfer) {\n                  if (transfer.initiator === account) {\n                    _this.store.commit(\'updateTransfers\', transfer);\n                  }\n                });\n                this.store.commit(\'network\', raiden.network);\n                window.addEventListener(\'beforeunload\', function () {\n                  return _this.raiden.stop();\n                });\n                raiden.start();\n                _context3.t0 = this.store;\n                _context3.next = 46;\n                return this.getBalance();\n\n              case 46:\n                _context3.t1 = _context3.sent;\n\n                _context3.t0.commit.call(_context3.t0, \'balance\', _context3.t1);\n\n                if (!subkey) {\n                  _context3.next = 54;\n                  break;\n                }\n\n                _context3.t2 = this.store;\n                _context3.next = 52;\n                return this.getBalance(raiden.address);\n\n              case 52:\n                _context3.t3 = _context3.sent;\n\n                _context3.t2.commit.call(_context3.t2, \'raidenAccountBalance\', _context3.t3);\n\n              case 54:\n                _context3.next = 60;\n                break;\n\n              case 56:\n                _context3.prev = 56;\n                _context3.t4 = _context3["catch"](0);\n\n                if (_context3.t4.message && _context3.t4.message.indexOf(\'No deploy info provided\') > -1) {\n                  deniedReason = types["a" /* DeniedReason */].UNSUPPORTED_NETWORK;\n                } else if (_context3.t4.message && _context3.t4.message.indexOf(\'Could not replace stored state\') > -1) {\n                  deniedReason = types["a" /* DeniedReason */].RDN_STATE_MIGRATION;\n                } else if (_context3.t4 instanceof RaidenInitializationFailed) {\n                  deniedReason = types["a" /* DeniedReason */].INITIALIZATION_FAILED;\n                } else {\n                  deniedReason = types["a" /* DeniedReason */].NO_ACCOUNT;\n                }\n\n                this.store.commit(\'accessDenied\', deniedReason);\n\n              case 60:\n                this.store.commit(\'loadComplete\');\n\n              case 61:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 56]]);\n      }));\n\n      function connect(_x2, _x3) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      this.raiden.stop();\n    }\n  }, {\n    key: "getAccount",\n    value: function () {\n      var _getAccount = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee4() {\n        return regenerator_default.a.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt("return", this.raiden.address);\n\n              case 1:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getAccount() {\n        return _getAccount.apply(this, arguments);\n      }\n\n      return getAccount;\n    }()\n  }, {\n    key: "getBalance",\n    value: function () {\n      var _getBalance = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee5(address) {\n        var balance;\n        return regenerator_default.a.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.raiden.getBalance(address);\n\n              case 2:\n                balance = _context5.sent;\n                return _context5.abrupt("return", balance_utils["a" /* BalanceUtils */].toEth(balance));\n\n              case 4:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getBalance(_x4) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n  }, {\n    key: "getToken",\n    value: function () {\n      var _getToken = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee6(tokenAddress) {\n        var raiden, _yield$Promise$all, _yield$Promise$all2, balance, _yield$Promise$all2$, decimals, symbol, name;\n\n        return regenerator_default.a.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                raiden = this.raiden;\n                _context6.prev = 1;\n                _context6.next = 4;\n                return Promise.all([raiden.getTokenBalance(tokenAddress), raiden.getTokenInfo(tokenAddress)]);\n\n              case 4:\n                _yield$Promise$all = _context6.sent;\n                _yield$Promise$all2 = raiden_service_slicedToArray(_yield$Promise$all, 2);\n                balance = _yield$Promise$all2[0];\n                _yield$Promise$all2$ = _yield$Promise$all2[1];\n                decimals = _yield$Promise$all2$.decimals;\n                symbol = _yield$Promise$all2$.symbol;\n                name = _yield$Promise$all2$.name;\n                return _context6.abrupt("return", {\n                  name: name,\n                  symbol: symbol,\n                  balance: balance,\n                  decimals: decimals,\n                  address: tokenAddress\n                });\n\n              case 14:\n                _context6.prev = 14;\n                _context6.t0 = _context6["catch"](1);\n                return _context6.abrupt("return", null);\n\n              case 17:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 14]]);\n      }));\n\n      function getToken(_x5) {\n        return _getToken.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n  }, {\n    key: "openChannel",\n    value: function () {\n      var _openChannel = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee7(token, partner, amount, progress) {\n        var progressUpdater, raiden;\n        return regenerator_default.a.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                progressUpdater = function progressUpdater(current, total) {\n                  if (progress) {\n                    progress({\n                      current: current,\n                      total: total\n                    });\n                  }\n                };\n\n                raiden = this.raiden;\n                progressUpdater(1, 3);\n                _context7.prev = 3;\n                _context7.next = 6;\n                return raiden.openChannel(token, partner, {\n                  deposit: amount\n                }, function (e) {\n                  return e.type === dist["b" /* EventTypes */].OPENED ? progressUpdater(2, 3) : \'\';\n                });\n\n              case 6:\n                _context7.next = 11;\n                break;\n\n              case 8:\n                _context7.prev = 8;\n                _context7.t0 = _context7["catch"](3);\n                throw new ChannelOpenFailed(_context7.t0);\n\n              case 11:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[3, 8]]);\n      }));\n\n      function openChannel(_x6, _x7, _x8, _x9) {\n        return _openChannel.apply(this, arguments);\n      }\n\n      return openChannel;\n    }()\n  }, {\n    key: "closeChannel",\n    value: function () {\n      var _closeChannel = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee8(token, partner) {\n        return regenerator_default.a.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return this.raiden.closeChannel(token, partner);\n\n              case 3:\n                _context8.next = 8;\n                break;\n\n              case 5:\n                _context8.prev = 5;\n                _context8.t0 = _context8["catch"](0);\n                throw new ChannelCloseFailed(_context8.t0);\n\n              case 8:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 5]]);\n      }));\n\n      function closeChannel(_x10, _x11) {\n        return _closeChannel.apply(this, arguments);\n      }\n\n      return closeChannel;\n    }()\n  }, {\n    key: "deposit",\n    value: function () {\n      var _deposit = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee9(token, partner, amount) {\n        return regenerator_default.a.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return this.raiden.depositChannel(token, partner, amount);\n\n              case 3:\n                _context9.next = 8;\n                break;\n\n              case 5:\n                _context9.prev = 5;\n                _context9.t0 = _context9["catch"](0);\n                throw new ChannelDepositFailed(_context9.t0);\n\n              case 8:\n              case "end":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 5]]);\n      }));\n\n      function deposit(_x12, _x13, _x14) {\n        return _deposit.apply(this, arguments);\n      }\n\n      return deposit;\n    }()\n  }, {\n    key: "settleChannel",\n    value: function () {\n      var _settleChannel = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee10(token, partner) {\n        return regenerator_default.a.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return this.raiden.settleChannel(token, partner);\n\n              case 3:\n                _context10.next = 8;\n                break;\n\n              case 5:\n                _context10.prev = 5;\n                _context10.t0 = _context10["catch"](0);\n                throw new ChannelSettleFailed(_context10.t0);\n\n              case 8:\n              case "end":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 5]]);\n      }));\n\n      function settleChannel(_x15, _x16) {\n        return _settleChannel.apply(this, arguments);\n      }\n\n      return settleChannel;\n    }()\n  }, {\n    key: "fetchTokenData",\n    value: function () {\n      var _fetchTokenData = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee12(tokens) {\n        var _this2 = this;\n\n        var fetchToken;\n        return regenerator_default.a.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (tokens.length) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                return _context12.abrupt("return");\n\n              case 2:\n                fetchToken = /*#__PURE__*/function () {\n                  var _ref = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee11(address) {\n                    return regenerator_default.a.wrap(function _callee11$(_context11) {\n                      while (1) {\n                        switch (_context11.prev = _context11.next) {\n                          case 0:\n                            return _context11.abrupt("return", _this2.getToken(address).then(function (token) {\n                              if (!token) return;\n\n                              _this2.store.commit(\'updateTokens\', raiden_service_defineProperty({}, token.address, token));\n                            }));\n\n                          case 1:\n                          case "end":\n                            return _context11.stop();\n                        }\n                      }\n                    }, _callee11);\n                  }));\n\n                  return function fetchToken(_x18) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                _context12.next = 5;\n                return node_default()(6, tokens, fetchToken);\n\n              case 5:\n              case "end":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n\n      function fetchTokenData(_x17) {\n        return _fetchTokenData.apply(this, arguments);\n      }\n\n      return fetchTokenData;\n    }()\n  }, {\n    key: "transfer",\n    value: function () {\n      var _transfer = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee13(token, target, amount, paths, paymentId) {\n        var secretHash;\n        return regenerator_default.a.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.prev = 0;\n                _context13.next = 3;\n                return this.raiden.transfer(token, target, amount, {\n                  paymentId: paymentId,\n                  paths: paths\n                });\n\n              case 3:\n                secretHash = _context13.sent;\n                _context13.next = 6;\n                return this.raiden.waitTransfer(secretHash);\n\n              case 6:\n                _context13.next = 11;\n                break;\n\n              case 8:\n                _context13.prev = 8;\n                _context13.t0 = _context13["catch"](0);\n                throw new TransferFailed(_context13.t0);\n\n              case 11:\n              case "end":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this, [[0, 8]]);\n      }));\n\n      function transfer(_x19, _x20, _x21, _x22, _x23) {\n        return _transfer.apply(this, arguments);\n      }\n\n      return transfer;\n    }()\n  }, {\n    key: "findRoutes",\n    value: function () {\n      var _findRoutes = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee14(token, target, amount, raidenPFS) {\n        var routes;\n        return regenerator_default.a.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.raiden.getAvailability(target);\n\n              case 2:\n                _context14.next = 4;\n                return this.raiden.findRoutes(token, target, amount, {\n                  pfs: raidenPFS\n                });\n\n              case 4:\n                routes = _context14.sent;\n                return _context14.abrupt("return", routes);\n\n              case 6:\n              case "end":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function findRoutes(_x24, _x25, _x26, _x27) {\n        return _findRoutes.apply(this, arguments);\n      }\n\n      return findRoutes;\n    }()\n  }, {\n    key: "fetchServices",\n    value: function () {\n      var _fetchServices = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee15() {\n        var raidenPFS;\n        return regenerator_default.a.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.raiden.findPFS();\n\n              case 2:\n                raidenPFS = _context15.sent;\n                return _context15.abrupt("return", raidenPFS);\n\n              case 4:\n              case "end":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function fetchServices() {\n        return _fetchServices.apply(this, arguments);\n      }\n\n      return fetchServices;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: "directRoute",\n    value: function () {\n      var _directRoute = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee16(token, target, value) {\n        return regenerator_default.a.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.raiden.directRoute(token, target, value);\n\n              case 2:\n                return _context16.abrupt("return", _context16.sent);\n\n              case 3:\n              case "end":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function directRoute(_x28, _x29, _x30) {\n        return _directRoute.apply(this, arguments);\n      }\n\n      return directRoute;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: "mint",\n    value: function () {\n      var _mint = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee17(token, amount) {\n        return regenerator_default.a.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.raiden.mint(token, amount);\n\n              case 2:\n                return _context17.abrupt("return", _context17.sent);\n\n              case 3:\n              case "end":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function mint(_x31, _x32) {\n        return _mint.apply(this, arguments);\n      }\n\n      return mint;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: "depositToUDC",\n    value: function () {\n      var _depositToUDC = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee18(amount, depositing) {\n        return regenerator_default.a.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.raiden.depositToUDC(amount, function (event) {\n                  return event.type === dist["b" /* EventTypes */].APPROVED ? depositing() : null;\n                });\n\n              case 2:\n              case "end":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function depositToUDC(_x33, _x34) {\n        return _depositToUDC.apply(this, arguments);\n      }\n\n      return depositToUDC;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: "getUDCCapacity",\n    value: function () {\n      var _getUDCCapacity = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee19() {\n        return regenerator_default.a.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                return _context19.abrupt("return", this.raiden.getUDCCapacity());\n\n              case 1:\n              case "end":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getUDCCapacity() {\n        return _getUDCCapacity.apply(this, arguments);\n      }\n\n      return getUDCCapacity;\n    }()\n  }, {\n    key: "getAvailability",\n    value: function () {\n      var _getAvailability = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee20(address) {\n        var _yield$this$raiden$ge, available;\n\n        return regenerator_default.a.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.prev = 0;\n                _context20.next = 3;\n                return this.raiden.getAvailability(address);\n\n              case 3:\n                _yield$this$raiden$ge = _context20.sent;\n                available = _yield$this$raiden$ge.available;\n                return _context20.abrupt("return", available);\n\n              case 8:\n                _context20.prev = 8;\n                _context20.t0 = _context20["catch"](0);\n                this.store.commit(\'updatePresence\', raiden_service_defineProperty({}, address, false));\n\n              case 11:\n                return _context20.abrupt("return", false);\n\n              case 12:\n              case "end":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this, [[0, 8]]);\n      }));\n\n      function getAvailability(_x35) {\n        return _getAvailability.apply(this, arguments);\n      }\n\n      return getAvailability;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: "getState",\n    value: function () {\n      var _getState = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee21() {\n        var _this$_raiden, _this$_raiden2;\n\n        return regenerator_default.a.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                (_this$_raiden = this._raiden) === null || _this$_raiden === void 0 ? void 0 : _this$_raiden.stop();\n                _context21.next = 3;\n                return (_this$_raiden2 = this._raiden) === null || _this$_raiden2 === void 0 ? void 0 : _this$_raiden2.state$.toPromise();\n\n              case 3:\n                return _context21.abrupt("return", _context21.sent);\n\n              case 4:\n              case "end":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getState() {\n        return _getState.apply(this, arguments);\n      }\n\n      return getState;\n    }()\n  }, {\n    key: "raiden",\n    get: function get() {\n      if (this._raiden === undefined) {\n        throw new Error(\'Raiden instance was not initialized\');\n      } else {\n        return this._raiden;\n      }\n    }\n  }, {\n    key: "userDepositTokenAddress",\n    get: function get() {\n      if (!this._userDepositTokenAddress) throw new Error(\'address empty\');\n      return this._userDepositTokenAddress;\n    }\n  }], [{\n    key: "createRaiden",\n    value: function () {\n      var _createRaiden = raiden_service_asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee22(provider) {\n        var account,\n            stateBackup,\n            subkey,\n            _args22 = arguments;\n        return regenerator_default.a.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                account = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : 0;\n                stateBackup = _args22.length > 2 ? _args22[2] : undefined;\n                subkey = _args22.length > 3 ? _args22[3] : undefined;\n                _context22.prev = 3;\n                _context22.next = 6;\n                return dist["c" /* Raiden */].create(provider, account, {\n                  storage: window.localStorage,\n                  state: stateBackup\n                }, undefined, {\n                  pfsSafetyMargin: 1.1,\n                  pfs: "https://pfs.raidentransport.test001.env.raiden.network",\n                  matrixServer: "https://raidentransport.test001.env.raiden.network"\n                }, subkey);\n\n              case 6:\n                return _context22.abrupt("return", _context22.sent);\n\n              case 9:\n                _context22.prev = 9;\n                _context22.t0 = _context22["catch"](3);\n                throw new RaidenInitializationFailed(_context22.t0);\n\n              case 12:\n              case "end":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, null, [[3, 9]]);\n      }));\n\n      function createRaiden(_x36) {\n        return _createRaiden.apply(this, arguments);\n      }\n\n      return createRaiden;\n    }()\n  }]);\n\n  return RaidenService;\n}();\n\n\nvar ChannelSettleFailed = /*#__PURE__*/function (_Error) {\n  raiden_service_inherits(ChannelSettleFailed, _Error);\n\n  var _super = raiden_service_createSuper(ChannelSettleFailed);\n\n  function ChannelSettleFailed() {\n    raiden_service_classCallCheck(this, ChannelSettleFailed);\n\n    return _super.apply(this, arguments);\n  }\n\n  return ChannelSettleFailed;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar ChannelCloseFailed = /*#__PURE__*/function (_Error2) {\n  raiden_service_inherits(ChannelCloseFailed, _Error2);\n\n  var _super2 = raiden_service_createSuper(ChannelCloseFailed);\n\n  function ChannelCloseFailed() {\n    raiden_service_classCallCheck(this, ChannelCloseFailed);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return ChannelCloseFailed;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar ChannelOpenFailed = /*#__PURE__*/function (_Error3) {\n  raiden_service_inherits(ChannelOpenFailed, _Error3);\n\n  var _super3 = raiden_service_createSuper(ChannelOpenFailed);\n\n  function ChannelOpenFailed() {\n    raiden_service_classCallCheck(this, ChannelOpenFailed);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return ChannelOpenFailed;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar ChannelDepositFailed = /*#__PURE__*/function (_Error4) {\n  raiden_service_inherits(ChannelDepositFailed, _Error4);\n\n  var _super4 = raiden_service_createSuper(ChannelDepositFailed);\n\n  function ChannelDepositFailed() {\n    raiden_service_classCallCheck(this, ChannelDepositFailed);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return ChannelDepositFailed;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar EnsResolveFailed = /*#__PURE__*/function (_Error5) {\n  raiden_service_inherits(EnsResolveFailed, _Error5);\n\n  var _super5 = raiden_service_createSuper(EnsResolveFailed);\n\n  function EnsResolveFailed() {\n    raiden_service_classCallCheck(this, EnsResolveFailed);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return EnsResolveFailed;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar TransferFailed = /*#__PURE__*/function (_Error6) {\n  raiden_service_inherits(TransferFailed, _Error6);\n\n  var _super6 = raiden_service_createSuper(TransferFailed);\n\n  function TransferFailed() {\n    raiden_service_classCallCheck(this, TransferFailed);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return TransferFailed;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar RaidenInitializationFailed = /*#__PURE__*/function (_Error7) {\n  raiden_service_inherits(RaidenInitializationFailed, _Error7);\n\n  var _super7 = raiden_service_createSuper(RaidenInitializationFailed);\n\n  function RaidenInitializationFailed() {\n    raiden_service_classCallCheck(this, RaidenInitializationFailed);\n\n    return _super7.apply(this, arguments);\n  }\n\n  return RaidenInitializationFailed;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n// CONCATENATED MODULE: ./src/plugins/raiden.ts\n\n\nfunction RaidenPlugin(Vue, _options) {\n  Vue.prototype.$raiden = new raiden_service_RaidenService(src_store);\n}\n// EXTERNAL MODULE: ./node_modules/ethereum-blockies-base64/dist/main.js\nvar main = __webpack_require__("103a");\nvar main_default = /*#__PURE__*/__webpack_require__.n(main);\n\n// CONCATENATED MODULE: ./src/services/identicon-cache.ts\nfunction identicon_cache_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction identicon_cache_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction identicon_cache_createClass(Constructor, protoProps, staticProps) { if (protoProps) identicon_cache_defineProperties(Constructor.prototype, protoProps); if (staticProps) identicon_cache_defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar identicon_cache_IdenticonCache = /*#__PURE__*/function () {\n  function IdenticonCache() {\n    identicon_cache_classCallCheck(this, IdenticonCache);\n\n    this.cache = {};\n  }\n\n  identicon_cache_createClass(IdenticonCache, [{\n    key: "getIdenticon",\n    value: function getIdenticon(address) {\n      var cached = this.cache[address];\n\n      if (!cached) {\n        var generated = main_default()(address);\n        this.cache[address] = generated;\n        return generated;\n      } else {\n        return cached;\n      }\n    }\n  }]);\n\n  return IdenticonCache;\n}();\n// CONCATENATED MODULE: ./src/plugins/identicon-plugin.ts\n\nfunction IdenticonPlugin(Vue, _options) {\n  Vue.prototype.$identicon = new identicon_cache_IdenticonCache();\n}\n// EXTERNAL MODULE: ./node_modules/vue-i18n/dist/vue-i18n.esm.js\nvar vue_i18n_esm = __webpack_require__("a925");\n\n// CONCATENATED MODULE: ./src/i18n.ts\n/* istanbul ignore file */\n\n\nvue_runtime_esm["a" /* default */].use(vue_i18n_esm["a" /* default */]);\n\nfunction loadLocaleMessages() {\n  var locales = __webpack_require__("49f8");\n\n  var messages = {};\n  locales.keys().forEach(function (key) {\n    var matched = key.match(/([A-Za-z0-9-_]+)\\./i);\n\n    if (matched && matched.length > 1) {\n      var locale = matched[1];\n      messages[locale] = locales(key);\n    }\n  });\n  return messages;\n}\n\n/* harmony default export */ var i18n = (new vue_i18n_esm["a" /* default */]({\n  locale: "en" || false,\n  fallbackLocale: "en" || false,\n  messages: loadLocaleMessages()\n}));\n// EXTERNAL MODULE: ./node_modules/@mdi/font/css/materialdesignicons.css\nvar materialdesignicons = __webpack_require__("5363");\n\n// EXTERNAL MODULE: ./node_modules/vuetify/lib/framework.js + 24 modules\nvar framework = __webpack_require__("f309");\n\n// CONCATENATED MODULE: ./src/plugins/vuetify.ts\n/* istanbul ignore file */\n\n\n\nvue_runtime_esm["a" /* default */].use(framework["a" /* default */]);\n/* harmony default export */ var vuetify = (new framework["a" /* default */]({\n  icons: {\n    iconfont: \'mdi\'\n  },\n  theme: {\n    dark: true,\n    themes: {\n      dark: {\n        primary: \'#28A5C8\',\n        secondary: \'#0A6E87\'\n      }\n    }\n  }\n}));\n// EXTERNAL MODULE: ./node_modules/vue-virtual-scroller/dist/vue-virtual-scroller.esm.js\nvar vue_virtual_scroller_esm = __webpack_require__("e508");\n\n// EXTERNAL MODULE: ./node_modules/vue-virtual-scroller/dist/vue-virtual-scroller.css\nvar vue_virtual_scroller = __webpack_require__("a899");\n\n// EXTERNAL MODULE: ./node_modules/register-service-worker/index.js\nvar register_service_worker = __webpack_require__("9483");\n\n// CONCATENATED MODULE: ./src/registerServiceWorker.ts\n/* eslint-disable no-console */\n\n/* istanbul ignore file */\n\n\nif ( true && !Object({"NODE_ENV":"production","VUE_APP_PFS":"https://pfs.raidentransport.test001.env.raiden.network","VUE_APP_TRANSPORT":"https://raidentransport.test001.env.raiden.network","VUE_APP_HUB":"hub.raiden.eth","VUE_APP_I18N_LOCALE":"en","VUE_APP_I18N_FALLBACK_LOCALE":"en","BASE_URL":"/staging/"}).VUE_APP_RAIDEN_PACKAGE) {\n  Object(register_service_worker["a" /* register */])("".concat("/staging/", "service-worker.js"), {\n    ready: function ready() {\n      console.log(\'App is being served from cache by a service worker.\\n\' + \'For more details, visit https://goo.gl/AFskqB\');\n    },\n    registered: function registered(registration) {\n      // Check periodically for updates every minute\n      setInterval(function () {\n        registration.update();\n      }, 1000 * 60);\n      console.log(\'Service worker has been registered.\');\n    },\n    cached: function cached() {\n      console.log(\'Content has been cached for offline use.\');\n    },\n    updatefound: function updatefound() {\n      console.log(\'New content is downloading.\');\n    },\n    updated: function updated(registration) {\n      document.dispatchEvent(new CustomEvent(\'swUpdated\', {\n        detail: registration\n      }));\n      console.log(\'New content is available; please refresh.\');\n    },\n    offline: function offline() {\n      console.log(\'No internet connection found. App is running in offline mode.\');\n    },\n    error: function error(_error) {\n      console.error(\'Error during service worker registration:\', _error);\n    }\n  });\n}\n// CONCATENATED MODULE: ./src/main.ts\n/* istanbul ignore file */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvue_runtime_esm["a" /* default */].config.productionTip = false;\nObject(logstore["b" /* setupLogStore */])();\nvue_runtime_esm["a" /* default */].use(RaidenPlugin);\nvue_runtime_esm["a" /* default */].use(IdenticonPlugin);\nvue_runtime_esm["a" /* default */].use(vue_virtual_scroller_esm["a" /* default */]);\nnew vue_runtime_esm["a" /* default */]({\n  vuetify: vuetify,\n  router: src_router,\n  store: src_store,\n  i18n: i18n,\n  render: function render(h) {\n    return h(src_App);\n  }\n}).$mount(\'#app\');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///cd49\n')},df2d:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9CbHVycmVkT3ZlcmxheS52dWU/MjMyNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJkZjJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///df2d\n")},e1fc:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BZGRyZXNzRGlzcGxheS52dWU/MTJkNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJlMWZjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///e1fc\n")},edd4:function(module){eval('module.exports = JSON.parse("{\\"home\\":{\\"welcome\\":\\"Welcome to the Raiden dApp\\",\\"connect-button\\":\\"Connect\\",\\"disclaimer\\":\\"The Raiden dApp is a reference implementation of the Raiden Light Client SDK. It is work in progress and can only be used on Ethereum testnets.\\",\\"getting-started\\":{\\"description\\":\\"Read the {0} for detailed information on how to use the Raiden dApp.\\",\\"link-name\\":\\"getting started guide\\"},\\"connect-dialog\\":{\\"connect-title\\":\\"Connect\\",\\"divider\\":\\"-OR-\\",\\"web3-provider\\":\\"Use Web3 Provider\\",\\"raiden-account\\":{\\"description\\":\\"Connect to Web3 and re-generate a {0}\\",\\"link-name\\":\\"dedicated Raiden account.\\"},\\"no-provider\\":\\"No Web3 provider detected, please install e.g. MetaMask.\\"}},\\"general\\":{\\"buttons\\":{\\"cancel\\":\\"Cancel\\",\\"transfer\\":\\"Transfer\\",\\"continue\\":\\"Continue\\",\\"confirm\\":\\"Confirm\\"},\\"offline\\":\\"Please connect to the internet.\\"},\\"general-menu\\":{\\"account-details\\":\\"Account Details\\",\\"address\\":\\"Address:\\",\\"currency\\":\\"ETH:\\",\\"menu-items\\":{\\"backup-state-title\\":\\"Backup state\\",\\"backup-state-subtitle\\":\\"Download & upload your state\\",\\"report-bugs-title\\":\\"Report bugs\\",\\"report-bugs-subtitle\\":\\"Download logs\\"}},\\"backup-state\\":{\\"description\\":\\"The state holds all account information except the private key. You can backup your state to make sure the dApp is kept in sync when switching between browsers.\\",\\"disabled-download\\":\\"Downloading the state is only possible when connected to the dApp\\",\\"disabled-upload\\":\\"Uploading the state is only possible when the dApp is disconnected\\",\\"download\\":\\"Download State\\",\\"download-warning\\":\\"Downloading the state will force the dApp to shut down\\",\\"download-button\\":\\"Download\\",\\"upload\\":\\"Upload State\\",\\"upload-drag-and-drop\\":\\"Drag and drop state file\\",\\"upload-divider\\":\\"or\\",\\"upload-button\\":\\"Browse files\\",\\"upload-error\\":\\"Only one state file in valid JSON format can be uploaded\\"},\\"update\\":{\\"available\\":\\"A new version is available.\\",\\"update\\":\\"Refresh\\"},\\"address-input\\":{\\"input\\":{\\"placeholder\\":\\"Enter an address or ENS name...\\"},\\"blockie-alt\\":\\"Selected token address blockie\\",\\"error\\":{\\"invalid-address\\":\\"Please enter a valid address or ENS name\\",\\"no-checksum\\":\\"Please enter an address in checksum format. You can convert your address on https://ethsum.netlify.com\\",\\"empty\\":\\"Please enter an address or ENS name\\",\\"ens-resolve-failed\\":\\"Please enter a resolvable ENS name\\",\\"invalid-excluded-address\\":\\"Please enter a different address or ENS name. You can\'t use your own address or the address of the token network.\\",\\"channel-not-open\\":\\"Please enter a hub address you have an open channel with.\\",\\"target-offline\\":\\"Target is offline.\\"}},\\"amount-input\\":{\\"input\\":{\\"hint\\":\\"Please enter an amount\\"},\\"error\\":{\\"empty\\":\\"Please enter an amount\\",\\"too-many-decimals\\":\\"Please use only up to {decimals} decimals for this token\\",\\"not-enough-funds\\":\\"Your maximum usable amount is {funds} {symbol}\\",\\"zero\\":\\"Please enter an amount larger than zero\\",\\"invalid\\":\\"Please enter a valid amount\\"}},\\"address-display\\":{\\"copy\\":\\"Click to copy\\",\\"copied\\":\\"Copied!\\"},\\"app-header\\":{\\"currency\\":\\"ETH\\",\\"pending-transfers\\":\\"no pending transfers | 1 pending transfer | {amount} pending transfers\\"},\\"channel-actions\\":{\\"deposit\\":\\"Deposit\\",\\"close\\":\\"Close\\",\\"settle\\":\\"Settle\\"},\\"channel-deposit\\":{\\"buttons\\":{\\"confirm\\":\\"Deposit\\"},\\"input\\":{\\"label\\":\\"Amount\\"}},\\"find-routes\\":{\\"hops\\":\\"Hops\\",\\"price\\":\\"Price\\",\\"sub-title\\":\\"Route(s) provided by {subdomain} including number of hops and estimated fee\\",\\"error\\":{\\"title\\":\\"Oops, something went wrong\\"}},\\"stepper\\":{\\"steps\\":{\\"open\\":{\\"title\\":\\"Open\\",\\"description\\":\\"You can deposit more tokens \\\\n or close the channel.\\"},\\"closed\\":{\\"title\\":\\"Closed\\",\\"description\\":\\"Please wait until your channel is settleable. \\\\nthis may take some time.\\"},\\"settleable\\":{\\"title\\":\\"Settleable\\",\\"description\\":\\"Settle your channel to transfer \\\\n your tokens back to your account.\\"}}},\\"channels\\":{\\"open\\":{\\"header\\":\\"Open\\"},\\"closed\\":{\\"header\\":\\"Closed\\"},\\"settleable\\":{\\"header\\":\\"Settleable\\"},\\"snackbar-close\\":\\"Close\\"},\\"channel-list\\":{\\"channel\\":{\\"blockie_alt\\":\\"Partner address blockie\\",\\"state\\":\\"Deposit {deposit} | State: {state}\\",\\"close_dialog\\":{\\"title\\":\\"Close Channel\\",\\"description\\":\\"Are you sure you want to close this channel? This action cannot be undone.\\"},\\"settle_dialog\\":{\\"title\\":\\"Settle Channel\\",\\"description\\":\\"Are you sure you want to settle the channel with hub {partner} for token {token}?\\"}},\\"messages\\":{\\"close\\":{\\"success\\":\\"Channel closed successfully\\",\\"failure\\":\\"Channel close failed\\"},\\"deposit\\":{\\"success\\":\\"Deposit was successful\\",\\"failure\\":\\"Deposit failed\\"},\\"settle\\":{\\"success\\":\\"Channel settle was successful\\",\\"failure\\":\\"Channel settle failed\\"}}},\\"confirmation\\":{\\"buttons\\":{\\"cancel\\":\\"Cancel\\",\\"close\\":\\"Close\\",\\"settle\\":\\"Settle\\"}},\\"confirmation-dialog\\":{\\"buttons\\":{\\"cancel\\":\\"Cancel\\",\\"confirm\\":\\"Confirm\\"}},\\"error-screen\\":{\\"title\\":\\"Error\\"},\\"no-access\\":{\\"unsupported-network\\":\\"The current network is unsupported. Please choose a different network.\\",\\"sdk-initialization-failure\\":\\"SDK initialization failed. Please check the console for more information.\\",\\"rdn-state-migration\\":\\"Cannot replace state with older uploaded state.\\",\\"generic-error\\":\\"A valid account could not be detected. Please make sure that your provider is unlocked and accessible.\\"},\\"tokens\\":{\\"connected\\":{\\"header\\":\\"Connected Tokens\\",\\"token\\":{\\"blockie-alt\\":\\"Partner address blockie\\",\\"token-info\\":\\"{symbol} | {name}\\",\\"buttons\\":{\\"disconnect\\":\\"Disconnect Token\\",\\"view-channels\\":\\"View Channels\\"}}},\\"connect-new\\":\\"Connect new token\\",\\"disconnect-dialog\\":{\\"header\\":\\"Disconnect token\\",\\"confirmation-message\\":\\"This action will close all channels for the {symbol} token! {address}\\"},\\"leave-progress\\":{\\"label\\":\\"Disconnect\\",\\"title\\":\\"Disconnecting from the token network\\",\\"description\\":\\"Closing the channels\\"},\\"leave-done\\":{\\"label\\":\\"Done\\",\\"title\\":\\"Disconnected from the token network\\",\\"description\\":\\"All your channels were successfully closed\\"}},\\"application\\":{\\"privacy-policy\\":\\"Privacy Policy, Disclaimer & Imprint\\"},\\"mint-deposit-dialog\\":{\\"button\\":\\"Mint and deposit\\",\\"available\\":\\"Available {currency} to pay for on-chain transaction: {balance} {currency}\\",\\"error\\":\\"The mint and deposit operation failed.\\",\\"progress\\":{\\"mint\\":\\"Minting {currency} tokens\\",\\"approve\\":\\"Allow UDC to access {currency} tokens\\",\\"deposit\\":\\"Deposit {currency} tokens to the UDC\\"}},\\"transfer\\":{\\"deposit-button\\":\\"Deposit\\",\\"channel-button\\":\\"Channels\\",\\"capacity-label\\":\\"Capacity\\",\\"recipient-label\\":\\"Recipient\\",\\"amount-label\\":\\"Amount\\",\\"amount-placeholder\\":\\"Specify amount...\\",\\"error\\":{\\"button\\":\\"Dismiss\\",\\"title\\":\\"Token transfer unsuccessful\\",\\"deposit-title\\":\\"Deposit failed, please try again.\\"},\\"steps\\":{\\"request-route\\":{\\"title\\":\\"Request Route\\",\\"tooltip\\":\\"Mint and deposit {token} to the User Deposit Contract to pay for PFS requests\\",\\"udc-description\\":\\"Balance to pay the Pathfinding Service\\",\\"udc-description-low-balance\\":\\"Your {token} token balance is to low to pay for the Pathfinding Service. Use the button above to mint and deposit more tokens.\\",\\"in-progress\\":\\"Paying for the route request\\",\\"searching-for-route\\":\\"Searching for route...\\",\\"done\\":\\"Route request payment complete\\"},\\"select-route\\":{\\"title\\":\\"Select Route\\"},\\"confirm-transfer\\":{\\"title\\":\\"Confirm Transfer\\",\\"total-amount\\":\\"Total Amount\\"},\\"call-to-action\\":{\\"1\\":{\\"default\\":\\"Transfer Route Request\\",\\"amount\\":\\"Confirm PFS Fee of {amount} {symbol}\\"},\\"2\\":{\\"default\\":\\"Confirm Mediation Fees\\",\\"amount\\":\\"Confirm Mediation Fee of {amount} {symbol}\\"},\\"3\\":{\\"amount\\":\\"Transfer {amount} {symbol}\\"}},\\"transfer\\":{\\"title\\":\\"Transferring Tokens\\",\\"description\\":\\"Sign the transaction in MetaMask and close this dialogue to continue using the dApp. Your transfer will finish in the background.\\"},\\"done\\":{\\"title\\":\\"Send Successful\\",\\"description\\":\\"Your transfer was successful.\\"},\\"deposit\\":{\\"label\\":\\"Deposit\\",\\"title\\":\\"Depositing Tokens\\",\\"description\\":\\"Sign the transaction in MetaMask and close this dialogue to continue using the dApp.\\"},\\"deposit-done\\":{\\"label\\":\\"Done\\",\\"title\\":\\"Deposit Successful\\",\\"description\\":\\"Your tokens have been successfully deposited.\\"},\\"summary\\":{\\"headline\\":\\"Summary\\",\\"route-request\\":\\"Route Request\\",\\"pfs\\":\\"Pathfinding Service\\",\\"service-fee\\":\\"Service Fee\\",\\"mediated-transfer\\":\\"Mediated Transfer\\",\\"direct-transfer\\":\\"Direct Transfer\\",\\"target\\":\\"Target\\",\\"transfer-amount\\":\\"Transfer Amount\\",\\"total-amount\\":\\"Total Amount\\",\\"mediation-fee\\":\\"Mediation Fee\\",\\"identifier\\":\\"Identifier\\",\\"footnotes\\":{\\"one\\":\\"1\\",\\"direct-transfer\\":\\"Route request and selection skipped, because you are performing a direct transfer.\\",\\"route-selection-skipped\\":\\"Automatically skipped route selection, because there was only a single route with zero fees.\\"}}}},\\"select-token\\":{\\"header\\":\\"Available\\",\\"tokens\\":{\\"token\\":{\\"blockie-alt\\":\\"Token address blockie\\",\\"token-information\\":\\"{symbol} | {name}\\"}}},\\"select-hub\\":{\\"select-button\\":\\"Select Hub\\"},\\"open-channel\\":{\\"error\\":{\\"title\\":\\"Ops, something went wrong\\",\\"button\\":\\"Dismiss\\",\\"deposit-failed\\":\\"Could not deposit to the channel.\\",\\"open-failed\\":\\"Channel open failed.\\"},\\"open-button\\":\\"Open Channel\\",\\"hub\\":\\"Hub\\",\\"steps\\":{\\"open\\":{\\"label\\":\\"Open\\",\\"title\\":\\"Opening a new channel\\",\\"description\\":\\"Please do not close the browser and confirm the transaction with MetaMask.\\"},\\"transfer\\":{\\"label\\":\\"Transfer\\",\\"title\\":\\"Transferring tokens to the network and deposit into the channel\\",\\"description\\":\\"Please do not close the browser and confirm two (2) transactions with MetaMask.\\"},\\"deposit\\":{\\"label\\":\\"Deposit\\",\\"title\\":\\"Not implemented - split title above, when done\\",\\"description\\":\\"Not implemented - split description above, when done\\"},\\"done\\":{\\"label\\":\\"Done\\",\\"title\\":\\"New Channel opened\\",\\"description\\":\\"A new channel was successfully opened. You can now start making transfers.\\"}},\\"confirmation\\":\\"Channel opening is in progress, are you sure you want to leave?\\"},\\"token-information\\":{\\"title\\":\\"Token\\",\\"description\\":\\"{symbol} | {name}\\",\\"balance\\":\\"Balance\\"},\\"pathfinding-services\\":{\\"title\\":\\"Select Pathfinding Service\\",\\"rtt\\":\\"{time} ms\\",\\"headers\\":{\\"host\\":\\"Pathfinding Service\\",\\"rtt\\":\\"Ping\\",\\"price\\":\\"Price\\"}},\\"mint-dialog\\":{\\"title\\":\\"Mint {symbol}\\",\\"description\\":\\"If you continue, you will get prompted by MetaMask to sign off a minting transction. In order to mint tokens, you need test net ETH in your wallet.\\"},\\"error-message\\":{\\"problem\\":\\"Problem:\\",\\"solution\\":\\"Solution:\\"},\\"errors\\":{\\"RDN_GENERAL_ERROR\\":{\\"title\\":\\"An error occured\\",\\"problem\\":\\"We do not know this error, sorry.\\",\\"solution\\":[\\"Please help us and report the issue\\",\\"Click on your identicon in the top right corner\\",\\"Click on Report Bugs / Download logs\\",\\"File a new issue on https://github.com/raiden-network/light-client\\",\\"Upload logs to the issue\\"]},\\"RDN_MINT_FAILED\\":{\\"title\\":\\"Could not mint token\\",\\"problem\\":\\"It looks like the Light Client does not support minting out-of-the-box for this token contract.\\",\\"solution\\":\\"You may try to mint manually via MetaMask and Etherscan. You can find a step-by-step guide on https://github.com/raiden-network/light-client#minting-manually.\\"},\\"PFS_UNKNOWN_TOKEN_NETWORK\\":{\\"title\\":\\"No open channels\\",\\"problem\\":\\"You don\'t seem to have open channels on this token network.\\",\\"solution\\":[\\"Hit the ← button in the top left\\",\\"Click on the current token network\\",\\"Select Connect new token\\",\\"Select the token you want to transfer\\",\\"Proceed with the flow to open a new channel\\"]},\\"PFS_INVALID_INFO\\":{\\"title\\":\\"Couldn\'t understand Pathfinding Service\\",\\"problem\\":\\"The Light Client has received a response from the Pathfinding Service that it couldn\'t understand. It\'s possible that the current Light Client version is out-of-sync with the Pathfinding Service.\\",\\"solution\\":[\\"Update the dApp by reloading the page\\",\\"Attempt a new transfer\\",\\"If the problem persists, please help us and report the issue\\",\\"Click on your identicon in the top right corner\\",\\"Click on Report Bugs / Download logs\\",\\"File a new issue on https://github.com/raiden-network/light-client\\",\\"Upload logs to the issue\\"]},\\"PFS_NO_ROUTES_FOUND\\":{\\"title\\":\\"No routes found\\",\\"problem\\":\\"Pathfinding Service wasn\'t able to find a route in the Raiden Network to perform your transfer.\\",\\"solution\\":\\"Make sure that you either have a direct channel with the target or that both of you are connected to a well-connected hub.\\"},\\"PFS_ERROR_RESPONSE\\":{\\"title\\":\\"Pathfinding replied with an error\\",\\"problem\\":\\"While communicating with the Pathfinding Service, you have received an error response that we don\'t actively handle yet.\\",\\"solution\\":[\\"Simply retry your last action\\",\\"If the problem persists, please help us and report the issue\\",\\"Click on your identicon in the top right corner\\",\\"Click on Report Bugs / Download logs\\",\\"File a new issue on https://github.com/raiden-network/light-client\\",\\"Upload logs to the issue\\"]},\\"PFS_DISABLED\\":{\\"title\\":\\"Pathfinding Service disabled\\",\\"problem\\":\\"You tried to find a route in the Raiden Network but Pathfinding was either disabled in your configuration or you did not select a valid Pathfinding Service.\\",\\"solution\\":\\"Try to restart the Light Client by reloading the page and attempt a new transfer.\\"},\\"PFS_TARGET_OFFLINE\\":{\\"title\\":\\"Target address is offline\\",\\"problem\\":\\"You are trying to send tokens to an offline target.\\",\\"solution\\":\\"Hit the ← button and verify that the address is online or choose a different target address.\\"},\\"PFS_LAST_IOU_REQUEST_FAILED\\":{\\"title\\":\\"Error while depositing tokens for Pathfinding Service\\",\\"problem\\":\\"While trying to deposit tokens for route requests, the Pathfinding Service returned an error.\\",\\"solution\\":[\\"This should happen very rarely, please retry to deposit\\",\\"If the problem persists, please help us and report the issue\\",\\"Click on your identicon in the top right corner\\",\\"Click on Report Bugs / Download logs\\",\\"File a new issue on https://github.com/raiden-network/light-client\\",\\"Upload logs to the issue\\"]},\\"PFS_IOU_SIGNATURE_MISMATCH\\":{\\"title\\":\\"Error while depositing tokens for Pathfinding Service\\",\\"problem\\":\\"While trying to deposit tokens for route requests, the Pathfinding Service encountered mismatching signatures.\\",\\"solution\\":[\\"This should happen very rarely, please retry to deposit\\",\\"If the problem persists, please help us and report the issue\\",\\"Click on your identicon in the top right corner\\",\\"Click on Report Bugs / Download logs\\",\\"File a new issue on https://github.com/raiden-network/light-client\\",\\"Upload logs to the issue\\"]}},\\"versions\\":{\\"sdk\\":\\"Raiden SDK: {version}\\",\\"contracts\\":\\"Raiden Contracts: {version}\\"},\\"scan\\":{\\"permission\\":{\\"title\\":\\"Grant Camera Access\\",\\"description\\":\\"In order to scan QR codes, you will need to allow camera access.\\"}},\\"progress-steps\\":{\\"transfer\\":{\\"PENDING\\":\\"Transfer sent\\",\\"RECEIVED\\":\\"Transfer acknowledged by partner\\",\\"REFUNDED\\":\\"Transfer refunded\\",\\"CLOSED\\":\\"Channel closed early\\",\\"REVEALED\\":\\"Secret revealed to target\\",\\"UNLOCKING\\":\\"Unlock sent to partner\\",\\"EXPIRING\\":\\"Lock expired\\",\\"UNLOCKED\\":\\"Unlock acknowledged\\",\\"EXPIRED\\":\\"Lock expired acknowledged\\",\\"REQUESTED\\":\\"Secret requested by target\\",\\"REGISTERED\\":\\"Secret registered on-chain\\"}}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJlZGQ0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///edd4\n')},f33c:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db25uZWN0RGlhbG9nLnZ1ZT83ZDA5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6ImYzM2MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///f33c\n")},f455:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* reexport */ raiden_Raiden; });\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ ChannelState; });\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ EventTypes; });\n\n// UNUSED EXPORTS: RaidenState, encodeRaidenState, ShutdownReason, RaidenTransferStatus, RaidenConfig, AssertionError, assert, decode, isntNil, BigNumberC, HexString, Int, UInt, Signature, Hash, Secret, PrivateKey, Address, Timed, timed, Signed, instanceOf, ErrorCodes, ErrorDetails, RaidenError, ErrorCodec\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/channels/actions.js\nvar channels_actions_namespaceObject = {};\n__webpack_require__.r(channels_actions_namespaceObject);\n__webpack_require__.d(channels_actions_namespaceObject, "newBlock", function() { return newBlock; });\n__webpack_require__.d(channels_actions_namespaceObject, "tokenMonitored", function() { return tokenMonitored; });\n__webpack_require__.d(channels_actions_namespaceObject, "channelOpen", function() { return channelOpen; });\n__webpack_require__.d(channels_actions_namespaceObject, "channelMonitor", function() { return channelMonitor; });\n__webpack_require__.d(channels_actions_namespaceObject, "channelDeposit", function() { return channelDeposit; });\n__webpack_require__.d(channels_actions_namespaceObject, "channelWithdrawn", function() { return channelWithdrawn; });\n__webpack_require__.d(channels_actions_namespaceObject, "channelClose", function() { return channelClose; });\n__webpack_require__.d(channels_actions_namespaceObject, "channelSettleable", function() { return channelSettleable; });\n__webpack_require__.d(channels_actions_namespaceObject, "channelSettle", function() { return channelSettle; });\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/transport/actions.js\nvar transport_actions_namespaceObject = {};\n__webpack_require__.r(transport_actions_namespaceObject);\n__webpack_require__.d(transport_actions_namespaceObject, "matrixSetup", function() { return matrixSetup; });\n__webpack_require__.d(transport_actions_namespaceObject, "matrixPresence", function() { return matrixPresence; });\n__webpack_require__.d(transport_actions_namespaceObject, "matrixRoom", function() { return matrixRoom; });\n__webpack_require__.d(transport_actions_namespaceObject, "matrixRoomLeave", function() { return matrixRoomLeave; });\n__webpack_require__.d(transport_actions_namespaceObject, "rtcChannel", function() { return rtcChannel; });\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/messages/actions.js\nvar messages_actions_namespaceObject = {};\n__webpack_require__.r(messages_actions_namespaceObject);\n__webpack_require__.d(messages_actions_namespaceObject, "messageSend", function() { return messageSend; });\n__webpack_require__.d(messages_actions_namespaceObject, "messageGlobalSend", function() { return messageGlobalSend; });\n__webpack_require__.d(messages_actions_namespaceObject, "messageReceived", function() { return messageReceived; });\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/transfers/actions.js\nvar transfers_actions_namespaceObject = {};\n__webpack_require__.r(transfers_actions_namespaceObject);\n__webpack_require__.d(transfers_actions_namespaceObject, "transfer", function() { return actions_transfer; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSigned", function() { return transferSigned; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferProcessed", function() { return transferProcessed; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSecret", function() { return transferSecret; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSecretRegister", function() { return transferSecretRegister; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSecretRequest", function() { return transferSecretRequest; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferSecretReveal", function() { return transferSecretReveal; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferUnlock", function() { return transferUnlock; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferUnlockProcessed", function() { return transferUnlockProcessed; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferExpire", function() { return transferExpire; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferExpireProcessed", function() { return transferExpireProcessed; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferRefunded", function() { return transferRefunded; });\n__webpack_require__.d(transfers_actions_namespaceObject, "transferClear", function() { return transferClear; });\n__webpack_require__.d(transfers_actions_namespaceObject, "withdrawReceive", function() { return withdrawReceive; });\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/path/actions.js\nvar path_actions_namespaceObject = {};\n__webpack_require__.r(path_actions_namespaceObject);\n__webpack_require__.d(path_actions_namespaceObject, "pathFind", function() { return pathFind; });\n__webpack_require__.d(path_actions_namespaceObject, "pfsListUpdated", function() { return pfsListUpdated; });\n__webpack_require__.d(path_actions_namespaceObject, "iouPersist", function() { return iouPersist; });\n__webpack_require__.d(path_actions_namespaceObject, "iouClear", function() { return iouClear; });\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/channels/epics.js\nvar epics_namespaceObject = {};\n__webpack_require__.r(epics_namespaceObject);\n__webpack_require__.d(epics_namespaceObject, "initNewBlockEpic", function() { return epics_initNewBlockEpic; });\n__webpack_require__.d(epics_namespaceObject, "initTokensRegistryEpic", function() { return epics_initTokensRegistryEpic; });\n__webpack_require__.d(epics_namespaceObject, "initMonitorChannelsEpic", function() { return epics_initMonitorChannelsEpic; });\n__webpack_require__.d(epics_namespaceObject, "initMonitorProviderEpic", function() { return epics_initMonitorProviderEpic; });\n__webpack_require__.d(epics_namespaceObject, "tokenMonitoredEpic", function() { return epics_tokenMonitoredEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelOpenedEpic", function() { return epics_channelOpenedEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelMonitoredEpic", function() { return epics_channelMonitoredEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelOpenEpic", function() { return epics_channelOpenEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelDepositEpic", function() { return epics_channelDepositEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelCloseEpic", function() { return epics_channelCloseEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelUpdateEpic", function() { return epics_channelUpdateEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelSettleEpic", function() { return epics_channelSettleEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelSettleableEpic", function() { return epics_channelSettleableEpic; });\n__webpack_require__.d(epics_namespaceObject, "channelUnlockEpic", function() { return epics_channelUnlockEpic; });\n__webpack_require__.d(epics_namespaceObject, "confirmationEpic", function() { return epics_confirmationEpic; });\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/transport/epics.js\nvar transport_epics_namespaceObject = {};\n__webpack_require__.r(transport_epics_namespaceObject);\n__webpack_require__.d(transport_epics_namespaceObject, "initMatrixEpic", function() { return epics_initMatrixEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixShutdownEpic", function() { return epics_matrixShutdownEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMonitorPresenceEpic", function() { return epics_matrixMonitorPresenceEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixPresenceUpdateEpic", function() { return epics_matrixPresenceUpdateEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixCreateRoomEpic", function() { return epics_matrixCreateRoomEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixInviteEpic", function() { return epics_matrixInviteEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixHandleInvitesEpic", function() { return epics_matrixHandleInvitesEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixLeaveExcessRoomsEpic", function() { return epics_matrixLeaveExcessRoomsEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixLeaveUnknownRoomsEpic", function() { return epics_matrixLeaveUnknownRoomsEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixCleanLeftRoomsEpic", function() { return epics_matrixCleanLeftRoomsEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixCleanMissingRoomsEpic", function() { return epics_matrixCleanMissingRoomsEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMessageSendEpic", function() { return epics_matrixMessageSendEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMessageGlobalSendEpic", function() { return epics_matrixMessageGlobalSendEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMessageReceivedEpic", function() { return epics_matrixMessageReceivedEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMessageReceivedUpdateRoomEpic", function() { return epics_matrixMessageReceivedUpdateRoomEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "matrixMonitorChannelPresenceEpic", function() { return epics_matrixMonitorChannelPresenceEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "deliveredEpic", function() { return epics_deliveredEpic; });\n__webpack_require__.d(transport_epics_namespaceObject, "rtcConnectEpic", function() { return epics_rtcConnectEpic; });\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/transfers/epics/index.js\nvar transfers_epics_namespaceObject = {};\n__webpack_require__.r(transfers_epics_namespaceObject);\n__webpack_require__.d(transfers_epics_namespaceObject, "transferChannelClosedEpic", function() { return close_transferChannelClosedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferAutoExpireEpic", function() { return expire_transferAutoExpireEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferGenerateAndSignEnvelopeMessageEpic", function() { return locked_transferGenerateAndSignEnvelopeMessageEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "initQueuePendingEnvelopeMessagesEpic", function() { return init_initQueuePendingEnvelopeMessagesEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "initQueuePendingReceivedEpic", function() { return init_initQueuePendingReceivedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferMediateEpic", function() { return mediate_transferMediateEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferProcessedReceivedEpic", function() { return processed_transferProcessedReceivedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferProcessedSendEpic", function() { return processed_transferProcessedSendEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferUnlockProcessedReceivedEpic", function() { return processed_transferUnlockProcessedReceivedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferExpireProcessedEpic", function() { return processed_transferExpireProcessedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferReceivedReplyProcessedEpic", function() { return processed_transferReceivedReplyProcessedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferRefundedEpic", function() { return refund_transferRefundedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferRetryMessageEpic", function() { return retry_transferRetryMessageEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSecretRequestedEpic", function() { return secret_transferSecretRequestedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSecretRevealEpic", function() { return secret_transferSecretRevealEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSecretRevealedEpic", function() { return secret_transferSecretRevealedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferRequestUnlockEpic", function() { return secret_transferRequestUnlockEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "monitorSecretRegistryEpic", function() { return secret_monitorSecretRegistryEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSuccessOnSecretRegisteredEpic", function() { return secret_transferSuccessOnSecretRegisteredEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferAutoRegisterEpic", function() { return secret_transferAutoRegisterEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "transferSecretRegisterEpic", function() { return secret_transferSecretRegisterEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "withdrawRequestReceivedEpic", function() { return withdraw_withdrawRequestReceivedEpic; });\n__webpack_require__.d(transfers_epics_namespaceObject, "withdrawSendConfirmationEpic", function() { return withdraw_withdrawSendConfirmationEpic; });\n\n// NAMESPACE OBJECT: ../raiden-ts/dist/path/epics.js\nvar path_epics_namespaceObject = {};\n__webpack_require__.r(path_epics_namespaceObject);\n__webpack_require__.d(path_epics_namespaceObject, "pathFindServiceEpic", function() { return epics_pathFindServiceEpic; });\n__webpack_require__.d(path_epics_namespaceObject, "pfsCapacityUpdateEpic", function() { return epics_pfsCapacityUpdateEpic; });\n__webpack_require__.d(path_epics_namespaceObject, "pfsFeeUpdateEpic", function() { return epics_pfsFeeUpdateEpic; });\n__webpack_require__.d(path_epics_namespaceObject, "pfsServiceRegistryMonitorEpic", function() { return epics_pfsServiceRegistryMonitorEpic; });\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__("a34a");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/symbol-observable/es/index.js\nvar es = __webpack_require__("a755");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/isomorphic-fetch/fetch-npm-browserify.js\nvar fetch_npm_browserify = __webpack_require__("86ae");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/abort-controller/polyfill.mjs + 2 modules\nvar polyfill = __webpack_require__("fa1e");\n\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__("5c7d");\nvar loglevel_default = /*#__PURE__*/__webpack_require__.n(loglevel);\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/matrix-js-sdk/lib/logger.js\nvar lib_logger = __webpack_require__("51b1");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/matrix-js-sdk/lib/browser-index.js\nvar browser_index = __webpack_require__("aadd");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/wrtc/lib/browser.js\nvar browser = __webpack_require__("eb32");\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/matrix-js-sdk/lib/webrtc/call.js\nvar call = __webpack_require__("4f34");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/polyfills.js\n\n\n // matrix-js-sdk monkey-patch root methodFactory\n\n\nvar methodFactory = loglevel_default.a.methodFactory;\n\nObject.assign(loglevel_default.a, {\n  methodFactory: methodFactory\n}); // revert\n\nlib_logger["logger"].setLevel(loglevel_default.a.levels.DEBUG); // apply\n// request.abort() is called when shutting down matrix; this patch clears some timeouts left behind\n\n\nvar origRequest = Object(browser_index["getRequest"])(); // \'request\' replaces matrix\'s request\n\nObject(browser_index["request"])(function (opts, cb) {\n  var req = origRequest(opts, cb);\n  var origAbort = req.abort.bind(req);\n  return Object.assign(req, {\n    abort: function abort() {\n      origAbort();\n      cb(new Error(\'aborted!\')); // also call callback when aborting, to clear pending timeouts\n    }\n  });\n});\n\n\nif (!(\'RTCPeerConnection\' in globalThis)) {\n  Object.assign(globalThis, browser_default.a);\n} // patch createNewMatrixCall to prevent matrix-js-sdk from hooking WebRTC events in browser;\n// ugly, but there\'s no option to prevent MatrixClient to handle m.call.* events\n\n\n\nObject.assign(call, {\n  createNewMatrixCall: function createNewMatrixCall() {\n    return null;\n  }\n});\n// EXTERNAL MODULE: ./node_modules/ethers/providers/index.js\nvar providers = __webpack_require__("686e");\n\n// EXTERNAL MODULE: ./node_modules/ethers/utils/index.js\nvar utils = __webpack_require__("6934");\n\n// EXTERNAL MODULE: ./node_modules/ethers/constants.js\nvar constants = __webpack_require__("8404");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/redux/es/redux.js\nvar redux = __webpack_require__("7508");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/redux-observable/lib/esm/createEpicMiddleware.js + 9 modules\nvar createEpicMiddleware = __webpack_require__("733d");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/redux-logger/dist/redux-logger.js\nvar redux_logger = __webpack_require__("371e");\n\n// EXTERNAL MODULE: ./node_modules/lodash/constant.js\nvar constant = __webpack_require__("72f0");\nvar constant_default = /*#__PURE__*/__webpack_require__.n(constant);\n\n// EXTERNAL MODULE: ./node_modules/lodash/memoize.js\nvar memoize = __webpack_require__("e380");\nvar memoize_default = /*#__PURE__*/__webpack_require__.n(memoize);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/ReplaySubject.js\nvar ReplaySubject = __webpack_require__("4b96");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/AsyncSubject.js\nvar AsyncSubject = __webpack_require__("b2f7");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js\nvar merge = __webpack_require__("a748");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js\nvar defer = __webpack_require__("9586");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/empty.js\nvar empty = __webpack_require__("1b92");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js\nvar of = __webpack_require__("17f5");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/skip.js\nvar skip = __webpack_require__("d263");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js\nvar map = __webpack_require__("ebb6");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js\nvar filter = __webpack_require__("5670");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/first.js\nvar first = __webpack_require__("3fab");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js\nvar mergeMap = __webpack_require__("a6c5");\n\n// EXTERNAL MODULE: ./node_modules/ethers/dist/ethers.min.js\nvar ethers_min = __webpack_require__("e7ea");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/TokenNetworkRegistryFactory.ts\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar TokenNetworkRegistryFactory_TokenNetworkRegistryFactory = /*#__PURE__*/function () {\n  function TokenNetworkRegistryFactory() {\n    _classCallCheck(this, TokenNetworkRegistryFactory);\n  }\n\n  _createClass(TokenNetworkRegistryFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, _abi, signerOrProvider);\n    }\n  }]);\n\n  return TokenNetworkRegistryFactory;\n}();\nvar _abi = [{\n  inputs: [{\n    internalType: "address",\n    name: "_secret_registry_address",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_chain_id",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_settlement_timeout_min",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_settlement_timeout_max",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_max_token_networks",\n    type: "uint256"\n  }],\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "token_address",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "token_network_address",\n    type: "address"\n  }],\n  name: "TokenNetworkCreated",\n  type: "event"\n}, {\n  inputs: [],\n  name: "chain_id",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "contract_address",\n    type: "address"\n  }],\n  name: "contractExists",\n  outputs: [{\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_token_address",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_channel_participant_deposit_limit",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_token_network_deposit_limit",\n    type: "uint256"\n  }],\n  name: "createERC20TokenNetwork",\n  outputs: [{\n    internalType: "address",\n    name: "token_network_address",\n    type: "address"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "deprecation_executor",\n  outputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "max_token_networks",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "secret_registry_address",\n  outputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "settlement_timeout_max",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "settlement_timeout_min",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "token_network_created",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  name: "token_to_token_networks",\n  outputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/TokenNetworkFactory.ts\nfunction TokenNetworkFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction TokenNetworkFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TokenNetworkFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) TokenNetworkFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) TokenNetworkFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar TokenNetworkFactory_TokenNetworkFactory = /*#__PURE__*/function () {\n  function TokenNetworkFactory() {\n    TokenNetworkFactory_classCallCheck(this, TokenNetworkFactory);\n  }\n\n  TokenNetworkFactory_createClass(TokenNetworkFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, TokenNetworkFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return TokenNetworkFactory;\n}();\nvar TokenNetworkFactory_abi = [{\n  inputs: [{\n    internalType: "address",\n    name: "_token_address",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "_secret_registry",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_chain_id",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_settlement_timeout_min",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_settlement_timeout_max",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "_deprecation_executor",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_channel_participant_deposit_limit",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_token_network_deposit_limit",\n    type: "uint256"\n  }],\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "closing_participant",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "uint256",\n    name: "nonce",\n    type: "uint256"\n  }, {\n    indexed: false,\n    internalType: "bytes32",\n    name: "balance_hash",\n    type: "bytes32"\n  }],\n  name: "ChannelClosed",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "participant",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "total_deposit",\n    type: "uint256"\n  }],\n  name: "ChannelNewDeposit",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "participant1",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "participant2",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "settle_timeout",\n    type: "uint256"\n  }],\n  name: "ChannelOpened",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "participant1_amount",\n    type: "uint256"\n  }, {\n    indexed: false,\n    internalType: "bytes32",\n    name: "participant1_locksroot",\n    type: "bytes32"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "participant2_amount",\n    type: "uint256"\n  }, {\n    indexed: false,\n    internalType: "bytes32",\n    name: "participant2_locksroot",\n    type: "bytes32"\n  }],\n  name: "ChannelSettled",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "receiver",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "sender",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "bytes32",\n    name: "locksroot",\n    type: "bytes32"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "unlocked_amount",\n    type: "uint256"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "returned_tokens",\n    type: "uint256"\n  }],\n  name: "ChannelUnlocked",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "participant",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "total_withdraw",\n    type: "uint256"\n  }],\n  name: "ChannelWithdraw",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: false,\n    internalType: "bool",\n    name: "new_value",\n    type: "bool"\n  }],\n  name: "DeprecationSwitch",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "closing_participant",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "uint256",\n    name: "nonce",\n    type: "uint256"\n  }, {\n    indexed: false,\n    internalType: "bytes32",\n    name: "balance_hash",\n    type: "bytes32"\n  }],\n  name: "NonClosingBalanceProofUpdated",\n  type: "event"\n}, {\n  inputs: [],\n  name: "MAX_SAFE_UINT256",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "chain_id",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "channel_counter",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "channel_participant_deposit_limit",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  name: "channels",\n  outputs: [{\n    internalType: "uint256",\n    name: "settle_block_number",\n    type: "uint256"\n  }, {\n    internalType: "enum TokenNetwork.ChannelState",\n    name: "state",\n    type: "uint8"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "non_closing_participant",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "closing_participant",\n    type: "address"\n  }, {\n    internalType: "bytes32",\n    name: "balance_hash",\n    type: "bytes32"\n  }, {\n    internalType: "uint256",\n    name: "nonce",\n    type: "uint256"\n  }, {\n    internalType: "bytes32",\n    name: "additional_hash",\n    type: "bytes32"\n  }, {\n    internalType: "bytes",\n    name: "non_closing_signature",\n    type: "bytes"\n  }, {\n    internalType: "bytes",\n    name: "closing_signature",\n    type: "bytes"\n  }],\n  name: "closeChannel",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "contract_address",\n    type: "address"\n  }],\n  name: "contractExists",\n  outputs: [{\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "deprecate",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "deprecation_executor",\n  outputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "participant",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "partner",\n    type: "address"\n  }],\n  name: "getChannelIdentifier",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "participant1",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "participant2",\n    type: "address"\n  }],\n  name: "getChannelInfo",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }, {\n    internalType: "enum TokenNetwork.ChannelState",\n    name: "",\n    type: "uint8"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "participant",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "partner",\n    type: "address"\n  }],\n  name: "getChannelParticipantInfo",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }, {\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }, {\n    internalType: "bytes32",\n    name: "",\n    type: "bytes32"\n  }, {\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }, {\n    internalType: "bytes32",\n    name: "",\n    type: "bytes32"\n  }, {\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "participant",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "partner",\n    type: "address"\n  }],\n  name: "getParticipantsHash",\n  outputs: [{\n    internalType: "bytes32",\n    name: "",\n    type: "bytes32"\n  }],\n  stateMutability: "pure",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "sender",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "receiver",\n    type: "address"\n  }],\n  name: "getUnlockIdentifier",\n  outputs: [{\n    internalType: "bytes32",\n    name: "",\n    type: "bytes32"\n  }],\n  stateMutability: "pure",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "participant1",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "participant2",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "settle_timeout",\n    type: "uint256"\n  }],\n  name: "openChannel",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "bytes32",\n    name: "",\n    type: "bytes32"\n  }],\n  name: "participants_hash_to_channel_identifier",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "safety_deprecation_switch",\n  outputs: [{\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "secret_registry",\n  outputs: [{\n    internalType: "contract SecretRegistry",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "participant",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "total_deposit",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "partner",\n    type: "address"\n  }],\n  name: "setTotalDeposit",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "participant",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "total_withdraw",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "expiration_block",\n    type: "uint256"\n  }, {\n    internalType: "bytes",\n    name: "participant_signature",\n    type: "bytes"\n  }, {\n    internalType: "bytes",\n    name: "partner_signature",\n    type: "bytes"\n  }],\n  name: "setTotalWithdraw",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "participant1",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "participant1_transferred_amount",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "participant1_locked_amount",\n    type: "uint256"\n  }, {\n    internalType: "bytes32",\n    name: "participant1_locksroot",\n    type: "bytes32"\n  }, {\n    internalType: "address",\n    name: "participant2",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "participant2_transferred_amount",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "participant2_locked_amount",\n    type: "uint256"\n  }, {\n    internalType: "bytes32",\n    name: "participant2_locksroot",\n    type: "bytes32"\n  }],\n  name: "settleChannel",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "settlement_timeout_max",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "settlement_timeout_min",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "signature_prefix",\n  outputs: [{\n    internalType: "string",\n    name: "",\n    type: "string"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "token",\n  outputs: [{\n    internalType: "contract Token",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "token_network_deposit_limit",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "receiver",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "sender",\n    type: "address"\n  }, {\n    internalType: "bytes",\n    name: "locks",\n    type: "bytes"\n  }],\n  name: "unlock",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "channel_identifier",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "closing_participant",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "non_closing_participant",\n    type: "address"\n  }, {\n    internalType: "bytes32",\n    name: "balance_hash",\n    type: "bytes32"\n  }, {\n    internalType: "uint256",\n    name: "nonce",\n    type: "uint256"\n  }, {\n    internalType: "bytes32",\n    name: "additional_hash",\n    type: "bytes32"\n  }, {\n    internalType: "bytes",\n    name: "closing_signature",\n    type: "bytes"\n  }, {\n    internalType: "bytes",\n    name: "non_closing_signature",\n    type: "bytes"\n  }],\n  name: "updateNonClosingBalanceProof",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/HumanStandardTokenFactory.ts\nfunction HumanStandardTokenFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction HumanStandardTokenFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HumanStandardTokenFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) HumanStandardTokenFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) HumanStandardTokenFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar HumanStandardTokenFactory_HumanStandardTokenFactory = /*#__PURE__*/function () {\n  function HumanStandardTokenFactory() {\n    HumanStandardTokenFactory_classCallCheck(this, HumanStandardTokenFactory);\n  }\n\n  HumanStandardTokenFactory_createClass(HumanStandardTokenFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, HumanStandardTokenFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return HumanStandardTokenFactory;\n}();\nvar HumanStandardTokenFactory_abi = [{\n  inputs: [{\n    internalType: "uint256",\n    name: "_initialAmount",\n    type: "uint256"\n  }, {\n    internalType: "uint8",\n    name: "_decimalUnits",\n    type: "uint8"\n  }, {\n    internalType: "string",\n    name: "_tokenName",\n    type: "string"\n  }, {\n    internalType: "string",\n    name: "_tokenSymbol",\n    type: "string"\n  }],\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "_owner",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "_spender",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "Approval",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "_from",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "_to",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "Transfer",\n  type: "event"\n}, {\n  stateMutability: "nonpayable",\n  type: "fallback"\n}, {\n  inputs: [],\n  name: "_decimals",\n  outputs: [{\n    internalType: "uint8",\n    name: "",\n    type: "uint8"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_owner",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "_spender",\n    type: "address"\n  }],\n  name: "allowance",\n  outputs: [{\n    internalType: "uint256",\n    name: "remaining",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_spender",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "approve",\n  outputs: [{\n    internalType: "bool",\n    name: "success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_spender",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }, {\n    internalType: "bytes",\n    name: "_extraData",\n    type: "bytes"\n  }],\n  name: "approveAndCall",\n  outputs: [{\n    internalType: "bool",\n    name: "success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_owner",\n    type: "address"\n  }],\n  name: "balanceOf",\n  outputs: [{\n    internalType: "uint256",\n    name: "balance",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  name: "balances",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "decimals",\n  outputs: [{\n    internalType: "uint8",\n    name: "decimals",\n    type: "uint8"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "name",\n  outputs: [{\n    internalType: "string",\n    name: "",\n    type: "string"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "symbol",\n  outputs: [{\n    internalType: "string",\n    name: "",\n    type: "string"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "totalSupply",\n  outputs: [{\n    internalType: "uint256",\n    name: "supply",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_to",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "transfer",\n  outputs: [{\n    internalType: "bool",\n    name: "success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_from",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "_to",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "transferFrom",\n  outputs: [{\n    internalType: "bool",\n    name: "success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "version",\n  outputs: [{\n    internalType: "string",\n    name: "",\n    type: "string"\n  }],\n  stateMutability: "view",\n  type: "function"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/ServiceRegistryFactory.ts\nfunction ServiceRegistryFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ServiceRegistryFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ServiceRegistryFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) ServiceRegistryFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) ServiceRegistryFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar ServiceRegistryFactory_ServiceRegistryFactory = /*#__PURE__*/function () {\n  function ServiceRegistryFactory() {\n    ServiceRegistryFactory_classCallCheck(this, ServiceRegistryFactory);\n  }\n\n  ServiceRegistryFactory_createClass(ServiceRegistryFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, ServiceRegistryFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return ServiceRegistryFactory;\n}();\nvar ServiceRegistryFactory_abi = [{\n  inputs: [{\n    internalType: "address",\n    name: "_token_for_registration",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "_controller",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_initial_price",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_price_bump_numerator",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_price_bump_denominator",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_decay_constant",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_min_price",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_registration_duration",\n    type: "uint256"\n  }],\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "service",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "valid_till",\n    type: "uint256"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "deposit_amount",\n    type: "uint256"\n  }, {\n    indexed: false,\n    internalType: "contract Deposit",\n    name: "deposit_contract",\n    type: "address"\n  }],\n  name: "RegisteredService",\n  type: "event"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "_price_bump_numerator",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_price_bump_denominator",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_decay_constant",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_min_price",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_registration_duration",\n    type: "uint256"\n  }],\n  name: "changeParameters",\n  outputs: [{\n    internalType: "bool",\n    name: "_success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "contract_address",\n    type: "address"\n  }],\n  name: "contractExists",\n  outputs: [{\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "controller",\n  outputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "currentPrice",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "decay_constant",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "_set_price",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "_seconds_passed",\n    type: "uint256"\n  }],\n  name: "decayedPrice",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "_limit_amount",\n    type: "uint256"\n  }],\n  name: "deposit",\n  outputs: [{\n    internalType: "bool",\n    name: "_success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "deprecated",\n  outputs: [{\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "everMadeDepositsLen",\n  outputs: [{\n    internalType: "uint256",\n    name: "_len",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  name: "ever_made_deposits",\n  outputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_address",\n    type: "address"\n  }],\n  name: "hasValidRegistration",\n  outputs: [{\n    internalType: "bool",\n    name: "_has_registration",\n    type: "bool"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "min_price",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "price_bump_denominator",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "price_bump_numerator",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "registration_duration",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  name: "service_valid_till",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "setDeprecationSwitch",\n  outputs: [{\n    internalType: "bool",\n    name: "_success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "string",\n    name: "new_url",\n    type: "string"\n  }],\n  name: "setURL",\n  outputs: [{\n    internalType: "bool",\n    name: "_success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "set_price",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "set_price_at",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "token",\n  outputs: [{\n    internalType: "contract Token",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  name: "urls",\n  outputs: [{\n    internalType: "string",\n    name: "",\n    type: "string"\n  }],\n  stateMutability: "view",\n  type: "function"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/CustomTokenFactory.ts\nfunction CustomTokenFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction CustomTokenFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction CustomTokenFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) CustomTokenFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) CustomTokenFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar CustomTokenFactory_CustomTokenFactory = /*#__PURE__*/function () {\n  function CustomTokenFactory() {\n    CustomTokenFactory_classCallCheck(this, CustomTokenFactory);\n  }\n\n  CustomTokenFactory_createClass(CustomTokenFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, CustomTokenFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return CustomTokenFactory;\n}();\nvar CustomTokenFactory_abi = [{\n  inputs: [{\n    internalType: "uint256",\n    name: "initial_supply",\n    type: "uint256"\n  }, {\n    internalType: "uint8",\n    name: "decimal_units",\n    type: "uint8"\n  }, {\n    internalType: "string",\n    name: "token_name",\n    type: "string"\n  }, {\n    internalType: "string",\n    name: "token_symbol",\n    type: "string"\n  }],\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "_owner",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "_spender",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "Approval",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "_to",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "uint256",\n    name: "_num",\n    type: "uint256"\n  }],\n  name: "Minted",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "_from",\n    type: "address"\n  }, {\n    indexed: true,\n    internalType: "address",\n    name: "_to",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "Transfer",\n  type: "event"\n}, {\n  inputs: [],\n  name: "_decimals",\n  outputs: [{\n    internalType: "uint8",\n    name: "",\n    type: "uint8"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_owner",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "_spender",\n    type: "address"\n  }],\n  name: "allowance",\n  outputs: [{\n    internalType: "uint256",\n    name: "remaining",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_spender",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "approve",\n  outputs: [{\n    internalType: "bool",\n    name: "success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_owner",\n    type: "address"\n  }],\n  name: "balanceOf",\n  outputs: [{\n    internalType: "uint256",\n    name: "balance",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  name: "balances",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "decimals",\n  outputs: [{\n    internalType: "uint8",\n    name: "decimals",\n    type: "uint8"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "num",\n    type: "uint256"\n  }],\n  name: "mint",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "num",\n    type: "uint256"\n  }, {\n    internalType: "address",\n    name: "target",\n    type: "address"\n  }],\n  name: "mintFor",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "multiplier",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "name",\n  outputs: [{\n    internalType: "string",\n    name: "",\n    type: "string"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "owner_address",\n  outputs: [{\n    internalType: "address payable",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "symbol",\n  outputs: [{\n    internalType: "string",\n    name: "",\n    type: "string"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "totalSupply",\n  outputs: [{\n    internalType: "uint256",\n    name: "supply",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_to",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "transfer",\n  outputs: [{\n    internalType: "bool",\n    name: "success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_from",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "_to",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_value",\n    type: "uint256"\n  }],\n  name: "transferFrom",\n  outputs: [{\n    internalType: "bool",\n    name: "success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "transferFunds",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "version",\n  outputs: [{\n    internalType: "string",\n    name: "",\n    type: "string"\n  }],\n  stateMutability: "view",\n  type: "function"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/UserDepositFactory.ts\nfunction UserDepositFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction UserDepositFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction UserDepositFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) UserDepositFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) UserDepositFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar UserDepositFactory_UserDepositFactory = /*#__PURE__*/function () {\n  function UserDepositFactory() {\n    UserDepositFactory_classCallCheck(this, UserDepositFactory);\n  }\n\n  UserDepositFactory_createClass(UserDepositFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, UserDepositFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return UserDepositFactory;\n}();\nvar UserDepositFactory_abi = [{\n  inputs: [{\n    internalType: "address",\n    name: "_token_address",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "_whole_balance_limit",\n    type: "uint256"\n  }],\n  stateMutability: "nonpayable",\n  type: "constructor"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "owner",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "newBalance",\n    type: "uint256"\n  }],\n  name: "BalanceReduced",\n  type: "event"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "address",\n    name: "withdrawer",\n    type: "address"\n  }, {\n    indexed: false,\n    internalType: "uint256",\n    name: "plannedBalance",\n    type: "uint256"\n  }],\n  name: "WithdrawPlanned",\n  type: "event"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  name: "balances",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "contract_address",\n    type: "address"\n  }],\n  name: "contractExists",\n  outputs: [{\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "beneficiary",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "new_total_deposit",\n    type: "uint256"\n  }],\n  name: "deposit",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "owner",\n    type: "address"\n  }],\n  name: "effectiveBalance",\n  outputs: [{\n    internalType: "uint256",\n    name: "remaining_balance",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "_msc_address",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "_one_to_n_address",\n    type: "address"\n  }],\n  name: "init",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "msc_address",\n  outputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "one_to_n_address",\n  outputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "amount",\n    type: "uint256"\n  }],\n  name: "planWithdraw",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "token",\n  outputs: [{\n    internalType: "contract Token",\n    name: "",\n    type: "address"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  name: "total_deposit",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "sender",\n    type: "address"\n  }, {\n    internalType: "address",\n    name: "receiver",\n    type: "address"\n  }, {\n    internalType: "uint256",\n    name: "amount",\n    type: "uint256"\n  }],\n  name: "transfer",\n  outputs: [{\n    internalType: "bool",\n    name: "success",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "whole_balance",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [],\n  name: "whole_balance_limit",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "uint256",\n    name: "amount",\n    type: "uint256"\n  }],\n  name: "withdraw",\n  outputs: [],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [],\n  name: "withdraw_delay",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "address",\n    name: "",\n    type: "address"\n  }],\n  name: "withdraw_plans",\n  outputs: [{\n    internalType: "uint256",\n    name: "amount",\n    type: "uint256"\n  }, {\n    internalType: "uint256",\n    name: "withdraw_block",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}];\n// CONCATENATED MODULE: ../raiden-ts/dist/contracts/SecretRegistryFactory.ts\nfunction SecretRegistryFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction SecretRegistryFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SecretRegistryFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) SecretRegistryFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) SecretRegistryFactory_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* Generated by ts-generator ver. 0.0.8 */\n\n/* tslint:disable */\n\nvar SecretRegistryFactory_SecretRegistryFactory = /*#__PURE__*/function () {\n  function SecretRegistryFactory() {\n    SecretRegistryFactory_classCallCheck(this, SecretRegistryFactory);\n  }\n\n  SecretRegistryFactory_createClass(SecretRegistryFactory, null, [{\n    key: "connect",\n    value: function connect(address, signerOrProvider) {\n      return new ethers_min["Contract"](address, SecretRegistryFactory_abi, signerOrProvider);\n    }\n  }]);\n\n  return SecretRegistryFactory;\n}();\nvar SecretRegistryFactory_abi = [{\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: "bytes32",\n    name: "secrethash",\n    type: "bytes32"\n  }, {\n    indexed: false,\n    internalType: "bytes32",\n    name: "secret",\n    type: "bytes32"\n  }],\n  name: "SecretRevealed",\n  type: "event"\n}, {\n  inputs: [{\n    internalType: "bytes32",\n    name: "secrethash",\n    type: "bytes32"\n  }],\n  name: "getSecretRevealBlockHeight",\n  outputs: [{\n    internalType: "uint256",\n    name: "",\n    type: "uint256"\n  }],\n  stateMutability: "view",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "bytes32",\n    name: "secret",\n    type: "bytes32"\n  }],\n  name: "registerSecret",\n  outputs: [{\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}, {\n  inputs: [{\n    internalType: "bytes32[]",\n    name: "secrets",\n    type: "bytes32[]"\n  }],\n  name: "registerSecretBatch",\n  outputs: [{\n    internalType: "bool",\n    name: "",\n    type: "bool"\n  }],\n  stateMutability: "nonpayable",\n  type: "function"\n}];\n// EXTERNAL MODULE: ../raiden-ts/dist/versions.json\nvar versions = __webpack_require__("bf6c");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/types.js\nvar EventTypes;\n\n(function (EventTypes) {\n  EventTypes["OPENED"] = "OPENED";\n  EventTypes["APPROVED"] = "APPROVED";\n  EventTypes["DEPOSITED"] = "DEPOSITED";\n  EventTypes["CONFIRMED"] = "CONFIRMED";\n})(EventTypes || (EventTypes = {}));\n// CONCATENATED MODULE: ../raiden-ts/dist/constants.js\n\nvar SignatureZero = Object(utils["padZeros"])([], 65);\nvar ShutdownReason;\n\n(function (ShutdownReason) {\n  ShutdownReason["STOP"] = "raidenStopped";\n  ShutdownReason["ACCOUNT_CHANGED"] = "providerAccountChanged";\n  ShutdownReason["NETWORK_CHANGED"] = "providerNetworkChanged";\n})(ShutdownReason || (ShutdownReason = {}));\n\nvar Capabilities;\n\n(function (Capabilities) {\n  // opt-out capabilities, for backwards compatibility\n  Capabilities["NO_RECEIVE"] = "noReceive";\n  Capabilities["NO_MEDIATE"] = "noMediate";\n  Capabilities["NO_DELIVERY"] = "noDelivery";\n  Capabilities["WEBRTC"] = "webRTC";\n})(Capabilities || (Capabilities = {}));\n// EXTERNAL MODULE: ../raiden-ts/node_modules/io-ts/es6/index.js + 4 modules\nvar es6 = __webpack_require__("bef3");\n\n// EXTERNAL MODULE: ./node_modules/lodash/debounce.js\nvar debounce = __webpack_require__("b047c");\nvar debounce_default = /*#__PURE__*/__webpack_require__.n(debounce);\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/io-ts/lib/ThrowReporter.js\nvar ThrowReporter = __webpack_require__("ffa9");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/types.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction types_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n/**\n * Error for assertion functions/type guards\n */\n\nvar AssertionError = /*#__PURE__*/function (_Error) {\n  _inherits(AssertionError, _Error);\n\n  var _super = _createSuper(AssertionError);\n\n  function AssertionError() {\n    types_classCallCheck(this, AssertionError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return AssertionError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Type-safe assertion function (TS3.7)\n *\n * @param condition - Condition to validate as truthy\n * @param msg - Message to throw if condition is falsy\n * @param log - Logger to log error to\n */\n\nfunction assert(condition, msg, log) {\n  if (!condition) {\n    log === null || log === void 0 ? void 0 : log(\'AssertionError\', condition, msg);\n    throw new AssertionError(msg !== null && msg !== void 0 ? msg : \'AssertionError\');\n  }\n}\n\nfunction reporterAssert(value) {\n  ThrowReporter["ThrowReporter"].report(value);\n}\n/**\n * Decode/validate like codec.decode, but throw or return right instead of Either\n *\n * @param codec - io-ts codec to be used for decoding/validation\n * @param data - data to decode/validate\n * @returns Decoded value of codec type\n */\n\n\nfunction decode(codec, data) {\n  var decoded = codec.decode(data);\n  reporterAssert(decoded);\n  return decoded.right;\n}\n/**\n * Test for value\'s non-nulliness\n * Like lodash\'s negate(isNil), but also works as type guard (e.g. useful for filters)\n *\n * @param value - to be tested\n * @returns true if value is not null nor undefined\n */\n\nfunction isntNil(value) {\n  return value != null;\n}\n/**\n * Codec of ethers.utils.BigNumber objects\n *\n * Input can be anything bigNumberify-able: number, string, LosslessNumber or BigNumber\n * Output is string, so we can JSON-serialize with \'number\'s types bigger than JS VM limits\n * of ±2^53, as Raiden python client stdlib json encode longs as string.\n */\n\nvar BigNumberC = new es6["a" /* Type */](\'BigNumber\', utils["BigNumber"].isBigNumber, function (u, c) {\n  var _a, _b;\n\n  if (utils["BigNumber"].isBigNumber(u)) return es6["r" /* success */](u);\n\n  try {\n    // decode by trying to bigNumberify string representation of anything\n    return es6["r" /* success */](Object(utils["bigNumberify"])(((_b = (_a = u) === null || _a === void 0 ? void 0 : _a._hex) !== null && _b !== void 0 ? _b : u).toString()));\n  } catch (err) {\n    return es6["f" /* failure */](u, c);\n  }\n}, function (a) {\n  return a.toString();\n});\n/**\n * Helper function to create codecs to validate an arbitrary or variable-sized hex bytestring\n * A branded codec to indicate validated hex-strings\n *\n * @param size - Required number of bytes. Pass undefined or zero to have a variable-sized type\n * @returns branded codec for hex-encoded bytestrings\n */\n\nvar HexString = memoize_default()(function (size) {\n  return es6["e" /* brand */](es6["q" /* string */], function (n) {\n    return typeof n === \'string\' && (size ? Object(utils["hexDataLength"])(n) === size : Object(utils["isHexString"])(n));\n  }, \'HexString\');\n});\n/**\n * Helper function to create codecs to validate an arbitrary or variable-sized BigNumbers\n * A branded codec/type to indicate size-validated BigNumbers\n *\n * @param size - Required number of bytes. Pass undefined to have a variable-sized type\n * @returns branded codec for hex-encoded bytestrings\n */\n\nvar Int = memoize_default()(function (size) {\n  var min = size ? constants["Zero"].sub(constants["Two"].pow(size * 8 - 1)) : undefined,\n      max = size ? constants["Two"].pow(size * 8 - 1) : undefined;\n  return es6["e" /* brand */](BigNumberC, function (n) {\n    return BigNumberC.is(n) && (!min || !max || n.gte(min) && n.lt(max));\n  }, \'Int\');\n});\n/**\n * Helper function to create codecs to validate an arbitrary or variable-sized BigNumbers\n * A branded codec/type to indicate size-validated BigNumbers\n *\n * @param size - Required number of bytes. Pass undefined to have a variable-sized type\n * @returns branded codec for hex-encoded bytestrings\n */\n\nvar UInt = memoize_default()(function (size) {\n  var min = size ? constants["Zero"] : undefined,\n      max = size ? constants["Two"].pow(size * 8) : undefined;\n  return es6["e" /* brand */](BigNumberC, function (n) {\n    return BigNumberC.is(n) && (!min || !max || n.gte(min) && n.lt(max));\n  }, \'UInt\');\n}); // specific types\n// strig brand: ECDSA signature as an hex-string\n\nvar Signature = HexString(65); // string brand: 256-bit hash, usually keccak256 or sha256\n\nvar Hash = HexString(32); // string brand: a secret bytearray, 32 bytes\n\nvar Secret = HexString(32); // string brand: ECDSA private key, 32 bytes\n\nvar PrivateKey = HexString(32);\nvar Address = new es6["a" /* Type */](\'Address\', function (u) {\n  try {\n    return HexString(20).is(u) && Object(utils["getAddress"])(u) === u;\n  } catch (e) {\n    return false;\n  }\n}, function (u, c) {\n  if (!HexString(20).is(u)) return es6["f" /* failure */](u, c);\n  var addr;\n\n  try {\n    addr = Object(utils["getAddress"])(u);\n  } catch (e) {\n    return es6["f" /* failure */](u, c);\n  }\n\n  if (!addr) return es6["f" /* failure */](u, c);\n  return es6["r" /* success */](addr);\n}, es6["g" /* identity */]);\n/**\n * Helper function to create codecs to validate [timestamp, value] tuples\n *\n * @param codec - Codec to compose with a timestamp in a tuple\n * @returns Codec of a tuple of timestamp and codec type\n */\n\nvar Timed = memoize_default()(function (codec) {\n  return es6["s" /* tuple */]([es6["l" /* number */], codec]);\n});\n/**\n * Given a value of type T, returns a Timed<T> tuple with current time as first value\n *\n * @param v - Value to return with time\n * @returns Tuple of call timestamp as first elemtn and value passed as parameter as second\n */\n\nfunction timed(v) {\n  return [Date.now(), v];\n} // generic type codec for messages that must be signed\n// use it like: Codec = Signed(Message)\n// The t.TypeOf<typeof codec> will be Signed<Message>, defined later\n\nvar Signed = memoize_default()(function (codec) {\n  return es6["h" /* intersection */]([codec, es6["n" /* readonly */](es6["t" /* type */]({\n    signature: Signature\n  }))]);\n});\n/**\n * Memoized factory to create codecs validating an arbitrary class C\n *\n * @param C - Class to create a codec for\n * @returns Codec validating class C\n */\n\nvar instanceOf = memoize_default()(function (C) {\n  return new es6["a" /* Type */]("instanceOf(".concat(C.name, ")"), function (v) {\n    return v instanceof C;\n  }, function (i, c) {\n    return i instanceof C ? es6["r" /* success */](i) : es6["f" /* failure */](i, c);\n  }, es6["g" /* identity */]);\n});\n// EXTERNAL MODULE: ./node_modules/ethers/utils/networks.js\nvar networks = __webpack_require__("6f0b");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js\nvar fromEventPattern = __webpack_require__("9044");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/combineLatest.js\nvar combineLatest = __webpack_require__("7738");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/from.js + 6 modules\nvar from = __webpack_require__("d3fb");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/share.js\nvar share = __webpack_require__("4b59");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchMap.js\nvar switchMap = __webpack_require__("d792");\n\n// EXTERNAL MODULE: ./node_modules/lodash/flatten.js\nvar flatten = __webpack_require__("4d8c");\nvar flatten_default = /*#__PURE__*/__webpack_require__.n(flatten);\n\n// EXTERNAL MODULE: ./node_modules/lodash/sortBy.js\nvar sortBy = __webpack_require__("c707");\nvar sortBy_default = /*#__PURE__*/__webpack_require__.n(sortBy);\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/ethers.js\n\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\n\n\n\n\n/**\n * Like rxjs\' fromEvent, but event can be an EventFilter\n *\n * @param target - Object to hook event listener, maybe a Provider or Contract\n * @param event - EventFilter or string representing the event to listen to\n * @param resultSelector - A map of events arguments to output parameters\n *      Default is to pass only first parameter\n * @returns Observable of target.on(event) events\n */\n\nfunction fromEthersEvent(target, event, resultSelector) {\n  return Object(fromEventPattern["a" /* fromEventPattern */])(function (handler) {\n    return target.on(event, handler);\n  }, function (handler) {\n    return target.removeListener(event, handler);\n  }, resultSelector);\n}\n/**\n * getEventsStream returns a stream of T-type tuples (arrays) from Contract\'s\n * events from filters. These events are polled since provider\'s [re]setEventsBlock to newest\n * polled block. If both \'fromBlock$\' and \'lastSeenBlock$\' are specified, also fetch past events\n * since fromBlock up to lastSeenBlock$ === provider.resetEventsBlock - 1\n * T must be a tuple-like type receiving all filters arguments plus the respective Event in the end\n *\n * @param contract - Contract source instance for filters, connected to a provider\n * @param filters - array of OR filters from tokenNetwork\n * @param fromBlock$ - Observable of a past blockNumber since when to fetch past events\n *                     If not provided, last resetEventsBlock is automatically used.\n * @returns Observable of contract\'s events\n */\n\nfunction getEventsStream(contract, filters, fromBlock$) {\n  var provider = contract.provider;\n\n  var logToEvent = function logToEvent(log) {\n    // parse log into [...args, event: Event] array,\n    // the same that contract.on events/callbacks\n    var parsed = contract.interface.parseLog(log); // ignore removed (reorg\'d) events (reorgs are handled by ConfirmableActions logic)\n    // and parse errors (shouldn\'t happen)\n\n    if (log.removed === true || !parsed) return;\n    var args = Array.prototype.slice.call(parsed.values); // not all parameters quite needed right now, but let\'s comply with the interface\n\n    var event = Object.assign(Object.assign(Object.assign({}, log), parsed), {\n      args: args,\n      removeListener: function removeListener() {\n        /* getLogs don\'t install filter */\n      },\n      getBlock: function getBlock() {\n        return provider.getBlock(log.blockHash);\n      },\n      getTransaction: function getTransaction() {\n        return provider.getTransaction(log.transactionHash);\n      },\n      getTransactionReceipt: function getTransactionReceipt() {\n        return provider.getTransactionReceipt(log.transactionHash);\n      },\n      decode: function decode(data, topics) {\n        return parsed.decode(data, topics || log.topics);\n      }\n    });\n    return [].concat(_toConsumableArray(args), [event]);\n  }; // past events (in the closed-interval=[fromBlock, lastSeenBlock]),\n  // fetch once, sort by blockNumber, emit all, complete\n\n\n  var pastEvents$ = empty["a" /* EMPTY */],\n      // of(constant) ensures newEvents$ is registered immediately if fromBlock$ not provided\n  nextBlock$ = Object(of["a" /* of */])(-1);\n\n  if (fromBlock$) {\n    // if fetching pastEvents$, nextBlock$ is used to sync/avoid intersection between Events$\n    // pastEvents$ => [fromBlock$, nextBlock$], newEvents$ => ]nextBlock$, ...latest]\n    nextBlock$ = Object(defer["a" /* defer */])(function () {\n      return provider.blockNumber ? Object(of["a" /* of */])(provider.blockNumber) : fromEthersEvent(provider, \'block\').pipe(Object(first["a" /* first */])(), Object(map["a" /* map */])(function (b) {\n        var _a;\n\n        return (_a = provider.blockNumber) !== null && _a !== void 0 ? _a : b;\n      }));\n    }).pipe(Object(share["a" /* share */])());\n    pastEvents$ = Object(combineLatest["a" /* combineLatest */])(fromBlock$, nextBlock$).pipe(Object(first["a" /* first */])(), Object(switchMap["a" /* switchMap */])(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          fromBlock = _ref2[0],\n          toBlock = _ref2[1];\n\n      return Promise.all(filters.map(function (filter) {\n        return provider.getLogs(Object.assign(Object.assign({}, filter), {\n          fromBlock: fromBlock,\n          toBlock: toBlock\n        }));\n      }));\n    }), // flatten array of each getLogs query response and sort them\n    // emit log array elements as separate logs into stream (unwind)\n    Object(mergeMap["a" /* mergeMap */])(function (logs) {\n      return Object(from["a" /* from */])(sortBy_default()(flatten_default()(logs), [\'blockNumber\']));\n    }), Object(map["a" /* map */])(logToEvent), Object(filter["a" /* filter */])(isntNil));\n  } // new events (in open-interval=]lastSeenBlock, latest])\n  // where lastSeenBlock is the currentBlock at call time\n  // doesn\'t complete, keep emitting events for each new block (if any) until unsubscription\n\n\n  var newEvents$ = nextBlock$.pipe(Object(switchMap["a" /* switchMap */])(function () {\n    return Object(from["a" /* from */])(filters);\n  }), Object(mergeMap["a" /* mergeMap */])(function (filter) {\n    return fromEthersEvent(provider, filter);\n  }), Object(map["a" /* map */])(logToEvent), Object(filter["a" /* filter */])(isntNil));\n  return Object(merge["a" /* merge */])(pastEvents$, newEvents$);\n}\n/**\n * Like Provider.getNetwork, but fetches every time instead of using cached property\n *\n * @param provider - Provider to fetch data from\n * @returns Promise of Network info\n */\n\nfunction getNetwork(provider) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = networks["getNetwork"];\n            _context.t1 = parseInt;\n            _context.next = 4;\n            return provider.send(\'net_version\', []);\n\n          case 4:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            return _context.abrupt("return", (0, _context.t0)(_context.t3));\n\n          case 7:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n/**\n * Patch JsonRpcProvider.send to try personal_sign first, and fallback to eth_sign if it fails\n * Call it once on the provider instance\n *\n * @param provider - A JsonRpcProvider instance to patch\n */\n\nfunction patchSignSend(provider) {\n  var origSend = provider.send;\n\n  provider.send = function (method, params) {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n      return regenerator_default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(method === \'eth_sign\')) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt("return", origSend.apply(this, [\'personal_sign\', [params[1], params[0]]]).catch(function (err) {\n                // on first error, if personal_sign isn\'t available\n                if (err instanceof Error && (err.message.includes(\'The method personal_sign does not exist\') || err.message.includes(\'Method personal_sign not supported\'))) {\n                  provider.send = origSend; // un-patch\n\n                  return provider.send(method, params); // and retry with eth_sign\n                }\n\n                throw err; // else, re-raise\n              }));\n\n            case 2:\n              return _context2.abrupt("return", origSend.apply(this, [method, params]));\n\n            case 3:\n            case "end":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n  };\n}\n/**\n * Return a network name, if known, or stringified chainId otherwise\n *\n * @param network - Network to get name from\n * @returns name or chainId as string\n */\n\nfunction getNetworkName(network) {\n  return network.name !== \'unknown\' ? network.name : network.chainId.toString();\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/config.js\nvar _t$keyof;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar RTCIceServer = es6["t" /* type */]({\n  urls: es6["v" /* union */]([es6["q" /* string */], es6["c" /* array */](es6["q" /* string */])])\n});\n/**\n * A Raiden configuration object with required and optional params from [[PartialRaidenConfig]].\n *\n * Notice partial/undefined values are special: when a raidenConfigUpdate is called with an\n * undefined value, it won\'t be set, as they can\'t be [re]stored in the JSON state, but instead\n * means it\'ll be *reset* to the default value; therefore, if a partial value has a defined\n * default, it can\'t be unset; if you want to support "empty" values, use null, empty string or\n * other falsy serializable types, and/or ensure it never gets a default\n *\n * - matrixServerLookup - Matrix server URL to fetch existing matrix servers from.\n *      After intializing a [[Raiden]] instance, the matrix server can\'t be changed later on.\n * - revealTimeout - Timeout for secrets to be revealed\n * - settleTimeout - Timeout for channels to be settled\n * - httpTimeout - Used in http fetch requests\n * - discoveryRoom - Discovery Room to auto-join, use null to disable\n * - pfsRoom - PFS Room to auto-join and send PFSCapacityUpdate to, use null to disable\n * - pfs - Path Finding Service URL or Address. Set to null to disable, or empty string to enable\n *         automatic fetching from ServiceRegistry.\n * - pfsSafetyMargin - Safety margin to be added to fees received from PFS. Use `1.1` to add a 10%\n *                     safety margin.\n * - matrixExcessRooms - Keep this much rooms for a single user of interest (partner, target).\n *                       Leave LRU beyond this threshold.\n * - confirmationBlocks - How many blocks to wait before considering a transaction as confirmed\n * - logger - String specifying the console log level of redux-logger. Use \'\' to silence.\n * - caps - Own transport capabilities\n * - matrixServer? - Specify a matrix server to use.\n * - subkey? - When using subkey, this sets the behavior when { subkey } option isn\'t explicitly\n *             set in on-chain method calls. false (default) = use main key; true = use subkey\n */\n\nvar RaidenConfig = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  matrixServerLookup: es6["q" /* string */],\n  revealTimeout: es6["l" /* number */],\n  settleTimeout: es6["l" /* number */],\n  httpTimeout: es6["l" /* number */],\n  discoveryRoom: es6["v" /* union */]([es6["q" /* string */], es6["k" /* null */]]),\n  pfsRoom: es6["v" /* union */]([es6["q" /* string */], es6["k" /* null */]]),\n  pfs: es6["v" /* union */]([Address, es6["q" /* string */], es6["k" /* null */]]),\n  pfsSafetyMargin: es6["l" /* number */],\n  matrixExcessRooms: es6["l" /* number */],\n  confirmationBlocks: es6["l" /* number */],\n  logger: es6["i" /* keyof */]((_t$keyof = {}, _defineProperty(_t$keyof, \'\', null), _defineProperty(_t$keyof, "trace", null), _defineProperty(_t$keyof, "debug", null), _defineProperty(_t$keyof, "info", null), _defineProperty(_t$keyof, "warn", null), _defineProperty(_t$keyof, "error", null), _t$keyof)),\n  caps: es6["n" /* readonly */](es6["p" /* record */](es6["q" /* string */]\n  /* Capabilities */\n  , es6["b" /* any */])),\n  fallbackIceServers: es6["c" /* array */](RTCIceServer)\n}), es6["m" /* partial */]({\n  matrixServer: es6["q" /* string */],\n  subkey: es6["d" /* boolean */]\n})]));\nvar PartialRaidenConfig = es6["n" /* readonly */](es6["m" /* partial */](Object.assign(Object.assign({}, RaidenConfig.type.types[\'0\'].props), RaidenConfig.type.types[\'1\'].props)));\n/**\n * Create a RaidenConfig from some common options\n *\n * @param obj - Object containing common parameters for config\n * @param obj.network - ether\'s Network object for the current blockchain\n * @param overwrites - Overwrites values from default config\n * @returns A full config object\n */\n\nfunction makeDefaultConfig(_ref, overwrites) {\n  var _caps;\n\n  var network = _ref.network;\n  return Object.assign({\n    matrixServerLookup: \'https://raw.githubusercontent.com/raiden-network/raiden-transport/master/known_servers.test.yaml\',\n    settleTimeout: 500,\n    revealTimeout: 50,\n    httpTimeout: 30e3,\n    discoveryRoom: "raiden_".concat(getNetworkName(network), "_discovery"),\n    pfsRoom: "raiden_".concat(getNetworkName(network), "_path_finding"),\n    pfs: \'\',\n    matrixExcessRooms: 3,\n    pfsSafetyMargin: 1.0,\n    confirmationBlocks: 5,\n    logger: \'info\',\n    caps: (_caps = {}, _defineProperty(_caps, Capabilities.NO_DELIVERY, true), _defineProperty(_caps, Capabilities.NO_RECEIVE, true), _defineProperty(_caps, Capabilities.NO_MEDIATE, true), _defineProperty(_caps, Capabilities.WEBRTC, true), _caps),\n    fallbackIceServers: [{\n      urls: \'stun:stun.l.google.com:19302\'\n    }]\n  }, overwrites);\n}\n// EXTERNAL MODULE: ./node_modules/lodash/isMatchWith.js\nvar isMatchWith = __webpack_require__("f49b");\nvar isMatchWith_default = /*#__PURE__*/__webpack_require__.n(isMatchWith);\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/fp-ts/lib/Either.js\nvar Either = __webpack_require__("3498");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/fp-ts/lib/pipeable.js\nvar pipeable = __webpack_require__("6f95");\n\n// EXTERNAL MODULE: ./node_modules/lodash/findKey.js\nvar findKey = __webpack_require__("74c8");\nvar findKey_default = /*#__PURE__*/__webpack_require__.n(findKey);\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/error.js\nfunction error_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { error_typeof = function _typeof(obj) { return typeof obj; }; } else { error_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return error_typeof(obj); }\n\nfunction error_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction error_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction error_createClass(Constructor, protoProps, staticProps) { if (protoProps) error_defineProperties(Constructor.prototype, protoProps); if (staticProps) error_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction error_createSuper(Derived) { return function () { var Super = error_getPrototypeOf(Derived), result; if (error_isNativeReflectConstruct()) { var NewTarget = error_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return error_possibleConstructorReturn(this, result); }; }\n\nfunction error_possibleConstructorReturn(self, call) { if (call && (error_typeof(call) === "object" || typeof call === "function")) { return call; } return error_assertThisInitialized(self); }\n\nfunction error_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction error_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) error_setPrototypeOf(subClass, superClass); }\n\nfunction error_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; error_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !error_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return error_construct(Class, arguments, error_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return error_setPrototypeOf(Wrapper, Class); }; return error_wrapNativeSuper(Class); }\n\nfunction error_construct(Parent, args, Class) { if (error_isNativeReflectConstruct()) { error_construct = Reflect.construct; } else { error_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) error_setPrototypeOf(instance, Class.prototype); return instance; }; } return error_construct.apply(null, arguments); }\n\nfunction error_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction error_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\n\nfunction error_setPrototypeOf(o, p) { error_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return error_setPrototypeOf(o, p); }\n\nfunction error_getPrototypeOf(o) { error_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return error_getPrototypeOf(o); }\n\n\n\n\n\nvar ErrorCodes;\n\n(function (ErrorCodes) {\n  // Path errors\n  ErrorCodes["PFS_EMPTY_URL"] = "A registered Pathfinding Service returned an empty service URL.";\n  ErrorCodes["PFS_INVALID_URL"] = "A registered Pathfinding Service returned an invalid service URL.";\n  ErrorCodes["PFS_INVALID_INFO"] = "Could not find any valid Pathfinding service. Client and PFS versions are possibly out-of-sync.";\n  ErrorCodes["PFS_NO_ROUTES_FOUND"] = "No valid routes found.";\n  ErrorCodes["PFS_ERROR_RESPONSE"] = "Pathfinding Service request returned an error";\n  ErrorCodes["PFS_DISABLED"] = "Pathfinding Service is disabled and no direct route is available.";\n  ErrorCodes["PFS_UNKNOWN_TOKEN_NETWORK"] = "No open channels on this token network.";\n  ErrorCodes["PFS_TARGET_OFFLINE"] = "The requested target is offline.";\n  ErrorCodes["PFS_TARGET_NO_RECEIVE"] = "The requested target doesn\'t receive transfers.";\n  ErrorCodes["PFS_LAST_IOU_REQUEST_FAILED"] = "The request for the last IOU has failed.";\n  ErrorCodes["PFS_IOU_SIGNATURE_MISMATCH"] = "The signature of the last IOU did not match."; // Channel errors\n\n  ErrorCodes["CNL_INVALID_STATE"] = "Invalid channel state.";\n  ErrorCodes["CNL_TOKEN_NOT_FOUND"] = "Could not find token for token network.";\n  ErrorCodes["CNL_NO_OPEN_CHANNEL_FOUND"] = "No open channel has been found.";\n  ErrorCodes["CNL_NO_OPEN_OR_CLOSING_CHANNEL_FOUND"] = "No open or closing channel has been found.";\n  ErrorCodes["CNL_NO_SETTLEABLE_OR_SETTLING_CHANNEL_FOUND"] = "No settleable or settling channel has been found.";\n  ErrorCodes["CNL_APPROVE_TRANSACTION_FAILED"] = "Token approve transaction failed.";\n  ErrorCodes["CNL_OPENCHANNEL_FAILED"] = "Token networks openChannel transaction failed.";\n  ErrorCodes["CNL_SETTOTALDEPOSIT_FAILED"] = "Token networks setTotalDeposit transaction failed.";\n  ErrorCodes["CNL_CLOSECHANNEL_FAILED"] = "Token networks closeChannel transaction failed.";\n  ErrorCodes["CNL_SETTLECHANNEL_FAILED"] = "Token networks settleChannel transaction failed.";\n  ErrorCodes["CNL_UPDATE_NONCLOSING_BP_FAILED"] = "updateNonClosingBalanceProof transaction failed.";\n  ErrorCodes["CNL_ONCHAIN_UNLOCK_FAILED"] = "on-chain unlock transaction failed."; // Transfer errors\n\n  ErrorCodes["XFER_EXPIRED"] = "Transfer expired.";\n  ErrorCodes["XFER_CHANNEL_CLOSED_PREMATURELY"] = "Channel was closed before secret got reveiled or transfer unlocked.";\n  ErrorCodes["XFER_REFUNDED"] = "Transfer has been refunded.";\n  ErrorCodes["XFER_INVALID_SECRETREQUEST"] = "Invalid SecretRequest received";\n  ErrorCodes["XFER_ALREADY_COMPLETED"] = "Not waiting for transfer, it\'s already completed.";\n  ErrorCodes["XFER_REGISTERSECRET_TX_FAILED"] = "SecretRegistry.registerSecret transaction failed"; // Transport errors\n\n  ErrorCodes["TRNS_NO_MATRIX_SERVERS"] = "Could not contact any Matrix servers.";\n  ErrorCodes["TRNS_NO_VALID_USER"] = "Could not find a user with a valid signature.";\n  ErrorCodes["TRNS_NO_SERVERNAME"] = "Could not get server name from Matrix server.";\n  ErrorCodes["TRNS_MESSAGE_SIGNATURE_MISMATCH"] = "Unable to decode message due to signature mismatch."; // Raiden main class errors\n\n  ErrorCodes["RDN_GENERAL_ERROR"] = "An unknown error occured.";\n  ErrorCodes["RDN_MINT_FAILED"] = "Failed to mint tokens.";\n  ErrorCodes["RDN_APPROVE_TRANSACTION_FAILED"] = "Approve transaction has failed.";\n  ErrorCodes["RDN_DEPOSIT_TRANSACTION_FAILED"] = "Deposit transaction has failed.";\n  ErrorCodes["RDN_TRANSFER_ONCHAIN_BALANCE_FAILED"] = "Failed to transfer on-chain balance.";\n  ErrorCodes["RDN_TRANSFER_ONCHAIN_TOKENS_FAILED"] = "Failed to transfer on-chain tokens.";\n  ErrorCodes["RDN_UNRECOGNIZED_NETWORK"] = "No deploy info provided nor recognized network.";\n  ErrorCodes["RDN_SIGNER_NOT_CONNECTED"] = "The signing account is not connected to the provider.";\n  ErrorCodes["RDN_ACCOUNT_NOT_FOUND"] = "Account not found in provider.";\n  ErrorCodes["RDN_STRING_ACCOUNT_INVALID"] = "String account must be either a 0x-encoded address or private key.";\n  ErrorCodes["RDN_TRANSACTION_REORG"] = "Transaction has been mined but got removed by a reorg.";\n  ErrorCodes["RDN_STATE_MIGRATION"] = "Could not replace stored state with older, provided state."; // Data errors\n\n  ErrorCodes["DTA_NEGATIVE_NUMBER"] = "Encountered negative number while encoding to HEX string.";\n  ErrorCodes["DTA_NUMBER_TOO_LARGE"] = "Encountered a number that is too large to be encoded.";\n  ErrorCodes["DTA_ARRAY_LENGTH_DIFFRENCE"] = "Expected length of HEX string differs from integer array input.";\n  ErrorCodes["DTA_UNENCODABLE_DATA"] = "Passed data is not a HEX string nor integer array.";\n})(ErrorCodes || (ErrorCodes = {}));\n\nvar ErrorDetails = es6["p" /* record */](es6["q" /* string */], es6["v" /* union */]([es6["q" /* string */], es6["l" /* number */], es6["d" /* boolean */], es6["k" /* null */]]));\nvar error_RaidenError = /*#__PURE__*/function (_Error) {\n  error_inherits(RaidenError, _Error);\n\n  var _super = error_createSuper(RaidenError);\n\n  function RaidenError(message) {\n    var _this;\n\n    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    error_classCallCheck(this, RaidenError);\n\n    _this = _super.call(this, message !== null && message !== void 0 ? message : ErrorCodes.RDN_GENERAL_ERROR);\n    _this.details = details;\n    _this.name = \'RaidenError\';\n    _this._code = undefined;\n    Object.setPrototypeOf(error_assertThisInitialized(_this), RaidenError.prototype);\n    return _this;\n  }\n\n  error_createClass(RaidenError, [{\n    key: "code",\n    get: function get() {\n      var _this2 = this;\n\n      var _a; // to need to search for _code before first access\n\n\n      if (this._code === undefined) this._code = (_a = findKey_default()(ErrorCodes, function (message) {\n        return message === _this2.message;\n      })) !== null && _a !== void 0 ? _a : \'RDN_GENERAL_ERROR\';\n      return this._code;\n    }\n  }]);\n\n  return RaidenError;\n}( /*#__PURE__*/error_wrapNativeSuper(Error));\nvar serializedErr = es6["h" /* intersection */]([es6["t" /* type */]({\n  name: es6["q" /* string */]\n}), es6["m" /* partial */]({\n  message: es6["q" /* string */],\n  stack: es6["q" /* string */],\n  details: ErrorDetails\n})]);\n/**\n * Simple Error codec\n *\n * This codec doesn\'t decode to an instance of the exact same error class object, but instead to\n * a generic Error, but assigning \'name\', \'stack\' & \'message\' properties, more as an informative\n * object.\n */\n\nvar ErrorCodec = new es6["a" /* Type */](\'Error\', // if it quacks like a duck... without relying on instanceof\nfunction (u) {\n  return error_typeof(u) === \'object\' && !!u && \'name\' in u && \'message\' in u;\n}, function (u) {\n  return Object(pipeable["pipe"])(serializedErr.decode(u), Object(Either["map"])(function (error) {\n    if (\'details\' in error) {\n      return Object.assign(new error_RaidenError(error.message, error.details), {\n        name: error.name,\n        stack: error.stack\n      });\n    } else {\n      return Object.assign(new Error(error.message), {\n        name: error.name,\n        stack: error.stack\n      });\n    }\n  }));\n}, function (error) {\n  return Object.assign({\n    name: error.name,\n    message: error.message,\n    stack: error.stack\n  }, \'details\' in error ? {\n    details: error.details\n  } : {});\n});\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/actions.js\n\n\nfunction actions_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction actions_toConsumableArray(arr) { return actions_arrayWithoutHoles(arr) || actions_iterableToArray(arr) || actions_unsupportedIterableToArray(arr) || actions_nonIterableSpread(); }\n\nfunction actions_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction actions_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return actions_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return actions_arrayLikeToArray(o, minLen); }\n\nfunction actions_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction actions_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return actions_arrayLikeToArray(arr); }\n\nfunction actions_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar actions_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n\n\n/**\n * Curried typeguard function (arity=2) which validates 2nd param is of type of some ActionCreators\n *\n * @param ac - Single or array of ActionCreators\n * @param args - if an object is passed, verify it, else returns a function which does\n * @returns boolean indicating object is of type of action, if passing 2nd argument,\n *      or typeguard function\n */\n\nfunction isActionOf(ac) {\n  var arr = Array.isArray(ac) ? ac : [ac];\n\n  function _isActionOf(action) {\n    return action != null && arr.some(function (a) {\n      return a.is(action);\n    });\n  }\n\n  if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 0) return _isActionOf(arguments.length <= 1 ? undefined : arguments[1]);\n  return _isActionOf;\n}\n/**\n * Create a typesafe, serializable ActionCreator from type, payload codec, meta codec & error flag\n *\n * Pass undefined for indermediary arguments if they aren\'t needed\n * e.g. action with meta and without payload:\n *   const addTodo = createAction(\'ADD_TODO\', undefined, t.type({ folder: t.string }));\n *\n * @param args - typesafe args tuple\n * @param args.0 - type literal string tag for action\n * @param args.1 - payload codec, optional\n * @param args.2 - meta codec, optional\n * @param args.3 - error flag, will only be present if defined (either false or true)\n * @returns ActionCreator factory function with useful properties. See [[ActionCreatorMembers]]\n */\n\nfunction createAction() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var type = args[0],\n      payloadC = args[1],\n      metaC = args[2],\n      error = args[3]; // action codec\n\n  var codec = es6["t" /* type */](Object.assign(Object.assign(Object.assign({\n    type: es6["j" /* literal */](type)\n  }, payloadC ? {\n    payload: payloadC\n  } : null), metaC ? {\n    meta: metaC\n  } : null), error ? {\n    error: es6["j" /* literal */](error)\n  } : null)); // member typeguard\n  // like codec.is, but on production, switches to more performant check of \'type\' tag only\n\n  var is =  false ? undefined : function (action) {\n    var _a;\n\n    return ((_a = action) === null || _a === void 0 ? void 0 : _a[\'type\']) === type;\n  };\n  return Object.assign(function (payload, meta) {\n    return Object.assign(Object.assign(Object.assign({\n      type: type\n    }, payloadC ? {\n      payload: payload\n    } : null), metaC ? {\n      meta: meta\n    } : null), error !== undefined ? {\n      error: error\n    } : null);\n  }, {\n    codec: codec,\n    type: type,\n    is: is\n  }, error !== undefined ? {\n    error: error\n  } : null);\n}\n/**\n * Create a set of async actions\n *\n * Here, meta is first class citizen, as it\'s required and what links a request with its responses\n * (success or failure).\n * An \'isResponseOf\' member function is provided which accepts \'meta\' (e.g. from request) and\n * returns a type guard function/filter which returns true only if passed a respective deep-equal\n * \'meta\' success|failure action.\n *\n * @param meta - Meta object common to these async actions\n * @param rtype - Request literal string tag\n * @param stype - Success literal string tag\n * @param ftype - Failure literal string tag\n * @param rpayload - Request payload codec\n * @param spayload - Success payload codec\n * @param args - Optional fpayload - Failure payload codec, defaults to ErrorCodec\n * @returns Async actions\n */\n\nfunction createAsyncAction(meta, rtype, stype, ftype, rpayload, spayload) {\n  var fpayload = (arguments.length <= 6 ? 0 : arguments.length - 6) ? arguments.length <= 6 ? undefined : arguments[6] : ErrorCodec;\n  var request = createAction(rtype, rpayload, meta);\n  var success = createAction(stype, spayload, meta);\n  var failure = createAction(ftype, fpayload, meta, true);\n  return {\n    request: request,\n    success: success,\n    failure: failure\n  };\n}\n/**\n * Match a passed meta with an action if returns true if metas are from corresponding actions\n *\n * curried (arity=2) for action passed as 2nd param.\n *\n * @param meta - meta base for comparison\n * @param args - curried args array\n * @param args.0 - action to test meta against the 1st param\n * @returns true if metas are compatible, false otherwise\n */\n\nfunction matchMeta(meta) {\n  var _match = function _match(action) {\n    return (// like isEqual, but for BigNumbers, use .eq\n      isMatchWith_default()(action.meta, meta, function (objVal, othVal) {\n        return (// any is to avoid lodash\'s issue with undefined-returning isMatchWithCustomizer cb type\n          BigNumberC.is(objVal) && BigNumberC.is(othVal) ? objVal.eq(othVal) : undefined\n        );\n      })\n    );\n  };\n\n  if (arguments.length <= 1 ? 0 : arguments.length - 1) return _match(arguments.length <= 1 ? undefined : arguments[1]);\n  return _match;\n}\n/**\n * Given an AsyncActionCreator and a respective \'meta\' object, returns a type guard function for\n * responses actions (success|failure) matching given \'meta\'\n *\n * This function receives 2-3 params. If it receives 2, it returns the type guard function, to be\n * used for filtering. Otherwise, it performs the check on the 3rd param.\n *\n * @param asyncAction - AsyncActionCreator object\n * @param meta - meta object to filter matching actions\n * @param args - curried last param\n * @returns type guard function to filter deep-equal meta success|failure actions\n */\n\n\nfunction isResponseOf(asyncAction, meta) {\n  var _isResponseOf = function _isResponseOf(action) {\n    return isActionOf([asyncAction.success, asyncAction.failure], action) && matchMeta(meta, action);\n  };\n\n  if (arguments.length <= 2 ? 0 : arguments.length - 2) return _isResponseOf(arguments.length <= 2 ? undefined : arguments[2]);\n  return _isResponseOf;\n}\n/**\n * Like isResponseOf, but ignores non-confirmed (or removed by a reorg) success action\n *\n * Confirmable success actions are emitted twice: first with payload.confirmed=undefined, then with\n * either confirmed=true, if tx still present after confirmation blocks, or confirmed=false, if tx\n * was removed from blockchain by a reorg.\n * This curied helper filter function ensures only one of the later causes a positive filter.\n *\n * @param asyncAction - AsyncActionCreator object\n * @param meta - meta object to filter matching actions\n * @param args - curried last param\n * @returns type guard function to filter deep-equal meta success|failure actions\n */\n\nfunction isConfirmationResponseOf(asyncAction, meta) {\n  function _isConfirmation(action) {\n    var _a, _b;\n\n    return typeof ((_b = (_a = action) === null || _a === void 0 ? void 0 : _a[\'payload\']) === null || _b === void 0 ? void 0 : _b[\'confirmed\']) === \'boolean\';\n  }\n\n  var _isResponseOf = function _isResponseOf(action) {\n    return isResponseOf(asyncAction, meta, action) && (asyncAction.failure.is(action) || _isConfirmation(action));\n  };\n\n  if (arguments.length <= 2 ? 0 : arguments.length - 2) return _isResponseOf(arguments.length <= 2 ? undefined : arguments[2]);\n  return _isResponseOf;\n}\n/**\n * Watch a stream of actions and resolves on meta-matching success or rejects on failure\n *\n * @param asyncAction - async actions object to wait for\n * @param meta - meta object of a request to wait for the respective response\n * @param action$ - actions stream to watch for responses\n * @param confirmed - set if should ignore non-confirmed success response\n * @returns Promise which rejects with payload in case of failure, or resolves payload otherwise\n */\n\nfunction asyncActionToPromise(asyncAction, meta, action$) {\n  var confirmed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return actions_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt("return", action$.pipe(Object(first["a" /* first */])(confirmed ? isConfirmationResponseOf(asyncAction, meta) : isResponseOf(asyncAction, meta)), Object(map["a" /* map */])(function (action) {\n              if (asyncAction.failure.is(action)) throw action.payload;else if (action.payload.confirmed === false) throw new error_RaidenError(ErrorCodes.RDN_TRANSACTION_REORG, {\n                transactionHash: action.payload.txHash\n              });\n              return action.payload;\n            })).toPromise());\n\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n/**\n * Create a reducer which can be extended with additional actions handlers\n *\n * Usage:\n *   const reducer = createReducer(State)\n *      .handle(action, (s, a): State => ...)\n *      .handle(...)\n *      .handle(...);\n *\n * @param initialState - state for initialization (if no state is passed on reducer call)\n * @returns A reducer function, extended with a handle method to extend it\n */\n\nfunction createReducer(initialState) {\n  // make a reducer function for given handlers\n  function makeReducer(handlers) {\n    var reducer = function reducer() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n      var action = arguments.length > 1 ? arguments[1] : undefined;\n      if (action.type in handlers && handlers[action.type][0].is(action)) return handlers[action.type][1](state, action); // calls registered handler\n\n      return state; // fallback returns unchanged state\n    }; // circular dependency on generic params forbids an already handled action from being accepted\n\n\n    function handle(ac, handler) {\n      var arr = Array.isArray(ac) ? ac : [ac];\n      assert(!arr.some(function (a) {\n        return a.type in handlers;\n      }), \'Already handled\');\n      return makeReducer(Object.assign.apply(Object, [{}, handlers].concat(actions_toConsumableArray(arr.map(function (ac) {\n        return actions_defineProperty({}, ac.type, [ac, handler]);\n      })))));\n    } // grow reducer function with our `handle` extender\n\n\n    return Object.assign(reducer, {\n      handle: handle\n    });\n  } // initially makes a reducer which doesn\'t handle anything (just returns unchanged state)\n\n\n  return makeReducer({});\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/types.js\n\n // Represents a HashTime-Locked amount in a channel\n\nvar Lock = es6["t" /* type */]({\n  amount: UInt(32),\n  expiration: UInt(32),\n  secrethash: Hash\n}, \'Lock\');\n/**\n * Balance Proof constructed from an EnvelopeMessage\n * Either produced by us or received from the partner, the BPs are generated from the messages\n * because BP signature requires the hash of the message, for authentication of data not included\n * nor relevant for the smartcontract/BP itself, but so for the peers (e.g. payment_id)\n */\n\nvar SignedBalanceProof = es6["t" /* type */]({\n  // channel data\n  chainId: UInt(32),\n  tokenNetworkAddress: Address,\n  channelId: UInt(32),\n  // balance proof data\n  nonce: UInt(8),\n  transferredAmount: UInt(32),\n  lockedAmount: UInt(32),\n  locksroot: Hash,\n  messageHash: Hash,\n  signature: Signature,\n  sender: Address\n});\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/actions.js\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n\n\n // interfaces need to be exported, and we need/want to support `import * as RaidenActions`\n\nvar ChannelId = es6["t" /* type */]({\n  tokenNetwork: Address,\n  partner: Address\n});\n/* A new head in the blockchain is detected by provider */\n\nvar newBlock = createAction(\'newBlock\', es6["t" /* type */]({\n  blockNumber: es6["l" /* number */]\n}));\n/**\n * A new token network is detected in the TokenNetworkRegistry instance\n * fromBlock is only set on the first time, to fetch and handle past events\n */\n\nvar tokenMonitored = createAction(\'tokenMonitored\', es6["h" /* intersection */]([es6["t" /* type */]({\n  token: Address,\n  tokenNetwork: Address\n}), es6["m" /* partial */]({\n  fromBlock: es6["l" /* number */]\n})]));\n/**\n * Channel actions receive ChannelId as \'meta\' action property\n * This way, \'meta\' can be used equally for request, success and error actions\n */\n\nvar channelOpen = createAsyncAction(ChannelId, \'channel/open/request\', \'channel/open/success\', \'channel/open/failed\', es6["m" /* partial */]({\n  settleTimeout: es6["l" /* number */],\n  subkey: es6["d" /* boolean */],\n  deposit: UInt(32)\n}), es6["t" /* type */]({\n  id: es6["l" /* number */],\n  settleTimeout: es6["l" /* number */],\n  isFirstParticipant: es6["d" /* boolean */],\n  txHash: Hash,\n  txBlock: es6["l" /* number */],\n  confirmed: es6["v" /* union */]([es6["u" /* undefined */], es6["d" /* boolean */]])\n}));\n/* Channel with meta:ChannelId + payload.id should be monitored */\n\nvar channelMonitor = createAction(\'channel/monitor\', es6["h" /* intersection */]([es6["t" /* type */]({\n  id: es6["l" /* number */]\n}), es6["m" /* partial */]({\n  fromBlock: es6["l" /* number */]\n})]), ChannelId);\nvar channelDeposit = createAsyncAction(ChannelId, \'channel/deposit/request\', \'channel/deposit/success\', \'channel/deposit/failure\', es6["h" /* intersection */]([es6["t" /* type */]({\n  deposit: UInt(32)\n}), es6["m" /* partial */]({\n  subkey: es6["d" /* boolean */]\n})]), es6["t" /* type */]({\n  id: es6["l" /* number */],\n  participant: Address,\n  totalDeposit: UInt(32),\n  txHash: Hash,\n  txBlock: es6["l" /* number */],\n  confirmed: es6["v" /* union */]([es6["u" /* undefined */], es6["d" /* boolean */]])\n}));\n/* A withdraw is detected on-chain */\n\nvar channelWithdrawn = createAction(\'channel/withdraw/success\', es6["t" /* type */]({\n  id: es6["l" /* number */],\n  participant: Address,\n  totalWithdraw: UInt(32),\n  txHash: Hash,\n  txBlock: es6["l" /* number */],\n  confirmed: es6["v" /* union */]([es6["u" /* undefined */], es6["d" /* boolean */]])\n}), ChannelId);\nvar channelClose = createAsyncAction(ChannelId, \'channel/close/request\', \'channel/close/success\', \'channel/close/failure\', es6["v" /* union */]([es6["m" /* partial */]({\n  subkey: es6["d" /* boolean */]\n}), es6["u" /* undefined */]]), es6["t" /* type */]({\n  id: es6["l" /* number */],\n  participant: Address,\n  txHash: Hash,\n  txBlock: es6["l" /* number */],\n  confirmed: es6["v" /* union */]([es6["u" /* undefined */], es6["d" /* boolean */]])\n}));\n/* A channel meta:ChannelId becomes settleable, starting from payload.settleableBlock */\n\nvar channelSettleable = createAction(\'channel/settleable\', es6["t" /* type */]({\n  settleableBlock: es6["l" /* number */]\n}), ChannelId);\nvar channelSettle = createAsyncAction(ChannelId, \'channel/settle/request\', \'channel/settle/success\', \'channel/settle/failure\', es6["v" /* union */]([es6["m" /* partial */]({\n  subkey: es6["d" /* boolean */]\n}), es6["u" /* undefined */]]), es6["h" /* intersection */]([es6["t" /* type */]({\n  id: es6["l" /* number */],\n  txHash: Hash,\n  txBlock: es6["l" /* number */],\n  confirmed: es6["v" /* union */]([es6["u" /* undefined */], es6["d" /* boolean */]])\n}), es6["m" /* partial */]({\n  locks: es6["o" /* readonlyArray */](Lock)\n})]));\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/state.js\n\nvar RaidenMatrixSetup = es6["n" /* readonly */](es6["t" /* type */]({\n  userId: es6["q" /* string */],\n  accessToken: es6["q" /* string */],\n  deviceId: es6["q" /* string */],\n  displayName: es6["q" /* string */]\n}));\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/actions.js\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n\n\n\nvar NodeId = es6["t" /* type */]({\n  address: Address\n});\n/* MatrixClient instance is ready and logged in to payload.server with credentials payload.setup */\n\nvar matrixSetup = createAction(\'matrixSetup\', es6["t" /* type */]({\n  server: es6["q" /* string */],\n  setup: RaidenMatrixSetup\n}));\nvar matrixPresence = createAsyncAction(NodeId, \'matrix/presence/request\', \'matrix/presence/success\', \'matrix/presence/failure\', undefined, es6["h" /* intersection */]([es6["t" /* type */]({\n  userId: es6["q" /* string */],\n  available: es6["d" /* boolean */],\n  ts: es6["l" /* number */]\n}), es6["m" /* partial */]({\n  caps: es6["p" /* record */](es6["q" /* string */], es6["b" /* any */])\n})]));\n/* payload.roomId must go front on meta.address\'s room queue */\n\nvar matrixRoom = createAction(\'matrixRoom\', es6["t" /* type */]({\n  roomId: es6["q" /* string */]\n}), NodeId);\n/* payload.roomId must be excluded from meta.address room queue, if present */\n\nvar matrixRoomLeave = createAction(\'matrixRoomLeave\', es6["t" /* type */]({\n  roomId: es6["q" /* string */]\n}), NodeId);\nvar rtcChannel = createAction(\'rtcChannel\', es6["v" /* union */]([es6["u" /* undefined */], instanceOf(RTCDataChannel)]), NodeId);\n// CONCATENATED MODULE: ../raiden-ts/dist/messages/types.js\n/* istanbul ignore file */\n\n/* eslint-disable @typescript-eslint/camelcase */\n\n/**\n * These io-ts codecs validate and decode JSON Raiden messages\n * They include BigNumber strings validation, enum validation (if needed), Address checksum\n * validation, etc, and converting everything to its respective object, where needed.\n */\n\n\n // types\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType["DELIVERED"] = "Delivered";\n  MessageType["PROCESSED"] = "Processed";\n  MessageType["SECRET_REQUEST"] = "SecretRequest";\n  MessageType["SECRET_REVEAL"] = "RevealSecret";\n  MessageType["LOCKED_TRANSFER"] = "LockedTransfer";\n  MessageType["REFUND_TRANSFER"] = "RefundTransfer";\n  MessageType["UNLOCK"] = "Unlock";\n  MessageType["LOCK_EXPIRED"] = "LockExpired";\n  MessageType["WITHDRAW_REQUEST"] = "WithdrawRequest";\n  MessageType["WITHDRAW_CONFIRMATION"] = "WithdrawConfirmation";\n  MessageType["WITHDRAW_EXPIRED"] = "WithdrawExpired";\n  MessageType["PFS_CAPACITY_UPDATE"] = "PFSCapacityUpdate";\n  MessageType["PFS_FEE_UPDATE"] = "PFSFeeUpdate";\n})(MessageType || (MessageType = {})); // Mixin of a message that contains an identifier and should be ack\'ed with a respective Delivered\n\n\nvar RetrieableMessage = es6["n" /* readonly */](es6["t" /* type */]({\n  message_identifier: UInt(8)\n})); // Acknowledges to the sender that a RetrieableMessage was received\n\nvar Delivered = es6["n" /* readonly */](es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.DELIVERED),\n  delivered_message_identifier: UInt(8)\n})); // Confirms some message that required state validation was successfuly processed\n\nvar Processed = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.PROCESSED)\n}), RetrieableMessage])); // Requests the initiator to reveal the secret for a LockedTransfer targeted to us\n\nvar SecretRequest = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.SECRET_REQUEST),\n  payment_identifier: UInt(8),\n  secrethash: Hash,\n  amount: UInt(32),\n  expiration: UInt(32)\n}), RetrieableMessage])); // Reveal to the target or the previous hop a secret we just learned off-chain\n\nvar SecretReveal = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.SECRET_REVEAL),\n  secret: Secret\n}), RetrieableMessage])); // Mixin for messages containing a balance proof\n\nvar EnvelopeMessage = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  chain_id: UInt(32),\n  token_network_address: Address,\n  channel_identifier: UInt(32),\n  nonce: UInt(8),\n  transferred_amount: UInt(32),\n  locked_amount: UInt(32),\n  locksroot: Hash\n}), RetrieableMessage]));\nvar RouteMetadata = es6["n" /* readonly */](es6["t" /* type */]({\n  route: es6["o" /* readonlyArray */](Address)\n}));\nvar Metadata = es6["n" /* readonly */](es6["t" /* type */]({\n  routes: es6["o" /* readonlyArray */](RouteMetadata)\n})); // base for locked and refund transfer, they differentiate only on the type tag\n\nvar LockedTransferBase = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  payment_identifier: UInt(8),\n  token: Address,\n  recipient: Address,\n  lock: Lock,\n  target: Address,\n  initiator: Address,\n  metadata: Metadata\n}), EnvelopeMessage])); // a mediated transfer containing a locked amount\n\nvar LockedTransfer = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.LOCKED_TRANSFER)\n}), LockedTransferBase])); // if a mediated transfer didn\'t succeed, mediator can refund the amount with the same secrethash\n// so the previous hop can retry it with another neighbor\n\nvar RefundTransfer = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.REFUND_TRANSFER)\n}), LockedTransferBase])); // when the secret is revealed, unlock sends a new balance proof without the lock and increasing\n// the total transfered to finish the offchain transfer\n\nvar Unlock = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.UNLOCK),\n  payment_identifier: UInt(8),\n  secret: Secret\n}), EnvelopeMessage])); // after mediated transfer fails and the lock expire, clean it from the locks tree\n\nvar LockExpired = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.LOCK_EXPIRED),\n  recipient: Address,\n  secrethash: Hash\n}), EnvelopeMessage]));\nvar WithdrawBase = es6["n" /* readonly */](es6["t" /* type */]({\n  chain_id: UInt(32),\n  token_network_address: Address,\n  channel_identifier: UInt(32),\n  participant: Address,\n  total_withdraw: UInt(32),\n  nonce: UInt(8),\n  expiration: UInt(32)\n}));\nvar WithdrawRequest = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.WITHDRAW_REQUEST)\n}), WithdrawBase, RetrieableMessage]));\nvar WithdrawConfirmation = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.WITHDRAW_CONFIRMATION)\n}), WithdrawBase, RetrieableMessage]));\nvar WithdrawExpired = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.WITHDRAW_EXPIRED)\n}), WithdrawBase, RetrieableMessage]));\nvar PFSCapacityUpdate = es6["n" /* readonly */](es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.PFS_CAPACITY_UPDATE),\n  canonical_identifier: es6["n" /* readonly */](es6["t" /* type */]({\n    chain_identifier: UInt(32),\n    token_network_address: Address,\n    channel_identifier: UInt(32)\n  })),\n  updating_participant: Address,\n  other_participant: Address,\n  updating_nonce: UInt(8),\n  other_nonce: UInt(8),\n  updating_capacity: UInt(32),\n  other_capacity: UInt(32),\n  reveal_timeout: UInt(32)\n}));\nvar PFSFeeUpdate = es6["n" /* readonly */](es6["t" /* type */]({\n  type: es6["j" /* literal */](MessageType.PFS_FEE_UPDATE),\n  canonical_identifier: es6["n" /* readonly */](es6["t" /* type */]({\n    chain_identifier: UInt(32),\n    token_network_address: Address,\n    channel_identifier: UInt(32)\n  })),\n  updating_participant: Address,\n  timestamp: es6["q" /* string */],\n  fee_schedule: es6["t" /* type */]({\n    cap_fees: es6["d" /* boolean */],\n    // if not null, it should be an array of [tokenAmount, fee] tuples\n    imbalance_penalty: es6["v" /* union */]([es6["k" /* null */], es6["c" /* array */](es6["s" /* tuple */]([UInt(32), Int(32)]))]),\n    proportional: Int(32),\n    flat: Int(32)\n  })\n}));\nvar Message = es6["v" /* union */]([Delivered, Processed, SecretRequest, SecretReveal, LockedTransfer, RefundTransfer, Unlock, LockExpired, WithdrawRequest, WithdrawConfirmation, WithdrawExpired, PFSCapacityUpdate, PFSFeeUpdate]);\n// CONCATENATED MODULE: ../raiden-ts/dist/messages/actions.js\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n\n\n\n/** One-shot send payload.message to meta.address user in transport */\n\nvar messageSend = createAsyncAction(es6["t" /* type */]({\n  address: Address,\n  msgId: es6["q" /* string */]\n}), \'message/send/request\', \'message/send/success\', \'message/send/failure\', es6["t" /* type */]({\n  message: es6["v" /* union */]([es6["q" /* string */], Signed(Message)])\n}), undefined);\n/** One-shot send payload.message to a global room in transport */\n\nvar messageGlobalSend = createAction(\'messageGlobalSend\', es6["t" /* type */]({\n  message: es6["v" /* union */]([es6["q" /* string */], Signed(Message)])\n}), es6["t" /* type */]({\n  roomName: es6["q" /* string */]\n}));\n/**\n * payload.message was received on payload.ts (timestamp) from meta.address\n * payload.userId and payload.roomId are optional and specific to matrix transport, as sender info\n */\n\nvar messageReceived = createAction(\'messageReceived\', es6["h" /* intersection */]([es6["t" /* type */]({\n  text: es6["q" /* string */],\n  ts: es6["l" /* number */]\n}), es6["m" /* partial */]({\n  message: es6["v" /* union */]([Message, Signed(Message)]),\n  userId: es6["q" /* string */],\n  roomId: es6["q" /* string */]\n})]), es6["t" /* type */]({\n  address: Address\n}));\n// CONCATENATED MODULE: ../raiden-ts/dist/path/types.js\n\n\n/**\n * Codec for PFS API returned data\n */\n\nvar PathResults = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  result: es6["c" /* array */](es6["n" /* readonly */](es6["t" /* type */]({\n    path: es6["o" /* readonlyArray */](Address),\n\n    /* eslint-disable-next-line @typescript-eslint/camelcase */\n    estimated_fee: Int(32)\n  })))\n}), es6["m" /* partial */]({\n  /* eslint-disable-next-line @typescript-eslint/camelcase */\n  feedback_token: es6["q" /* string */]\n})]));\n/**\n * Codec for raiden-ts internal representation of a PFS result/routes\n */\n\nvar Paths = es6["c" /* array */](es6["n" /* readonly */](es6["t" /* type */]({\n  path: es6["o" /* readonlyArray */](Address),\n  fee: Int(32)\n})));\n/**\n * A PFS server/service instance info\n */\n\nvar PFS = es6["n" /* readonly */](es6["t" /* type */]({\n  address: Address,\n  url: es6["q" /* string */],\n  rtt: es6["l" /* number */],\n  price: UInt(32),\n  token: Address\n}));\n/**\n * An IOU used to pay the services\n */\n\nvar IOU = es6["n" /* readonly */](es6["t" /* type */]({\n  sender: Address,\n  receiver: Address,\n  amount: UInt(32),\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  expiration_block: UInt(32),\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  one_to_n_address: Address,\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  chain_id: UInt(32)\n}));\nvar LastIOUResults = es6["n" /* readonly */](es6["t" /* type */]({\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  last_iou: Signed(IOU)\n}));\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/actions.js\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n\n\n\n\n\nvar TransferId = es6["t" /* type */]({\n  secrethash: Hash,\n  direction: es6["i" /* keyof */]({\n    sent: null,\n    received: null\n  })\n});\n/**\n * A transfer async action set\n *\n * A transfer is considered as having succeeded from the time the secret is revealed to the target,\n * as from there, target and mediators can claim the payment down to us. But the full off-chain\n * happy case completes only after partner/neighbor acknowledges receiving the Unlock.\n * So, we usually only emits this action in the end of the happy case, and it\'ll then contain the\n * unlock\'s balanceProof, which indicates the full off-chain path succeeded.\n * It\'ll be emitted without a balanceProof if something forces the transfer to complete\n * (e.g.  channel closed), the secret was revealed (so target was paid) but for any reason the\n * unlock didn\'t happen yet.\n *\n * transfer.failure is emitted as soon as we know the transfer failed definitely, like when a\n * RefundTransfer is received or the lock expires before revealing the secret. It notifies the user\n * (e.g. pending Promises) that the transfer failed and won\'t be paid (eventually, locked amount\n * will be recovered by expiring the lock).\n */\n\nvar actions_transfer = createAsyncAction(TransferId, \'transfer/request\', \'transfer/success\', \'transfer/failure\', es6["h" /* intersection */]([es6["t" /* type */]({\n  tokenNetwork: Address,\n  target: Address,\n  value: UInt(32),\n  paths: Paths,\n  paymentId: UInt(8)\n}), es6["m" /* partial */]({\n  secret: Secret,\n  expiration: es6["l" /* number */],\n  initiator: Address\n})]), es6["m" /* partial */]({\n  balanceProof: SignedBalanceProof\n}));\n/** A LockedTransfer was signed and should be sent to partner */\n\nvar transferSigned = createAction(\'transferSigned\', es6["t" /* type */]({\n  message: Signed(LockedTransfer),\n  fee: Int(32)\n}), TransferId);\n/** Partner acknowledge they received and processed our LockedTransfer */\n\nvar transferProcessed = createAction(\'transferProcessed\', es6["t" /* type */]({\n  message: Signed(Processed)\n}), TransferId);\n/** Register a secret */\n\nvar transferSecret = createAction(\'transferSecret\', es6["t" /* type */]({\n  secret: Secret\n}), TransferId);\nvar transferSecretRegister = createAsyncAction(TransferId, \'transferSecret/register/request\', \'transferSecret/register/success\', \'transferSecret/register/failure\', es6["h" /* intersection */]([es6["t" /* type */]({\n  secret: Secret\n}), es6["m" /* partial */]({\n  subkey: es6["d" /* boolean */]\n})]), es6["t" /* type */]({\n  secret: Secret,\n  txHash: Hash,\n  txBlock: es6["l" /* number */],\n  // ConfirmableAction\n  confirmed: es6["v" /* union */]([es6["u" /* undefined */], es6["d" /* boolean */]])\n}));\n/** A valid SecretRequest received from target */\n\nvar transferSecretRequest = createAction(\'transferSecretRequest\', es6["t" /* type */]({\n  message: Signed(SecretRequest)\n}), TransferId);\n/** A SecretReveal sent to target */\n\nvar transferSecretReveal = createAction(\'transferSecretReveal\', es6["t" /* type */]({\n  message: Signed(SecretReveal)\n}), TransferId);\nvar transferUnlock = createAsyncAction(TransferId, \'transfer/unlock/request\', \'transfer/unlock/success\', \'transfer/unlock/failure\', undefined, es6["t" /* type */]({\n  message: Signed(Unlock)\n}));\n/** Partner acknowledge they received and processed our Unlock */\n\nvar transferUnlockProcessed = createAction(\'transferUnlockProcessed\', es6["t" /* type */]({\n  message: Signed(Processed)\n}), TransferId);\n/**\n * A request to expire a given transfer\n *\n * A transfer expiration request may fail for any reason\n * e.g. user rejected sign promopt. It should eventually get prompted again, on a future newBlock\n * action which sees this transfer should be expired but sent.lockExpired didn\'t get set yet.\n */\n\nvar transferExpire = createAsyncAction(TransferId, \'transfer/expire/request\', \'transfer/expire/success\', \'transfer/expire/failure\', undefined, es6["t" /* type */]({\n  message: Signed(LockExpired)\n}));\n/** Partner acknowledge they received and processed our LockExpired */\n\nvar transferExpireProcessed = createAction(\'transferExpireProcessed\', es6["t" /* type */]({\n  message: Signed(Processed)\n}), TransferId);\n/** A transfer was refunded */\n\nvar transferRefunded = createAction(\'transferRefunded\', es6["t" /* type */]({\n  message: Signed(RefundTransfer)\n}), TransferId);\n/** A pending transfer isn\'t needed anymore and should be cleared from state */\n\nvar transferClear = createAction(\'transferClear\', undefined, TransferId); // Withdraw actions\n\nvar WithdrawId = es6["t" /* type */]({\n  tokenNetwork: Address,\n  partner: Address,\n  totalWithdraw: UInt(32),\n  expiration: es6["l" /* number */]\n});\n/** A WithdrawRequest was received from partner */\n\nvar withdrawReceive = createAsyncAction(WithdrawId, \'withdraw/receive/request\', \'withdraw/receive/success\', \'withdraw/receive/failure\', es6["t" /* type */]({\n  message: Signed(WithdrawRequest)\n}), es6["t" /* type */]({\n  message: Signed(WithdrawConfirmation)\n}));\n// CONCATENATED MODULE: ../raiden-ts/dist/path/actions.js\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n\n\n\nvar PathId = es6["t" /* type */]({\n  tokenNetwork: Address,\n  target: Address,\n  value: UInt(32)\n});\nvar ServiceId = es6["t" /* type */]({\n  tokenNetwork: Address,\n  serviceAddress: Address\n});\nvar pathFind = createAsyncAction(PathId, \'path/find/request\', \'path/find/success\', \'path/find/failure\', es6["m" /* partial */]({\n  paths: Paths,\n  pfs: es6["v" /* union */]([PFS, es6["k" /* null */]])\n}), es6["t" /* type */]({\n  paths: Paths\n}));\nvar pfsListUpdated = createAction(\'pfsListUpdated\', es6["t" /* type */]({\n  pfsList: es6["o" /* readonlyArray */](Address)\n}));\nvar iouPersist = createAction(\'iouPersist\', es6["t" /* type */]({\n  iou: Signed(IOU)\n}), ServiceId);\nvar iouClear = createAction(\'iouClear\', undefined, ServiceId);\n// CONCATENATED MODULE: ../raiden-ts/dist/actions.js\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/**\n * Aggregate types and exported properties from actions from all modules\n */\n\n\n\n\n\n\n\n\n\n\nvar raidenShutdown = createAction(\'raidenShutdown\', es6["t" /* type */]({\n  reason: es6["v" /* union */]([es6["j" /* literal */](ShutdownReason.STOP), es6["j" /* literal */](ShutdownReason.ACCOUNT_CHANGED), es6["j" /* literal */](ShutdownReason.NETWORK_CHANGED), ErrorCodec])\n}));\nvar raidenConfigUpdate = createAction(\'raidenConfigUpdate\', PartialRaidenConfig);\nvar RaidenActions = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n  raidenShutdown: raidenShutdown,\n  raidenConfigUpdate: raidenConfigUpdate\n}, channels_actions_namespaceObject), transport_actions_namespaceObject), messages_actions_namespaceObject), transfers_actions_namespaceObject), path_actions_namespaceObject);\n/* Mapping { [type: string]: Action } of a subset of RaidenActions exposed as events */\n\nvar RaidenEvents = [RaidenActions.raidenShutdown, RaidenActions.newBlock, RaidenActions.matrixPresence.success, RaidenActions.tokenMonitored];\n/**\n * Set of [serializable] actions which are first emitted with\n * payload.confirmed=undefined, then, after confirmation blocks, either with confirmed=true if tx\n * is still present on blockchain, or confirmed=false if it got removed by a reorg.\n *\n * These actions must comply with the following type:\n * {\n *   payload: {\n *     txHash: Hash;\n *     txBlock: number;\n *     confirmed: undefined | boolean;\n *   };\n *   meta: any;\n * }\n */\n\nvar ConfirmableActions = [channelOpen.success, channelDeposit.success, channelWithdrawn, channelClose.success, channelSettle.success, transferSecretRegister.success];\n/**\n * Union of codecs of actions above\n */\n\nvar ConfirmableAction = es6["v" /* union */]([channelOpen.success.codec, channelDeposit.success.codec, channelWithdrawn.codec, channelClose.success.codec, channelSettle.success.codec, transferSecretRegister.success.codec]);\n// CONCATENATED MODULE: ../raiden-ts/dist/migration/0.js\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Migrate previous state to version 0\n *\n * @param state - RaidenState version -1\n * @returns State version 0\n */\nfunction migrate0(state) {\n  return Object.assign(Object.assign({}, state), {\n    version: 0\n  });\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/migration/1.js\nfunction _1_slicedToArray(arr, i) { return _1_arrayWithHoles(arr) || _1_iterableToArrayLimit(arr, i) || _1_unsupportedIterableToArray(arr, i) || _1_nonIterableRest(); }\n\nfunction _1_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _1_arrayLikeToArray(o, minLen); }\n\nfunction _1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _1_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _1_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Move secrets to \'secret\' member of the respective TransferState\n *\n * @param state - RaidenState version 0\n * @returns State version 1\n */\nfunction migrate1(state) {\n  var _a, _b, _c;\n\n  var sent = state.sent;\n\n  for (var _i = 0, _Object$entries = Object.entries(sent); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _1_slicedToArray(_Object$entries[_i], 2),\n        h = _Object$entries$_i[0],\n        t = _Object$entries$_i[1];\n\n    if (state.secrets[h]) {\n      Object.assign(t, {\n        secret: [(_b = (_a = t.secretReveal) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : t.transfer[0], {\n          value: state.secrets[h].secret,\n          registerBlock: (_c = state.secrets[h].registerBlock) !== null && _c !== void 0 ? _c : 0\n        }]\n      });\n    }\n  }\n\n  delete state[\'secrets\'];\n  return state;\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/migration/2.js\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Adds: Channel.closeParticipant, TransferState.partner & RaidenState.received\n *\n * @param state - RaidenState version 1\n * @returns State version 2\n */\nfunction migrate2(state) {\n  for (var _i = 0, _Object$values = Object.values(state.channels); _i < _Object$values.length; _i++) {\n    var partnerChannels = _Object$values[_i];\n\n    for (var _i2 = 0, _Object$values2 = Object.values(partnerChannels); _i2 < _Object$values2.length; _i2++) {\n      var channel = _Object$values2[_i2];\n\n      if (channel.closeBlock) {\n        // assume we were the ones closing the channel\n        Object.assign(channel, {\n          closeParticipant: state.address\n        });\n      }\n    }\n  }\n\n  var sent = state.sent;\n\n  for (var _i3 = 0, _Object$values3 = Object.values(sent); _i3 < _Object$values3.length; _i3++) {\n    var t = _Object$values3[_i3];\n    Object.assign(t, {\n      partner: t.transfer[1].recipient\n    });\n  }\n\n  Object.assign(state, {\n    received: {}\n  });\n  return state;\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/migration/index.js\nfunction migration_slicedToArray(arr, i) { return migration_arrayWithHoles(arr) || migration_iterableToArrayLimit(arr, i) || migration_unsupportedIterableToArray(arr, i) || migration_nonIterableRest(); }\n\nfunction migration_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction migration_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return migration_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return migration_arrayLikeToArray(o, minLen); }\n\nfunction migration_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction migration_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction migration_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n // import above and populate this dict with new migrator functions\n// must be ordered, continuous, and last one MUST be state.CURRENT_STATE_VERSION\n\nvar migrations = {\n  0: migrate0,\n  1: migrate1,\n  2: migrate2\n};\n/**\n * Migrate a RaidenState from any previous version to latest one\n *\n * @param state - Previous raiden state\n * @param toVersion - Migrate up to this version\n * @returns A current RaidenState (hopefully), to be validated\n */\n\nfunction migrateState(state, toVersion) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    log: loglevel_default.a\n  },\n      log = _ref.log;\n\n  var _a;\n\n  for (var v = 0; v <= toVersion; v++) {\n    assert(v in migrations, "missing migration for ".concat(v));\n  }\n\n  for (var _i = 0, _Object$entries = Object.entries(migrations); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = migration_slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        migrate = _Object$entries$_i[1];\n\n    var version = +key;\n    if (((_a = state === null || state === void 0 ? void 0 : state.version) !== null && _a !== void 0 ? _a : -1) !== version - 1) continue;\n    if (version > toVersion) continue;\n\n    try {\n      state = Object.assign(migrate(state), {\n        version: version\n      });\n    } catch (err) {\n      log.error("Error migrating state from version ".concat(version - 1, " to ").concat(version), state, err);\n      throw err;\n    }\n  } // this must be validated as RaidenState, but is done in decodeRaidenState to avoid cyclic import\n\n\n  return state;\n}\n// EXTERNAL MODULE: ./node_modules/ethers/utils/bytes.js\nvar bytes = __webpack_require__("948b");\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/lossless-json/dist/lossless-json.js\nvar lossless_json = __webpack_require__("ad02");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/data.js\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n\n/**\n * Encode data to hex string of exactly length size (in bytes)\n * Throw if data can\'t be made to fit in length.\n *\n * @param data - May be of multiple types:\n *      - number|BigNumber: Encoded in the big-endian byte-order and left-zero-padded to length\n *      - string: Must be hex-encoded string of length bytes\n *      - number[] Must be of exactly of length size (left/right-pad it before if needed)\n * @param length - The expected length of the hex string, in bytes\n * @returns HexString byte-array of length\n */\n\nfunction encode(data, length) {\n  var hex;\n  if (typeof data === \'boolean\') data = data ? constants["One"] : constants["Zero"];else if (typeof data === \'number\') data = Object(utils["bigNumberify"])(data);\n  if (typeof data === \'string\' && !Object(bytes["isHexString"])(data)) data = Object(utils["toUtf8Bytes"])(data);\n  if (Object(bytes["isArrayish"])(data)) data = Object(bytes["hexlify"])(data);\n\n  if (BigNumberC.is(data)) {\n    if (data.lt(0)) throw new error_RaidenError(ErrorCodes.DTA_NEGATIVE_NUMBER);\n    if (data.gte(constants["Two"].pow(length * 8))) throw new error_RaidenError(ErrorCodes.DTA_NUMBER_TOO_LARGE);\n    hex = Object(bytes["hexZeroPad"])(Object(bytes["hexlify"])(data), length);\n  } else if (typeof data === \'string\') {\n    if (Object(bytes["hexDataLength"])(data) !== length) throw new error_RaidenError(ErrorCodes.DTA_ARRAY_LENGTH_DIFFRENCE);\n    hex = data;\n  } else {\n    throw new error_RaidenError(ErrorCodes.DTA_UNENCODABLE_DATA);\n  }\n\n  return hex;\n}\n\nvar isLosslessNumber = function isLosslessNumber(u) {\n  return (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    u != null && u[\'isLosslessNumber\']\n  );\n};\n/**\n * Opportunistic JSON.parse regarding numbers\n * If possible to decode a JSON number as JS number (i.e. value < 2^53) and return \'number\',\n * otherwise returns BigNumber object\n * Throws if handled invalid JSON\n *\n * @param text - JSON string to parse\n * @returns Decoded object\n */\n\n\nfunction losslessParse(text) {\n  return lossless_json["parse"](text, function (_ref, value) {\n    _objectDestructuringEmpty(_ref);\n\n    if (isLosslessNumber(value)) {\n      try {\n        return value.valueOf(); // return number, if possible, or throw if > 2^53\n      } catch (e) {\n        // else, convert early to BigNumber\n        return Object(utils["bigNumberify"])(value.toString());\n      }\n    }\n\n    return value;\n  });\n}\n/**\n * Stringify object losslessly, by converting BigNumbers to \'string\'s\n *\n * @param value - Object to be serialized as a string\n * @param replacer - Replacer function. Leave default to stringify BigNumbers\n * @param space - indentation spaces\n * @returns serialized representation of value\n */\n\nfunction losslessStringify(value) {\n  var replacer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (_ref2, value) {\n    _objectDestructuringEmpty(_ref2);\n\n    return utils["BigNumber"].isBigNumber(value) ? value.toString() : value;\n  };\n  var space = arguments.length > 2 ? arguments[2] : undefined;\n  return lossless_json["stringify"](value, replacer, space);\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/state.js\n\n\n\nvar ChannelState;\n\n(function (ChannelState) {\n  ChannelState["opening"] = "opening";\n  ChannelState["open"] = "open";\n  ChannelState["closing"] = "closing";\n  ChannelState["closed"] = "closed";\n  ChannelState["settleable"] = "settleable";\n  ChannelState["settling"] = "settling";\n  ChannelState["settled"] = "settled";\n})(ChannelState || (ChannelState = {}));\n/**\n * Contains info of each side of a channel\n */\n\n\nvar ChannelEnd = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  deposit: UInt(32)\n}), es6["m" /* partial */]({\n  locks: es6["o" /* readonlyArray */](Lock),\n  balanceProof: SignedBalanceProof,\n  withdraw: UInt(32)\n})]));\nvar Channel = es6["h" /* intersection */]([es6["n" /* readonly */](es6["t" /* type */]({\n  own: ChannelEnd,\n  partner: ChannelEnd\n})), es6["v" /* union */]([\n/* union of types with literals intersection allows narrowing other props presence. e.g.:\n * if (channel.state === ChannelState.open) {\n *   id = channel.id; // <- id can\'t be undefined\n *   closeBlock = channel.closeBlock; // error: closeBlock only exist on states closed|settling\n * }\n */\nes6["n" /* readonly */](es6["t" /* type */]({\n  state: es6["j" /* literal */](ChannelState.opening)\n})), es6["n" /* readonly */](es6["t" /* type */]({\n  state: es6["v" /* union */]([es6["j" /* literal */](ChannelState.open), es6["j" /* literal */](ChannelState.closing)]),\n  id: es6["l" /* number */],\n  settleTimeout: es6["l" /* number */],\n  openBlock: es6["l" /* number */],\n  isFirstParticipant: es6["d" /* boolean */]\n})), es6["n" /* readonly */](es6["t" /* type */]({\n  state: es6["v" /* union */]([es6["j" /* literal */](ChannelState.closed), es6["j" /* literal */](ChannelState.settleable), es6["j" /* literal */](ChannelState.settling)]),\n  id: es6["l" /* number */],\n  settleTimeout: es6["l" /* number */],\n  openBlock: es6["l" /* number */],\n  isFirstParticipant: es6["d" /* boolean */],\n  closeBlock: es6["l" /* number */],\n  closeParticipant: Address\n}))])]);\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/state.js\n\n\n\nvar Direction;\n\n(function (Direction) {\n  Direction["SENT"] = "sent";\n  Direction["RECEIVED"] = "received";\n})(Direction || (Direction = {}));\n/**\n * This struct holds the relevant messages exchanged in a transfer\n * The transfer state is defined by the exchanged messages\n */\n\n\nvar TransferState = es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n  /** -> outgoing locked transfer */\n  transfer: Timed(Signed(LockedTransfer)),\n  fee: Int(32),\n  partner: Address\n}), es6["m" /* partial */]({\n  /**\n   * Transfer secret, if known\n   * registerBlock is 0 if not yet registered on-chain\n   * */\n  secret: Timed(es6["t" /* type */]({\n    value: Secret,\n    registerBlock: es6["l" /* number */]\n  })),\n\n  /** <- incoming processed for locked transfer */\n  transferProcessed: Timed(Signed(Processed)),\n\n  /**\n   * <- incoming refund transfer (if so)\n   * If this is set, transfer failed and partner tried refunding the transfer to us. We don\'t\n   * handle receiving transfers, but just store it here to mark this transfer as failed with a\n   * refund, until the lock expires normally\n   */\n  refund: Timed(Signed(RefundTransfer)),\n\n  /**\n   * !! channel was closed !!\n   * In the case a channel is closed (possibly middle transfer), this will be the txHash of the\n   * CloseChannel transaction. No further actions are possible after it\'s set.\n   */\n  channelClosed: Timed(Hash),\n\n  /**\n   * <- incoming secret request from target\n   * If this is set, it means the target requested the secret, not necessarily with a valid\n   * amount (an invalid amount < value == lock - fee, means transfer failed)\n   */\n  secretRequest: Timed(Signed(SecretRequest)),\n\n  /**\n   * -> outgoing secret reveal to target\n   * If this is set, it means the secret was revealed (so transfer succeeded, even if it didn\'t\n   * complete yet)\n   */\n  secretReveal: Timed(Signed(SecretReveal)),\n\n  /**\n   * -> outgoing unlock to recipient\n   * If this is set, it means the Unlock was sent (even if partner didn\'t acknowledge it yet)\n   */\n  unlock: Timed(Signed(Unlock)),\n\n  /**\n   * -> outgoing lock expired (if so)\n   * If this is set, transfer failed, and we expired the lock (retrieving the locked amount).\n   * Transfer failed may not have completed yet, e.g. waiting for LockExpired\'s Processed reply\n   */\n  lockExpired: Timed(Signed(LockExpired)),\n\n  /**\n   * <- incoming processed for Unlock message\n   * If this is set, the protocol completed by the transfer succeeding and partner\n   * acknowledging validity of our off-chain unlock\n   */\n  unlockProcessed: Timed(Signed(Processed)),\n\n  /**\n   * <- incoming processed for LockExpired message\n   * If this is set, the protocol completed by the transfer failing and partner acknowledging\n   * this transfer can\'t be claimed anymore\n   */\n  lockExpiredProcessed: Timed(Signed(Processed))\n})]));\n/**\n * Mapping of outgoing transfers, indexed by the secrethash\n */\n\nvar TransfersState = es6["n" /* readonly */](es6["p" /* record */](es6["q" /* string */]\n/* secrethash: Hash */\n, TransferState));\nvar RaidenTransferStatus;\n\n(function (RaidenTransferStatus) {\n  RaidenTransferStatus["pending"] = "PENDING";\n  RaidenTransferStatus["received"] = "RECEIVED";\n  RaidenTransferStatus["refunded"] = "REFUNDED";\n  RaidenTransferStatus["closed"] = "CLOSED";\n  RaidenTransferStatus["requested"] = "REQUESTED";\n  RaidenTransferStatus["revealed"] = "REVEALED";\n  RaidenTransferStatus["registered"] = "REGISTERED";\n  RaidenTransferStatus["unlocking"] = "UNLOCKING";\n  RaidenTransferStatus["expiring"] = "EXPIRING";\n  RaidenTransferStatus["unlocked"] = "UNLOCKED";\n  RaidenTransferStatus["expired"] = "EXPIRED";\n})(RaidenTransferStatus || (RaidenTransferStatus = {}));\n// CONCATENATED MODULE: ../raiden-ts/dist/state.js\n\n\nvar state_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // same as highest migrator function in migration.index.migrators\n\nvar CURRENT_STATE_VERSION = 2; // types\n\nvar RaidenState = es6["n" /* readonly */](es6["t" /* type */]({\n  address: Address,\n  version: es6["j" /* literal */](CURRENT_STATE_VERSION),\n  chainId: es6["l" /* number */],\n  registry: Address,\n  blockNumber: es6["l" /* number */],\n  config: PartialRaidenConfig,\n  channels: es6["n" /* readonly */](es6["p" /* record */](es6["q" /* string */]\n  /* tokenNetwork: Address */\n  , es6["n" /* readonly */](es6["p" /* record */](es6["q" /* string */]\n  /* partner: Address */\n  , Channel)))),\n  tokens: es6["n" /* readonly */](es6["p" /* record */](es6["q" /* string */]\n  /* token: Address */\n  , Address)),\n  transport: es6["n" /* readonly */](es6["m" /* partial */]({\n    matrix: es6["n" /* readonly */](es6["h" /* intersection */]([es6["t" /* type */]({\n      server: es6["q" /* string */]\n    }), es6["m" /* partial */]({\n      setup: RaidenMatrixSetup,\n      rooms: es6["n" /* readonly */](es6["p" /* record */](es6["q" /* string */]\n      /* partner: Address */\n      , es6["c" /* array */](es6["q" /* string */])))\n    })]))\n  })),\n  sent: TransfersState,\n  received: TransfersState,\n  path: es6["t" /* type */]({\n    iou: es6["n" /* readonly */](es6["p" /* record */](es6["q" /* string */]\n    /* tokenNetwork: Address */\n    , es6["p" /* record */](es6["q" /* string */]\n    /* service: Address */\n    , Signed(IOU))))\n  }),\n  pendingTxs: es6["o" /* readonlyArray */](ConfirmableAction)\n})); // helpers, utils & constants\n\n/**\n * Encode RaidenState to a JSON string\n * For Raiden client compliance, this JSON encodes BigNumbers as \'number\' (using lossless-json lib)\n * which is valid json though not very common as common JS implementations lose precision when\n * decoding through JSON.parse. This is solved in SDK by both encoding and decoding BigNumbers\n * using lossless-json, without going through the intermediary JS-number form.\n *\n * @param state - RaidenState object\n * @returns JSON encoded string\n */\n\nfunction encodeRaidenState(state) {\n  return losslessStringify(RaidenState.encode(state), undefined, 2);\n}\n/**\n * Try to migrate & decode data as RaidenState.\n * If handled a string, will parse it with lossless-json, to preserve BigNumbers encoded as JSON\n * \'number\'. The data may be migrated from previous versions, then validated as current RaidenState\n *\n * @param data - string | any which may be decoded as RaidenState\n * @returns RaidenState parsed, migrated and validated\n */\n\nfunction decodeRaidenState(data) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    log: loglevel_default.a\n  },\n      log = _ref.log;\n\n  if (typeof data === \'string\') data = losslessParse(data);\n  var state = migrateState(data, CURRENT_STATE_VERSION, {\n    log: log\n  }); // validates and returns as current state\n\n  try {\n    return decode(RaidenState, state);\n  } catch (err) {\n    log.error("Error validating migrated state version=".concat(state === null || state === void 0 ? void 0 : state.version), state);\n    throw err;\n  }\n}\n/**\n * Create an initial RaidenState from common parameters (including default config)\n *\n * @param obj - Object containing common parameters for state\n * @param obj.network - ether\'s Network object for the current blockchain\n * @param obj.address - current account\'s address\n * @param overwrites - A partial object to overwrite top-level properties of the returned config\n * @returns A full config object\n */\n\nfunction makeInitialState(_ref2) {\n  var network = _ref2.network,\n      address = _ref2.address,\n      contractsInfo = _ref2.contractsInfo;\n  var overwrites = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  return {\n    address: address,\n    version: CURRENT_STATE_VERSION,\n    chainId: network.chainId,\n    registry: contractsInfo.TokenNetworkRegistry.address,\n    blockNumber: contractsInfo.TokenNetworkRegistry.block_number,\n    config: (_a = overwrites.config) !== null && _a !== void 0 ? _a : {},\n    channels: {},\n    tokens: {},\n    transport: {},\n    sent: {},\n    received: {},\n    path: {\n      iou: {}\n    },\n    pendingTxs: []\n  };\n}\n/**\n * state constant used as default state reducer parameter only.\n * To build an actual initial state at runtime, use [[makeInitialState]] instead.\n */\n\nvar state_initialState = makeInitialState({\n  network: Object(utils["getNetwork"])(\'unspecified\'),\n  address: constants["AddressZero"],\n  contractsInfo: {\n    TokenNetworkRegistry: {\n      address: constants["AddressZero"],\n      block_number: 0\n    },\n    ServiceRegistry: {\n      address: constants["AddressZero"],\n      block_number: 0\n    },\n    UserDeposit: {\n      address: constants["AddressZero"],\n      block_number: 0\n    },\n    SecretRegistry: {\n      address: constants["AddressZero"],\n      block_number: 0\n    }\n  }\n});\n/**\n * Checks whether `storageOrState` is [[Storage]]\n *\n * @param storage - either state or [[Storage]]\n * @returns true if storageOrState is [[Storage]]\n */\n\nvar isStorage = function isStorage(storage) {\n  return storage && typeof storage.getItem === \'function\';\n};\n/**\n * Loads state from `storageOrState`. Returns the initial [[RaidenState]] if\n * `storageOrState` does not exist.\n *\n * @param network - current network\n * @param contracts - current contracts\n * @param address - current address of the signer\n * @param storageOrState - either [[Storage]] or [[RaidenState]] or\n *        { storage: [[Storage]]; state?: [[RaidenState]] }\n * @param config - raiden config\n * @returns true if storageOrState is [[Storage]]\n */\n\n\nvar state_getState = function getState(network, contracts, address, storageOrState, config) {\n  return state_awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    var log, onState, onStateComplete, storage, providedState, state, ns, storedData, storedState, debouncedState, defaultConfig;\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log = loglevel_default.a.getLogger("raiden:".concat(address));\n\n            if (isStorage(storageOrState)) {\n              // stateOrStorage is storage\n              storage = storageOrState;\n              providedState = undefined;\n            } else if (isStorage(storageOrState === null || storageOrState === void 0 ? void 0 : storageOrState.storage)) {\n              // stateOrStorage is in the format { storage: Storage; state?: RaidenState | unknown }\n              storage = storageOrState.storage;\n              providedState = storageOrState.state;\n            } else {\n              // stateOrStorage is state, no storage provided\n              storage = undefined;\n              providedState = storageOrState;\n            }\n\n            state = undefined;\n\n            if (providedState) {\n              state = decodeRaidenState(providedState, {\n                log: log\n              });\n            }\n\n            if (!storage) {\n              _context.next = 23;\n              break;\n            }\n\n            ns = "raiden_".concat(getNetworkName(network), "_").concat(contracts.TokenNetworkRegistry.address, "_").concat(address);\n            _context.next = 8;\n            return storage.getItem(ns);\n\n          case 8:\n            storedData = _context.sent;\n\n            if (!storedData) {\n              _context.next = 20;\n              break;\n            }\n\n            storedState = decodeRaidenState(storedData, {\n              log: log\n            });\n\n            if (!state\n            /* provided */\n            ) {\n              _context.next = 19;\n              break;\n            }\n\n            if (!(state.blockNumber < storedState.blockNumber)) {\n              _context.next = 16;\n              break;\n            }\n\n            throw new error_RaidenError(ErrorCodes.RDN_STATE_MIGRATION, {\n              storedStateBlockNumber: storedState.blockNumber,\n              providedStateBlockNumber: state.blockNumber\n            });\n\n          case 16:\n            log.warn("Replacing stored state @blockNumber=".concat(storedState.blockNumber, " with newer provided state @blockNumber=").concat(state.blockNumber));\n\n          case 17:\n            _context.next = 20;\n            break;\n\n          case 19:\n            // no provided state but there\'s a stored one, use it\n            state = storedState;\n\n          case 20:\n            // else, no stored state, initialize a new one below, if needed\n            // to be subscribed on raiden.state$\n            debouncedState = debounce_default()(function (state) {\n              storage.setItem(ns, encodeRaidenState(state));\n            }, 1000, {\n              maxWait: 5000\n            });\n            onState = debouncedState;\n\n            onStateComplete = function onStateComplete() {\n              return debouncedState.flush();\n            };\n\n          case 23:\n            // if no provided nor stored state, initialize a pristine one\n            if (!state) state = makeInitialState({\n              network: network,\n              address: address,\n              contractsInfo: contracts\n            });\n            defaultConfig = makeDefaultConfig({\n              network: network\n            }, config);\n            return _context.abrupt("return", {\n              state: state,\n              onState: onState,\n              onStateComplete: onStateComplete,\n              defaultConfig: defaultConfig\n            });\n\n          case 26:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n// EXTERNAL MODULE: ./node_modules/lodash/fp/unset.js\nvar unset = __webpack_require__("9bf7");\nvar unset_default = /*#__PURE__*/__webpack_require__.n(unset);\n\n// EXTERNAL MODULE: ./node_modules/lodash/fp/get.js\nvar fp_get = __webpack_require__("76e3");\nvar get_default = /*#__PURE__*/__webpack_require__.n(fp_get);\n\n// EXTERNAL MODULE: ./node_modules/lodash/fp/set.js\nvar set = __webpack_require__("9aca");\nvar set_default = /*#__PURE__*/__webpack_require__.n(set);\n\n// EXTERNAL MODULE: ./node_modules/lodash/fp/getOr.js\nvar getOr = __webpack_require__("0cdc");\nvar getOr_default = /*#__PURE__*/__webpack_require__.n(getOr);\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/redux.js\nfunction redux_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Like redux\'s combineReducers, but allows passing only a partial reducer mapping\n * redux\'s combineReducers output state must be exactly the mapping passed as parameter,\n * which doesn\'t allow to only provide a partial set of reducers and passthrough the other state\'s\n * keys. This function allows that, also preserving state/object reference when reducers don\'t\n * change state value.\n *\n * @param reducers - A mapping of a subset of state\'s key to nested reducers functions\n * @param initialState - global initial state, required when initializing first object with partial\n *                      reducers\n * @returns Full reducer for state S and actions A\n */\nfunction partialCombineReducers(reducers, initialState) {\n  return function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _a;\n\n    for (var key in reducers) {\n      var reducer = reducers[key];\n      if (!reducer) continue; // shouldn\'t happen, only here for type safety below\n\n      var subState = (_a = state[key]) !== null && _a !== void 0 ? _a : initialState[key];\n      var newSubState = reducer(subState, action);\n\n      if (newSubState !== subState) {\n        state = Object.assign(Object.assign({}, state), redux_defineProperty({}, key, newSubState));\n      }\n    }\n\n    return state;\n  };\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/reducer.js\nfunction reducer_toConsumableArray(arr) { return reducer_arrayWithoutHoles(arr) || reducer_iterableToArray(arr) || reducer_unsupportedIterableToArray(arr) || reducer_nonIterableSpread(); }\n\nfunction reducer_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction reducer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return reducer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return reducer_arrayLikeToArray(o, minLen); }\n\nfunction reducer_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction reducer_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return reducer_arrayLikeToArray(arr); }\n\nfunction reducer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction reducer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction reducer_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\n\n\n\n\n\n\n\n\n\n\n // state.blockNumber specific reducer, handles only newBlock action\n\nvar reducer_blockNumber = createReducer(state_initialState.blockNumber).handle(newBlock, function (_ref, _ref2) {\n  reducer_objectDestructuringEmpty(_ref);\n\n  var payload = _ref2.payload;\n  return payload.blockNumber;\n}); // state.tokens specific reducer, handles only tokenMonitored action\n\nvar tokens = createReducer(state_initialState.tokens).handle(tokenMonitored, function (state, _ref3) {\n  var _ref3$payload = _ref3.payload,\n      token = _ref3$payload.token,\n      tokenNetwork = _ref3$payload.tokenNetwork;\n  return Object.assign(Object.assign({}, state), reducer_defineProperty({}, token, tokenNetwork));\n}); // Reducers for different actions\n\nfunction channelOpenRequestReducer(state, action) {\n  var path = [action.meta.tokenNetwork, action.meta.partner];\n  if (get_default()(path, state)) return state; // there\'s already a channel with partner\n\n  var channel = {\n    state: ChannelState.opening,\n    own: {\n      deposit: constants["Zero"]\n    },\n    partner: {\n      deposit: constants["Zero"]\n    }\n  };\n  return set_default()(path, channel, state);\n}\n\nfunction channelOpenSuccessReducer(state, action) {\n  var path = [action.meta.tokenNetwork, action.meta.partner]; // ignore if older than currently set channel, or unconfirmed or removed\n\n  if (getOr_default()(0, [].concat(path, [\'openBlock\']), state) >= action.payload.txBlock || !action.payload.confirmed) return state;\n  var channel = {\n    state: ChannelState.open,\n    own: {\n      deposit: constants["Zero"]\n    },\n    partner: {\n      deposit: constants["Zero"]\n    },\n    id: action.payload.id,\n    settleTimeout: action.payload.settleTimeout,\n    isFirstParticipant: action.payload.isFirstParticipant,\n    openBlock: action.payload.txBlock\n  };\n  return set_default()(path, channel, state);\n}\n\nfunction channelOpenFailureReducer(state, action) {\n  var path = [action.meta.tokenNetwork, action.meta.partner];\n  if (get_default()([].concat(path, [\'state\']), state) !== ChannelState.opening) return state;\n  return unset_default()(path, state);\n}\n\nfunction channelUpdateOnchainBalanceStateReducer(state, action) {\n  // ignore event if unconfirmed or removed\n  if (!action.payload.confirmed) return state;\n  var path = [action.meta.tokenNetwork, action.meta.partner];\n  var channel = get_default()(path, state);\n  if (!channel || channel.state !== ChannelState.open || channel.id !== action.payload.id) return state;\n  var key = channelWithdrawn.is(action) ? \'withdraw\' : \'deposit\';\n  var total = channelWithdrawn.is(action) ? action.payload.totalWithdraw : action.payload.totalDeposit;\n  var isPartner = action.payload.participant === action.meta.partner;\n  var channelSide = isPartner ? \'partner\' : \'own\';\n  var channelEndData = isPartner ? channel.partner : channel.own;\n  channel = Object.assign(Object.assign({}, channel), reducer_defineProperty({}, channelSide, Object.assign(Object.assign({}, channelEndData), reducer_defineProperty({}, key, total))));\n  return set_default()(path, channel, state);\n}\n\nfunction channelCloseSuccessReducer(state, action) {\n  var path = [action.meta.tokenNetwork, action.meta.partner];\n  var channel = get_default()(path, state);\n  if (!channel || !(channel.state === ChannelState.open || channel.state === ChannelState.closing) || channel.id !== action.payload.id) return state; // even on non-confirmed action, already set channel state as closing, so it can\'t be used for new transfers\n\n  if (action.payload.confirmed === undefined && channel.state === ChannelState.open) channel = Object.assign(Object.assign({}, channel), {\n    state: ChannelState.closing\n  });else if (action.payload.confirmed) channel = Object.assign(Object.assign({}, channel), {\n    state: ChannelState.closed,\n    closeBlock: action.payload.txBlock,\n    closeParticipant: action.payload.participant\n  });else return state;\n  return set_default()(path, channel, state);\n}\n\nfunction channelUpdateStateReducer(state, action) {\n  var path = [action.meta.tokenNetwork, action.meta.partner];\n  var channel = get_default()(path, state);\n  if (!channel) return state;\n\n  if (channelClose.request.is(action) && channel.state === ChannelState.open) {\n    channel = Object.assign(Object.assign({}, channel), {\n      state: ChannelState.closing\n    });\n  } else if (channelSettle.request.is(action) && channel.state === ChannelState.settleable) {\n    channel = Object.assign(Object.assign({}, channel), {\n      state: ChannelState.settling\n    });\n  } else if (channelSettleable.is(action) && channel.state === ChannelState.closed) {\n    channel = Object.assign(Object.assign({}, channel), {\n      state: ChannelState.settleable\n    });\n  } else {\n    return state;\n  }\n\n  return set_default()(path, channel, state);\n}\n\nfunction channelSettleSuccessReducer(state, action) {\n  var path = [action.meta.tokenNetwork, action.meta.partner];\n  var channel = get_default()(path, state);\n  if (!channel || channel.state === ChannelState.opening || channel.state === ChannelState.open || channel.state === ChannelState.closing || channel.id !== action.payload.id) return state; // even on non-confirmed action, already set channel as settling\n\n  if (action.payload.confirmed === undefined && channel.state !== ChannelState.settling) return set_default()(path, Object.assign(Object.assign({}, channel), {\n    state: ChannelState.settling\n  }), state);else if (action.payload.confirmed) return unset_default()(path, state);else return state;\n} // handles all channel actions and requests\n\n\nvar reducer_channels = createReducer(state_initialState.channels).handle(channelOpen.request, channelOpenRequestReducer).handle(channelOpen.success, channelOpenSuccessReducer).handle(channelOpen.failure, channelOpenFailureReducer).handle([channelDeposit.success, channelWithdrawn], channelUpdateOnchainBalanceStateReducer).handle([channelClose.request, channelSettleable, channelSettle.request], channelUpdateStateReducer).handle(channelClose.success, channelCloseSuccessReducer).handle(channelSettle.success, channelSettleSuccessReducer);\n\nvar reducer_pendingTxs = function pendingTxs() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state_initialState.pendingTxs;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  // filter out non-ConfirmableActions\'s\n  if (!isActionOf(ConfirmableActions, action)) return state; // if confirmed==undefined, add action to state\n  else if (action.payload.confirmed === undefined) return [].concat(reducer_toConsumableArray(state), [action]); // else (either confirmed or removed), remove from state\n    else {\n        var newState = state.filter(function (a) {\n          return a.type !== action.type || action.payload.txHash !== a.payload.txHash;\n        });\n        if (newState.length !== state.length) return newState;\n        return state;\n      }\n};\n/**\n * Nested/combined reducer for channels\n * blockNumber, tokens & channels reducers get its own slice of the state, corresponding to the\n * name of the reducer. channels root reducer instead must be handled the complete state instead,\n * so it compose the output with each key/nested/combined state.\n */\n\n\nvar channelsReducer = partialCombineReducers({\n  blockNumber: reducer_blockNumber,\n  tokens: tokens,\n  channels: reducer_channels,\n  pendingTxs: reducer_pendingTxs\n}, state_initialState);\n// CONCATENATED MODULE: ../raiden-ts/dist/path/reducer.js\n/**\n * state.path reducer\n * Handles all path actions and requests\n *\n * @param state - Current RaidenState[\'path\'] slice\n * @param action - RaidenAction to handle\n * @returns New RaidenState[\'path\'] slice\n */\n\n\n\n\n\n\nvar reducer_path = createReducer(state_initialState.path).handle(iouPersist, function (state, action) {\n  var path = [\'iou\', action.meta.tokenNetwork, action.meta.serviceAddress];\n  return set_default()(path, action.payload.iou, state);\n}).handle(iouClear, function (state, action) {\n  var path = [\'iou\', action.meta.tokenNetwork, action.meta.serviceAddress];\n  return unset_default()(path, state);\n});\n/**\n * Nested combined reducer for path\n * Handles the \'path\' substate.\n */\n\nvar pathReducer = partialCombineReducers({\n  path: reducer_path\n}, state_initialState);\n// EXTERNAL MODULE: ./node_modules/lodash/fp/isEmpty.js\nvar isEmpty = __webpack_require__("2890");\nvar isEmpty_default = /*#__PURE__*/__webpack_require__.n(isEmpty);\n\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/reducer.js\nfunction transport_reducer_toConsumableArray(arr) { return transport_reducer_arrayWithoutHoles(arr) || transport_reducer_iterableToArray(arr) || transport_reducer_unsupportedIterableToArray(arr) || transport_reducer_nonIterableSpread(); }\n\nfunction transport_reducer_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction transport_reducer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return transport_reducer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return transport_reducer_arrayLikeToArray(o, minLen); }\n\nfunction transport_reducer_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction transport_reducer_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return transport_reducer_arrayLikeToArray(arr); }\n\nfunction transport_reducer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\n\n\n\n\n\n\n\n\n\n/**\n * state.transport reducer\n * Handles all transport actions and requests\n *\n * @param state - Current RaidenState[\'transport\'] slice\n * @param action - RaidenAction to handle\n * @returns New RaidenState[\'transport\'] slice\n */\n\nvar transport = createReducer(state_initialState.transport).handle(matrixSetup, function (state, action) {\n  var _a; // immutably remove rooms from state.matrix\n\n\n  var _b = Object.assign({}, state.matrix),\n      _ = _b.rooms,\n      noRooms = __rest(_b, ["rooms"]);\n\n  return Object.assign(Object.assign({}, state), {\n    matrix: Object.assign(Object.assign({}, ((_a = state.matrix) === null || _a === void 0 ? void 0 : _a.server) !== action.payload.server ? noRooms : state.matrix), action.payload)\n  });\n}).handle(matrixRoom, function (state, action) {\n  var path = [\'matrix\', \'rooms\', action.meta.address];\n  return set_default()(path, [action.payload.roomId].concat(transport_reducer_toConsumableArray(getOr_default()([], path, state).filter(function (room) {\n    return room !== action.payload.roomId;\n  }))), state);\n}).handle(matrixRoomLeave, function (state, action) {\n  var path = [\'matrix\', \'rooms\', action.meta.address];\n  state = set_default()(path, getOr_default()([], path, state).filter(function (r) {\n    return r !== action.payload.roomId;\n  }), state);\n  if (isEmpty_default()(get_default()(path, state))) state = unset_default()(path, state);\n  return state;\n});\n/**\n * Nested/combined reducer for transport\n * Currently only handles \'transport\' substate\n */\n\nvar transportReducer = partialCombineReducers({\n  transport: transport\n}, state_initialState);\n// EXTERNAL MODULE: ./node_modules/ethers/utils/rlp.js\nvar rlp = __webpack_require__("3b2b");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/messages/utils.js\n\n\nvar _CMDIDs;\n\nfunction utils_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { utils_typeof = function _typeof(obj) { return typeof obj; }; } else { utils_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return utils_typeof(obj); }\n\nfunction utils_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar utils_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\nvar CMDIDs = (_CMDIDs = {}, utils_defineProperty(_CMDIDs, MessageType.DELIVERED, 12), utils_defineProperty(_CMDIDs, MessageType.PROCESSED, 0), utils_defineProperty(_CMDIDs, MessageType.SECRET_REQUEST, 3), utils_defineProperty(_CMDIDs, MessageType.SECRET_REVEAL, 11), utils_defineProperty(_CMDIDs, MessageType.LOCKED_TRANSFER, 7), utils_defineProperty(_CMDIDs, MessageType.REFUND_TRANSFER, 8), utils_defineProperty(_CMDIDs, MessageType.UNLOCK, 4), utils_defineProperty(_CMDIDs, MessageType.LOCK_EXPIRED, 13), utils_defineProperty(_CMDIDs, MessageType.WITHDRAW_REQUEST, 15), utils_defineProperty(_CMDIDs, MessageType.WITHDRAW_CONFIRMATION, 16), utils_defineProperty(_CMDIDs, MessageType.WITHDRAW_EXPIRED, 17), utils_defineProperty(_CMDIDs, MessageType.PFS_CAPACITY_UPDATE, -1), utils_defineProperty(_CMDIDs, MessageType.PFS_FEE_UPDATE, -1), _CMDIDs); // raiden_contracts.constants.MessageTypeId\n\nvar MessageTypeId;\n\n(function (MessageTypeId) {\n  MessageTypeId[MessageTypeId["BALANCE_PROOF"] = 1] = "BALANCE_PROOF";\n  MessageTypeId[MessageTypeId["WITHDRAW"] = 3] = "WITHDRAW";\n  MessageTypeId[MessageTypeId["IOU"] = 5] = "IOU";\n})(MessageTypeId || (MessageTypeId = {}));\n/**\n * Create the hash of Metadata structure.\n *\n * @param metadata - The LockedTransfer metadata\n * @returns Hash of the metadata.\n */\n\n\nfunction createMetadataHash(metadata) {\n  var routeHashes = metadata.routes.map(function (value) {\n    return Object(utils["keccak256"])(utils["RLP"].encode(value.route));\n  });\n  return Object(utils["keccak256"])(utils["RLP"].encode(routeHashes));\n}\n/**\n * Returns a balance_hash from transferred&locked amounts & locksroot\n *\n * @param transferredAmount - EnvelopeMessage.transferred_amount\n * @param lockedAmount - EnvelopeMessage.locked_amount\n * @param locksroot - Hash of all current locks\n * @returns Hash of the balance\n */\n\nfunction createBalanceHash(transferredAmount, lockedAmount, locksroot) {\n  return transferredAmount.isZero() && lockedAmount.isZero() && locksroot === constants["HashZero"] ? constants["HashZero"] : Object(utils["keccak256"])(Object(bytes["concat"])([encode(transferredAmount, 32), encode(lockedAmount, 32), encode(locksroot, 32)]));\n}\n/**\n * Create the messageHash for a given EnvelopeMessage\n *\n * @param message - EnvelopeMessage to pack\n * @returns Hash of the message pack\n */\n\nfunction createMessageHash(message) {\n  switch (message.type) {\n    case MessageType.LOCKED_TRANSFER:\n    case MessageType.REFUND_TRANSFER:\n      // hash of packed representation of the whole message\n      var packed = Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(message.message_identifier, 8), encode(message.payment_identifier, 8), encode(message.lock.expiration, 32), encode(message.token, 20), encode(message.recipient, 20), encode(message.target, 20), encode(message.initiator, 20), encode(message.lock.secrethash, 32), encode(message.lock.amount, 32)]);\n      if (message.type === MessageType.LOCKED_TRANSFER) packed = Object(bytes["concat"])([packed, createMetadataHash(message.metadata)]);\n      return Object(utils["keccak256"])(packed);\n\n    case MessageType.UNLOCK:\n      return Object(utils["keccak256"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(message.message_identifier, 8), encode(message.payment_identifier, 8), encode(message.secret, 32)]));\n\n    case MessageType.LOCK_EXPIRED:\n      return Object(utils["keccak256"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(message.message_identifier, 8), encode(message.recipient, 20), encode(message.secrethash, 32)]));\n  }\n}\n/**\n * Pack a message in a hex-string format, **without** signature\n * This packed hex-byte-array can then be used for signing.\n * On Raiden python client, this is the output of `_data_to_sign` method of the messages, as the\n * actual packed encoding was once used for binary transport protocols, but nowadays is used only\n * for generating data to be signed, which is the purpose of our implementation.\n *\n * @param message - Message to be packed\n * @returns HexBytes hex-encoded string data representing message in binary format\n */\n\nfunction packMessage(message) {\n  var _a;\n\n  switch (message.type) {\n    case MessageType.DELIVERED:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.delivered_message_identifier, 8)]));\n\n    case MessageType.PROCESSED:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.message_identifier, 8)]));\n\n    case MessageType.LOCKED_TRANSFER:\n    case MessageType.REFUND_TRANSFER:\n    case MessageType.UNLOCK:\n    case MessageType.LOCK_EXPIRED:\n      {\n        var messageHash = createMessageHash(message),\n            balanceHash = createBalanceHash(message.transferred_amount, message.locked_amount, message.locksroot);\n        return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(message.token_network_address, 20), encode(message.chain_id, 32), encode(MessageTypeId.BALANCE_PROOF, 32), encode(message.channel_identifier, 32), encode(balanceHash, 32), encode(message.nonce, 32), encode(messageHash, 32)]));\n      }\n\n    case MessageType.SECRET_REQUEST:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.message_identifier, 8), encode(message.payment_identifier, 8), encode(message.secrethash, 32), encode(message.amount, 32), encode(message.expiration, 32)]));\n\n    case MessageType.SECRET_REVEAL:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.message_identifier, 8), encode(message.secret, 32)]));\n\n    case MessageType.WITHDRAW_REQUEST:\n    case MessageType.WITHDRAW_CONFIRMATION:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(message.token_network_address, 20), encode(message.chain_id, 32), encode(MessageTypeId.WITHDRAW, 32), encode(message.channel_identifier, 32), encode(message.participant, 20), encode(message.total_withdraw, 32), encode(message.expiration, 32)]));\n\n    case MessageType.WITHDRAW_EXPIRED:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(CMDIDs[message.type], 1), encode(0, 3), encode(message.nonce, 32), encode(message.message_identifier, 8), encode(message.token_network_address, 20), encode(message.chain_id, 32), encode(MessageTypeId.WITHDRAW, 32), encode(message.channel_identifier, 32), encode(message.participant, 20), encode(message.total_withdraw, 32), encode(message.expiration, 32)]));\n\n    case MessageType.PFS_CAPACITY_UPDATE:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(message.canonical_identifier.chain_identifier, 32), encode(message.canonical_identifier.token_network_address, 20), encode(message.canonical_identifier.channel_identifier, 32), encode(message.updating_participant, 20), encode(message.other_participant, 20), encode(message.updating_nonce, 8), encode(message.other_nonce, 8), encode(message.updating_capacity, 32), encode(message.other_capacity, 32), encode(message.reveal_timeout, 32)]));\n\n    case MessageType.PFS_FEE_UPDATE:\n      return Object(bytes["hexlify"])(Object(bytes["concat"])([encode(message.canonical_identifier.chain_identifier, 32), encode(message.canonical_identifier.token_network_address, 20), encode(message.canonical_identifier.channel_identifier, 32), encode(message.updating_participant, 20), encode(message.fee_schedule.cap_fees, 1), encode(message.fee_schedule.flat, 32), encode(message.fee_schedule.proportional, 32), Object(rlp["encode"])((_a = message.fee_schedule.imbalance_penalty) !== null && _a !== void 0 ? _a : \'0x\'), encode(message.timestamp, 19)]));\n    // variable size of fee_schedule.imbalance_penalty rlpEncoding, when not null\n  }\n}\n/**\n * Typeguard to check if a message contains a valid signature\n *\n * @param message - May or may not be a signed message\n * @returns Boolean if message is signed\n */\n\nfunction isSigned(message) {\n  return Signature.is(message.signature);\n}\n/**\n * Requires a signed message and returns its signer address\n *\n * @param message - Signed message to retrieve signer address\n * @returns Address which signed message\n */\n\nfunction getMessageSigner(message) {\n  return Object(utils["verifyMessage"])(Object(bytes["arrayify"])(packMessage(message)), message.signature);\n}\n/**\n * Get the SignedBalanceProof associated with an EnvelopeMessage\n *\n * @param message - Signed EnvelopeMessage\n * @returns SignedBalanceProof object for message\n */\n\nfunction getBalanceProofFromEnvelopeMessage(message) {\n  return {\n    chainId: message.chain_id,\n    tokenNetworkAddress: message.token_network_address,\n    channelId: message.channel_identifier,\n    nonce: message.nonce,\n    transferredAmount: message.transferred_amount,\n    lockedAmount: message.locked_amount,\n    locksroot: message.locksroot,\n    messageHash: createMessageHash(message),\n    signature: message.signature,\n    sender: getMessageSigner(message)\n  };\n}\n/**\n * Encode a Message as a JSON string\n * Uses lossless-json to encode BigNumbers as JSON \'string\' type, as Raiden\n *\n * @param message - Message object to be serialized\n * @returns JSON string\n */\n\nfunction encodeJsonMessage(message) {\n  if (\'signature\' in message) return losslessStringify(Signed(Message).encode(message));\n  return losslessStringify(Message.encode(message));\n}\n/**\n * Try to decode text as a Message, using lossless-json to decode BigNumbers\n * Throws if can\'t decode, or message is invalid regarding any of the encoded constraints\n *\n * @param text - JSON string to try to decode\n * @returns Message object\n */\n\nfunction decodeJsonMessage(text) {\n  var parsed = losslessParse(text);\n  assert(parsed && utils_typeof(parsed) === \'object\' && \'type\' in parsed && Object.values(MessageType).some(function (t) {\n    return t === parsed[\'type\'];\n  }), "Invalid message type: ".concat(parsed === null || parsed === void 0 ? void 0 : parsed[\'type\']));\n  if (\'signature\' in parsed) return decode(Signed(Message), parsed);\n  return decode(Message, parsed);\n}\n/**\n * Pack message and request signer to sign it, and returns signed message\n *\n * @param signer - Signer instance\n * @param message - Unsigned message to pack and sign\n * @returns Promise to signed message\n */\n\nfunction signMessage(signer, message) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    log: loglevel_default.a\n  },\n      log = _ref.log;\n\n  return utils_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    var signature;\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isSigned(message)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt("return", message);\n\n          case 2:\n            log.debug("Signing message \\"".concat(message.type, "\\""), message);\n            _context.next = 5;\n            return signer.signMessage(Object(bytes["arrayify"])(packMessage(message)));\n\n          case 5:\n            signature = _context.sent;\n            return _context.abrupt("return", Object.assign(Object.assign({}, message), {\n              signature: signature\n            }));\n\n          case 7:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n/**\n * Typeguard to ensure an action is a messageReceived of any of a set of Message types\n *\n * @param messageCodecs - Message codec to test action.payload.message against\n * @returns Typeguard intersecting messageReceived action and payload.message schemas\n */\n\nfunction isMessageReceivedOfType(messageCodecs) {\n  return function (action) {\n    return messageReceived.is(action) && (Array.isArray(messageCodecs) ? es6["v" /* union */](messageCodecs).is(action.payload.message) : messageCodecs.is(action.payload.message));\n  };\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/utils.js\nvar _statusesMap;\n\nfunction utils_slicedToArray(arr, i) { return utils_arrayWithHoles(arr) || utils_iterableToArrayLimit(arr, i) || utils_unsupportedIterableToArray(arr, i) || utils_nonIterableRest(); }\n\nfunction utils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction utils_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction utils_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction transfers_utils_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = utils_unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return utils_arrayLikeToArray(o, minLen); }\n\nfunction utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n/**\n * Get the locksroot of a given array of pending locks\n * On Alderaan, it\'s the keccak256 hash of the concatenation of the ordered locks data\n *\n * @param locks - Lock array to calculate the locksroot from\n * @returns hash of the locks array\n */\n\nfunction getLocksroot(locks) {\n  var encoded = [];\n\n  var _iterator = _createForOfIteratorHelper(locks),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var lock = _step.value;\n      encoded.push(encode(lock.expiration, 32), encode(lock.amount, 32), lock.secrethash);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return Object(utils["keccak256"])(Object(bytes["concat"])(encoded));\n}\n/**\n * Return the secrethash of a given secret\n * On Alderaan, the sha256 hash is used for the secret.\n *\n * @param secret - Secret to get the hash from\n * @returns hash of the secret\n */\n\nfunction getSecrethash(secret) {\n  return Object(utils["sha256"])(secret);\n}\n/**\n * Generates a random secret of given length, as an HexString<32>\n *\n * @param length - of the secret to generate\n * @returns HexString<32>\n */\n\nfunction makeSecret() {\n  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n  return Object(bytes["hexlify"])(Object(utils["randomBytes"])(length));\n}\n/**\n * Generates a random payment identifier, as an UInt<8> (64 bits)\n *\n * @returns UInt<8>\n */\n\nfunction makePaymentId() {\n  return Object(utils["bigNumberify"])(Date.now());\n}\n/**\n * Generates a message identifier, as an UInt<8> (64 bits)\n *\n * @returns UInt<8>\n */\n\nfunction makeMessageId() {\n  return Object(utils["bigNumberify"])(Date.now());\n}\n\nfunction getTimeIfPresent(k) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (o) {\n    return o[k] ? o[k][0] : undefined;\n  };\n}\n\nvar statusesMap = (_statusesMap = {}, transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.expired, getTimeIfPresent(\'lockExpiredProcessed\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.unlocked, getTimeIfPresent(\'unlockProcessed\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.expiring, getTimeIfPresent(\'lockExpired\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.unlocking, getTimeIfPresent(\'unlock\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.registered, function (sent) {\n  var _a, _b; // only set status as registered if there\'s a valid registerBlock\n\n\n  return ((_b = (_a = sent.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) ? sent.secret[0] : undefined;\n}), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.revealed, getTimeIfPresent(\'secretReveal\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.requested, getTimeIfPresent(\'secretRequest\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.closed, getTimeIfPresent(\'channelClosed\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.refunded, getTimeIfPresent(\'refund\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.received, getTimeIfPresent(\'transferProcessed\')), transfers_utils_defineProperty(_statusesMap, RaidenTransferStatus.pending, getTimeIfPresent(\'transfer\')), _statusesMap);\n/**\n * Convert a state.sent: TransferState to a public RaidenTransfer object\n *\n * @param sent - RaidenState.sent value\n * @returns Public raiden sent transfer info object\n */\n\nfunction raidenSentTransfer(sent) {\n  var _a, _b, _c, _d;\n\n  var startedAt = new Date(sent.transfer[0]);\n  var changedAt = startedAt;\n  var status = RaidenTransferStatus.pending; // order matters! from top to bottom priority, first match breaks loop\n\n  for (var _i = 0, _Object$entries = Object.entries(statusesMap); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = utils_slicedToArray(_Object$entries[_i], 2),\n        s = _Object$entries$_i[0],\n        g = _Object$entries$_i[1];\n\n    var ts = g(sent);\n\n    if (ts !== undefined) {\n      status = s;\n      changedAt = new Date(ts);\n      break;\n    }\n  }\n\n  var transfer = sent.transfer[1];\n  var value = transfer.lock.amount.sub(sent.fee);\n  var invalidSecretRequest = sent.secretRequest && sent.secretRequest[1].amount.lt(value);\n  var success = sent.secretReveal || sent.unlock || ((_b = (_a = sent.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) ? true : invalidSecretRequest || sent.refund || sent.lockExpired || sent.channelClosed ? false : undefined;\n  var completed = !!(sent.unlockProcessed || sent.lockExpiredProcessed || ((_d = (_c = sent.secret) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.registerBlock) || sent.channelClosed);\n  return {\n    secrethash: transfer.lock.secrethash,\n    direction: \'sent\',\n    status: status,\n    initiator: transfer.initiator,\n    partner: transfer.recipient,\n    target: transfer.target,\n    metadata: transfer.metadata,\n    paymentId: transfer.payment_identifier,\n    chainId: transfer.chain_id.toNumber(),\n    token: transfer.token,\n    tokenNetwork: transfer.token_network_address,\n    channelId: transfer.channel_identifier,\n    value: value,\n    fee: sent.fee,\n    amount: transfer.lock.amount,\n    expirationBlock: transfer.lock.expiration.toNumber(),\n    startedAt: startedAt,\n    changedAt: changedAt,\n    success: success,\n    completed: completed\n  };\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/reducer.js\nvar _END;\n\nfunction reducer_slicedToArray(arr, i) { return reducer_arrayWithHoles(arr) || reducer_iterableToArrayLimit(arr, i) || transfers_reducer_unsupportedIterableToArray(arr, i) || reducer_nonIterableRest(); }\n\nfunction reducer_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction reducer_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction reducer_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction transfers_reducer_toConsumableArray(arr) { return transfers_reducer_arrayWithoutHoles(arr) || transfers_reducer_iterableToArray(arr) || transfers_reducer_unsupportedIterableToArray(arr) || transfers_reducer_nonIterableSpread(); }\n\nfunction transfers_reducer_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction transfers_reducer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return transfers_reducer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return transfers_reducer_arrayLikeToArray(o, minLen); }\n\nfunction transfers_reducer_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction transfers_reducer_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return transfers_reducer_arrayLikeToArray(arr); }\n\nfunction transfers_reducer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction transfers_reducer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar END = (_END = {}, transfers_reducer_defineProperty(_END, Direction.SENT, \'own\'), transfers_reducer_defineProperty(_END, Direction.RECEIVED, \'partner\'), _END); // Reducers for different actions\n\nfunction transferSecretReducer(state, action) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var secrethash = action.meta.secrethash; // store when seeing unconfirmed, but registerBlock only after confirmation\n\n  var registerBlock = transferSecretRegister.success.is(action) && action.payload.confirmed ? action.payload.txBlock : (_d = (_c = (_b = (_a = state[action.meta.direction][secrethash]) === null || _a === void 0 ? void 0 : _a.secret) === null || _b === void 0 ? void 0 : _b[1]) === null || _c === void 0 ? void 0 : _c.registerBlock) !== null && _d !== void 0 ? _d : 0; // don\'t overwrite registerBlock if secret already stored with it\n\n  if (secrethash in state[action.meta.direction] && ((_f = (_e = state[action.meta.direction][secrethash].secret) === null || _e === void 0 ? void 0 : _e[1]) === null || _f === void 0 ? void 0 : _f.registerBlock) !== registerBlock) state = Object.assign(Object.assign({}, state), transfers_reducer_defineProperty({}, action.meta.direction, Object.assign(Object.assign({}, state[action.meta.direction]), transfers_reducer_defineProperty({}, secrethash, Object.assign(Object.assign({}, state[action.meta.direction][secrethash]), {\n    secret: timed({\n      value: action.payload.secret,\n      registerBlock: registerBlock\n    })\n  })))));\n  return state;\n}\n\nfunction transferSignedReducer(state, action) {\n  var _a, _b, _c;\n\n  var transfer = action.payload.message;\n  var lock = transfer.lock;\n  var secrethash = lock.secrethash;\n  var partner = action.meta.direction === Direction.SENT ? transfer.recipient : getMessageSigner(transfer);\n  var end = END[action.meta.direction]; // transferSigned must be the first action, to init TransferState state\n\n  if (secrethash in state[action.meta.direction]) return state;\n  var channelPath = [\'channels\', transfer.token_network_address, partner];\n  var channel = get_default()(channelPath, state);\n  if (!channel) return state;\n  var locks = [].concat(transfers_reducer_toConsumableArray((_a = channel[end].locks) !== null && _a !== void 0 ? _a : []), [lock]); // append lock\n\n  var locksroot = getLocksroot(locks);\n  if (transfer.locksroot !== locksroot || // nonce must be next\n  !transfer.nonce.eq((channel[end].balanceProof ? channel[end].balanceProof.nonce : constants["Zero"]).add(1)) || !transfer.transferred_amount.eq(channel[end].balanceProof ? channel[end].balanceProof.transferredAmount : constants["Zero"]) || !transfer.locked_amount.eq(((_c = (_b = channel[end].balanceProof) === null || _b === void 0 ? void 0 : _b.lockedAmount) !== null && _c !== void 0 ? _c : constants["Zero"]).add(lock.amount))) return state;\n  channel = Object.assign(Object.assign({}, channel), transfers_reducer_defineProperty({}, end, Object.assign(Object.assign({}, channel[end]), {\n    locks: locks,\n    // set current/latest channel[end].balanceProof to LockedTransfer\'s\n    balanceProof: getBalanceProofFromEnvelopeMessage(transfer)\n  })));\n  var transferState = {\n    transfer: timed(transfer),\n    fee: action.payload.fee,\n    partner: partner\n  };\n  state = set_default()(channelPath, channel, state);\n  state = set_default()([action.meta.direction, secrethash], transferState, state);\n  return state;\n}\n\nfunction transferSecretRequestedReducer(state, action) {\n  var secrethash = action.meta.secrethash;\n  if (!(secrethash in state[action.meta.direction])) return state;\n  return Object.assign(Object.assign({}, state), transfers_reducer_defineProperty({}, action.meta.direction, Object.assign(Object.assign({}, state[action.meta.direction]), transfers_reducer_defineProperty({}, secrethash, Object.assign(Object.assign({}, state[action.meta.direction][secrethash]), {\n    secretRequest: timed(action.payload.message)\n  })))));\n}\n\nfunction transferSecretReveledReducer(state, action) {\n  var secrethash = action.meta.secrethash;\n  if (!(secrethash in state[action.meta.direction]) || state[action.meta.direction][secrethash].secretReveal) return state;\n  return Object.assign(Object.assign({}, state), transfers_reducer_defineProperty({}, action.meta.direction, Object.assign(Object.assign({}, state[action.meta.direction]), transfers_reducer_defineProperty({}, secrethash, Object.assign(Object.assign({}, state[action.meta.direction][secrethash]), {\n    secretReveal: timed(action.payload.message)\n  })))));\n}\n\nfunction transferUnlockSuccessReducer(state, action) {\n  var unlock = action.payload.message;\n  var secrethash = action.meta.secrethash;\n  if (!(secrethash in state[action.meta.direction]) || state[action.meta.direction][secrethash].unlock) return state;\n  var transfer = state[action.meta.direction][secrethash].transfer[1];\n  var partner = state[action.meta.direction][secrethash].partner;\n  var end = END[action.meta.direction];\n  var lock = transfer.lock;\n  var channelPath = [\'channels\', transfer.token_network_address, partner];\n  var channel = get_default()(channelPath, state);\n  if (!channel || !channel[end].locks || !channel[end].balanceProof) return state;\n  var locks = channel[end].locks.filter(function (l) {\n    return l.secrethash !== secrethash;\n  });\n  var locksroot = getLocksroot(locks);\n  if (unlock.locksroot !== locksroot || !channel[end].balanceProof.nonce.add(1).eq(unlock.nonce) || // nonce must be next\n  !unlock.transferred_amount.eq(channel[end].balanceProof.transferredAmount.add(lock.amount)) || !unlock.locked_amount.eq(channel[end].balanceProof.lockedAmount.sub(lock.amount))) return state;\n  channel = Object.assign(Object.assign({}, channel), transfers_reducer_defineProperty({}, end, Object.assign(Object.assign({}, channel[end]), {\n    locks: locks,\n    // set current/latest channel[end].balanceProof to Unlock\'s\n    balanceProof: getBalanceProofFromEnvelopeMessage(unlock)\n  })));\n  var transferState = Object.assign(Object.assign({}, state[action.meta.direction][secrethash]), {\n    unlock: timed(unlock)\n  });\n  state = set_default()(channelPath, channel, state);\n  state = set_default()([action.meta.direction, secrethash], transferState, state);\n  return state;\n}\n\nfunction transferExpireSuccessReducer(state, action) {\n  var expired = action.payload.message;\n  var secrethash = action.meta.secrethash;\n  if (!(secrethash in state[action.meta.direction]) || state[action.meta.direction][secrethash].unlock || // don\'t accept expire if already unlocked\n  state[action.meta.direction][secrethash].lockExpired // already expired\n  ) return state;\n  var transfer = state[action.meta.direction][secrethash].transfer[1];\n  var partner = state[action.meta.direction][secrethash].partner;\n  var end = END[action.meta.direction];\n  var lock = transfer.lock;\n  var channelPath = [\'channels\', transfer.token_network_address, partner];\n  var channel = get_default()(channelPath, state);\n  if (!channel || !channel[end].locks || !channel[end].balanceProof) return state;\n  var locks = channel[end].locks.filter(function (l) {\n    return l.secrethash !== secrethash;\n  });\n  var locksroot = getLocksroot(locks);\n  if (expired.locksroot !== locksroot || !channel[end].balanceProof.nonce.add(1).eq(expired.nonce) || // nonce must be next\n  !expired.transferred_amount.eq(channel[end].balanceProof.transferredAmount) || !expired.locked_amount.eq(channel[end].balanceProof.lockedAmount.sub(lock.amount))) return state;\n  channel = Object.assign(Object.assign({}, channel), transfers_reducer_defineProperty({}, end, Object.assign(Object.assign({}, channel[end]), {\n    locks: locks,\n    // set current/latest channel[end].balanceProof to LockExpired\'s\n    balanceProof: getBalanceProofFromEnvelopeMessage(expired)\n  })));\n  var transferState = Object.assign(Object.assign({}, state[action.meta.direction][secrethash]), {\n    lockExpired: timed(expired)\n  });\n  state = set_default()(channelPath, channel, state);\n  state = set_default()([action.meta.direction, secrethash], transferState, state);\n  return state;\n}\n\nfunction transferStateReducer(state, action) {\n  var secrethash = action.meta.secrethash;\n  if (!(secrethash in state[action.meta.direction])) return state;\n  var key;\n\n  if (transferProcessed.is(action)) {\n    key = \'transferProcessed\';\n  } else if (transferUnlockProcessed.is(action)) {\n    key = \'unlockProcessed\';\n  } else if (transferExpireProcessed.is(action)) {\n    key = \'lockExpiredProcessed\';\n  } else if (transferRefunded.is(action)) {\n    key = \'refund\';\n  } else {\n    return state;\n  }\n\n  if (state[action.meta.direction][secrethash][key]) return state;\n  return Object.assign(Object.assign({}, state), transfers_reducer_defineProperty({}, action.meta.direction, Object.assign(Object.assign({}, state[action.meta.direction]), transfers_reducer_defineProperty({}, secrethash, Object.assign(Object.assign({}, state[action.meta.direction][secrethash]), transfers_reducer_defineProperty({}, key, timed(action.payload.message)))))));\n}\n\nfunction reducer_channelCloseSuccessReducer(state, action) {\n  var sent = state.sent;\n\n  for (var _i = 0, _Object$entries = Object.entries(sent); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = reducer_slicedToArray(_Object$entries[_i], 2),\n        secrethash = _Object$entries$_i[0],\n        v = _Object$entries$_i[1];\n\n    var transfer = v.transfer[1];\n    if (!transfer.channel_identifier.eq(action.payload.id) || transfer.recipient !== action.meta.partner || transfer.token_network_address !== action.meta.tokenNetwork) continue;\n    sent = Object.assign(Object.assign({}, sent), transfers_reducer_defineProperty({}, secrethash, Object.assign(Object.assign({}, v), {\n      channelClosed: timed(action.payload.txHash)\n    })));\n  }\n\n  if (sent !== state.sent) state = Object.assign(Object.assign({}, state), {\n    sent: sent\n  });\n  var received = state.received;\n\n  for (var _i2 = 0, _Object$entries2 = Object.entries(received); _i2 < _Object$entries2.length; _i2++) {\n    var _Object$entries2$_i = reducer_slicedToArray(_Object$entries2[_i2], 2),\n        _secrethash = _Object$entries2$_i[0],\n        _v = _Object$entries2$_i[1];\n\n    var _transfer = _v.transfer[1];\n    if (!_transfer.channel_identifier.eq(action.payload.id) || _transfer.recipient !== action.meta.partner || _transfer.token_network_address !== action.meta.tokenNetwork) continue;\n    received = Object.assign(Object.assign({}, received), transfers_reducer_defineProperty({}, _secrethash, Object.assign(Object.assign({}, _v), {\n      channelClosed: timed(action.payload.txHash)\n    })));\n  }\n\n  if (received !== state.received) state = Object.assign(Object.assign({}, state), {\n    received: received\n  });\n  return state;\n}\n\nfunction transferClearReducer(state, action) {\n  var secrethash = action.meta.secrethash;\n  if (!(secrethash in state[action.meta.direction])) return state;\n  state = unset_default()([action.meta.direction, secrethash], state);\n  return state;\n}\n\nfunction withdrawReceiveSuccessReducer(state, action) {\n  // TODO: subtract this pending withdraw request from partner\'s capacity (maybe some pending\n  // withdraws state), revert upon expiration or consolidate on confirmed channelWithdrawn\n  var message = action.payload.message;\n  var channelPath = [\'channels\', action.meta.tokenNetwork, action.meta.partner];\n  var channel = get_default()(channelPath, state);\n  if (!channel || channel.state !== ChannelState.open) return state; // current own balanceProof, or zero balance proof, with some known fields filled\n\n  var balanceProof = channel.own.balanceProof || {\n    chainId: message.chain_id,\n    tokenNetworkAddress: action.meta.tokenNetwork,\n    channelId: message.channel_identifier,\n    // balance proof data\n    nonce: constants["Zero"],\n    transferredAmount: constants["Zero"],\n    lockedAmount: constants["Zero"],\n    locksroot: constants["HashZero"],\n    messageHash: constants["HashZero"],\n    signature: Object(utils["hexlify"])(SignatureZero),\n    sender: state.address\n  }; // if it\'s the next nonce, update balance proof\n\n  if (message.nonce.eq(balanceProof.nonce.add(1)) && message.expiration.gt(state.blockNumber)) {\n    channel = Object.assign(Object.assign({}, channel), {\n      own: Object.assign(Object.assign({}, channel.own), {\n        balanceProof: Object.assign(Object.assign({}, balanceProof), {\n          nonce: message.nonce\n        })\n      })\n    });\n    state = set_default()(channelPath, channel, state);\n  }\n\n  return state;\n}\n/**\n * Handles all transfers actions and requests\n */\n\n\nvar transfersReducer = createReducer(state_initialState).handle([transferSecret, transferSecretRegister.success], transferSecretReducer).handle(transferSigned, transferSignedReducer).handle([transferProcessed, transferUnlockProcessed, transferExpireProcessed, transferRefunded], transferStateReducer).handle(transferSecretRequest, transferSecretRequestedReducer).handle(transferSecretReveal, transferSecretReveledReducer).handle(transferUnlock.success, transferUnlockSuccessReducer).handle(transferExpire.success, transferExpireSuccessReducer).handle(channelClose.success, reducer_channelCloseSuccessReducer).handle(transferClear, transferClearReducer).handle(withdrawReceive.success, withdrawReceiveSuccessReducer);\n// CONCATENATED MODULE: ../raiden-ts/dist/reducer.js\nfunction dist_reducer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction dist_reducer_slicedToArray(arr, i) { return dist_reducer_arrayWithHoles(arr) || dist_reducer_iterableToArrayLimit(arr, i) || dist_reducer_unsupportedIterableToArray(arr, i) || dist_reducer_nonIterableRest(); }\n\nfunction dist_reducer_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction dist_reducer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dist_reducer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dist_reducer_arrayLikeToArray(o, minLen); }\n\nfunction dist_reducer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction dist_reducer_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction dist_reducer_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n // update state.config on raidenConfigUpdate action\n// resets key to default value if value is undefined, otherwise overwrites it\n\nvar configReducer = createReducer(state_initialState).handle(raidenConfigUpdate, function (state, _ref) {\n  var payload = _ref.payload;\n  var config = state.config;\n\n  for (var _i = 0, _Object$entries = Object.entries(payload); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = dist_reducer_slicedToArray(_Object$entries[_i], 2),\n        k = _Object$entries$_i[0],\n        v = _Object$entries$_i[1];\n\n    if (v !== undefined) config = Object.assign(Object.assign({}, config), dist_reducer_defineProperty({}, k, v));else if (k in config) config = unset_default()(k, config);\n  }\n\n  if (config === state.config) return state;\n  return Object.assign(Object.assign({}, state), {\n    config: config\n  });\n});\nvar raidenReducers = {\n  configReducer: configReducer,\n  channelsReducer: channelsReducer,\n  pathReducer: pathReducer,\n  transportReducer: transportReducer,\n  transfersReducer: transfersReducer\n};\n/**\n * Raiden root reducer\n * Apply action over each submodule root reducer in a flattened manner (iteratively).\n * Notice the submodules reducers aren\'t handled only a partial/deep property of the state\n * (as combineReducers), but instead receive the whole state, so they can act on any part of the\n * state. This approach is similar to `reduce-reducers` util.\n * Each submodule root reducer may then choose to split its concerns into nested or flattened\n * reducers (like this one).\n *\n * @param state - Current RaidenState to reduce\n * @param action - RaidenAction to apply over state\n * @returns New RaidenState\n */\n\nvar reducer_raidenReducer = function raidenReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state_initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return Object.values(raidenReducers).reduce(function (s, reducer) {\n    return reducer(s, action);\n  }, state);\n};\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/pluck.js\nvar pluck = __webpack_require__("1585");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/startWith.js\nvar startWith = __webpack_require__("a744");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/scan.js\nvar scan = __webpack_require__("742d");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeWhile.js\nvar takeWhile = __webpack_require__("8ef6");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeUntil.js\nvar takeUntil = __webpack_require__("9f2d");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/catchError.js\nvar catchError = __webpack_require__("f59d");\n\n// EXTERNAL MODULE: ./node_modules/lodash/negate.js\nvar negate = __webpack_require__("a0ac");\nvar negate_default = /*#__PURE__*/__webpack_require__.n(negate);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js\nvar distinctUntilChanged = __webpack_require__("69dd");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/rx.js\n\n/**\n * Maps each source value (an object) to its specified nested property,\n * and emits only if the value changed since last emission\n *\n * It\'s a combination of `pluck` and `distinctUntilChanged` operators.\n \n * @param properties - The nested properties to pluck from each source value (an object).\n * @returns A new Observable of property values from the source values.\n */\n\nfunction pluckDistinct() {\n  for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {\n    properties[_key] = arguments[_key];\n  }\n\n  return function (source) {\n    return source.pipe(pluck["a" /* pluck */].apply(void 0, properties), Object(distinctUntilChanged["a" /* distinctUntilChanged */])());\n  };\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/utils.js\nfunction transport_utils_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/**\n * Helper to map/get an aggregated Presences observable from action$ bus\n * Known presences as { address: <last seen MatrixPresenceUpdateAction> } mapping\n * It\'s memoized and shared, so all subscriptions share the same mapped/output object, but the type\n * is explicitly set to avoid requiring the exported MemoizedFunction type\n *\n * @param action$ - Observable\n * @returns Observable of aggregated Presences from subscription to now\n */\n\nvar getPresences$ = memoize_default()(function (action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(matrixPresence.success.is), Object(scan["a" /* scan */])( // scan all presence update actions and populate/output a per-address mapping\n  function (presences, update) {\n    return Object.assign(Object.assign({}, presences), transport_utils_defineProperty({}, update.meta.address, update));\n  }, {}), Object(share["a" /* share */])(), Object(startWith["a" /* startWith */])({}));\n});\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/timer.js\nvar timer = __webpack_require__("808d");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/throwError.js\nvar throwError = __webpack_require__("5e53");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js + 1 modules\nvar concat = __webpack_require__("744c");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/interval.js\nvar observable_interval = __webpack_require__("c575");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/retryWhen.js\nvar retryWhen = __webpack_require__("66aa");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/take.js\nvar take = __webpack_require__("b7d7");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mapTo.js\nvar mapTo = __webpack_require__("6863");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js\nvar exhaustMap = __webpack_require__("e95d");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/groupBy.js\nvar groupBy = __webpack_require__("2313");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js\nvar withLatestFrom = __webpack_require__("fcf1");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/publishReplay.js\nvar publishReplay = __webpack_require__("b389");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/tap.js + 1 modules\nvar tap = __webpack_require__("c4cc");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js\nvar ignoreElements = __webpack_require__("0ca2");\n\n// EXTERNAL MODULE: ./node_modules/lodash/isEmpty.js\nvar lodash_isEmpty = __webpack_require__("13ea");\nvar lodash_isEmpty_default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty);\n\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/index.js\n\n\n// EXTERNAL MODULE: ./node_modules/ethers/abstract-signer.js\nvar abstract_signer = __webpack_require__("8358");\n\n// EXTERNAL MODULE: ./node_modules/ethers/wallet.js\nvar wallet = __webpack_require__("ddfd");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatMap.js\nvar concatMap = __webpack_require__("3e18");\n\n// EXTERNAL MODULE: ./node_modules/lodash/pick.js\nvar pick = __webpack_require__("2593");\nvar pick_default = /*#__PURE__*/__webpack_require__.n(pick);\n\n// EXTERNAL MODULE: ./node_modules/lodash/transform.js\nvar transform = __webpack_require__("50ca");\nvar transform_default = /*#__PURE__*/__webpack_require__.n(transform);\n\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/utils.js\n\n\n\n\n\n/**\n * Calculates and returns partial and total amounts of given channel state\n *\n * @param channel - A Channel state to calculate amounts from\n * @returns An object holding own&partner\'s deposit, withdraw, transferred, locked, balance and\n *          capacity.\n */\n\nfunction channelAmounts(channel) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n  var Zero32 = constants["Zero"];\n  if (channel.state !== ChannelState.open) return {\n    ownDeposit: Zero32,\n    ownWithdraw: Zero32,\n    ownTransferred: Zero32,\n    ownLocked: Zero32,\n    ownBalance: Zero32,\n    ownCapacity: Zero32,\n    partnerDeposit: Zero32,\n    partnerWithdraw: Zero32,\n    partnerTransferred: Zero32,\n    partnerLocked: Zero32,\n    partnerBalance: Zero32,\n    partnerCapacity: Zero32\n  };\n  var ownWithdraw = (_a = channel.own.withdraw) !== null && _a !== void 0 ? _a : Zero32,\n      partnerWithdraw = (_b = channel.partner.withdraw) !== null && _b !== void 0 ? _b : Zero32,\n      ownTransferred = (_d = (_c = channel.own.balanceProof) === null || _c === void 0 ? void 0 : _c.transferredAmount) !== null && _d !== void 0 ? _d : Zero32,\n      partnerTransferred = (_f = (_e = channel.partner.balanceProof) === null || _e === void 0 ? void 0 : _e.transferredAmount) !== null && _f !== void 0 ? _f : Zero32,\n      ownLocked = (_h = (_g = channel.own.balanceProof) === null || _g === void 0 ? void 0 : _g.lockedAmount) !== null && _h !== void 0 ? _h : Zero32,\n      partnerLocked = (_k = (_j = channel.partner.balanceProof) === null || _j === void 0 ? void 0 : _j.lockedAmount) !== null && _k !== void 0 ? _k : Zero32,\n      ownBalance = partnerTransferred.sub(ownTransferred),\n      partnerBalance = ownTransferred.sub(partnerTransferred),\n      // == -ownBalance\n  ownCapacity = channel.own.deposit.sub(ownWithdraw).sub(ownLocked).add(ownBalance),\n      partnerCapacity = channel.partner.deposit.sub(partnerWithdraw).sub(partnerLocked).add(partnerBalance);\n  return {\n    ownDeposit: channel.own.deposit,\n    ownWithdraw: ownWithdraw,\n    ownTransferred: ownTransferred,\n    ownLocked: ownLocked,\n    ownBalance: ownBalance,\n    ownCapacity: ownCapacity,\n    partnerDeposit: channel.partner.deposit,\n    partnerWithdraw: partnerWithdraw,\n    partnerTransferred: partnerTransferred,\n    partnerLocked: partnerLocked,\n    partnerBalance: partnerBalance,\n    partnerCapacity: partnerCapacity\n  };\n}\n/**\n * Custom operator to wait & assert transaction success\n *\n * @param method - method name to use in logs\n * @param error - ErrorCode to throw if transaction fails\n * @param deps - object containing logger\n * @returns operator function to wait for transaction and output hash\n */\n\nfunction assertTx(method, error, _ref) {\n  var log = _ref.log;\n  return function (tx) {\n    return tx.pipe(Object(tap["a" /* tap */])(function (tx) {\n      return log.debug("sent ".concat(method, " tx \\"").concat(tx.hash, "\\" to \\"").concat(tx.to, "\\""));\n    }), Object(mergeMap["a" /* mergeMap */])(function (tx) {\n      return Object(from["a" /* from */])(tx.wait()).pipe(Object(map["a" /* map */])(function (receipt) {\n        if (!receipt.status) throw new error_RaidenError(error, {\n          transactionHash: tx.hash\n        });\n        log.debug("".concat(method, " tx \\"").concat(tx.hash, "\\" successfuly mined!"));\n        return tx.hash;\n      }));\n    }));\n  };\n}\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_ropsten.json\nvar deployment_ropsten = __webpack_require__("a0df");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_rinkeby.json\nvar deployment_rinkeby = __webpack_require__("31a7");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_goerli.json\nvar deployment_goerli = __webpack_require__("c998");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_services_ropsten.json\nvar deployment_services_ropsten = __webpack_require__("b4cc");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_services_rinkeby.json\nvar deployment_services_rinkeby = __webpack_require__("0ff6");\n\n// EXTERNAL MODULE: ../raiden-ts/dist/deployment/deployment_services_goerli.json\nvar deployment_services_goerli = __webpack_require__("4e0b2");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/helpers.js\n\n\nfunction helpers_toConsumableArray(arr) { return helpers_arrayWithoutHoles(arr) || helpers_iterableToArray(arr) || helpers_unsupportedIterableToArray(arr) || helpers_nonIterableSpread(); }\n\nfunction helpers_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction helpers_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction helpers_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return helpers_arrayLikeToArray(arr); }\n\nfunction helpers_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction helpers_slicedToArray(arr, i) { return helpers_arrayWithHoles(arr) || helpers_iterableToArrayLimit(arr, i) || helpers_unsupportedIterableToArray(arr, i) || helpers_nonIterableRest(); }\n\nfunction helpers_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction helpers_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return helpers_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return helpers_arrayLikeToArray(o, minLen); }\n\nfunction helpers_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction helpers_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction helpers_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar helpers_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns contract information depending on the passed [[Network]]. Currently, only\n * `rinkeby`, `ropsten` and `goerli` are supported.\n * Throws an exception if called with another [[Network]].\n *\n * @param network - an account used for signing\n * @returns deployed contract information of the network\n */\n\nvar helpers_getContracts = function getContracts(network) {\n  switch (network.name) {\n    case \'rinkeby\':\n      return Object.assign(Object.assign({}, deployment_rinkeby.contracts), deployment_services_rinkeby.contracts);\n\n    case \'ropsten\':\n      return Object.assign(Object.assign({}, deployment_ropsten.contracts), deployment_services_ropsten.contracts);\n\n    case \'goerli\':\n      return Object.assign(Object.assign({}, deployment_goerli.contracts), deployment_services_goerli.contracts);\n\n    default:\n      throw new error_RaidenError(ErrorCodes.RDN_UNRECOGNIZED_NETWORK, {\n        network: network.name\n      });\n  }\n};\n/**\n * Generate, sign and return a subkey from provided main account\n *\n * @param network - Network to include in message\n * @param main - Main signer to derive subkey from\n * @returns Subkey\'s signer & address\n */\n\nfunction genSubkey(network, main) {\n  var _a, _b;\n\n  return helpers_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    var url, message, signature, pk, signer;\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = (_b = (_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.location) === null || _a === void 0 ? void 0 : _a.origin) !== null && _b !== void 0 ? _b : \'unknown\';\n            message = "=== RAIDEN SUBKEY GENERATION ===\\n\\nNetwork: ".concat(getNetworkName(network).toUpperCase(), "\\nRaiden dApp URL: ").concat(url, "\\n\\nWARNING: ensure this signature is being requested from Raiden dApp running at URL above by comparing it to your browser\'s url bar.\\nSigning this message at any other address WILL give it FULL control of this subkey\'s funds, tokens and Raiden channels!");\n            _context.next = 4;\n            return main.signMessage(Object(utils["toUtf8Bytes"])(message));\n\n          case 4:\n            signature = _context.sent;\n            pk = Object(utils["sha256"])(signature);\n            signer = new wallet["Wallet"](pk, main.provider);\n            return _context.abrupt("return", {\n              signer: signer,\n              address: signer.address\n            });\n\n          case 8:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n/**\n * Returns a [[Signer]] based on the `account` and `provider`.\n * Throws an exception if the `account` is not a valid address or private key.\n *\n * @param account - an account used for signing\n * @param provider - a provider\n * @param subkey - Whether to generate a subkey\n * @returns a [[Signer]] or [[Wallet]] that can be used for signing\n */\n\n\nvar helpers_getSigner = function getSigner(account, provider, subkey) {\n  return helpers_awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n    var signer, address, main, accounts, _yield$genSubkey;\n\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!abstract_signer["Signer"].isSigner(account)) {\n              _context2.next = 15;\n              break;\n            }\n\n            if (!(account.provider === provider)) {\n              _context2.next = 5;\n              break;\n            }\n\n            signer = account;\n            _context2.next = 10;\n            break;\n\n          case 5:\n            if (!(account instanceof wallet["Wallet"])) {\n              _context2.next = 9;\n              break;\n            }\n\n            signer = account.connect(provider);\n            _context2.next = 10;\n            break;\n\n          case 9:\n            throw new error_RaidenError(ErrorCodes.RDN_SIGNER_NOT_CONNECTED, {\n              account: account.toString(),\n              provider: provider.toString()\n            });\n\n          case 10:\n            _context2.next = 12;\n            return signer.getAddress();\n\n          case 12:\n            address = _context2.sent;\n            _context2.next = 38;\n            break;\n\n          case 15:\n            if (!(typeof account === \'number\')) {\n              _context2.next = 22;\n              break;\n            }\n\n            // index of account in provider\n            signer = provider.getSigner(account);\n            _context2.next = 19;\n            return signer.getAddress();\n\n          case 19:\n            address = _context2.sent;\n            _context2.next = 38;\n            break;\n\n          case 22:\n            if (!Address.is(account)) {\n              _context2.next = 32;\n              break;\n            }\n\n            _context2.next = 25;\n            return provider.listAccounts();\n\n          case 25:\n            accounts = _context2.sent;\n\n            if (accounts.includes(account)) {\n              _context2.next = 28;\n              break;\n            }\n\n            throw new error_RaidenError(ErrorCodes.RDN_ACCOUNT_NOT_FOUND, {\n              account: account,\n              accounts: JSON.stringify(accounts)\n            });\n\n          case 28:\n            signer = provider.getSigner(account);\n            address = account;\n            _context2.next = 38;\n            break;\n\n          case 32:\n            if (!PrivateKey.is(account)) {\n              _context2.next = 37;\n              break;\n            }\n\n            // private key\n            signer = new wallet["Wallet"](account, provider);\n            address = signer.address;\n            _context2.next = 38;\n            break;\n\n          case 37:\n            throw new error_RaidenError(ErrorCodes.RDN_STRING_ACCOUNT_INVALID);\n\n          case 38:\n            if (!subkey) {\n              _context2.next = 50;\n              break;\n            }\n\n            main = {\n              signer: signer,\n              address: address\n            };\n            _context2.t0 = genSubkey;\n            _context2.next = 43;\n            return provider.getNetwork();\n\n          case 43:\n            _context2.t1 = _context2.sent;\n            _context2.t2 = main.signer;\n            _context2.next = 47;\n            return (0, _context2.t0)(_context2.t1, _context2.t2);\n\n          case 47:\n            _yield$genSubkey = _context2.sent;\n            signer = _yield$genSubkey.signer;\n            address = _yield$genSubkey.address;\n\n          case 50:\n            return _context2.abrupt("return", {\n              signer: signer,\n              address: address,\n              main: main\n            });\n\n          case 51:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n};\n/**\n * Initializes the [[transfers$]] observable\n *\n * @param state$ - Observable of the current RaidenState\n * @returns observable of sent and completed Raiden transfers\n */\n\nvar helpers_initTransfers$ = function initTransfers$(state$) {\n  return state$.pipe(pluckDistinct(\'sent\'), Object(concatMap["a" /* concatMap */])(function (sent) {\n    return Object(from["a" /* from */])(Object.entries(sent));\n  }),\n  /* this scan stores a reference to each [key,value] in \'acc\', and emit as \'changed\' iff it\n   * changes from last time seen. It relies on value references changing only if needed */\n  Object(scan["a" /* scan */])(function (_ref, _ref2) {\n    var acc = _ref.acc;\n\n    var _ref3 = helpers_slicedToArray(_ref2, 2),\n        secrethash = _ref3[0],\n        sent = _ref3[1];\n\n    return (// if ref didn\'t change, emit previous accumulator, without \'changed\' value\n      acc[secrethash] === sent ? {\n        acc: acc\n      } : // else, update ref in \'acc\' and emit value in \'changed\' prop\n      {\n        acc: Object.assign(Object.assign({}, acc), helpers_defineProperty({}, secrethash, sent)),\n        changed: sent\n      }\n    );\n  }, {\n    acc: {}\n  }), Object(pluck["a" /* pluck */])(\'changed\'), Object(filter["a" /* filter */])(isntNil), // filter out if reference didn\'t change from last emit\n  // from here, we get TransferState objects which changed from previous state (all on first)\n  Object(map["a" /* map */])(raidenSentTransfer));\n};\n/**\n * Returns an object that maps partner addresses to their [[RaidenChannel]].\n *\n * @param partnerChannelMap - an object that maps partnerAddress to a channel\n * @param token - a token address\n * @param tokenNetwork - a token network\n * @returns raiden channel\n */\n\nvar helpers_mapPartnerToChannel = function mapPartnerToChannel(partnerChannelMap, token, tokenNetwork) {\n  return transform_default()( // transform Channel to RaidenChannel, with more info\n  partnerChannelMap, function (partner2raidenChannel, channel, partner) {\n    var _channelAmounts = channelAmounts(channel),\n        ownDeposit = _channelAmounts.ownDeposit,\n        partnerDeposit = _channelAmounts.partnerDeposit,\n        balance = _channelAmounts.ownBalance,\n        capacity = _channelAmounts.ownCapacity;\n\n    partner2raidenChannel[partner] = Object.assign(Object.assign({\n      state: channel.state\n    }, pick_default()(channel, [\'id\', \'settleTimeout\', \'openBlock\', \'closeBlock\'])), {\n      token: token,\n      tokenNetwork: tokenNetwork,\n      partner: partner,\n      ownDeposit: ownDeposit,\n      partnerDeposit: partnerDeposit,\n      balance: balance,\n      capacity: capacity\n    });\n  });\n};\n/**\n * Transforms the redux channel state to [[RaidenChannels]]\n *\n * @param state - current state\n * @returns raiden channels\n */\n\n\nvar helpers_mapTokenToPartner = function mapTokenToPartner(state) {\n  return transform_default()( // transform state.channels to token-partner-raidenChannel map\n  state.channels, function (result, partnerChannelMap, tokenNetwork) {\n    var token = findKey_default()(state.tokens, function (tn) {\n      return tn === tokenNetwork;\n    });\n    if (!token) return; // shouldn\'t happen, token mapping is always bi-directional\n\n    result[token] = helpers_mapPartnerToChannel(partnerChannelMap, token, tokenNetwork);\n  });\n};\n/**\n * Return signer & address to use for on-chain txs depending on subkey param\n *\n * @param deps - RaidenEpicDeps subset\n * @param subkey - Whether to prefer the subkey or the main key\n * @returns Signer & Address to use for on-chain operations\n */\n\nfunction chooseOnchainAccount(_ref4, subkey) {\n  var signer = _ref4.signer,\n      address = _ref4.address,\n      main = _ref4.main;\n  if (main && !subkey) return main;\n  return {\n    signer: signer,\n    address: address\n  };\n}\n/**\n * Returns a contract instance with attached signer\n *\n * @param contract - Contract instance\n * @param signer - Signer to use on contract\n * @returns contract instance with signer\n */\n\nfunction getContractWithSigner(contract, signer) {\n  if (contract.signer === signer) return contract;\n  return contract.connect(signer);\n}\n/**\n * Calls a contract method and wait for it to be mined successfuly, rejects otherwise\n *\n * @param contract - Contract instance\n * @param method - Method name\n * @param params - Params tuple to method\n * @param errorCode - ErrorCode to throw in case of failure\n * @returns Promise to successful receipt\n */\n\nfunction callAndWaitMined(contract, method, params, errorCode) {\n  var _ref5 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n    log: loglevel_default.a\n  },\n      log = _ref5.log;\n\n  return helpers_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee3() {\n    var tx, _contract$functions, receipt;\n\n    return regenerator_default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return (_contract$functions = contract.functions)[method].apply(_contract$functions, helpers_toConsumableArray(params));\n\n          case 3:\n            tx = _context3.sent;\n            _context3.next = 10;\n            break;\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3["catch"](0);\n            log.error("Error sending ".concat(method, " tx"), _context3.t0);\n            throw new error_RaidenError(errorCode, {\n              error: _context3.t0.message\n            });\n\n          case 10:\n            log.debug("sent ".concat(method, " tx \\"").concat(tx.hash, "\\" to \\"").concat(contract.address, "\\""));\n            _context3.prev = 11;\n            _context3.next = 14;\n            return tx.wait();\n\n          case 14:\n            receipt = _context3.sent;\n            assert(receipt.status, "tx status: ".concat(receipt.status));\n            _context3.next = 22;\n            break;\n\n          case 18:\n            _context3.prev = 18;\n            _context3.t1 = _context3["catch"](11);\n            log.error("Error mining ".concat(method, " tx"), _context3.t1);\n            throw new error_RaidenError(errorCode, {\n              transactionHash: tx.hash\n            });\n\n          case 22:\n            log.debug("".concat(method, " tx \\"").concat(tx.hash, "\\" successfuly mined!"));\n            return _context3.abrupt("return", receipt);\n\n          case 24:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6], [11, 18]]);\n  }));\n}\n/**\n * Waits for a given receipt to be confirmed; throws if it gets removed by a reorg instead\n *\n * @param receipt - Receipt to wait for confirmation\n * @param deps - RaidenEpicDeps\n * @param confBlocks - Overwrites config\n * @returns Promise final block of transaction\n */\n\nfunction waitConfirmation(receipt, _ref6, confBlocks) {\n  var latest$ = _ref6.latest$,\n      config$ = _ref6.config$,\n      provider = _ref6.provider;\n  return helpers_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee4() {\n    var txBlock, txHash;\n    return regenerator_default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            txBlock = receipt.blockNumber;\n            txHash = receipt.transactionHash;\n            return _context4.abrupt("return", latest$.pipe(pluckDistinct(\'state\', \'blockNumber\'), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(filter["a" /* filter */])(function (_ref7) {\n              var _ref8 = helpers_slicedToArray(_ref7, 2),\n                  blockNumber = _ref8[0],\n                  confirmationBlocks = _ref8[1].confirmationBlocks;\n\n              return txBlock + (confBlocks !== null && confBlocks !== void 0 ? confBlocks : confirmationBlocks) <= blockNumber;\n            }), Object(exhaustMap["a" /* exhaustMap */])(function (_ref9) {\n              var _ref10 = helpers_slicedToArray(_ref9, 2),\n                  blockNumber = _ref10[0],\n                  confirmationBlocks = _ref10[1].confirmationBlocks;\n\n              return Object(defer["a" /* defer */])(function () {\n                return provider.getTransactionReceipt(txHash);\n              }).pipe(Object(map["a" /* map */])(function (receipt) {\n                if ((receipt === null || receipt === void 0 ? void 0 : receipt.confirmations) && receipt.confirmations >= (confBlocks !== null && confBlocks !== void 0 ? confBlocks : confirmationBlocks)) return receipt.blockNumber;else if (txBlock + 2 * (confBlocks !== null && confBlocks !== void 0 ? confBlocks : confirmationBlocks) < blockNumber) throw new error_RaidenError(ErrorCodes.RDN_TRANSACTION_REORG, {\n                  transactionHash: txHash\n                });\n              }));\n            }), Object(first["a" /* first */])(isntNil)).toPromise());\n\n          case 3:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n/*\n * Returns true if `url` is a valid URL or domain.\n * On production `https://` is required for URLs, otherwise `http://` matches as well.\n *\n * @param url - A URL or hostname\n * @returns true if valid URL or domain\n */\n\nvar isValidUrl = function isValidUrl(url) {\n  var regex =  true ? /^(?:https:\\/\\/)?[^\\s\\/$.?#&"\']+\\.[^\\s\\/$?#&"\']+$/ : undefined;\n  return regex.test(url);\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/channels/epics.js\n\n\nfunction epics_toConsumableArray(arr) { return epics_arrayWithoutHoles(arr) || epics_iterableToArray(arr) || epics_unsupportedIterableToArray(arr) || epics_nonIterableSpread(); }\n\nfunction epics_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction epics_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction epics_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return epics_arrayLikeToArray(arr); }\n\nfunction epics_slicedToArray(arr, i) { return epics_arrayWithHoles(arr) || epics_iterableToArrayLimit(arr, i) || epics_unsupportedIterableToArray(arr, i) || epics_nonIterableRest(); }\n\nfunction epics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction epics_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return epics_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return epics_arrayLikeToArray(o, minLen); }\n\nfunction epics_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction epics_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction epics_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction epics_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Receives an async function and returns an observable which will retry it every interval until it\n * resolves, or throw if it can\'t succeed after 10 retries.\n * It is needed e.g. on provider methods which perform RPC requests directly, as they can fail\n * temporarily due to network errors, so they need to be retried for a while.\n * JsonRpcProvider._doPoll also catches, suppresses & retry\n *\n * @param func - An async function (e.g. a Promise factory, like a defer callback)\n * @param interval - Interval to retry in case of rejection\n * @param retries - Max number of times to retry\n * @returns Observable version of async function, with retries\n */\n\nfunction retryAsync$(func) {\n  var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e3;\n  var retries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  return Object(defer["a" /* defer */])(func).pipe(Object(retryWhen["a" /* retryWhen */])(function (err$) {\n    return err$.pipe(Object(mergeMap["a" /* mergeMap */])(function (err, i) {\n      return i < retries ? Object(timer["a" /* timer */])(interval) : Object(throwError["a" /* throwError */])(err);\n    }));\n  }));\n}\n/**\n * Fetch current blockNumber, register for new block events and emit newBlock actions\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param provider - RaidenEpicDeps members\n * @returns Observable of newBlock actions\n */\n\n\nvar epics_initNewBlockEpic = function initNewBlockEpic(_ref, _ref2, _ref3) {\n  epics_objectDestructuringEmpty(_ref);\n\n  epics_objectDestructuringEmpty(_ref2);\n\n  var provider = _ref3.provider;\n  return retryAsync$(function () {\n    return provider.getBlockNumber();\n  }, provider.pollingInterval).pipe(Object(mergeMap["a" /* mergeMap */])(function (blockNumber) {\n    return Object(merge["a" /* merge */])(Object(of["a" /* of */])(blockNumber), fromEthersEvent(provider, \'block\'));\n  }), Object(map["a" /* map */])(function (blockNumber) {\n    return newBlock({\n      blockNumber: blockNumber\n    });\n  }));\n};\n/**\n * On first run, scan registry and token networks for registered TokenNetworks of interest\n * (ones which has/had channels with us) and monitors them. On next runs, just monitors the\n * previously monitored ones.\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param registryContract,contractsInfo - RaidenEpicDeps members\n * @returns Observable of tokenMonitored actions\n */\n\nvar epics_initTokensRegistryEpic = function initTokensRegistryEpic(_ref4, state$, _ref5) {\n  epics_objectDestructuringEmpty(_ref4);\n\n  var address = _ref5.address,\n      provider = _ref5.provider,\n      registryContract = _ref5.registryContract,\n      contractsInfo = _ref5.contractsInfo;\n  return state$.pipe(Object(take["a" /* take */])(1), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    var encodedAddress = utils["defaultAbiCoder"].encode([\'address\'], [address]); // if tokens are already initialized, use it\n\n    if (!lodash_isEmpty_default()(state.tokens)) return Object(from["a" /* from */])(Object.entries(state.tokens).map(function (_ref6) {\n      var _ref7 = epics_slicedToArray(_ref6, 2),\n          token = _ref7[0],\n          tokenNetwork = _ref7[1];\n\n      return tokenMonitored({\n        token: token,\n        tokenNetwork: tokenNetwork\n      });\n    })); // else, do an initial registry scan, from deploy to now\n    else return retryAsync$(function () {\n        return provider.getLogs(Object.assign(Object.assign({}, registryContract.filters.TokenNetworkCreated(null, null)), {\n          fromBlock: contractsInfo.TokenNetworkRegistry.block_number,\n          toBlock: \'latest\'\n        }));\n      }, provider.pollingInterval).pipe(Object(mergeMap["a" /* mergeMap */])(function (logs) {\n        return Object(from["a" /* from */])(logs);\n      }), Object(map["a" /* map */])(function (log) {\n        return {\n          log: log,\n          parsed: registryContract.interface.parseLog(log)\n        };\n      }), Object(filter["a" /* filter */])(function (_ref8) {\n        var parsed = _ref8.parsed;\n\n        var _a;\n\n        return !!((_a = parsed.values) === null || _a === void 0 ? void 0 : _a.token_network_address);\n      }), // for each TokenNetwork found, scan for channels with us\n      Object(mergeMap["a" /* mergeMap */])(function (_ref9) {\n        var log = _ref9.log,\n            parsed = _ref9.parsed;\n        return Object(concat["a" /* concat */])( // concat channels opened by us and to us separately\n        // take(1) won\'t subscribe the later if something is found on former\n        retryAsync$(function () {\n          var _a;\n\n          return provider.getLogs({\n            address: parsed.values.token_network_address,\n            topics: [null, null, encodedAddress],\n            fromBlock: (_a = log.blockNumber) !== null && _a !== void 0 ? _a : contractsInfo.TokenNetworkRegistry.block_number,\n            toBlock: \'latest\'\n          });\n        }, provider.pollingInterval).pipe(Object(mergeMap["a" /* mergeMap */])(from["a" /* from */])), retryAsync$(function () {\n          return provider.getLogs({\n            address: parsed.values.token_network_address,\n            topics: [null, null, null, encodedAddress],\n            fromBlock: log.blockNumber,\n            toBlock: \'latest\'\n          });\n        }, provider.pollingInterval).pipe(Object(mergeMap["a" /* mergeMap */])(from["a" /* from */]))).pipe( // if found at least one, register this TokenNetwork as of interest\n        // else, do nothing\n        Object(take["a" /* take */])(1), Object(mapTo["a" /* mapTo */])(tokenMonitored({\n          token: parsed.values.token_address,\n          tokenNetwork: parsed.values.token_network_address,\n          fromBlock: log.blockNumber\n        })));\n      }, 5));\n  }));\n};\n/**\n * Monitor channels previously already on state\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of channelMonitor actions\n */\n\nvar epics_initMonitorChannelsEpic = function initMonitorChannelsEpic(_ref10, state$) {\n  epics_objectDestructuringEmpty(_ref10);\n\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee(state) {\n    var _i2, _Object$entries, _Object$entries$_i, tokenNetwork, obj, _i3, _Object$entries2, _Object$entries2$_i, partner, channel;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _i2 = 0, _Object$entries = Object.entries(state.channels);\n\n          case 1:\n            if (!(_i2 < _Object$entries.length)) {\n              _context.next = 16;\n              break;\n            }\n\n            _Object$entries$_i = epics_slicedToArray(_Object$entries[_i2], 2), tokenNetwork = _Object$entries$_i[0], obj = _Object$entries$_i[1];\n            _i3 = 0, _Object$entries2 = Object.entries(obj);\n\n          case 4:\n            if (!(_i3 < _Object$entries2.length)) {\n              _context.next = 13;\n              break;\n            }\n\n            _Object$entries2$_i = epics_slicedToArray(_Object$entries2[_i3], 2), partner = _Object$entries2$_i[0], channel = _Object$entries2$_i[1];\n\n            if (!(channel.state === ChannelState.opening)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt("continue", 10);\n\n          case 8:\n            _context.next = 10;\n            return channelMonitor({\n              id: channel.id\n            }, {\n              tokenNetwork: tokenNetwork,\n              partner: partner\n            });\n\n          case 10:\n            _i3++;\n            _context.next = 4;\n            break;\n\n          case 13:\n            _i2++;\n            _context.next = 1;\n            break;\n\n          case 16:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n};\n/**\n * Monitor provider to ensure account continues to be available and network stays the same\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param address,network,provider - RaidenEpicDeps members\n * @returns Observable of raidenShutdown actions\n */\n\nvar epics_initMonitorProviderEpic = function initMonitorProviderEpic(_ref11, _ref12, _ref13) {\n  epics_objectDestructuringEmpty(_ref11);\n\n  epics_objectDestructuringEmpty(_ref12);\n\n  var address = _ref13.address,\n      network = _ref13.network,\n      provider = _ref13.provider;\n  return retryAsync$(function () {\n    return provider.listAccounts();\n  }, provider.pollingInterval).pipe( // at init time, check if our address is in provider\'s accounts list\n  // if not, it means Signer is a local Wallet or another non-provider-side account\n  // if yes, poll accounts every 1s and monitors if address is still there\n  // also, every 1s poll current provider network and monitors if it\'s the same\n  // if any check fails, emits RaidenShutdownAction, nothing otherwise\n  // Poll reason from: https://github.com/MetaMask/faq/blob/master/DEVELOPERS.md\n  // first/init-time check\n  Object(map["a" /* map */])(function (accounts) {\n    return accounts.includes(address);\n  }), Object(mergeMap["a" /* mergeMap */])(function (isProviderAccount) {\n    return Object(observable_interval["a" /* interval */])(provider.pollingInterval).pipe(Object(exhaustMap["a" /* exhaustMap */])(function () {\n      return Object(merge["a" /* merge */])( // if isProviderAccount, also polls and monitors accounts list\n      isProviderAccount ? retryAsync$(function () {\n        return provider.listAccounts();\n      }, provider.pollingInterval).pipe(Object(mergeMap["a" /* mergeMap */])(function (accounts) {\n        return !accounts.includes(address) ? Object(of["a" /* of */])(raidenShutdown({\n          reason: ShutdownReason.ACCOUNT_CHANGED\n        })) : empty["a" /* EMPTY */];\n      })) : empty["a" /* EMPTY */], // unconditionally monitors network changes\n      retryAsync$(function () {\n        return getNetwork(provider);\n      }, provider.pollingInterval).pipe(Object(mergeMap["a" /* mergeMap */])(function (curNetwork) {\n        return curNetwork.chainId !== network.chainId ? Object(of["a" /* of */])(raidenShutdown({\n          reason: ShutdownReason.NETWORK_CHANGED\n        })) : empty["a" /* EMPTY */];\n      })));\n    }));\n  }));\n};\n/**\n * Starts monitoring a token network for events\n * When this action goes through (because a former or new token registry event was deteceted),\n * subscribe to events and emit respective actions to the stream. Currently:\n * - ChannelOpened events with us or by us\n *\n * @param action$ - Observable of tokenMonitored actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of channelOpen.success actions\n */\n\nvar epics_tokenMonitoredEpic = function tokenMonitoredEpic(action$, _ref14, _ref15) {\n  epics_objectDestructuringEmpty(_ref14);\n\n  var address = _ref15.address,\n      getTokenNetworkContract = _ref15.getTokenNetworkContract;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(tokenMonitored)), Object(groupBy["a" /* groupBy */])(function (action) {\n    return action.payload.tokenNetwork;\n  }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n    return grouped$.pipe(Object(exhaustMap["a" /* exhaustMap */])(function (action) {\n      var tokenNetworkContract = getTokenNetworkContract(action.payload.tokenNetwork); // type of elements emitted by getEventsStream (past and new events coming from\n      // contract): [channelId, partner1, partner2, settleTimeout, Event]\n\n      return getEventsStream(tokenNetworkContract, // it\'s cheaper for monitoring to fetch all channels and filter client-side,\n      // than to query/create/request 2 filters on every block (from and to us)\n      [tokenNetworkContract.filters.ChannelOpened(null, null, null, null)], // if first time monitoring this token network,\n      // fetch TokenNetwork\'s pastEvents since registry deployment as fromBlock$\n      action.payload.fromBlock ? Object(of["a" /* of */])(action.payload.fromBlock) : undefined).pipe(Object(filter["a" /* filter */])(function (_ref16) {\n        var _ref17 = epics_slicedToArray(_ref16, 3),\n            p1 = _ref17[1],\n            p2 = _ref17[2];\n\n        return p1 === address || p2 === address;\n      }), Object(map["a" /* map */])(function (_ref18) {\n        var _ref19 = epics_slicedToArray(_ref18, 5),\n            id = _ref19[0],\n            p1 = _ref19[1],\n            p2 = _ref19[2],\n            settleTimeout = _ref19[3],\n            event = _ref19[4];\n\n        return channelOpen.success({\n          id: id.toNumber(),\n          settleTimeout: settleTimeout.toNumber(),\n          isFirstParticipant: address === p1,\n          txHash: event.transactionHash,\n          txBlock: event.blockNumber,\n          confirmed: undefined\n        }, {\n          tokenNetwork: tokenNetworkContract.address,\n          partner: address === p1 ? p2 : p1\n        });\n      }));\n    }));\n  }));\n};\n/**\n * When we see a new ChannelOpenedAction event, starts monitoring channel\n *\n * @param action$ - Observable of channelOpen.success actions\n * @returns Observable of channelMonitor actions\n */\n\nvar epics_channelOpenedEpic = function channelOpenedEpic(action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelOpen.success)), Object(filter["a" /* filter */])(function (action) {\n    return !!action.payload.confirmed;\n  }), Object(map["a" /* map */])(function (action) {\n    return channelMonitor({\n      id: action.payload.id,\n      // fetch past events as well, if needed, including events before confirmation\n      fromBlock: action.payload.txBlock\n    }, action.meta);\n  }));\n};\n/**\n * Monitors a channel for channel Events\n * Can be called either at initialization time (for previously known channels on previously\n * monitored TokenNetwork) or by a new detected ChannelOpenedAction. On the later case,\n * also fetches events since Channel.openBlock.\n * Currently monitored events:\n * - ChannelNewDeposit, fires a channelDeposit.success action\n * - ChannelClosedEvent, fires a channelClose.success action\n * - ChannelSettledEvent, fires a channelSettle.success action and completes that channel observable\n *\n * @param action$ - Observable of channelMonitor actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of channelDeposit.success,channelClose.success,channelSettle.success actions\n */\n\nvar epics_channelMonitoredEpic = function channelMonitoredEpic(action$, state$, _ref20) {\n  var getTokenNetworkContract = _ref20.getTokenNetworkContract;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelMonitor)), Object(groupBy["a" /* groupBy */])(function (action) {\n    return "".concat(action.payload.id, "#").concat(action.meta.partner, "@").concat(action.meta.tokenNetwork);\n  }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n    return grouped$.pipe(Object(exhaustMap["a" /* exhaustMap */])(function (action) {\n      var _action$meta = action.meta,\n          tokenNetwork = _action$meta.tokenNetwork,\n          partner = _action$meta.partner;\n      var tokenNetworkContract = getTokenNetworkContract(tokenNetwork);\n      var depositFilter = tokenNetworkContract.filters.ChannelNewDeposit(action.payload.id, null, null),\n          withdrawFilter = tokenNetworkContract.filters.ChannelWithdraw(action.payload.id, null, null),\n          closedFilter = tokenNetworkContract.filters.ChannelClosed(action.payload.id, null, null, null),\n          settledFilter = tokenNetworkContract.filters.ChannelSettled(action.payload.id, null, null, null, null),\n          mergedFilter = {\n        address: tokenNetworkContract.address,\n        topics: [[depositFilter.topics[0], withdrawFilter.topics[0], closedFilter.topics[0], settledFilter.topics[0]], [settledFilter.topics[1]]]\n      };\n      /**\n       * Guards that an event data tuple matches the type of a given filter\n       *\n       * Type must be explicitly passed as generic type parameter, and a corresponding filter\n       * as first parameter\n       *\n       * @param filter - Filter of an event of type T\n       * @param data - event data tuple, where last element is the Event object\n       * @returns Truty if event data matches filter\n       */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      function isEvent(filter, data) {\n        var event = data[data.length - 1];\n        if (!event || !event.topics || !filter.topics) return false;\n        var topic0 = filter.topics[0];\n        return Array.isArray(topic0) ? topic0.includes(event.topics[0]) : topic0 === event.topics[0];\n      }\n\n      return getEventsStream(tokenNetworkContract, [mergedFilter], // if channelMonitor triggered by channelOpen.success,\n      // fetch Channel\'s pastEvents since channelOpen.success blockNumber as fromBlock$\n      action.payload.fromBlock ? Object(of["a" /* of */])(action.payload.fromBlock) : undefined).pipe(Object(withLatestFrom["a" /* withLatestFrom */])(state$.pipe(Object(pluck["a" /* pluck */])(\'channels\'), Object(startWith["a" /* startWith */])({}))), Object(map["a" /* map */])(function (_ref21) {\n        var _ref22 = epics_slicedToArray(_ref21, 2),\n            data = _ref22[0],\n            channels = _ref22[1];\n\n        var _a, _b, _c;\n\n        if (isEvent(depositFilter, data)) {\n          var _data = epics_slicedToArray(data, 4),\n              id = _data[0],\n              participant = _data[1],\n              totalDeposit = _data[2],\n              event = _data[3];\n\n          return channelDeposit.success({\n            id: id.toNumber(),\n            participant: participant,\n            totalDeposit: totalDeposit,\n            txHash: event.transactionHash,\n            txBlock: event.blockNumber,\n            confirmed: undefined\n          }, action.meta);\n        } else if (isEvent(withdrawFilter, data)) {\n          var _data2 = epics_slicedToArray(data, 4),\n              _id = _data2[0],\n              _participant = _data2[1],\n              totalWithdraw = _data2[2],\n              _event = _data2[3];\n\n          return channelWithdrawn({\n            id: _id.toNumber(),\n            participant: _participant,\n            totalWithdraw: totalWithdraw,\n            txHash: _event.transactionHash,\n            txBlock: _event.blockNumber,\n            confirmed: undefined\n          }, action.meta);\n        } else if (isEvent(closedFilter, data)) {\n          var _data3 = epics_slicedToArray(data, 5),\n              _id2 = _data3[0],\n              _participant2 = _data3[1],\n              _event2 = _data3[4];\n\n          return channelClose.success({\n            id: _id2.toNumber(),\n            participant: _participant2,\n            txHash: _event2.transactionHash,\n            txBlock: _event2.blockNumber,\n            confirmed: undefined\n          }, action.meta);\n        } else if (isEvent(settledFilter, data)) {\n          var _data4 = epics_slicedToArray(data, 6),\n              _id3 = _data4[0],\n              _event3 = _data4[5];\n\n          return channelSettle.success({\n            id: _id3.toNumber(),\n            txHash: _event3.transactionHash,\n            txBlock: _event3.blockNumber,\n            confirmed: undefined,\n            locks: (_c = (_b = (_a = channels[tokenNetwork]) === null || _a === void 0 ? void 0 : _a[partner]) === null || _b === void 0 ? void 0 : _b.partner) === null || _c === void 0 ? void 0 : _c.locks\n          }, action.meta);\n        }\n      }), Object(filter["a" /* filter */])(isntNil), // takeWhile tends to broad input to generic Action. We need to narrow it explicitly\n      Object(takeWhile["a" /* takeWhile */])(negate_default()(channelSettle.success.is), true));\n    }));\n  }));\n};\n/**\n * A channelOpen action requested by user\n * Needs to be called on a previously monitored tokenNetwork. Calls TokenNetwork.openChannel\n * with given parameters. If tx goes through successfuly, stop as ChannelOpened success action\n * will instead be detected and fired by tokenMonitoredEpic. If anything detectable goes wrong,\n * fires a ChannnelOpenActionFailed instead\n *\n * @param action$ - Observable of channelOpen actions\n * @param state$ - Observable of RaidenStates\n * @param getTokenNetworkContract - RaidenEpicDeps members\n * @returns Observable of channelOpen.failure actions\n */\n\nvar epics_channelOpenEpic = function channelOpenEpic(action$, state$, _ref23) {\n  var log = _ref23.log,\n      signer = _ref23.signer,\n      address = _ref23.address,\n      main = _ref23.main,\n      getTokenContract = _ref23.getTokenContract,\n      getTokenNetworkContract = _ref23.getTokenNetworkContract,\n      config$ = _ref23.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelOpen.request)), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(mergeMap["a" /* mergeMap */])(function (_ref24) {\n    var _ref25 = epics_slicedToArray(_ref24, 3),\n        action = _ref25[0],\n        state = _ref25[1],\n        _ref25$ = _ref25[2],\n        settleTimeout = _ref25$.settleTimeout,\n        configSubkey = _ref25$.subkey;\n\n    var _a, _b, _c;\n\n    var _action$meta2 = action.meta,\n        tokenNetwork = _action$meta2.tokenNetwork,\n        partner = _action$meta2.partner;\n    var channelState = (_b = (_a = state.channels[tokenNetwork]) === null || _a === void 0 ? void 0 : _a[partner]) === null || _b === void 0 ? void 0 : _b.state; // proceed only if channel is in \'opening\' state, set by this action\n\n    if (channelState !== ChannelState.opening) return Object(of["a" /* of */])(channelOpen.failure(new error_RaidenError(ErrorCodes.CNL_INVALID_STATE, {\n      state: channelState\n    }), action.meta));\n\n    var _chooseOnchainAccount = chooseOnchainAccount({\n      signer: signer,\n      address: address,\n      main: main\n    }, (_c = action.payload.subkey) !== null && _c !== void 0 ? _c : configSubkey),\n        onchainSigner = _chooseOnchainAccount.signer;\n\n    var tokenNetworkContract = getContractWithSigner(getTokenNetworkContract(tokenNetwork), onchainSigner); // if also requested deposit\n\n    var deposit = !action.payload.deposit || action.payload.deposit.isZero() ? undefined : action.payload.deposit;\n    var token = findKey_default()(state.tokens, function (tn) {\n      return tn === tokenNetwork;\n    });\n    var tokenContract = getContractWithSigner(getTokenContract(token), onchainSigner);\n    return action$.pipe(Object(filter["a" /* filter */])(channelOpen.success.is), Object(filter["a" /* filter */])(function (a) {\n      return a.meta.tokenNetwork === tokenNetwork && a.meta.partner === partner;\n    }), // opened$ will "cache" matching channelOpen.success, if needed\n    Object(publishReplay["a" /* publishReplay */])(1, undefined, function (opened$) {\n      return (// send openChannel transaction\n        Object(defer["a" /* defer */])(function () {\n          var _a;\n\n          return tokenNetworkContract.functions.openChannel(address, partner, (_a = action.payload.settleTimeout) !== null && _a !== void 0 ? _a : settleTimeout);\n        }).pipe( // Wallet signer depends on fetching the \'pending\' tx count to fill \'nonce\'\n        // therefore we need to send open then approve, instead of doing them parallely\n        Object(mergeMap["a" /* mergeMap */])(function (openTx) {\n          return deposit ? Object(from["a" /* from */])(tokenContract.functions.approve(tokenNetwork, deposit)).pipe(Object(map["a" /* map */])(function (approveTx) {\n            return [openTx, approveTx];\n          })) : Object(of["a" /* of */])([openTx]);\n        }), // can\'t share logic with channelDepositEpic, because parallelism of txs needs to be\n        // strict, nor use assertTx for approve|openChannel parallel txs\n        Object(tap["a" /* tap */])(function (_ref26) {\n          var _ref27 = epics_slicedToArray(_ref26, 1),\n              tx = _ref27[0];\n\n          return log.debug("sent openChannel tx \\"".concat(tx.hash, "\\" to \\"").concat(tokenNetwork, "\\""));\n        }), Object(tap["a" /* tap */])(function (_ref28) {\n          var _ref29 = epics_slicedToArray(_ref28, 2),\n              tx = _ref29[1];\n\n          return tx ? log.debug("sent approve tx \\"".concat(tx.hash, "\\" to \\"").concat(token, "\\"")) : 0;\n        }), Object(mergeMap["a" /* mergeMap */])(function (_ref30) {\n          var _ref31 = epics_slicedToArray(_ref30, 2),\n              openTx = _ref31[0],\n              approveTx = _ref31[1];\n\n          return Object(combineLatest["a" /* combineLatest */])([Object(from["a" /* from */])(openTx.wait()).pipe(Object(map["a" /* map */])(function (receipt) {\n            return {\n              tx: openTx,\n              receipt: receipt\n            };\n          })), approveTx ? Object(from["a" /* from */])(approveTx.wait()).pipe(Object(map["a" /* map */])(function (receipt) {\n            return {\n              tx: approveTx,\n              receipt: receipt\n            };\n          })) : Object(of["a" /* of */])(undefined)]);\n        }), Object(mergeMap["a" /* mergeMap */])(function (_ref32) {\n          var _ref33 = epics_slicedToArray(_ref32, 2),\n              open = _ref33[0],\n              approve = _ref33[1];\n\n          if (!open.receipt.status) throw new error_RaidenError(ErrorCodes.CNL_OPENCHANNEL_FAILED, Object.assign(Object.assign({}, action.meta), {\n            transactionHash: open.tx.hash\n          }));\n          log.debug("openChannel tx \\"".concat(open.tx.hash, "\\" successfuly mined!")); // now that channel is opened, check approve and proceed to setTotalDeposit\n          // if no deposit requested, EMPTY will skip rest of this chain\n\n          return (approve ? Object(of["a" /* of */])(approve) : empty["a" /* EMPTY */]).pipe(Object(mergeMap["a" /* mergeMap */])(function (_ref34) {\n            var tx = _ref34.tx,\n                receipt = _ref34.receipt;\n            if (!receipt.status) throw new error_RaidenError(ErrorCodes.CNL_APPROVE_TRANSACTION_FAILED, {\n              token: token,\n              transactionHash: tx.hash\n            });\n            log.debug("approve tx \\"".concat(tx.hash, "\\" successfuly mined!")); // wait or use cached channelOpen.success, unconfirmed\n\n            return opened$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (_ref35) {\n              var id = _ref35.payload.id;\n              return tokenNetworkContract.functions.setTotalDeposit(id, address, deposit, partner);\n            }));\n          }), assertTx(\'setTotalDeposit\', ErrorCodes.CNL_SETTOTALDEPOSIT_FAILED, {\n            log: log\n          }), // ignore success so it\'s picked by channelMonitoredEpic\n          Object(ignoreElements["a" /* ignoreElements */])(), Object(catchError["a" /* catchError */])(function (error) {\n            return Object(of["a" /* of */])(channelDeposit.failure(error, action.meta));\n          }));\n        }), // ignore success so it\'s picked by tokenMonitoredEpic\n        Object(catchError["a" /* catchError */])(function (error) {\n          return Object(of["a" /* of */])(channelOpen.failure(error, action.meta));\n        }))\n      );\n    }));\n  }));\n};\n/**\n * A ChannelDeposit action requested by user\n * Needs to be called on a previously monitored channel. Calls Token.approve for TokenNetwork\n * and then set respective setTotalDeposit. If all tx go through successfuly, stop as\n * ChannelDeposited success action will instead be detected and reacted by\n * channelMonitoredEpic. If anything detectable goes wrong, fires a ChannelDepositActionFailed\n * instead\n *\n * @param action$ - Observable of channelDeposit.request actions\n * @param state$ - Observable of RaidenStates\n * @param address,getTokenContract,getTokenNetworkContract - RaidenEpicDeps members\n * @returns Observable of channelDeposit.failure actions\n */\n\nvar epics_channelDepositEpic = function channelDepositEpic(action$, state$, _ref36) {\n  var log = _ref36.log,\n      signer = _ref36.signer,\n      address = _ref36.address,\n      main = _ref36.main,\n      getTokenContract = _ref36.getTokenContract,\n      getTokenNetworkContract = _ref36.getTokenNetworkContract,\n      config$ = _ref36.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelDeposit.request)), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(mergeMap["a" /* mergeMap */])(function (_ref37) {\n    var _ref38 = epics_slicedToArray(_ref37, 3),\n        action = _ref38[0],\n        state = _ref38[1],\n        configSubkey = _ref38[2].subkey;\n\n    var _a;\n\n    var _action$meta3 = action.meta,\n        tokenNetwork = _action$meta3.tokenNetwork,\n        partner = _action$meta3.partner;\n    var token = findKey_default()(state.tokens, function (tn) {\n      return tn === tokenNetwork;\n    });\n\n    if (!token) {\n      var error = new error_RaidenError(ErrorCodes.CNL_TOKEN_NOT_FOUND, action.meta);\n      return Object(of["a" /* of */])(channelDeposit.failure(error, action.meta));\n    }\n\n    var _chooseOnchainAccount2 = chooseOnchainAccount({\n      signer: signer,\n      address: address,\n      main: main\n    }, (_a = action.payload.subkey) !== null && _a !== void 0 ? _a : configSubkey),\n        onchainSigner = _chooseOnchainAccount2.signer;\n\n    var tokenContract = getContractWithSigner(getTokenContract(token), onchainSigner);\n    var tokenNetworkContract = getContractWithSigner(getTokenNetworkContract(tokenNetwork), onchainSigner);\n    var channel = state.channels[tokenNetwork][partner];\n\n    if ((channel === null || channel === void 0 ? void 0 : channel.state) !== ChannelState.open) {\n      var _error = new error_RaidenError(ErrorCodes.CNL_NO_OPEN_CHANNEL_FOUND, action.meta);\n\n      return Object(of["a" /* of */])(channelDeposit.failure(_error, action.meta));\n    } // send approve transaction\n\n\n    return Object(from["a" /* from */])(tokenContract.functions.approve(tokenNetwork, action.payload.deposit)).pipe(assertTx(\'approve\', ErrorCodes.CNL_APPROVE_TRANSACTION_FAILED, {\n      log: log\n    }), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref39) {\n      var _ref40 = epics_slicedToArray(_ref39, 2),\n          state = _ref40[1];\n\n      return (// send setTotalDeposit transaction\n        tokenNetworkContract.functions.setTotalDeposit(channel.id, address, state.channels[tokenNetwork][partner].own.deposit.add(action.payload.deposit), partner)\n      );\n    }), assertTx(\'setTotalDeposit\', ErrorCodes.CNL_SETTOTALDEPOSIT_FAILED, {\n      log: log\n    }), // if succeeded, return a empty/completed observable\n    // actual ChannelDepositedAction will be detected and handled by channelMonitoredEpic\n    // if any error happened on tx call/pipeline, mergeMap below won\'t be hit, and catchError\n    // will then emit the channelDeposit.failure action instead\n    Object(ignoreElements["a" /* ignoreElements */])(), Object(catchError["a" /* catchError */])(function (error) {\n      return Object(of["a" /* of */])(channelDeposit.failure(error, action.meta));\n    }));\n  }));\n};\n/**\n * A ChannelClose action requested by user\n * Needs to be called on an opened or closing (for retries) channel.\n * If tx goes through successfuly, stop as ChannelClosed success action will instead be\n * detected and reacted by channelMonitoredEpic. If anything detectable goes wrong, fires a\n * ChannelCloseActionFailed instead\n *\n * @param action$ - Observable of channelClose actions\n * @param state$ - Observable of RaidenStates\n * @param getTokenNetworkContract - RaidenEpicDeps members\n * @returns Observable of channelClose.failure actions\n */\n\nvar epics_channelCloseEpic = function channelCloseEpic(action$, state$, _ref41) {\n  var log = _ref41.log,\n      signer = _ref41.signer,\n      address = _ref41.address,\n      main = _ref41.main,\n      network = _ref41.network,\n      getTokenNetworkContract = _ref41.getTokenNetworkContract,\n      config$ = _ref41.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelClose.request)), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(mergeMap["a" /* mergeMap */])(function (_ref42) {\n    var _ref43 = epics_slicedToArray(_ref42, 3),\n        action = _ref43[0],\n        state = _ref43[1],\n        configSubkey = _ref43[2].subkey;\n\n    var _a, _b, _c;\n\n    var _action$meta4 = action.meta,\n        tokenNetwork = _action$meta4.tokenNetwork,\n        partner = _action$meta4.partner;\n\n    var _chooseOnchainAccount3 = chooseOnchainAccount({\n      signer: signer,\n      address: address,\n      main: main\n    }, (_b = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.subkey) !== null && _b !== void 0 ? _b : configSubkey),\n        onchainSigner = _chooseOnchainAccount3.signer;\n\n    var tokenNetworkContract = getContractWithSigner(getTokenNetworkContract(tokenNetwork), onchainSigner);\n    var channel = (_c = state.channels[tokenNetwork]) === null || _c === void 0 ? void 0 : _c[partner];\n\n    if ((channel === null || channel === void 0 ? void 0 : channel.state) !== ChannelState.open && (channel === null || channel === void 0 ? void 0 : channel.state) !== ChannelState.closing) {\n      var error = new error_RaidenError(ErrorCodes.CNL_NO_OPEN_OR_CLOSING_CHANNEL_FOUND, action.meta);\n      return Object(of["a" /* of */])(channelClose.failure(error, action.meta));\n    }\n\n    var balanceHash = constants["HashZero"],\n        nonce = constants["Zero"],\n        additionalHash = constants["HashZero"],\n        nonClosingSignature = Object(utils["hexlify"])(SignatureZero);\n\n    if (channel.partner.balanceProof) {\n      balanceHash = createBalanceHash(channel.partner.balanceProof.transferredAmount, channel.partner.balanceProof.lockedAmount, channel.partner.balanceProof.locksroot);\n      nonce = channel.partner.balanceProof.nonce;\n      additionalHash = channel.partner.balanceProof.messageHash;\n      nonClosingSignature = channel.partner.balanceProof.signature;\n    }\n\n    var closingMessage = Object(utils["concat"])([encode(tokenNetwork, 20), encode(network.chainId, 32), encode(1, 32), encode(channel.id, 32), encode(balanceHash, 32), encode(nonce, 32), encode(additionalHash, 32), encode(nonClosingSignature, 65)]); // UInt8Array of 277 bytes\n    // sign counter balance proof, then send closeChannel transaction with our signature\n\n    return Object(from["a" /* from */])(signer.signMessage(closingMessage)).pipe(Object(mergeMap["a" /* mergeMap */])(function (closingSignature) {\n      return tokenNetworkContract.functions.closeChannel(channel.id, partner, address, balanceHash, nonce, additionalHash, nonClosingSignature, closingSignature);\n    }), assertTx(\'closeChannel\', ErrorCodes.CNL_CLOSECHANNEL_FAILED, {\n      log: log\n    }), // if succeeded, return a empty/completed observable\n    // actual ChannelClosedAction will be detected and handled by channelMonitoredEpic\n    // if any error happened on tx call/pipeline, catchError will then emit the\n    // channelClose.failure action instead\n    Object(ignoreElements["a" /* ignoreElements */])(), Object(catchError["a" /* catchError */])(function (error) {\n      return Object(of["a" /* of */])(channelClose.failure(error, action.meta));\n    }));\n  }));\n};\n/**\n * When detecting a ChannelClosed event, calls updateNonClosingBalanceProof with partner\'s balance\n * proof, iff there\'s any\n * TODO: do it only if economically viable (and define what that means)\n *\n * @param action$ - Observable of channelClose.success|newBlock actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps members\n * @returns Empty observable\n */\n\nvar epics_channelUpdateEpic = function channelUpdateEpic(action$, state$, _ref44) {\n  var log = _ref44.log,\n      signer = _ref44.signer,\n      address = _ref44.address,\n      main = _ref44.main,\n      network = _ref44.network,\n      getTokenNetworkContract = _ref44.getTokenNetworkContract,\n      config$ = _ref44.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelClose.success)), Object(filter["a" /* filter */])(function (action) {\n    return !!action.payload.confirmed;\n  }), // wait 2 newBlock actions go through after channelClose confirmation, to ensure any pending\n  // channelSettle could have been processed\n  Object(mergeMap["a" /* mergeMap */])(function (action) {\n    return action$.pipe(Object(filter["a" /* filter */])(newBlock.is), Object(skip["a" /* skip */])(1), Object(take["a" /* take */])(1), Object(mapTo["a" /* mapTo */])(action));\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(filter["a" /* filter */])(function (_ref45) {\n    var _ref46 = epics_slicedToArray(_ref45, 2),\n        action = _ref46[0],\n        state = _ref46[1];\n\n    var _a;\n\n    var channel = (_a = state.channels[action.meta.tokenNetwork]) === null || _a === void 0 ? void 0 : _a[action.meta.partner];\n    return (channel === null || channel === void 0 ? void 0 : channel.state) === ChannelState.closed && channel.id === action.payload.id && !!channel.partner.balanceProof && // there\'s partners balanceProof (i.e. received transfers)\n    channel.closeParticipant !== address // we\'re not the closing end\n    ;\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref47) {\n    var _ref48 = epics_slicedToArray(_ref47, 3),\n        action = _ref48[0],\n        state = _ref48[1],\n        subkey = _ref48[2].subkey;\n\n    var _action$meta5 = action.meta,\n        tokenNetwork = _action$meta5.tokenNetwork,\n        partner = _action$meta5.partner;\n\n    var _chooseOnchainAccount4 = chooseOnchainAccount({\n      signer: signer,\n      address: address,\n      main: main\n    }, subkey),\n        onchainSigner = _chooseOnchainAccount4.signer;\n\n    var tokenNetworkContract = getContractWithSigner(getTokenNetworkContract(tokenNetwork), onchainSigner);\n    var channel = state.channels[tokenNetwork][partner]; // should never happen because of filter, just here to narrow union\n\n    assert((channel === null || channel === void 0 ? void 0 : channel.state) === ChannelState.closed);\n    assert(channel.partner.balanceProof);\n    var balanceHash = createBalanceHash(channel.partner.balanceProof.transferredAmount, channel.partner.balanceProof.lockedAmount, channel.partner.balanceProof.locksroot);\n    var nonce = channel.partner.balanceProof.nonce;\n    var additionalHash = channel.partner.balanceProof.messageHash;\n    var closingSignature = channel.partner.balanceProof.signature;\n    var nonClosingMessage = Object(utils["concat"])([encode(tokenNetwork, 20), encode(network.chainId, 32), encode(2, 32), encode(channel.id, 32), encode(balanceHash, 32), encode(nonce, 32), encode(additionalHash, 32), encode(closingSignature, 65)]); // UInt8Array of 277 bytes\n    // send updateNonClosingBalanceProof transaction\n\n    return Object(from["a" /* from */])(signer.signMessage(nonClosingMessage)).pipe(Object(mergeMap["a" /* mergeMap */])(function (nonClosingSignature) {\n      return tokenNetworkContract.functions.updateNonClosingBalanceProof(channel.id, partner, address, balanceHash, nonce, additionalHash, closingSignature, nonClosingSignature);\n    }), assertTx(\'updateNonClosingBalanceProof\', ErrorCodes.CNL_UPDATE_NONCLOSING_BP_FAILED, {\n      log: log\n    }), // if succeeded, return a empty/completed observable\n    Object(ignoreElements["a" /* ignoreElements */])(), Object(catchError["a" /* catchError */])(function (error) {\n      log.error(\'Error updating non-closing balance-proof, ignoring\', error);\n      return empty["a" /* EMPTY */];\n    }));\n  }));\n};\n/**\n * A ChannelSettle action requested by user\n * Needs to be called on an settleable or settling (for retries) channel.\n * If tx goes through successfuly, stop as ChannelSettled success action will instead be\n * detected and reacted by channelMonitoredEpic. If anything detectable goes wrong, fires a\n * ChannelSettleActionFailed instead\n *\n * @param action$ - Observable of channelSettle actions\n * @param state$ - Observable of RaidenStates\n * @param address,getTokenNetworkContract - RaidenEpicDeps members\n * @returns Observable of channelSettle.failure actions\n */\n\nvar epics_channelSettleEpic = function channelSettleEpic(action$, state$, _ref49) {\n  var log = _ref49.log,\n      signer = _ref49.signer,\n      address = _ref49.address,\n      main = _ref49.main,\n      getTokenNetworkContract = _ref49.getTokenNetworkContract,\n      config$ = _ref49.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelSettle.request)), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(mergeMap["a" /* mergeMap */])(function (_ref50) {\n    var _ref51 = epics_slicedToArray(_ref50, 3),\n        action = _ref51[0],\n        state = _ref51[1],\n        configSubkey = _ref51[2].subkey;\n\n    var _a, _b, _c;\n\n    var _action$meta6 = action.meta,\n        tokenNetwork = _action$meta6.tokenNetwork,\n        partner = _action$meta6.partner;\n\n    var _chooseOnchainAccount5 = chooseOnchainAccount({\n      signer: signer,\n      address: address,\n      main: main\n    }, (_b = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.subkey) !== null && _b !== void 0 ? _b : configSubkey),\n        onchainSigner = _chooseOnchainAccount5.signer;\n\n    var tokenNetworkContract = getContractWithSigner(getTokenNetworkContract(tokenNetwork), onchainSigner);\n    var channel = (_c = state.channels[tokenNetwork]) === null || _c === void 0 ? void 0 : _c[partner];\n\n    if ((channel === null || channel === void 0 ? void 0 : channel.state) !== ChannelState.settleable && (channel === null || channel === void 0 ? void 0 : channel.state) !== ChannelState.settling) {\n      var error = new error_RaidenError(ErrorCodes.CNL_NO_SETTLEABLE_OR_SETTLING_CHANNEL_FOUND, action.meta);\n      return Object(of["a" /* of */])(channelSettle.failure(error, action.meta));\n    }\n\n    var zeroBalanceProof = {\n      transferredAmount: constants["Zero"],\n      lockedAmount: constants["Zero"],\n      locksroot: constants["HashZero"]\n    };\n    var part1 = Object.assign({\n      address: partner\n    }, channel.partner.balanceProof || zeroBalanceProof),\n        part2 = Object.assign({\n      address: address\n    }, channel.own.balanceProof || zeroBalanceProof);\n\n    if (channel.isFirstParticipant) {\n      var _ref52 = [part2, part1];\n      part1 = _ref52[0];\n      part2 = _ref52[1];\n    } // send settleChannel transaction\n\n\n    return Object(from["a" /* from */])(tokenNetworkContract.functions.settleChannel(channel.id, part1.address, part1.transferredAmount, part1.lockedAmount, part1.locksroot, part2.address, part2.transferredAmount, part2.lockedAmount, part2.locksroot)).pipe(assertTx(\'settleChannel\', ErrorCodes.CNL_SETTLECHANNEL_FAILED, {\n      log: log\n    }), // if succeeded, return a empty/completed observable\n    // actual ChannelSettledAction will be detected and handled by channelMonitoredEpic\n    // if any error happened on tx call/pipeline, mergeMap below won\'t be hit, and catchError\n    // will then emit the channelSettle.failure action instead\n    Object(ignoreElements["a" /* ignoreElements */])(), Object(catchError["a" /* catchError */])(function (error) {\n      return Object(of["a" /* of */])(channelSettle.failure(error, action.meta));\n    }));\n  }));\n};\n/**\n * Process newBlocks, emits ChannelSettleableAction if any closed channel is now settleable\n *\n * @param action$ - Observable of newBlock actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of channelSettleable actions\n */\n\nvar epics_channelSettleableEpic = function channelSettleableEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(newBlock)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee2(_ref53) {\n    var _ref54, blockNumber, state, tokenNetwork, partner, channel;\n\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref54 = epics_slicedToArray(_ref53, 2), blockNumber = _ref54[0].payload.blockNumber, state = _ref54[1];\n            _context2.t0 = regenerator_default.a.keys(state.channels);\n\n          case 2:\n            if ((_context2.t1 = _context2.t0()).done) {\n              _context2.next = 15;\n              break;\n            }\n\n            tokenNetwork = _context2.t1.value;\n            _context2.t2 = regenerator_default.a.keys(state.channels[tokenNetwork]);\n\n          case 5:\n            if ((_context2.t3 = _context2.t2()).done) {\n              _context2.next = 13;\n              break;\n            }\n\n            partner = _context2.t3.value;\n            channel = state.channels[tokenNetwork][partner];\n\n            if (!(channel.state === ChannelState.closed && channel.settleTimeout && // closed channels always have settleTimeout & closeBlock set\n            channel.closeBlock && blockNumber > channel.closeBlock + channel.settleTimeout)) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 11;\n            return channelSettleable({\n              settleableBlock: blockNumber\n            }, {\n              tokenNetwork: tokenNetwork,\n              partner: partner\n            });\n\n          case 11:\n            _context2.next = 5;\n            break;\n\n          case 13:\n            _context2.next = 2;\n            break;\n\n          case 15:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n};\n/**\n * When channel is settled, unlock any pending lock on-chain\n * TODO: check if it\'s worth it to also unlock partner\'s end\n * TODO: do it only if economically viable (and define what that means)\n *\n * @param action$ - Observable of channelSettle.success actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps members\n * @returns Empty observable\n */\n\nvar epics_channelUnlockEpic = function channelUnlockEpic(action$, state$, _ref55) {\n  var log = _ref55.log,\n      signer = _ref55.signer,\n      address = _ref55.address,\n      main = _ref55.main,\n      getTokenNetworkContract = _ref55.getTokenNetworkContract,\n      config$ = _ref55.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelSettle.success)), Object(filter["a" /* filter */])(function (action) {\n    var _a;\n\n    return !!(action.payload.confirmed && ((_a = action.payload.locks) === null || _a === void 0 ? void 0 : _a.length));\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(filter["a" /* filter */])(function (_ref56) {\n    var _ref57 = epics_slicedToArray(_ref56, 2),\n        action = _ref57[0],\n        state = _ref57[1];\n\n    var _a;\n\n    var channel = (_a = state.channels[action.meta.tokenNetwork]) === null || _a === void 0 ? void 0 : _a[action.meta.partner];\n    return !channel || !(\'id\' in channel) || channel.id !== action.payload.id;\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref58) {\n    var _ref59 = epics_slicedToArray(_ref58, 3),\n        action = _ref59[0],\n        subkey = _ref59[2].subkey;\n\n    var _action$meta7 = action.meta,\n        tokenNetwork = _action$meta7.tokenNetwork,\n        partner = _action$meta7.partner;\n    var tokenNetworkContract = getContractWithSigner(getTokenNetworkContract(tokenNetwork), chooseOnchainAccount({\n      signer: signer,\n      address: address,\n      main: main\n    }, subkey).signer);\n    var locks = Object(utils["concat"])(action.payload.locks.reduce(function (acc, lock) {\n      return [].concat(epics_toConsumableArray(acc), [encode(lock.expiration, 32), encode(lock.amount, 32), lock.secrethash]);\n    }, [])); // send unlock transaction\n\n    return Object(from["a" /* from */])(tokenNetworkContract.functions.unlock(action.payload.id, address, partner, locks)).pipe(assertTx(\'unlock\', ErrorCodes.CNL_ONCHAIN_UNLOCK_FAILED, {\n      log: log\n    }), Object(ignoreElements["a" /* ignoreElements */])(), Object(catchError["a" /* catchError */])(function (error) {\n      log.error(\'Error unlocking pending locks on-chain, ignoring\', error);\n      return empty["a" /* EMPTY */];\n    }));\n  }));\n};\n\nfunction checkPendingAction(action, provider, blockNumber, confirmationBlocks) {\n  return retryAsync$(function () {\n    return provider.getTransactionReceipt(action.payload.txHash);\n  }, provider.pollingInterval).pipe(Object(map["a" /* map */])(function (receipt) {\n    if ((receipt === null || receipt === void 0 ? void 0 : receipt.confirmations) !== undefined && receipt.confirmations >= confirmationBlocks) {\n      return Object.assign(Object.assign({}, action), {\n        // beyond setting confirmed, also re-set blockNumber,\n        // which may have changed on a reorg\n        payload: Object.assign(Object.assign({}, action.payload), {\n          txBlock: receipt.blockNumber,\n          confirmed: true\n        })\n      });\n    } else if (action.payload.txBlock + 2 * confirmationBlocks < blockNumber) {\n      // if this txs didn\'t get confirmed for more than 2*confirmationBlocks, it was removed\n      return Object.assign(Object.assign({}, action), {\n        payload: Object.assign(Object.assign({}, action.payload), {\n          confirmed: false\n        })\n      });\n    } // else, it seems removed, but give it twice confirmationBlocks to be picked up again\n\n  }), Object(filter["a" /* filter */])(isntNil));\n}\n/**\n * Process new blocks and re-emit confirmed or removed actions\n *\n * @param action$ - Observable of channelSettle actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps\n * @param deps.config$,deps.provider - RaidenEpicDeps members\n * @returns Observable of confirmed or removed actions\n */\n\n\nvar epics_confirmationEpic = function confirmationEpic(_ref60, state$, _ref61) {\n  epics_objectDestructuringEmpty(_ref60);\n\n  var config$ = _ref61.config$,\n      provider = _ref61.provider;\n  return Object(combineLatest["a" /* combineLatest */])(state$.pipe(pluckDistinct(\'blockNumber\')), state$.pipe(Object(pluck["a" /* pluck */])(\'pendingTxs\')), config$.pipe(pluckDistinct(\'confirmationBlocks\'))).pipe(Object(filter["a" /* filter */])(function (_ref62) {\n    var _ref63 = epics_slicedToArray(_ref62, 2),\n        pendingTxs = _ref63[1];\n\n    return pendingTxs.length > 0;\n  }), // exhaust will ignore blocks while concat$ is busy\n  Object(exhaustMap["a" /* exhaustMap */])(function (_ref64) {\n    var _ref65 = epics_slicedToArray(_ref64, 3),\n        blockNumber = _ref65[0],\n        pendingTxs = _ref65[1],\n        confirmationBlocks = _ref65[2];\n\n    return concat["a" /* concat */].apply(void 0, epics_toConsumableArray(pendingTxs // only txs/confirmable actions which are more than confirmationBlocks in the past\n    .filter(function (a) {\n      return a.payload.txBlock + confirmationBlocks <= blockNumber;\n    }).map(function (action) {\n      return checkPendingAction(action, provider, blockNumber, confirmationBlocks);\n    })));\n  }));\n};\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEvent.js\nvar fromEvent = __webpack_require__("6e77");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/toArray.js + 2 modules\nvar toArray = __webpack_require__("47ea");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/delay.js\nvar delay = __webpack_require__("bee6");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/repeatWhen.js\nvar repeatWhen = __webpack_require__("b4cc1");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/timeout.js + 2 modules\nvar timeout = __webpack_require__("d337");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js\nvar throwIfEmpty = __webpack_require__("b4d5");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/finalize.js\nvar finalize = __webpack_require__("d96a");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/delayWhen.js\nvar delayWhen = __webpack_require__("59b7");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/distinct.js\nvar distinct = __webpack_require__("a2ef");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/bufferTime.js\nvar bufferTime = __webpack_require__("6fb6");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/endWith.js\nvar endWith = __webpack_require__("de5c");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js\nvar mergeMapTo = __webpack_require__("8f41");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/observable/dom/fetch.js\nvar fetch = __webpack_require__("2527");\n\n// EXTERNAL MODULE: ./node_modules/lodash/find.js\nvar find = __webpack_require__("2769");\nvar find_default = /*#__PURE__*/__webpack_require__.n(find);\n\n// EXTERNAL MODULE: ./node_modules/lodash/minBy.js\nvar minBy = __webpack_require__("80f6");\nvar minBy_default = /*#__PURE__*/__webpack_require__.n(minBy);\n\n// EXTERNAL MODULE: ./node_modules/lodash/curry.js\nvar curry = __webpack_require__("dc46");\nvar curry_default = /*#__PURE__*/__webpack_require__.n(curry);\n\n// EXTERNAL MODULE: ../raiden-ts/node_modules/matrix-js-sdk/lib/utils.js\nvar lib_utils = __webpack_require__("fc5d");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/matrix.js\n\n/**\n * Return server name without schema or path\n *\n * @param server - any URL\n * @returns server URL with domain and port (if present), without schema, paths or query params\n */\n\nfunction getServerName(server) {\n  var match = /^(?:\\w*:?\\/\\/)?([^/#?&]+)/.exec(server);\n  return match && match[1];\n}\n/**\n * MatrixClient doesn\'t expose this API, but it does exist, so we create it here\n *\n * @param matrix - an already setup and started MatrixClient\n * @param userId - to fetch status/presence from\n * @returns Promise to object containing status data\n */\n\nfunction getUserPresence(matrix, userId) {\n  var path = Object(lib_utils["encodeUri"])(\'/presence/$userId/status\', {\n    $userId: userId\n  });\n  return matrix._http.authedRequest(undefined, \'GET\', path);\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/utils/lru.js\nfunction lru_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction lru_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction lru_createClass(Constructor, protoProps, staticProps) { if (protoProps) lru_defineProperties(Constructor.prototype, protoProps); if (staticProps) lru_defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Simple Map-based LRU cache\n *\n * @param max - Maximum size of cache\n */\nvar LruCache = /*#__PURE__*/function () {\n  function LruCache(max) {\n    lru_classCallCheck(this, LruCache);\n\n    this.values = new Map();\n    this.max = max;\n  }\n\n  lru_createClass(LruCache, [{\n    key: "get",\n    value: function get(key) {\n      var entry = this.values.get(key);\n\n      if (entry) {\n        // peek the entry, re-insert for LRU strategy\n        this.values.delete(key);\n        this.values.set(key, entry);\n      }\n\n      return entry;\n    }\n  }, {\n    key: "put",\n    value: function put(key, value) {\n      if (this.values.size >= this.max) {\n        // least-recently used cache eviction strategy\n        var keyToDelete = this.values.keys().next().value;\n        this.values.delete(keyToDelete);\n      }\n\n      this.values.set(key, value);\n    }\n  }]);\n\n  return LruCache;\n}();\n// CONCATENATED MODULE: ../raiden-ts/dist/transport/epics.js\n\n\nfunction transport_epics_toConsumableArray(arr) { return transport_epics_arrayWithoutHoles(arr) || transport_epics_iterableToArray(arr) || transport_epics_unsupportedIterableToArray(arr) || transport_epics_nonIterableSpread(); }\n\nfunction transport_epics_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction transport_epics_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction transport_epics_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return transport_epics_arrayLikeToArray(arr); }\n\nfunction transport_epics_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction epics_createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = transport_epics_unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction transport_epics_slicedToArray(arr, i) { return transport_epics_arrayWithHoles(arr) || transport_epics_iterableToArrayLimit(arr, i) || transport_epics_unsupportedIterableToArray(arr, i) || transport_epics_nonIterableRest(); }\n\nfunction transport_epics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction transport_epics_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return transport_epics_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return transport_epics_arrayLikeToArray(o, minLen); }\n\nfunction transport_epics_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction transport_epics_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction transport_epics_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar epics_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // unavailable just means the user didn\'t do anything over a certain amount of time, but they\'re\n// still there, so we consider the user as available/online then\n\nvar AVAILABLE = [\'online\', \'unavailable\'];\nvar userRe = /^@(0x[0-9a-f]{40})[.:]/i;\nvar DEVICE_ID = \'RAIDEN\';\n/**\n * Return the array of configured global rooms\n *\n * @param config - object to gather the list from\n * @returns Array of room names\n */\n\nfunction globalRoomNames(config) {\n  return [config.discoveryRoom, config.pfsRoom].filter(isntNil);\n}\n/**\n * Curried function (arity=2) which matches room passed as second argument based on roomId, name or\n * alias passed as first argument\n *\n * @param roomIdOrAlias - Room Id, name, canonical or normal alias for room\n * @param room - Room to test\n * @returns True if room matches term, false otherwise\n */\n\n\nvar roomMatch = curry_default()(function (roomIdOrAlias, room) {\n  return roomIdOrAlias === room.roomId || roomIdOrAlias === room.name || roomIdOrAlias === room.getCanonicalAlias() || room.getAliases().includes(roomIdOrAlias);\n});\n/**\n * Returns an observable to a (possibly pending) room matching roomId or some alias\n * This method doesn\'t try to join the room, just wait for it to show up in MatrixClient.\n *\n * @param matrix - Client instance to fetch room info from\n * @param roomIdOrAlias - room id or alias to look for\n * @returns Observable to populated room instance\n */\n\nfunction getRoom$(matrix, roomIdOrAlias) {\n  var room = matrix.getRoom(roomIdOrAlias);\n  if (!room) room = matrix.getRooms().find(roomMatch(roomIdOrAlias));\n  if (room) return Object(of["a" /* of */])(room);\n  return Object(fromEvent["a" /* fromEvent */])(matrix, \'Room\').pipe(Object(filter["a" /* filter */])(roomMatch(roomIdOrAlias)), Object(take["a" /* take */])(1));\n}\n/**\n * Joins the global broadcast rooms and returns the room ids.\n *\n * @param config - The {@link RaidenConfig} provides the broadcast room aliases for pfs and discovery.\n * @param matrix - The {@link MatrixClient} instance used to create the filter.\n * @returns Observable of the list of room ids for the the broadcast rooms.\n */\n\n\nfunction joinGlobalRooms(config, matrix) {\n  var serverName = getServerName(matrix.getHomeserverUrl());\n  return Object(from["a" /* from */])(globalRoomNames(config)).pipe(Object(map["a" /* map */])(function (globalRoom) {\n    return "#".concat(globalRoom, ":").concat(serverName);\n  }), Object(mergeMap["a" /* mergeMap */])(function (alias) {\n    return matrix.joinRoom(alias).then(function (room) {\n      // set alias in room state directly\n      // this trick is needed because global rooms aren\'t synced\n      room.currentState.setStateEvents([new browser_index["MatrixEvent"]({\n        type: \'m.room.aliases\',\n        state_key: serverName,\n        content: {\n          aliases: [alias]\n        },\n        event_id: "$local_".concat(Date.now()),\n        room_id: room.roomId,\n        sender: matrix.getUserId()\n      })]);\n      matrix.store.storeRoom(room);\n      return room;\n    });\n  }), Object(pluck["a" /* pluck */])(\'roomId\'), Object(toArray["a" /* toArray */])());\n}\n/**\n * Creates and returns a matrix filter. The filter reduces the size of the initial sync by\n * filtering out broadcast rooms, emphemeral messages like receipts etc.\n *\n * @param matrix - The {@link MatrixClient} instance used to create the filter.\n * @param roomIds - The ids of the rooms to filter out during sync.\n * @returns Observable of the {@link Filter} that was created.\n */\n\n\nfunction createFilter(matrix, roomIds) {\n  return Object(defer["a" /* defer */])(function () {\n    var roomFilter = {\n      not_rooms: roomIds,\n      ephemeral: {\n        not_types: [\'m.receipt\', \'m.typing\']\n      },\n      timeline: {\n        limit: 0,\n        not_senders: [matrix.getUserId()]\n      }\n    };\n    var filterDefinition = {\n      room: roomFilter\n    };\n    return matrix.createFilter(filterDefinition);\n  });\n}\n\nfunction startMatrixSync(action$, matrix, matrix$, config$) {\n  return action$.pipe(Object(filter["a" /* filter */])(matrixSetup.is), Object(take["a" /* take */])(1), Object(tap["a" /* tap */])(function () {\n    matrix$.next(matrix);\n    matrix$.complete();\n  }), Object(delay["a" /* delay */])(1e3), // wait 1s before starting matrix, so event listeners can be registered\n  Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref) {\n    var _ref2 = transport_epics_slicedToArray(_ref, 2),\n        config = _ref2[1];\n\n    return joinGlobalRooms(config, matrix).pipe(Object(mergeMap["a" /* mergeMap */])(function (roomIds) {\n      return createFilter(matrix, roomIds);\n    }), Object(mergeMap["a" /* mergeMap */])(function (filter) {\n      return matrix.startClient({\n        filter: filter\n      });\n    }));\n  }), Object(ignoreElements["a" /* ignoreElements */])());\n}\n/**\n * Search user directory for valid users matching a given address and return latest\n *\n * @param matrix - Matrix client to search users from\n * @param address - Address of interest\n * @param log - Logger object\n * @returns Observable of user with most recent presence\n */\n\n\nfunction searchAddressPresence$(matrix, address, _ref3) {\n  var log = _ref3.log;\n  return Object(defer["a" /* defer */])(function () {\n    return (// search for any user containing the address of interest in its userId\n      matrix.searchUserDirectory({\n        term: address.toLowerCase()\n      })\n    );\n  }).pipe( // for every result matches, verify displayName signature is address of interest\n  Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee(_ref4) {\n    var results, _iterator, _step, user, match, recovered;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            results = _ref4.results;\n            _iterator = epics_createForOfIteratorHelper(results);\n            _context.prev = 2;\n\n            _iterator.s();\n\n          case 4:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 24;\n              break;\n            }\n\n            user = _step.value;\n\n            if (user.display_name) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt("continue", 22);\n\n          case 8:\n            _context.prev = 8;\n            match = userRe.exec(user.user_id);\n\n            if (!(!match || Object(utils["getAddress"])(match[1]) !== address)) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt("continue", 22);\n\n          case 12:\n            recovered = Object(utils["verifyMessage"])(user.user_id, user.display_name);\n\n            if (!(!recovered || recovered !== address)) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt("continue", 22);\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context["catch"](8);\n            return _context.abrupt("continue", 22);\n\n          case 20:\n            _context.next = 22;\n            return user;\n\n          case 22:\n            _context.next = 4;\n            break;\n\n          case 24:\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t1 = _context["catch"](2);\n\n            _iterator.e(_context.t1);\n\n          case 29:\n            _context.prev = 29;\n\n            _iterator.f();\n\n            return _context.finish(29);\n\n          case 32:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 26, 29, 32], [8, 17]]);\n  })), Object(mergeMap["a" /* mergeMap */])(function (user) {\n    return getUserPresence(matrix, user.user_id).then(function (presence) {\n      return Object.assign(Object.assign({}, presence), user);\n    }).catch(function (err) {\n      return log.info(\'Error fetching user presence, ignoring:\', err), undefined;\n    });\n  }), Object(filter["a" /* filter */])(isntNil), Object(toArray["a" /* toArray */])(), // for all matched/verified users, get its presence through dedicated API\n  // it\'s required because, as the user events could already have been handled\n  // and filtered out by matrixPresenceUpdateEpic because it wasn\'t yet a\n  // user-of-interest, we could have missed presence updates, then we need to\n  // fetch it here directly, and from now on, that other epic will monitor its\n  // updates, and sort by most recently seen user\n  Object(map["a" /* map */])(function (presences) {\n    if (!presences.length) throw new error_RaidenError(ErrorCodes.TRNS_NO_VALID_USER, {\n      address: address\n    });\n    return minBy_default()(presences, \'last_active_ago\');\n  }));\n}\n/**\n * Parse a caps string in the format \'k1,k2=v2,k3="v3"\' to { k1: true, k2: v2, k3: v3 } object\n *\n * @param caps - caps string\n * @returns Caps mapping object\n */\n\n\nfunction parseCaps(caps) {\n  var _a;\n\n  if (!caps) return;\n  var result = {};\n\n  try {\n    // this regex splits by comma, but respecting strings inside double-quotes\n    var _iterator2 = epics_createForOfIteratorHelper(caps.split(/,(?=(?:[^\\"]*\\"[^\\"]*\\")*[^\\"]*$)/g)),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var cap = _step2.value;\n        var match = cap.match(/^\\s*([^=]+)(?: ?= ?"?(.*?)"?\\s*)?$/);\n        if (match) result[match[1]] = (_a = match[2]) !== null && _a !== void 0 ? _a : true;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return result;\n  } catch (err) {}\n}\n\nfunction stringifyCaps(caps) {\n  return Object.entries(caps).filter(function (_ref5) {\n    var _ref6 = transport_epics_slicedToArray(_ref5, 2),\n        v = _ref6[1];\n\n    return typeof v !== \'boolean\' || v;\n  }).map(function (_ref7) {\n    var _ref8 = transport_epics_slicedToArray(_ref7, 2),\n        k = _ref8[0],\n        v = _ref8[1];\n\n    return typeof v === \'boolean\' ? k : "".concat(k, "=\\"").concat(v, "\\"");\n  }).join(\',\');\n}\n/**\n * Returns an observable which keeps inviting userId to roomId while user doesn\'t join\n *\n * If user already joined, completes immediatelly.\n *\n * @param matrix - client instance\n * @param roomId - room to invite user to\n * @param userId - user to be invited\n * @param config$ - Observable of config object containing httpTimeout used as iteration delay\n * @returns Cold observable which keep inviting user if needed and then completes.\n */\n\n\nfunction inviteLoop$(matrix, roomId, userId, config$, _ref9) {\n  var log = _ref9.log;\n  return Object(defer["a" /* defer */])(function () {\n    var room = matrix.getRoom(roomId);\n    return room ? // use room already present in matrix instance\n    Object(of["a" /* of */])(room) : // wait for room\n    Object(fromEvent["a" /* fromEvent */])(matrix, \'Room\').pipe(Object(filter["a" /* filter */])(function (room) {\n      return room.roomId === roomId;\n    }), Object(take["a" /* take */])(1));\n  }).pipe( // stop if user already a room member\n  Object(filter["a" /* filter */])(function (room) {\n    var member = room.getMember(userId);\n    return !member || member.membership !== \'join\';\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref10) {\n    var _ref11 = transport_epics_slicedToArray(_ref10, 2),\n        httpTimeout = _ref11[1].httpTimeout;\n\n    return (// defer here ensures invite is re-done on repeat (re-subscription)\n      Object(defer["a" /* defer */])(function () {\n        return matrix.invite(roomId, userId).catch(log.warn.bind(log, \'Error inviting\'));\n      }).pipe( // while shouldn\'t stop (by unsubscribe or takeUntil)\n      Object(repeatWhen["a" /* repeatWhen */])(function (completed$) {\n        return completed$.pipe(Object(delay["a" /* delay */])(httpTimeout));\n      }), Object(takeUntil["a" /* takeUntil */])( // stop repeat+defer loop above when user joins\n      Object(fromEvent["a" /* fromEvent */])(matrix, \'RoomMember.membership\', function (_ref12, member) {\n        transport_epics_objectDestructuringEmpty(_ref12);\n\n        return member;\n      }).pipe(Object(filter["a" /* filter */])(function (member) {\n        return member.roomId === roomId && member.userId === userId && member.membership === \'join\';\n      }))))\n    );\n  }));\n}\n/**\n * From a yaml list string, return as Array\n * E.g. yamlListToArray(`\n * # comment\n *   - test1\n *   - test2\n *   - test3\n * `) === [\'test1\', \'test2\', \'test3\']\n *\n * @param yml - String containing only YAML list\n * @returns List of strings inside yml-encoded text\n */\n\n\nfunction yamlListToArray(yml) {\n  // match all strings starting with optional spaces followed by a dash + space\n  // capturing only the content of the list item, trimming spaces\n  var reg = /^\\s*-\\s*(.+?)\\s*$/gm;\n  var results = [];\n  var match;\n\n  while (match = reg.exec(yml)) {\n    results.push(match[1]);\n  }\n\n  return results;\n}\n/**\n * Given a server name (schema defaults to https:// and is prepended if missing), returns HTTP GET\n * round trip time (time to response)\n *\n * @param server - Server name with or without schema\n * @param httpTimeout - Optional timeout for the HTTP request\n * @returns Promise to a { server, rtt } object, where `rtt` may be NaN\n */\n\n\nfunction matrixRTT$(server, httpTimeout) {\n  if (!server.includes(\'://\')) server = \'https://\' + server;\n  return Object(defer["a" /* defer */])(function () {\n    var start = Date.now();\n    return Object(fetch["a" /* fromFetch */])(server + \'/_matrix/client/versions\').pipe(Object(timeout["a" /* timeout */])(httpTimeout), Object(map["a" /* map */])(function (_ref13) {\n      var ok = _ref13.ok;\n      return ok ? Date.now() : NaN;\n    }), Object(catchError["a" /* catchError */])(function () {\n      return Object(of["a" /* of */])(NaN);\n    }), Object(map["a" /* map */])(function (end) {\n      return {\n        server: server,\n        rtt: end - start\n      };\n    }));\n  });\n}\n/**\n * Returns an observable of servers, sorted by response time\n *\n * @param matrixServerLookup - URL containing an YAML list of servers url\n * @param httpTimeout - httpTimeout to limit queries\n * @returns Observable of { server, rtt } objects, emitted in increasing rtt order\n */\n\n\nfunction fetchSortedMatrixServers$(matrixServerLookup, httpTimeout) {\n  var _this = this;\n\n  return Object(fetch["a" /* fromFetch */])(matrixServerLookup).pipe(Object(mergeMap["a" /* mergeMap */])(function (response) {\n    return epics_awaiter(_this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n      return regenerator_default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              assert(response.ok, "Could not fetch server list from \\"".concat(matrixServerLookup, "\\" => ").concat(response.status));\n              return _context2.abrupt("return", response.text());\n\n            case 2:\n            case "end":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  }), Object(timeout["a" /* timeout */])(httpTimeout), Object(mergeMap["a" /* mergeMap */])(function (text) {\n    return yamlListToArray(text);\n  }), Object(mergeMap["a" /* mergeMap */])(function (server) {\n    return matrixRTT$(server, httpTimeout);\n  }), Object(toArray["a" /* toArray */])(), Object(mergeMap["a" /* mergeMap */])(function (rtts) {\n    return sortBy_default()(rtts, [\'rtt\']);\n  }), Object(filter["a" /* filter */])(function (_ref14) {\n    var rtt = _ref14.rtt;\n    return !isNaN(rtt);\n  }), Object(throwIfEmpty["a" /* throwIfEmpty */])(function () {\n    return new error_RaidenError(ErrorCodes.TRNS_NO_MATRIX_SERVERS);\n  }));\n}\n/**\n * Validate and setup a MatrixClient connected to server, possibly using previous \'setup\' data\n * May error if anything goes wrong.\n *\n * @param server - server URL, with schema\n * @param setup - optional previous setup/credentials data\n * @param deps - RaidenEpicDeps-like/partial object\n * @param deps.address - Our address (to compose matrix user)\n * @param deps.signer - Signer to be used to sign password and displayName\n * @param caps - Transport capabilities to set in user\'s avatar_url\n * @returns Observable of one { matrix, server, setup } object\n */\n\n\nfunction setupMatrixClient$(server, setup, _ref15, caps) {\n  var address = _ref15.address,\n      signer = _ref15.signer;\n  var serverName = getServerName(server);\n  if (!serverName) throw new error_RaidenError(ErrorCodes.TRNS_NO_SERVERNAME, {\n    server: server\n  });\n  return Object(defer["a" /* defer */])(function () {\n    if (setup) {\n      // if matrixSetup was already issued before, and credentials are already in state\n      var matrix = Object(browser_index["createClient"])({\n        baseUrl: server,\n        userId: setup.userId,\n        accessToken: setup.accessToken,\n        deviceId: setup.deviceId\n      });\n      return Object(of["a" /* of */])({\n        matrix: matrix,\n        server: server,\n        setup: setup\n      });\n    } else {\n      var _matrix = Object(browser_index["createClient"])({\n        baseUrl: server\n      });\n\n      var userName = address.toLowerCase(),\n          userId = "@".concat(userName, ":").concat(serverName); // create password as signature of serverName, then try login or register\n\n      return Object(from["a" /* from */])(signer.signMessage(serverName)).pipe(Object(mergeMap["a" /* mergeMap */])(function (password) {\n        return Object(from["a" /* from */])(_matrix.login(\'m.login.password\', {\n          user: userName,\n          password: password,\n          device_id: DEVICE_ID\n        })).pipe(Object(catchError["a" /* catchError */])(function () {\n          return _matrix.register(userName, password);\n        }));\n      }), Object(mergeMap["a" /* mergeMap */])(function (_ref16) {\n        var access_token = _ref16.access_token,\n            device_id = _ref16.device_id;\n        // matrix.register implementation doesn\'t set returned credentials\n        // which would require an unnecessary additional login request if we didn\'t\n        // set it here, and login doesn\'t set deviceId, so we set all credential\n        // parameters again here after successful login or register\n        _matrix.deviceId = device_id;\n        _matrix._http.opts.accessToken = access_token;\n        _matrix.credentials = {\n          userId: userId\n        }; // displayName must be signature of full userId for our messages to be accepted\n\n        return Object(from["a" /* from */])(signer.signMessage(userId)).pipe(Object(map["a" /* map */])(function (signedUserId) {\n          return {\n            matrix: _matrix,\n            server: server,\n            setup: {\n              userId: userId,\n              accessToken: access_token,\n              deviceId: device_id,\n              displayName: signedUserId\n            }\n          };\n        }));\n      }));\n    }\n  }).pipe( // the APIs below are authenticated, and therefore also act as validator\n  Object(mergeMap["a" /* mergeMap */])(function (_ref17) {\n    var matrix = _ref17.matrix,\n        server = _ref17.server,\n        setup = _ref17.setup;\n    return (// ensure displayName is set even on restarts\n      Object(merge["a" /* merge */])(Object(from["a" /* from */])(matrix.setDisplayName(setup.displayName)), Object(from["a" /* from */])(matrix.setPresence({\n        presence: \'online\',\n        status_msg: \'\'\n      })), caps ? Object(from["a" /* from */])(matrix.setAvatarUrl(stringifyCaps(caps))) : empty["a" /* EMPTY */]).pipe(Object(mapTo["a" /* mapTo */])({\n        matrix: matrix,\n        server: server,\n        setup: setup\n      }))\n    );\n  }));\n}\n/**\n * Initialize matrix transport\n * The matrix client instance will be outputed to RaidenEpicDeps.matrix$ AsyncSubject\n * The setup info (including credentials, for persistence) will be the matrixSetup output action\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param address,network,signer,matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixSetup generated by initializing matrix client\n */\n\n\nvar epics_initMatrixEpic = function initMatrixEpic(action$, _ref18, _ref19) {\n  transport_epics_objectDestructuringEmpty(_ref18);\n\n  var address = _ref19.address,\n      signer = _ref19.signer,\n      matrix$ = _ref19.matrix$,\n      latest$ = _ref19.latest$,\n      config$ = _ref19.config$;\n  return Object(combineLatest["a" /* combineLatest */])([latest$.pipe(Object(pluck["a" /* pluck */])(\'state\')), config$]).pipe(Object(first["a" /* first */])(), // at startup\n  Object(mergeMap["a" /* mergeMap */])(function (_ref20) {\n    var _ref21 = transport_epics_slicedToArray(_ref20, 2),\n        state = _ref21[0],\n        _ref21$ = _ref21[1],\n        matrixServer = _ref21$.matrixServer,\n        matrixServerLookup = _ref21$.matrixServerLookup,\n        httpTimeout = _ref21$.httpTimeout,\n        caps = _ref21$.caps;\n\n    var _a, _b;\n\n    var server = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.server,\n        setup = (_b = state.transport.matrix) === null || _b === void 0 ? void 0 : _b.setup;\n    var servers$Array = [];\n\n    if (matrixServer) {\n      // if config.matrixServer is set, we must use it (possibly re-using stored credentials,\n      // if matching), not fetch from lookup address\n      if (matrixServer === server) servers$Array.push(Object(of["a" /* of */])({\n        server: server,\n        setup: setup\n      }));else servers$Array.push(Object(of["a" /* of */])({\n        server: matrixServer\n      }));\n    } else {\n      // previously used server\n      if (server) servers$Array.push(Object(of["a" /* of */])({\n        server: server,\n        setup: setup\n      })); // fetched servers list\n      // notice it may include stored server again, but no stored setup, which could be the\n      // cause of the  first failure, so we allow it to try again (not necessarily first)\n\n      servers$Array.push(fetchSortedMatrixServers$(matrixServerLookup, httpTimeout));\n    }\n\n    var lastError;\n\n    var andSuppress = function andSuppress(err) {\n      return lastError = err, empty["a" /* EMPTY */];\n    }; // on [re-]subscription (defer), pops next observable and subscribe to it\n\n\n    return Object(defer["a" /* defer */])(function () {\n      return servers$Array.shift() || empty["a" /* EMPTY */];\n    }).pipe(Object(catchError["a" /* catchError */])(andSuppress), // servers$ may error, so store lastError\n    Object(concatMap["a" /* concatMap */])(function (_ref22) {\n      var server = _ref22.server,\n          setup = _ref22.setup;\n      return (// serially, try setting up client and validate its credential\n        setupMatrixClient$(server, setup, {\n          address: address,\n          signer: signer\n        }, caps).pipe( // store and suppress any \'setupMatrixClient$\' error\n        Object(catchError["a" /* catchError */])(andSuppress))\n      );\n    }), // on first setupMatrixClient$\'s success, emit, complete and unsubscribe\n    Object(first["a" /* first */])(), Object(tap["a" /* tap */])(function (_ref23) {\n      var matrix = _ref23.matrix;\n      return matrix.setMaxListeners(30);\n    }), // with errors suppressed, only possible error here is \'no element in sequence\'\n    Object(retryWhen["a" /* retryWhen */])(function (err$) {\n      return (// if there\'re more servers$ observables in queue, emit once to retry from defer;\n        // else, errors output with lastError to unsubscribe\n        err$.pipe(Object(mergeMap["a" /* mergeMap */])(function () {\n          return servers$Array.length ? Object(of["a" /* of */])(null) : Object(throwError["a" /* throwError */])(lastError);\n        }))\n      );\n    }));\n  }), // on success\n  Object(mergeMap["a" /* mergeMap */])(function (_ref24) {\n    var matrix = _ref24.matrix,\n        server = _ref24.server,\n        setup = _ref24.setup;\n    return Object(merge["a" /* merge */])( // wait for matrixSetup through reducer, then resolves matrix$ with client and starts it\n    startMatrixSync(action$, matrix, matrix$, config$), // emit matrixSetup in parallel to be persisted in state\n    Object(of["a" /* of */])(matrixSetup({\n      server: server,\n      setup: setup\n    })), // monitor config.logger & disable or re-enable matrix\'s logger accordingly\n    config$.pipe(pluckDistinct(\'logger\'), Object(tap["a" /* tap */])(function (logger) {\n      return lib_logger["logger"].setLevel(logger || \'silent\', false);\n    }), Object(ignoreElements["a" /* ignoreElements */])()));\n  }));\n};\n/**\n * Calls matrix.stopClient when raiden is shutting down, i.e. action$ completes\n *\n * @param action$ - Observable of matrixSetup actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Empty observable (whole side-effect on matrix instance)\n */\n\nvar epics_matrixShutdownEpic = function matrixShutdownEpic(action$, _ref25, _ref26) {\n  transport_epics_objectDestructuringEmpty(_ref25);\n\n  var matrix$ = _ref26.matrix$;\n  return matrix$.pipe(Object(mergeMap["a" /* mergeMap */])(function (matrix) {\n    return action$.pipe(Object(finalize["a" /* finalize */])(function () {\n      matrix.setPresence({\n        presence: \'offline\',\n        status_msg: \'\'\n      }).catch(function () {\n        /* stopping, ignore exceptions */\n      });\n      matrix.stopClient();\n    }));\n  }), Object(ignoreElements["a" /* ignoreElements */])());\n};\n/**\n * Handles MatrixRequestMonitorPresenceAction and emits a MatrixPresenceUpdateAction\n * If presence is already known, emits it, else fetch from user profile\n * Even if the presence stays the same, we emit a MatrixPresenceUpdateAction, as this may be a\n * request being waited by a promise or something like that\n * IOW: every request should be followed by a presence update or a failed action, but presence\n * updates may happen later without new requests (e.g. when the user goes offline)\n *\n * @param action$ - Observable of matrixPresence.request actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of presence updates or fail action\n */\n\nvar epics_matrixMonitorPresenceEpic = function matrixMonitorPresenceEpic(action$, _ref27, _ref28) {\n  transport_epics_objectDestructuringEmpty(_ref27);\n\n  var matrix$ = _ref28.matrix$,\n      latest$ = _ref28.latest$,\n      log = _ref28.log;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(matrixPresence.request)), // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n  Object(mergeMap["a" /* mergeMap */])(function (action) {\n    return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n      return {\n        action: action,\n        matrix: matrix\n      };\n    }));\n  }), Object(groupBy["a" /* groupBy */])(function (_ref29) {\n    var action = _ref29.action;\n    return action.meta.address;\n  }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n    return grouped$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(latest$.pipe(pluckDistinct(\'presences\'))), // if we\'re already fetching presence for this address, no need to fetch again\n    Object(exhaustMap["a" /* exhaustMap */])(function (_ref30) {\n      var _ref31 = transport_epics_slicedToArray(_ref30, 2),\n          _ref31$ = _ref31[0],\n          action = _ref31$.action,\n          matrix = _ref31$.matrix,\n          presences = _ref31[1];\n\n      return action.meta.address in presences ? // we already monitored/saw this user\'s presence\n      Object(of["a" /* of */])(presences[action.meta.address]) : searchAddressPresence$(matrix, action.meta.address, {\n        log: log\n      }).pipe(Object(map["a" /* map */])(function (_ref32) {\n        var presence = _ref32.presence,\n            userId = _ref32.user_id,\n            avatar_url = _ref32.avatar_url;\n        return matrixPresence.success({\n          userId: userId,\n          available: AVAILABLE.includes(presence),\n          ts: Date.now(),\n          caps: parseCaps(avatar_url)\n        }, action.meta);\n      }), Object(catchError["a" /* catchError */])(function (err) {\n        return Object(of["a" /* of */])(matrixPresence.failure(err, action.meta));\n      }));\n    }));\n  }));\n};\n/**\n * Monitor peers matrix presence from User.presence events\n * We aggregate all users of interest (i.e. for which a monitor request was emitted at some point)\n * and emit presence updates for any presence change happening to a user validating to this address\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of presence updates\n */\n\nvar epics_matrixPresenceUpdateEpic = function matrixPresenceUpdateEpic(action$, _ref33, _ref34) {\n  transport_epics_objectDestructuringEmpty(_ref33);\n\n  var log = _ref34.log,\n      matrix$ = _ref34.matrix$,\n      latest$ = _ref34.latest$;\n  return matrix$.pipe( // when matrix finishes initialization, register to matrix presence events\n  Object(switchMap["a" /* switchMap */])(function (matrix) {\n    return (// matrix\'s \'User.presence\' sometimes fail to fire, but generic \'event\' is always fired,\n      // and User (retrieved via matrix.getUser) is up-to-date before \'event\' emits\n      Object(fromEvent["a" /* fromEvent */])(matrix, \'event\').pipe(Object(map["a" /* map */])(function (event) {\n        return {\n          event: event,\n          matrix: matrix\n        };\n      }))\n    );\n  }), Object(filter["a" /* filter */])(function (_ref35) {\n    var event = _ref35.event;\n    return event.getType() === \'m.presence\';\n  }), // parse peer address from userId\n  Object(map["a" /* map */])(function (_ref36) {\n    var event = _ref36.event,\n        matrix = _ref36.matrix;\n    // as \'event\' is emitted after user is (created and) updated, getUser always returns it\n    var user = matrix.getUser(event.getSender());\n    if (!user || !user.presence) return;\n    var match = userRe.exec(user.userId),\n        peerAddress = match && match[1];\n    if (!peerAddress) return; // getAddress will convert any valid address into checksummed-format\n\n    var address = Object(utils["getAddress"])(peerAddress);\n    if (!address) return;\n    return {\n      matrix: matrix,\n      user: user,\n      address: address\n    };\n  }), // filter out events without userId in the right format (startWith hex-address)\n  Object(filter["a" /* filter */])(isntNil), Object(withLatestFrom["a" /* withLatestFrom */])( // observable of all addresses whose presence monitoring was requested since init\n  action$.pipe(Object(filter["a" /* filter */])(isActionOf(matrixPresence.request)), Object(scan["a" /* scan */])(function (toMonitor, request) {\n    return toMonitor.add(request.meta.address);\n  }, new Set()), Object(startWith["a" /* startWith */])(new Set())), // known presences as { address: <last seen MatrixPresenceUpdateAction> } mapping\n  latest$.pipe(pluckDistinct(\'presences\'))), // filter out events from users we don\'t care about\n  // i.e.: presence monitoring never requested\n  Object(filter["a" /* filter */])(function (_ref37) {\n    var _ref38 = transport_epics_slicedToArray(_ref37, 2),\n        address = _ref38[0].address,\n        toMonitor = _ref38[1];\n\n    return toMonitor.has(address);\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref39) {\n    var _ref40 = transport_epics_slicedToArray(_ref39, 3),\n        _ref40$ = _ref40[0],\n        matrix = _ref40$.matrix,\n        user = _ref40$.user,\n        address = _ref40$.address,\n        presences = _ref40[2];\n\n    // first filter can\'t tell typescript this property will always be set!\n    var userId = user.userId,\n        presence = user.presence,\n        available = AVAILABLE.includes(presence);\n    if (address in presences && presences[address].payload.userId === userId && presences[address].payload.available === available) // even if signature verification passes, this wouldn\'t change presence, so return early\n      return empty["a" /* EMPTY */]; // fetch profile info if user have no valid displayName set\n\n    var profile$ = Signature.is(user.displayName) ? Object(of["a" /* of */])({\n      displayname: user.displayName,\n      avatar_url: user.avatarUrl\n    }) : Object(defer["a" /* defer */])(function () {\n      return matrix.getProfileInfo(userId);\n    });\n    return profile$.pipe(Object(map["a" /* map */])(function (profile) {\n      var _a; // errors raised here will be logged and ignored on catchError below\n\n\n      assert(profile === null || profile === void 0 ? void 0 : profile.displayname, \'no displayname\'); // ecrecover address, validating displayName is the signature of the userId\n\n      var recovered = Object(utils["verifyMessage"])(userId, profile.displayname);\n      assert(recovered === address, "invalid displayname signature: ".concat(recovered, " !== ").concat(address));\n      return matrixPresence.success({\n        userId: userId,\n        available: available,\n        ts: (_a = user.lastPresenceTs) !== null && _a !== void 0 ? _a : Date.now(),\n        caps: parseCaps(profile.avatar_url)\n      }, {\n        address: recovered\n      });\n    }), Object(catchError["a" /* catchError */])(function (err) {\n      return log.debug(\'Error validating presence event, ignoring\', err), empty["a" /* EMPTY */];\n    }));\n  })).pipe(Object(withLatestFrom["a" /* withLatestFrom */])(latest$), // filter out if presence update is to offline, and address became online in another user\n  Object(filter["a" /* filter */])(function (_ref41) {\n    var _ref42 = transport_epics_slicedToArray(_ref41, 2),\n        action = _ref42[0],\n        presences = _ref42[1].presences;\n\n    return action.payload.available || !(action.meta.address in presences) || !presences[action.meta.address].payload.available || action.payload.userId === presences[action.meta.address].payload.userId;\n  }), Object(pluck["a" /* pluck */])(0));\n};\n/**\n * Create room (if needed) for a transfer\'s target, channel\'s partner or, as a fallback, for any\n * recipient of a messageSend.request action\n *\n * @param action$ - Observable of transferSigned|channelMonitor|messageSend.request actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixRoom actions\n */\n\nvar epics_matrixCreateRoomEpic = function matrixCreateRoomEpic(action$, _ref43, _ref44) {\n  transport_epics_objectDestructuringEmpty(_ref43);\n\n  var log = _ref44.log,\n      matrix$ = _ref44.matrix$,\n      latest$ = _ref44.latest$;\n  return (// actual output observable, selects addresses of interest from actions\n    action$.pipe( // ensure there\'s a room for address of interest for each of these actions\n    // matrixRoomLeave ensures a new room is created if all we had are forgotten/left\n    Object(filter["a" /* filter */])(isActionOf([transferSigned, channelMonitor, messageSend.request, matrixRoomLeave])), Object(map["a" /* map */])(function (action) {\n      return isActionOf(transferSigned, action) ? action.payload.message.target : isActionOf(channelMonitor, action) ? action.meta.partner : action.meta.address;\n    }), // groupby+mergeMap ensures different addresses are processed in parallel, and also\n    // prevents one stuck address observable (e.g. presence delayed) from holding whole queue\n    Object(groupBy["a" /* groupBy */])(function (address) {\n      return address;\n    }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n      return grouped$.pipe( // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n      Object(mergeMap["a" /* mergeMap */])(function (address) {\n        return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n          return {\n            address: address,\n            matrix: matrix\n          };\n        }));\n      }), // exhaustMap is used to prevent bursts of actions for a given address (eg. on startup)\n      // of creating multiple rooms for same address, so we ignore new address items while\n      // previous is being processed. If user roams, matrixInviteEpic will re-invite\n      Object(exhaustMap["a" /* exhaustMap */])(function (_ref45) {\n        var address = _ref45.address,\n            matrix = _ref45.matrix;\n        return (// presencesStateReplay$+take(1) acts like withLatestFrom with cached result\n          latest$.pipe( // wait for user to be monitored\n          Object(filter["a" /* filter */])(function (_ref46) {\n            var presences = _ref46.presences;\n            return address in presences;\n          }), Object(take["a" /* take */])(1), // if there\'s already a room in state for address, skip\n          Object(filter["a" /* filter */])(function (_ref47) {\n            var state = _ref47.state;\n\n            var _a, _b, _c;\n\n            return !((_c = (_b = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.rooms) === null || _b === void 0 ? void 0 : _b[address]) === null || _c === void 0 ? void 0 : _c[0]);\n          }), // else, create a room, invite known user and persist roomId in state\n          Object(mergeMap["a" /* mergeMap */])(function (_ref48) {\n            var presences = _ref48.presences;\n            return matrix.createRoom({\n              visibility: \'private\',\n              invite: [presences[address].payload.userId]\n            });\n          }), Object(map["a" /* map */])(function (_ref49) {\n            var roomId = _ref49.room_id;\n            return matrixRoom({\n              roomId: roomId\n            }, {\n              address: address\n            });\n          }), Object(catchError["a" /* catchError */])(function (err) {\n            return log.error(\'Error creating room, ignoring\', err), empty["a" /* EMPTY */];\n          }))\n        );\n      }));\n    }))\n  );\n};\n/**\n * Invites users coming online to main room we may have with them\n *\n * This also keeps retrying inviting every config.httpTimeout (default=30s) while user doesn\'t\n * accept our invite or don\'t invite or write to us to/in another room.\n *\n * @param action$ - Observable of matrixPresence.success actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps\n * @param deps.matrix$ - MatrixClient AsyncSubject\n * @param deps.config$ - RaidenConfig BehaviorSubject\n * @returns Empty observable (whole side-effect on matrix instance)\n */\n\nvar epics_matrixInviteEpic = function matrixInviteEpic(action$, _ref50, _ref51) {\n  transport_epics_objectDestructuringEmpty(_ref50);\n\n  var matrix$ = _ref51.matrix$,\n      config$ = _ref51.config$,\n      latest$ = _ref51.latest$,\n      log = _ref51.log;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(matrixPresence.success)), Object(groupBy["a" /* groupBy */])(function (a) {\n    return a.meta.address;\n  }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n    return (// grouped$ is one observable of presence actions per partners address\n      grouped$.pipe( // action comes only after matrix$ is started, so it\'s safe to use withLatestFrom\n      Object(withLatestFrom["a" /* withLatestFrom */])(matrix$), // switchMap on new presence action for address\n      Object(switchMap["a" /* switchMap */])(function (_ref52) {\n        var _ref53 = transport_epics_slicedToArray(_ref52, 2),\n            action = _ref53[0],\n            matrix = _ref53[1];\n\n        return (// if not available, do nothing (and unsubscribe from previous observable)\n          !action.payload.available ? empty["a" /* EMPTY */] : latest$.pipe(Object(map["a" /* map */])(function (_ref54) {\n            var state = _ref54.state;\n\n            var _a, _b, _c;\n\n            return (_c = (_b = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.rooms) === null || _b === void 0 ? void 0 : _b[action.meta.address]) === null || _c === void 0 ? void 0 : _c[0];\n          }), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(switchMap["a" /* switchMap */])(function (roomId) {\n            return Object(concat["a" /* concat */])(Object(of["a" /* of */])(roomId), !roomId ? empty["a" /* EMPTY */] : // re-trigger invite loop if user leaves\n            Object(fromEvent["a" /* fromEvent */])(matrix, \'RoomMember.membership\', function (_ref55, member) {\n              transport_epics_objectDestructuringEmpty(_ref55);\n\n              return member;\n            }).pipe(Object(filter["a" /* filter */])(function (member) {\n              return member.roomId === roomId && member.userId === action.payload.userId && member.membership === \'leave\';\n            }), Object(mapTo["a" /* mapTo */])(roomId)));\n          }), // switchMap on main roomId change\n          Object(switchMap["a" /* switchMap */])(function (roomId) {\n            return !roomId ? // if roomId not set, do nothing and unsubscribe\n            empty["a" /* EMPTY */] : // while subscribed and user didn\'t join, invite every httpTimeout=30s\n            inviteLoop$(matrix, roomId, action.payload.userId, config$, {\n              log: log\n            });\n          }))\n        );\n      }))\n    );\n  }), Object(ignoreElements["a" /* ignoreElements */])());\n};\n/**\n * Handle invites sent to us and accepts them iff sent by a monitored user\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixRoom actions\n */\n\nvar epics_matrixHandleInvitesEpic = function matrixHandleInvitesEpic(_ref56, _ref57, _ref58) {\n  transport_epics_objectDestructuringEmpty(_ref56);\n\n  transport_epics_objectDestructuringEmpty(_ref57);\n\n  var log = _ref58.log,\n      matrix$ = _ref58.matrix$,\n      config$ = _ref58.config$,\n      latest$ = _ref58.latest$;\n  return matrix$.pipe( // when matrix finishes initialization, register to matrix invite events\n  Object(switchMap["a" /* switchMap */])(function (matrix) {\n    return Object(fromEvent["a" /* fromEvent */])(matrix, \'RoomMember.membership\', function (event, member) {\n      return {\n        event: event,\n        member: member,\n        matrix: matrix\n      };\n    });\n  }), Object(filter["a" /* filter */])( // filter for invite events to us\n  function (_ref59) {\n    var member = _ref59.member,\n        matrix = _ref59.matrix;\n    return member.userId === matrix.getUserId() && member.membership === \'invite\';\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref60) {\n    var _ref61 = transport_epics_slicedToArray(_ref60, 2),\n        _ref61$ = _ref61[0],\n        event = _ref61$.event,\n        member = _ref61$.member,\n        matrix = _ref61$.matrix,\n        httpTimeout = _ref61[1].httpTimeout;\n\n    var sender = event.getSender(),\n        senderPresence$ = latest$.pipe(pluckDistinct(\'presences\'), Object(map["a" /* map */])(function (presences) {\n      return find_default()(presences, function (p) {\n        return p.payload.userId === sender;\n      });\n    }), Object(filter["a" /* filter */])(isntNil), Object(take["a" /* take */])(1), // Don\'t wait more than some arbitrary time for this sender presence update to show\n    // up; completes without emitting anything otherwise, ending this pipeline.\n    // This also works as a filter to continue processing invites only for monitored\n    // users, as it\'ll complete without emitting if no MatrixPresenceUpdateAction is\n    // found for sender in time\n    Object(takeUntil["a" /* takeUntil */])(Object(timer["a" /* timer */])(httpTimeout)));\n    return senderPresence$.pipe(Object(map["a" /* map */])(function (senderPresence) {\n      return {\n        matrix: matrix,\n        member: member,\n        senderPresence: senderPresence\n      };\n    }));\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref62) {\n    var matrix = _ref62.matrix,\n        member = _ref62.member,\n        senderPresence = _ref62.senderPresence;\n    return (// join room and emit MatrixRoomAction to make it default/first option for sender address\n      Object(from["a" /* from */])(matrix.joinRoom(member.roomId, {\n        syncRoom: true\n      })).pipe(Object(mapTo["a" /* mapTo */])(matrixRoom({\n        roomId: member.roomId\n      }, {\n        address: senderPresence.meta.address\n      })), Object(catchError["a" /* catchError */])(function (err) {\n        return log.error(\'Error joining invited room, ignoring\', err), empty["a" /* EMPTY */];\n      }))\n    );\n  }));\n};\n/**\n * Leave any excess room for a partner when creating or joining a new one.\n * Excess rooms are LRU beyond a given threshold (configurable, default=3) in address\'s rooms\n * queue and are checked (only) when a new one is added to it.\n *\n * @param action$ - Observable of matrixRoom actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixRoomLeave actions\n */\n\nvar epics_matrixLeaveExcessRoomsEpic = function matrixLeaveExcessRoomsEpic(action$, state$, _ref63) {\n  var log = _ref63.log,\n      matrix$ = _ref63.matrix$,\n      config$ = _ref63.config$;\n  return action$.pipe( // act whenever a new room is added to the address queue in state\n  Object(filter["a" /* filter */])(isActionOf(matrixRoom)), // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n  Object(mergeMap["a" /* mergeMap */])(function (action) {\n    return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n      return {\n        action: action,\n        matrix: matrix\n      };\n    }));\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), Object(mergeMap["a" /* mergeMap */])(function (_ref64) {\n    var _ref65 = transport_epics_slicedToArray(_ref64, 3),\n        _ref65$ = _ref65[0],\n        action = _ref65$.action,\n        matrix = _ref65$.matrix,\n        state = _ref65[1],\n        matrixExcessRooms = _ref65[2].matrixExcessRooms;\n\n    var _a, _b, _c;\n\n    var rooms = (_c = (_b = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.rooms) === null || _b === void 0 ? void 0 : _b[action.meta.address]) !== null && _c !== void 0 ? _c : [];\n    return Object(from["a" /* from */])(rooms.filter(function (_ref66, i) {\n      transport_epics_objectDestructuringEmpty(_ref66);\n\n      return i >= matrixExcessRooms;\n    })).pipe(Object(mergeMap["a" /* mergeMap */])(function (roomId) {\n      return matrix.leave(roomId).catch(function (err) {\n        return log.error(\'Error leaving excess room, ignoring\', err);\n      }).then(function () {\n        return roomId;\n      });\n    }), Object(map["a" /* map */])(function (roomId) {\n      return matrixRoomLeave({\n        roomId: roomId\n      }, action.meta);\n    }));\n  }));\n};\n/**\n * Leave any room which is neither global nor known as a room for some user of interest\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Empty observable (whole side-effect on matrix instance)\n */\n\nvar epics_matrixLeaveUnknownRoomsEpic = function matrixLeaveUnknownRoomsEpic(_ref67, state$, _ref68) {\n  transport_epics_objectDestructuringEmpty(_ref67);\n\n  var log = _ref68.log,\n      matrix$ = _ref68.matrix$,\n      config$ = _ref68.config$;\n  return matrix$.pipe( // when matrix finishes initialization, register to matrix Room events\n  Object(switchMap["a" /* switchMap */])(function (matrix) {\n    return Object(fromEvent["a" /* fromEvent */])(matrix, \'Room\').pipe(Object(map["a" /* map */])(function (room) {\n      return {\n        matrix: matrix,\n        roomId: room.roomId\n      };\n    }));\n  }), // this room may become known later for some reason, so wait a little\n  Object(delayWhen["a" /* delayWhen */])(function () {\n    return config$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (_ref69) {\n      var httpTimeout = _ref69.httpTimeout;\n      return Object(timer["a" /* timer */])(httpTimeout);\n    }));\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), // filter for leave events to us\n  Object(filter["a" /* filter */])(function (_ref70) {\n    var _ref71 = transport_epics_slicedToArray(_ref70, 3),\n        _ref71$ = _ref71[0],\n        matrix = _ref71$.matrix,\n        roomId = _ref71$.roomId,\n        state = _ref71[1],\n        config = _ref71[2];\n\n    var _a, _b;\n\n    var room = matrix.getRoom(roomId);\n    if (!room) return false; // room already gone while waiting\n\n    var globalRooms = globalRoomNames(config);\n    if (room.name && globalRooms.some(function (g) {\n      return room.name.match("#".concat(g, ":"));\n    })) return false;\n    var rooms = (_b = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.rooms) !== null && _b !== void 0 ? _b : {};\n\n    for (var address in rooms) {\n      var _iterator3 = epics_createForOfIteratorHelper(rooms[address]),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _roomId = _step3.value;\n          if (_roomId === room.roomId) return false;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    return true;\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref72) {\n    var _ref73 = transport_epics_slicedToArray(_ref72, 1),\n        _ref73$ = _ref73[0],\n        matrix = _ref73$.matrix,\n        roomId = _ref73$.roomId;\n\n    return epics_awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee3() {\n      return regenerator_default.a.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              log.warn(\'Unknown room in matrix, leaving\', roomId);\n              return _context3.abrupt("return", matrix.leave(roomId).catch(function (err) {\n                return log.error(\'Error leaving unknown room, ignoring\', err);\n              }));\n\n            case 2:\n            case "end":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n  }), Object(ignoreElements["a" /* ignoreElements */])());\n};\n/**\n * If we leave a room for any reason (eg. a kick event), purge it from state\n * Notice excess rooms left by matrixLeaveExcessRoomsEpic are cleaned before the matrix event is\n * detected, and then no MatrixRoomLeaveAction is emitted for them by this epic.\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of matrixRoomLeave actions\n */\n\nvar epics_matrixCleanLeftRoomsEpic = function matrixCleanLeftRoomsEpic(_ref74, state$, _ref75) {\n  transport_epics_objectDestructuringEmpty(_ref74);\n\n  var log = _ref75.log,\n      matrix$ = _ref75.matrix$;\n  return matrix$.pipe( // when matrix finishes initialization, register to matrix invite events\n  Object(switchMap["a" /* switchMap */])(function (matrix) {\n    return Object(fromEvent["a" /* fromEvent */])(matrix, \'Room.myMembership\', function (room, membership) {\n      return {\n        room: room,\n        membership: membership,\n        matrix: matrix\n      };\n    });\n  }), // filter for leave events to us\n  Object(filter["a" /* filter */])(function (_ref76) {\n    var membership = _ref76.membership;\n    return membership === \'leave\';\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee4(_ref77) {\n    var _ref78, room, state, _a, _b, rooms, address, _iterator4, _step4, roomId;\n\n    return regenerator_default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _ref78 = transport_epics_slicedToArray(_ref77, 2), room = _ref78[0].room, state = _ref78[1];\n            rooms = (_b = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.rooms) !== null && _b !== void 0 ? _b : {};\n            _context4.t0 = regenerator_default.a.keys(rooms);\n\n          case 3:\n            if ((_context4.t1 = _context4.t0()).done) {\n              _context4.next = 26;\n              break;\n            }\n\n            address = _context4.t1.value;\n            _iterator4 = epics_createForOfIteratorHelper(rooms[address]);\n            _context4.prev = 6;\n\n            _iterator4.s();\n\n          case 8:\n            if ((_step4 = _iterator4.n()).done) {\n              _context4.next = 16;\n              break;\n            }\n\n            roomId = _step4.value;\n\n            if (!(roomId === room.roomId)) {\n              _context4.next = 14;\n              break;\n            }\n\n            log.warn(\'Left event for peer room detected, forgetting\', address, roomId);\n            _context4.next = 14;\n            return matrixRoomLeave({\n              roomId: roomId\n            }, {\n              address: address\n            });\n\n          case 14:\n            _context4.next = 8;\n            break;\n\n          case 16:\n            _context4.next = 21;\n            break;\n\n          case 18:\n            _context4.prev = 18;\n            _context4.t2 = _context4["catch"](6);\n\n            _iterator4.e(_context4.t2);\n\n          case 21:\n            _context4.prev = 21;\n\n            _iterator4.f();\n\n            return _context4.finish(21);\n\n          case 24:\n            _context4.next = 3;\n            break;\n\n          case 26:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[6, 18, 21, 24]]);\n  })));\n};\n/**\n * If some room we had with a peer doesn\'t show up in transport, forget it\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps members\n * @returns Observable of matrixRoomLeave actions\n */\n\nvar epics_matrixCleanMissingRoomsEpic = function matrixCleanMissingRoomsEpic(_ref79, state$, _ref80) {\n  transport_epics_objectDestructuringEmpty(_ref79);\n\n  var log = _ref80.log,\n      matrix$ = _ref80.matrix$,\n      config$ = _ref80.config$;\n  return state$.pipe(pluckDistinct(\'transport\', \'matrix\'), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee5(matrix) {\n    var _a, rooms, address, _iterator5, _step5, roomId;\n\n    return regenerator_default.a.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            rooms = (_a = matrix === null || matrix === void 0 ? void 0 : matrix.rooms) !== null && _a !== void 0 ? _a : {};\n            _context5.t0 = regenerator_default.a.keys(rooms);\n\n          case 2:\n            if ((_context5.t1 = _context5.t0()).done) {\n              _context5.next = 23;\n              break;\n            }\n\n            address = _context5.t1.value;\n            _iterator5 = epics_createForOfIteratorHelper(rooms[address]);\n            _context5.prev = 5;\n\n            _iterator5.s();\n\n          case 7:\n            if ((_step5 = _iterator5.n()).done) {\n              _context5.next = 13;\n              break;\n            }\n\n            roomId = _step5.value;\n            _context5.next = 11;\n            return {\n              roomId: roomId,\n              address: address\n            };\n\n          case 11:\n            _context5.next = 7;\n            break;\n\n          case 13:\n            _context5.next = 18;\n            break;\n\n          case 15:\n            _context5.prev = 15;\n            _context5.t2 = _context5["catch"](5);\n\n            _iterator5.e(_context5.t2);\n\n          case 18:\n            _context5.prev = 18;\n\n            _iterator5.f();\n\n            return _context5.finish(18);\n\n          case 21:\n            _context5.next = 2;\n            break;\n\n          case 23:\n          case "end":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[5, 15, 18, 21]]);\n  })), Object(distinct["a" /* distinct */])(function (_ref81) {\n    var roomId = _ref81.roomId;\n    return roomId;\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref82) {\n    var roomId = _ref82.roomId,\n        address = _ref82.address;\n    return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n      return {\n        matrix: matrix,\n        roomId: roomId,\n        address: address\n      };\n    }));\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref83) {\n    var _ref84 = transport_epics_slicedToArray(_ref83, 2),\n        _ref84$ = _ref84[0],\n        roomId = _ref84$.roomId,\n        address = _ref84$.address,\n        matrix = _ref84$.matrix,\n        httpTimeout = _ref84[1].httpTimeout;\n\n    return getRoom$(matrix, roomId).pipe( // wait for room to show up in MatrixClient; if it doesn\'t, clean up\n    Object(timeout["a" /* timeout */])(httpTimeout), Object(ignoreElements["a" /* ignoreElements */])(), Object(catchError["a" /* catchError */])(function () {\n      log.warn(\'Peer room in state not found in matrix, forgetting\', address, roomId);\n      return Object(of["a" /* of */])(matrixRoomLeave({\n        roomId: roomId\n      }, {\n        address: address\n      }));\n    }));\n  }));\n};\n\nfunction waitMemberAndSend$(address, matrix, type, content, // eslint-disable-line @typescript-eslint/no-explicit-any\n_ref85) {\n  var log = _ref85.log,\n      latest$ = _ref85.latest$,\n      config$ = _ref85.config$;\n  var allowRtc = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var RETRY_COUNT = 3; // is this relevant enough to become a constant/setting?\n\n  return latest$.pipe(Object(filter["a" /* filter */])(function (_ref86) {\n    var presences = _ref86.presences;\n    return address in presences;\n  }), Object(take["a" /* take */])(1), Object(mergeMap["a" /* mergeMap */])(function (_ref87) {\n    var rtc = _ref87.rtc;\n\n    var _a; // if available & open, use channel\n\n\n    if (allowRtc && ((_a = rtc === null || rtc === void 0 ? void 0 : rtc[address]) === null || _a === void 0 ? void 0 : _a.readyState) === \'open\') return Object(of["a" /* of */])(rtc[address]); // else, wait for member to join in the first room, and return roomId\n\n    return latest$.pipe(Object(map["a" /* map */])(function (_ref88) {\n      var state = _ref88.state;\n\n      var _a, _b, _c;\n\n      return (_c = (_b = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.rooms) === null || _b === void 0 ? void 0 : _b[address]) === null || _c === void 0 ? void 0 : _c[0];\n    }), // wait for a room to exist (created or invited) for address\n    Object(filter["a" /* filter */])(isntNil), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), // this switchMap unsubscribes from previous "wait" if first room for address changes\n    Object(switchMap["a" /* switchMap */])(function (roomId) {\n      return (// get/wait room object for roomId\n        // may wait for the room state to be populated (happens after createRoom resolves)\n        getRoom$(matrix, roomId).pipe(Object(mergeMap["a" /* mergeMap */])(function (room) {\n          return (// wait for address to be monitored & online (after getting Room for address)\n            // latest$ ensures it happens immediatelly if all conditions are satisfied\n            latest$.pipe(Object(pluck["a" /* pluck */])(\'presences\', address), Object(map["a" /* map */])(function (presence) {\n              var _a;\n\n              return ((_a = presence === null || presence === void 0 ? void 0 : presence.payload) === null || _a === void 0 ? void 0 : _a.available) ? presence.payload.userId : undefined;\n            }), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(map["a" /* map */])(function (userId) {\n              return {\n                room: room,\n                userId: userId\n              };\n            }))\n          );\n        }), // when user is online, get room member for partner\'s userId\n        // this switchMap unsubscribes from previous wait if userId changes or go offline\n        Object(switchMap["a" /* switchMap */])(function (_ref89) {\n          var room = _ref89.room,\n              userId = _ref89.userId;\n          if (!userId) return empty["a" /* EMPTY */]; // user not monitored or not available\n\n          var member = room.getMember(userId); // if it already joined room, return its membership\n\n          if (member && member.membership === \'join\') return Object(of["a" /* of */])(member); // else, wait for the user to join/accept invite\n\n          return Object(fromEvent["a" /* fromEvent */])(matrix, \'RoomMember.membership\', function (_ref90, member) {\n            transport_epics_objectDestructuringEmpty(_ref90);\n\n            return member;\n          }).pipe(Object(filter["a" /* filter */])(function (member) {\n            return member.roomId === room.roomId && member.userId === userId && member.membership === \'join\';\n          }));\n        }), Object(pluck["a" /* pluck */])(\'roomId\'))\n      );\n    }));\n  }), Object(take["a" /* take */])(1), // use first room/user which meets all requirements/filters above\n  Object(mergeMap["a" /* mergeMap */])(function (via) {\n    return Object(defer["a" /* defer */])(function () {\n      return typeof via === \'string\' ? matrix.sendEvent(via, type, content, \'\') // via room\n      : via.send(content.body);\n    }).pipe( // this returned value is just for notification, and shouldn\'t be relayed on\n    // all functionality is provided as side effects of the subscription\n    Object(mapTo["a" /* mapTo */])(typeof via === \'string\' ? via : via.label), Object(retryWhen["a" /* retryWhen */])(function (err$) {\n      return (// if sendEvent throws, omit & retry after httpTimeout / N,\n        // up to RETRY_COUNT times; if it continues to error, throws down\n        err$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref91, i) {\n          var _ref92 = transport_epics_slicedToArray(_ref91, 2),\n              err = _ref92[0],\n              httpTimeout = _ref92[1].httpTimeout;\n\n          if (i < RETRY_COUNT - 1) {\n            log.warn("messageSend error, retrying ".concat(i + 1, "/").concat(RETRY_COUNT), err);\n            return Object(timer["a" /* timer */])(httpTimeout / RETRY_COUNT); // give up\n          } else return Object(throwError["a" /* throwError */])(err);\n        }))\n      );\n    }));\n  }));\n}\n/**\n * Handles a [[messageSend.request]] action and send its message to the first room on queue for\n * address\n *\n * @param action$ - Observable of messageSend.request actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of messageSend.success actions\n */\n\n\nvar epics_matrixMessageSendEpic = function matrixMessageSendEpic(action$, _ref93, _ref94) {\n  transport_epics_objectDestructuringEmpty(_ref93);\n\n  var log = _ref94.log,\n      matrix$ = _ref94.matrix$,\n      config$ = _ref94.config$,\n      latest$ = _ref94.latest$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(messageSend.request)), // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n  Object(mergeMap["a" /* mergeMap */])(function (action) {\n    return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n      return {\n        action: action,\n        matrix: matrix\n      };\n    }));\n  }), Object(groupBy["a" /* groupBy */])(function (_ref95) {\n    var action = _ref95.action;\n    return action.meta.address;\n  }), // merge all inner/grouped observables, so different user\'s "queues" can be parallel\n  Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n    return (// per-user "queue"\n      grouped$.pipe( // each per-user "queue" (observable) are processed serially (because concatMap)\n      // TODO: batch all pending messages in a single send message request, with retry\n      Object(concatMap["a" /* concatMap */])(function (_ref96) {\n        var action = _ref96.action,\n            matrix = _ref96.matrix;\n        var body = typeof action.payload.message === \'string\' ? action.payload.message : encodeJsonMessage(action.payload.message);\n        var content = {\n          body: body,\n          msgtype: \'m.text\'\n        }; // wait for address to be monitored, online & have joined a non-global room with us\n\n        return waitMemberAndSend$(action.meta.address, matrix, \'m.room.message\', content, {\n          log: log,\n          latest$: latest$,\n          config$: config$\n        }, true).pipe(Object(mapTo["a" /* mapTo */])(messageSend.success(undefined, action.meta)), Object(catchError["a" /* catchError */])(function (err) {\n          log.error(\'messageSend error\', err, action.meta);\n          return Object(of["a" /* of */])(messageSend.failure(err, action.meta));\n        }));\n      }))\n    );\n  }));\n};\n/**\n * Handles a [[messageGlobalSend]] action and send one-shot message to a global room\n *\n * @param action$ - Observable of messageGlobalSend actions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Empty observable (whole side-effect on matrix instance)\n */\n\nvar epics_matrixMessageGlobalSendEpic = function matrixMessageGlobalSendEpic(action$, _ref97, _ref98) {\n  transport_epics_objectDestructuringEmpty(_ref97);\n\n  var log = _ref98.log,\n      matrix$ = _ref98.matrix$,\n      config$ = _ref98.config$;\n  return (// actual output observable, gets/wait for the user to be in a room, and then sendMessage\n    action$.pipe(Object(filter["a" /* filter */])(isActionOf(messageGlobalSend)), // this mergeMap is like withLatestFrom, but waits until matrix$ emits its only value\n    Object(mergeMap["a" /* mergeMap */])(function (action) {\n      return matrix$.pipe(Object(map["a" /* map */])(function (matrix) {\n        return {\n          action: action,\n          matrix: matrix\n        };\n      }));\n    }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref99) {\n      var _ref100 = transport_epics_slicedToArray(_ref99, 2),\n          _ref100$ = _ref100[0],\n          action = _ref100$.action,\n          matrix = _ref100$.matrix,\n          config = _ref100[1];\n\n      var globalRooms = globalRoomNames(config);\n\n      if (!globalRooms.includes(action.meta.roomName)) {\n        log.warn(\'messageGlobalSend for unknown global room, ignoring\', action.meta.roomName, globalRooms);\n        return empty["a" /* EMPTY */];\n      }\n\n      var serverName = getServerName(matrix.getHomeserverUrl()),\n          roomAlias = "#".concat(action.meta.roomName, ":").concat(serverName);\n      return getRoom$(matrix, roomAlias).pipe( // send message!\n      Object(mergeMap["a" /* mergeMap */])(function (room) {\n        var body = typeof action.payload.message === \'string\' ? action.payload.message : encodeJsonMessage(action.payload.message);\n        return matrix.sendEvent(room.roomId, \'m.room.message\', {\n          body: body,\n          msgtype: \'m.text\'\n        }, \'\');\n      }), Object(catchError["a" /* catchError */])(function (err) {\n        log.error(\'Error sending message to global room\', action.meta, action.payload.message, err);\n        return empty["a" /* EMPTY */];\n      }));\n    }), Object(ignoreElements["a" /* ignoreElements */])())\n  );\n};\n\nfunction parseMessage(line, // eslint-disable-line @typescript-eslint/no-explicit-any\naddress, _ref101) {\n  var log = _ref101.log;\n  if (typeof line !== \'string\') return;\n\n  try {\n    var message = decodeJsonMessage(line); // if Signed, accept only if signature matches sender address\n\n    if (\'signature\' in message) {\n      var signer = getMessageSigner(message);\n      if (signer !== address) throw new error_RaidenError(ErrorCodes.TRNS_MESSAGE_SIGNATURE_MISMATCH, {\n        sender: address,\n        signer: signer\n      });\n    }\n\n    return message;\n  } catch (err) {\n    log.warn("Could not decode message: ".concat(line, ": ").concat(err));\n  }\n}\n/**\n * Subscribe to matrix messages and emits MessageReceivedAction upon receiving a valid message from\n * an user of interest (one valid signature from an address we monitor) in a room we have for them\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param matrix$ - RaidenEpicDeps members\n * @returns Observable of messageReceived actions\n */\n\n\nvar epics_matrixMessageReceivedEpic = function matrixMessageReceivedEpic(_ref102, _ref103, _ref104) {\n  transport_epics_objectDestructuringEmpty(_ref102);\n\n  transport_epics_objectDestructuringEmpty(_ref103);\n\n  var log = _ref104.log,\n      matrix$ = _ref104.matrix$,\n      config$ = _ref104.config$,\n      latest$ = _ref104.latest$;\n  return (// gets/wait for the user to be in a room, and then sendMessage\n    matrix$.pipe( // when matrix finishes initialization, register to matrix timeline events\n    Object(switchMap["a" /* switchMap */])(function (matrix) {\n      return Object(fromEvent["a" /* fromEvent */])(matrix, \'Room.timeline\', function (event, room) {\n        return {\n          matrix: matrix,\n          event: event,\n          room: room\n        };\n      });\n    }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), // filter for text messages not from us and not from global rooms\n    Object(filter["a" /* filter */])(function (_ref105) {\n      var _ref106 = transport_epics_slicedToArray(_ref105, 2),\n          _ref106$ = _ref106[0],\n          matrix = _ref106$.matrix,\n          event = _ref106$.event,\n          room = _ref106$.room,\n          config = _ref106[1];\n\n      var _a, _b;\n\n      return event.getType() === \'m.room.message\' && ((_b = (_a = event.event) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.msgtype) === \'m.text\' && event.getSender() !== matrix.getUserId() && !globalRoomNames(config).some(function (g) {\n        return (// generate an alias for global room of given name, and check if room matches\n          roomMatch("#".concat(g, ":").concat(getServerName(matrix.getHomeserverUrl())), room)\n        );\n      });\n    }), Object(mergeMap["a" /* mergeMap */])(function (_ref107) {\n      var _ref108 = transport_epics_slicedToArray(_ref107, 2),\n          _ref108$ = _ref108[0],\n          event = _ref108$.event,\n          room = _ref108$.room,\n          httpTimeout = _ref108[1].httpTimeout;\n\n      return latest$.pipe(Object(filter["a" /* filter */])(function (_ref109) {\n        var presences = _ref109.presences,\n            state = _ref109.state;\n\n        var _a, _b, _c;\n\n        var presence = find_default()(presences, [\'payload.userId\', event.getSender()]);\n        if (!presence) return false;\n        var rooms = (_c = (_b = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.rooms) === null || _b === void 0 ? void 0 : _b[presence.meta.address]) !== null && _c !== void 0 ? _c : [];\n        if (!rooms.includes(room.roomId)) return false;\n        return true;\n      }), Object(take["a" /* take */])(1), // take up to an arbitrary timeout to presence status for the sender\n      // AND the room in which this message was sent to be in sender\'s address room queue\n      Object(takeUntil["a" /* takeUntil */])(Object(timer["a" /* timer */])(httpTimeout)), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee6(_ref110) {\n        var presences, _a, presence, _iterator6, _step6, line, message;\n\n        return regenerator_default.a.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                presences = _ref110.presences;\n                presence = find_default()(presences, [\'payload.userId\', event.getSender()]);\n                _iterator6 = epics_createForOfIteratorHelper((event.event.content.body || \'\').split(\'\\n\'));\n                _context6.prev = 3;\n\n                _iterator6.s();\n\n              case 5:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                line = _step6.value;\n                message = parseMessage(line, presence.meta.address, {\n                  log: log\n                });\n                _context6.next = 10;\n                return messageReceived({\n                  text: line,\n                  message: message,\n                  ts: (_a = event.event.origin_server_ts) !== null && _a !== void 0 ? _a : Date.now(),\n                  userId: presence.payload.userId,\n                  roomId: room.roomId\n                }, presence.meta);\n\n              case 10:\n                _context6.next = 5;\n                break;\n\n              case 12:\n                _context6.next = 17;\n                break;\n\n              case 14:\n                _context6.prev = 14;\n                _context6.t0 = _context6["catch"](3);\n\n                _iterator6.e(_context6.t0);\n\n              case 17:\n                _context6.prev = 17;\n\n                _iterator6.f();\n\n                return _context6.finish(17);\n\n              case 20:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[3, 14, 17, 20]]);\n      })));\n    }))\n  );\n};\n/**\n * If matrix received a message from user in a room we have with them, but not the first on queue,\n * update queue so this room goes to the front and will be used as send message room from now on\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of matrixRoom actions\n */\n\nvar epics_matrixMessageReceivedUpdateRoomEpic = function matrixMessageReceivedUpdateRoomEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(messageReceived.is), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(filter["a" /* filter */])(function (_ref111) {\n    var _ref112 = transport_epics_slicedToArray(_ref111, 2),\n        action = _ref112[0],\n        state = _ref112[1];\n\n    var _a, _b, _c;\n\n    var rooms = (_c = (_b = (_a = state.transport.matrix) === null || _a === void 0 ? void 0 : _a.rooms) === null || _b === void 0 ? void 0 : _b[action.meta.address]) !== null && _c !== void 0 ? _c : [];\n    return !!action.payload.roomId && rooms.includes(action.payload.roomId) && rooms[0] !== action.payload.roomId;\n  }), Object(map["a" /* map */])(function (_ref113) {\n    var _ref114 = transport_epics_slicedToArray(_ref113, 1),\n        action = _ref114[0];\n\n    return matrixRoom({\n      roomId: action.payload.roomId\n    }, action.meta);\n  }));\n};\n/**\n * Channel monitoring triggers matrix presence monitoring for partner\n *\n * @param action$ - Observable of RaidenActions\n * @returns Observable of matrixPresence.request actions\n */\n\nvar epics_matrixMonitorChannelPresenceEpic = function matrixMonitorChannelPresenceEpic(action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(channelMonitor)), Object(map["a" /* map */])(function (action) {\n    return matrixPresence.request(undefined, {\n      address: action.meta.partner\n    });\n  }));\n};\n/**\n * Sends Delivered for specific messages\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @param signer - RaidenEpicDeps members\n * @returns Observable of messageSend.request actions\n */\n\nvar epics_deliveredEpic = function deliveredEpic(action$, _ref115, _ref116) {\n  transport_epics_objectDestructuringEmpty(_ref115);\n\n  var log = _ref116.log,\n      signer = _ref116.signer,\n      latest$ = _ref116.latest$;\n  var cache = new LruCache(32);\n  return action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType([Signed(Processed), Signed(SecretRequest), Signed(SecretReveal)])), Object(withLatestFrom["a" /* withLatestFrom */])(latest$), Object(filter["a" /* filter */])(function (_ref117) {\n    var _ref118 = transport_epics_slicedToArray(_ref117, 2),\n        action = _ref118[0],\n        presences = _ref118[1].presences;\n\n    var _a;\n\n    return action.meta.address in presences && // skip if peer supports Capabilities.NO_DELIVERY\n    !((_a = presences[action.meta.address].payload.caps) === null || _a === void 0 ? void 0 : _a[Capabilities.NO_DELIVERY]);\n  }), Object(concatMap["a" /* concatMap */])(function (_ref119) {\n    var _ref120 = transport_epics_slicedToArray(_ref119, 1),\n        action = _ref120[0];\n\n    var message = action.payload.message; // defer causes the cache check to be performed at subscription time\n\n    return Object(defer["a" /* defer */])(function () {\n      var msgId = message.message_identifier;\n      var key = msgId.toString();\n      var cached = cache.get(key);\n      if (cached) return Object(of["a" /* of */])(messageSend.request({\n        message: cached\n      }, {\n        address: action.meta.address,\n        msgId: key\n      }));\n      var delivered = {\n        type: MessageType.DELIVERED,\n        delivered_message_identifier: msgId\n      };\n      log.info("Signing \\"".concat(delivered.type, "\\" for \\"").concat(message.type, "\\" with id=").concat(msgId.toString()));\n      return Object(from["a" /* from */])(signMessage(signer, delivered, {\n        log: log\n      })).pipe(Object(tap["a" /* tap */])(function (signed) {\n        return cache.put(key, signed);\n      }), Object(map["a" /* map */])(function (signed) {\n        return messageSend.request({\n          message: signed\n        }, {\n          address: action.meta.address,\n          msgId: key\n        });\n      }));\n    });\n  }));\n}; // fetches and caches matrix set turnServer\n\nvar _matrixIceServersCache = new WeakMap();\n\nfunction getMatrixIceServers(matrix) {\n  return epics_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee7() {\n    var cached, fetched, expire, servers;\n    return regenerator_default.a.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            cached = _matrixIceServersCache.get(matrix);\n\n            if (!(cached && Date.now() < cached[0])) {\n              _context7.next = 3;\n              break;\n            }\n\n            return _context7.abrupt("return", cached[1]);\n\n          case 3:\n            _context7.next = 5;\n            return matrix.turnServer();\n\n          case 5:\n            fetched = _context7.sent;\n            // if request returns nothing, caches empty list for 1h\n            expire = Date.now() + 36e5;\n            servers = [];\n\n            if (fetched && \'uris\' in fetched) {\n              servers.push({\n                urls: fetched.uris,\n                username: fetched.username,\n                credentialType: \'password\',\n                credential: fetched.password\n              });\n              expire = Date.now() + fetched.ttl * 1e3;\n            }\n\n            _matrixIceServersCache.set(matrix, [expire, servers]);\n\n            return _context7.abrupt("return", servers);\n\n          case 11:\n          case "end":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n} // creates a filter function which filters valid MatrixEvents\n\n\nfunction filterMatrixVoipEvents(type, sender, callId, httpTimeout) {\n  var contentKey = type === \'m.call.invite\' ? \'offer\' : type === \'m.call.answer\' ? \'answer\' : type === \'m.call.candidates\' ? \'candidates\' : undefined;\n  return function ( // FIXME: remove any when MatrixEvent type exposes getAge & getContent methods\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  event) {\n    var _a, _b, _c, _d;\n\n    return event.getType() === type && event.getSender() === sender && ((_a = event.getContent()) === null || _a === void 0 ? void 0 : _a.call_id) === callId && (!httpTimeout || event.getAge() <= ((_c = (_b = event.getContent()) === null || _b === void 0 ? void 0 : _b.lifetime) !== null && _c !== void 0 ? _c : httpTimeout)) && (!contentKey || !!((_d = event.getContent()) === null || _d === void 0 ? void 0 : _d[contentKey]));\n  };\n} // setup candidates$ handlers\n\n\nfunction handleCandidates$(connection, matrix, start$, _ref121, _ref122) {\n  var callId = _ref121.callId,\n      peerId = _ref121.peerId,\n      peerAddress = _ref121.peerAddress;\n  var log = _ref122.log,\n      latest$ = _ref122.latest$,\n      config$ = _ref122.config$;\n  return Object(merge["a" /* merge */])( // when seeing an icecandidate, send it to peer\n  Object(fromEvent["a" /* fromEvent */])(connection, \'icecandidate\').pipe(Object(pluck["a" /* pluck */])(\'candidate\'), Object(delayWhen["a" /* delayWhen */])(function () {\n    return start$;\n  }), Object(takeWhile["a" /* takeWhile */])(isntNil), Object(bufferTime["a" /* bufferTime */])(10), Object(filter["a" /* filter */])(function (candidates) {\n    return candidates.length > 0;\n  }), Object(tap["a" /* tap */])(function (e) {\n    return log.debug(\'RTC: got candidates\', callId, e);\n  }), Object(mergeMap["a" /* mergeMap */])(function (candidates) {\n    return waitMemberAndSend$(peerAddress, matrix, \'m.call.candidates\', {\n      call_id: callId,\n      version: 0,\n      candidates: candidates\n    }, {\n      log: log,\n      latest$: latest$,\n      config$: config$\n    });\n  })), // when receiving candidates from peer, add it locally\n  Object(fromEvent["a" /* fromEvent */])(matrix, \'event\').pipe(Object(filter["a" /* filter */])(filterMatrixVoipEvents(\'m.call.candidates\', peerId, callId)), Object(tap["a" /* tap */])(function (e) {\n    return log.debug(\'RTC: received candidates\', callId, e.getContent().candidates);\n  }), Object(mergeMap["a" /* mergeMap */])(function (event) {\n    var _a;\n\n    return Object(from["a" /* from */])((_a = event.getContent().candidates) !== null && _a !== void 0 ? _a : []);\n  }), Object(mergeMap["a" /* mergeMap */])(function (candidate) {\n    return Object(defer["a" /* defer */])(function () {\n      return connection.addIceCandidate(candidate);\n    }).pipe(Object(catchError["a" /* catchError */])(function (err) {\n      log.error(\'RTC: error setting candidate, ignoring\', err);\n      return empty["a" /* EMPTY */];\n    }));\n  }))).pipe(Object(ignoreElements["a" /* ignoreElements */])());\n} // setup RTC data channel for caller\n\n\nfunction setupCallerDataChannel$(matrix, start$, info, _ref123, deps) {\n  var httpTimeout = _ref123.httpTimeout,\n      fallbackIceServers = _ref123.fallbackIceServers;\n  var callId = info.callId,\n      peerId = info.peerId,\n      peerAddress = info.peerAddress;\n  var log = deps.log,\n      latest$ = deps.latest$,\n      config$ = deps.config$;\n  return Object(from["a" /* from */])(getMatrixIceServers(matrix)).pipe(Object(mergeMap["a" /* mergeMap */])(function (matrixTurnServers) {\n    var connection = new RTCPeerConnection({\n      iceServers: [].concat(transport_epics_toConsumableArray(matrixTurnServers), transport_epics_toConsumableArray(fallbackIceServers))\n    }); // we relay on retries, no need to enforce ordered\n\n    var dataChannel = connection.createDataChannel(callId, {\n      ordered: false\n    });\n    return Object(merge["a" /* merge */])( // despite \'never\' emitting, candidates$ have side-effects while/when subscribed\n    handleCandidates$(connection, matrix, start$, info, deps), Object(defer["a" /* defer */])(function () {\n      return connection.createOffer();\n    }).pipe(Object(mergeMap["a" /* mergeMap */])(function (offer) {\n      connection.setLocalDescription(offer);\n      var content = {\n        call_id: callId,\n        lifetime: httpTimeout,\n        version: 0,\n        offer: offer\n      };\n      return Object(merge["a" /* merge */])( // wait for answer\n      Object(fromEvent["a" /* fromEvent */])(matrix, \'event\').pipe(Object(filter["a" /* filter */])(filterMatrixVoipEvents(\'m.call.answer\', peerId, callId, httpTimeout))), // send invite with offer\n      waitMemberAndSend$(peerAddress, matrix, \'m.call.invite\', content, {\n        log: log,\n        latest$: latest$,\n        config$: config$\n      }).pipe(Object(tap["a" /* tap */])(function (e) {\n        return log.debug(\'RTC: sent invite\', callId, e);\n      }), Object(ignoreElements["a" /* ignoreElements */])()));\n    }), Object(take["a" /* take */])(1), Object(tap["a" /* tap */])(function () {\n      return log.info(\'RTC: got answer\', callId);\n    }), Object(map["a" /* map */])(function (event) {\n      connection.setRemoteDescription(new RTCSessionDescription(event.getContent().answer));\n      start$.next(null);\n      start$.complete();\n    }), Object(ignoreElements["a" /* ignoreElements */])()), Object(of["a" /* of */])(dataChannel));\n  }));\n} // setup RTC data channel for callee\n\n\nfunction setupCalleeDataChannel$(matrix, start$, info, _ref124, deps) {\n  var httpTimeout = _ref124.httpTimeout;\n  var callId = info.callId,\n      peerId = info.peerId,\n      peerAddress = info.peerAddress;\n  var log = deps.log,\n      latest$ = deps.latest$,\n      config$ = deps.config$;\n  return Object(fromEvent["a" /* fromEvent */])(matrix, \'event\').pipe(Object(filter["a" /* filter */])(filterMatrixVoipEvents(\'m.call.invite\', peerId, callId, httpTimeout)), Object(tap["a" /* tap */])(function () {\n    return log.info(\'RTC: got invite\', callId);\n  }), Object(mergeMap["a" /* mergeMap */])(function (event) {\n    return Object(from["a" /* from */])(getMatrixIceServers(matrix)).pipe(Object(map["a" /* map */])(function (serv) {\n      return [event, serv];\n    }));\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref125) {\n    var _ref126 = transport_epics_slicedToArray(_ref125, 2),\n        _ref126$ = transport_epics_slicedToArray(_ref126[0], 2),\n        event = _ref126$[0],\n        matrixTurnServers = _ref126$[1],\n        fallbackIceServers = _ref126[1].fallbackIceServers;\n\n    // create connection only upon invite/offer\n    var connection = new RTCPeerConnection({\n      iceServers: [].concat(transport_epics_toConsumableArray(matrixTurnServers), transport_epics_toConsumableArray(fallbackIceServers))\n    });\n    connection.setRemoteDescription(new RTCSessionDescription(event.getContent().offer));\n    return Object(merge["a" /* merge */])( // despite \'never\' emitting, candidates$ have side-effects while/when subscribed\n    handleCandidates$(connection, matrix, start$, info, deps), Object(defer["a" /* defer */])(function () {\n      return connection.createAnswer();\n    }).pipe(Object(mergeMap["a" /* mergeMap */])(function (answer) {\n      connection.setLocalDescription(answer);\n      var content = {\n        call_id: callId,\n        lifetime: httpTimeout,\n        version: 0,\n        answer: answer\n      }; // send answer\n\n      return waitMemberAndSend$(peerAddress, matrix, \'m.call.answer\', content, {\n        log: log,\n        latest$: latest$,\n        config$: config$\n      });\n    }), Object(tap["a" /* tap */])(function (e) {\n      log.debug(\'RTC: sent answer\', callId, e);\n      start$.next(null);\n      start$.complete();\n    }), Object(ignoreElements["a" /* ignoreElements */])()), Object(fromEvent["a" /* fromEvent */])(connection, \'datachannel\').pipe(Object(pluck["a" /* pluck */])(\'channel\')));\n  }), Object(take["a" /* take */])(1));\n} // setup listeners & events for a data channel, when it gets opened, and teardown when closed\n\n\nfunction listenDataChannel$(stop$, _ref127, _ref128, _ref129) {\n  var callId = _ref127.callId,\n      peerId = _ref127.peerId,\n      peerAddress = _ref127.peerAddress;\n  var httpTimeout = _ref128.httpTimeout;\n  var log = _ref129.log;\n  return function (dataChannel$) {\n    return dataChannel$.pipe(Object(mergeMap["a" /* mergeMap */])(function (dataChannel) {\n      return Object(merge["a" /* merge */])(Object(fromEvent["a" /* fromEvent */])(dataChannel, \'close\').pipe(Object(tap["a" /* tap */])(function () {\n        log.info(\'RTC: dataChannel close\', callId);\n        stop$.next(null);\n        stop$.complete();\n      }), Object(ignoreElements["a" /* ignoreElements */])()), Object(fromEvent["a" /* fromEvent */])(dataChannel, \'error\').pipe(Object(mergeMap["a" /* mergeMap */])(function (ev) {\n        return Object(throwError["a" /* throwError */])(ev.error);\n      })), Object(fromEvent["a" /* fromEvent */])(dataChannel, \'open\').pipe(Object(take["a" /* take */])(1), // this timeout ensures the whole dataChannel$ observable throws if it can\'t be set up,\n      // so it can be retried/repeated/restarted.\n      // notice it only starts after dataChannel$ emits, i.e. on subscription for caller (as\n      // it createDataChannel object, then responsible for hanging up call and retrying),\n      // and after \'datachannel\' event for callee (passive listener)\n      Object(timeout["a" /* timeout */])(httpTimeout / 3), Object(tap["a" /* tap */])(function () {\n        return log.info(\'RTC: dataChannel open\', callId);\n      }), // output rtcChannel action with defined channel instance to have it set in latest$\n      Object(mapTo["a" /* mapTo */])(rtcChannel(dataChannel, {\n        address: peerAddress\n      }))), Object(fromEvent["a" /* fromEvent */])(dataChannel, \'message\').pipe(Object(tap["a" /* tap */])(function (e) {\n        return log.debug(\'RTC: dataChannel message\', callId, e);\n      }), Object(pluck["a" /* pluck */])(\'data\'), Object(filter["a" /* filter */])(function (d) {\n        return typeof d === \'string\';\n      }), Object(map["a" /* map */])(function (line) {\n        return messageReceived({\n          text: line,\n          message: parseMessage(line, peerAddress, {\n            log: log\n          }),\n          ts: Date.now(),\n          userId: peerId\n        }, {\n          address: peerAddress\n        });\n      }))).pipe(Object(finalize["a" /* finalize */])(function () {\n        return dataChannel.close();\n      }));\n    }), Object(takeUntil["a" /* takeUntil */])(stop$), Object(catchError["a" /* catchError */])(function (err) {\n      var _a;\n\n      stop$.next(null);\n      stop$.complete();\n      log.info("Couldn\'t set up WebRTC dataChannel, retrying", callId, (_a = err === null || err === void 0 ? void 0 : err.message) !== null && _a !== void 0 ? _a : err);\n      return empty["a" /* EMPTY */];\n    }), // if it ends by takeUntil or catchError, output rtcChannel to reset latest$ mapping\n    Object(endWith["a" /* endWith */])(rtcChannel(undefined, {\n      address: peerAddress\n    })));\n  };\n} // handles presence changes for a single peer address (grouped)\n\n\nfunction handlePresenceChange$(action$, presence$, _ref130) {\n  var log = _ref130.log,\n      address = _ref130.address,\n      latest$ = _ref130.latest$,\n      matrix$ = _ref130.matrix$,\n      config$ = _ref130.config$;\n  return presence$.pipe(Object(distinctUntilChanged["a" /* distinctUntilChanged */])(function (a, b) {\n    return a.payload.userId === b.payload.userId && a.payload.available === b.payload.available;\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(matrix$, config$), Object(filter["a" /* filter */])(function (_ref131) {\n    var _ref132 = transport_epics_slicedToArray(_ref131, 3),\n        action = _ref132[0],\n        caps = _ref132[2].caps;\n\n    var _a;\n\n    return !!((_a = action.payload.caps) === null || _a === void 0 ? void 0 : _a[Capabilities.WEBRTC]) && !!(caps === null || caps === void 0 ? void 0 : caps[Capabilities.WEBRTC]);\n  }), Object(switchMap["a" /* switchMap */])(function (_ref133) {\n    var _ref134 = transport_epics_slicedToArray(_ref133, 3),\n        action = _ref134[0],\n        matrix = _ref134[1],\n        config = _ref134[2];\n\n    // if peer goes offline in Matrix, reset dataChannel & unsubscribe defer to close dataChannel\n    if (!action.payload.available) return Object(of["a" /* of */])(rtcChannel(undefined, action.meta));\n    var deps = {\n      log: log,\n      latest$: latest$,\n      config$: config$\n    };\n    var callId = [address, action.meta.address].map(function (a) {\n      return a.toLowerCase();\n    }).sort(function (a, b) {\n      return a.localeCompare(b);\n    }).join(\'|\');\n    var isCaller = callId.startsWith(address.toLowerCase());\n    return Object(defer["a" /* defer */])(function () {\n      var info = {\n        callId: callId,\n        peerId: action.payload.userId,\n        peerAddress: action.meta.address\n      }; // start$ indicates invite/offer/answer cycle completed, and candidates can be exchanged\n\n      var start$ = new AsyncSubject["a" /* AsyncSubject */](); // stop$ indicates dataChannel closed (maybe by peer), and teardown should take place\n\n      var stop$ = new AsyncSubject["a" /* AsyncSubject */]();\n      var dataChannel$;\n\n      if (isCaller) {\n        // caller\n        dataChannel$ = setupCallerDataChannel$(matrix, start$, info, config, deps);\n      } else {\n        // callee\n        dataChannel$ = setupCalleeDataChannel$(matrix, start$, info, config, deps);\n      }\n\n      stop$.pipe(Object(mergeMap["a" /* mergeMap */])(function () {\n        return waitMemberAndSend$(action.meta.address, matrix, \'m.call.hangup\', {\n          call_id: callId,\n          version: 0\n        }, {\n          log: log,\n          latest$: latest$,\n          config$: config$\n        }).pipe(Object(takeUntil["a" /* takeUntil */])(Object(timer["a" /* timer */])(config.httpTimeout / 10)));\n      }), Object(takeUntil["a" /* takeUntil */])(action$.pipe(Object(filter["a" /* filter */])(raidenShutdown.is)))).subscribe(); // when stopping, if not shutting down, send hangup\n      // listenDataChannel$ needs channel$:Observable<RTCDataChannel>, but we must include/merge\n      // setup and monitoring Observable<never>\'s to get things moving on subscription\n\n      return Object(merge["a" /* merge */])(dataChannel$, // throws nad restart if peer hangs up\n      Object(fromEvent["a" /* fromEvent */])(matrix, \'event\').pipe(Object(filter["a" /* filter */])(filterMatrixVoipEvents(\'m.call.hangup\', info.peerId, callId)), // no need for specific error since this is just logged and ignored in listenDataChannel$\n      Object(mergeMapTo["a" /* mergeMapTo */])(Object(throwError["a" /* throwError */])(new Error(\'RTC: peer hung up\'))))).pipe(listenDataChannel$(stop$, info, config, deps));\n    }).pipe( // if it disconnects for any reason, but partner is still online,\n    // try to reconnect by repeating from \'defer\'\n    Object(repeatWhen["a" /* repeatWhen */])(function (completed$) {\n      return completed$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(latest$, config$), Object(mergeMap["a" /* mergeMap */])(function (_ref135) {\n        var _ref136 = transport_epics_slicedToArray(_ref135, 3),\n            presences = _ref136[1].presences,\n            httpTimeout = _ref136[2].httpTimeout;\n\n        var _a, _b;\n\n        return !((_b = (_a = presences[action.meta.address]) === null || _a === void 0 ? void 0 : _a.payload) === null || _b === void 0 ? void 0 : _b.available) ? empty["a" /* EMPTY */] : isCaller ? Object(timer["a" /* timer */])(httpTimeout / 10) // caller waits some time to retry\n        : Object(of["a" /* of */])(null);\n      }));\n    }));\n  }));\n}\n\nvar epics_rtcConnectEpic = function rtcConnectEpic(action$, _ref137, deps) {\n  transport_epics_objectDestructuringEmpty(_ref137);\n\n  return action$.pipe(Object(filter["a" /* filter */])(matrixPresence.success.is), Object(groupBy["a" /* groupBy */])(function (action) {\n    return action.meta.address;\n  }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n    return handlePresenceChange$(action$, grouped$, deps);\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/close.js\nfunction close_slicedToArray(arr, i) { return close_arrayWithHoles(arr) || close_iterableToArrayLimit(arr, i) || close_unsupportedIterableToArray(arr, i) || close_nonIterableRest(); }\n\nfunction close_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction close_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return close_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return close_arrayLikeToArray(o, minLen); }\n\nfunction close_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction close_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction close_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n/**\n * Complete or fail any pending transfer for any closing or closed channels\n * Transfer is considered successful if secret was revealed (as it could be claimed on-chain),\n * else it\'s considered as failed as couldn\'t succeed inside expiration timeout\n *\n * @param action$ - Observable of channelClose.{requet,success} actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transfer.{success|failure} actions\n */\n\nvar close_transferChannelClosedEpic = function transferChannelClosedEpic(action$, state$, _ref) {\n  var address = _ref.address;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf([channelClose.request, channelClose.success])), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])(function (_ref2) {\n    var _ref3 = close_slicedToArray(_ref2, 2),\n        action = _ref3[0],\n        state = _ref3[1];\n\n    return Object(from["a" /* from */])(Object.entries(state.sent)).pipe(Object(filter["a" /* filter */])(function (_ref4) {\n      var _ref5 = close_slicedToArray(_ref4, 2),\n          _ref5$1$transfer = close_slicedToArray(_ref5[1].transfer, 2),\n          transf = _ref5$1$transfer[1];\n\n      return transf.token_network_address === action.meta.tokenNetwork && transf.recipient === action.meta.partner && transf.initiator === address;\n    }), Object(map["a" /* map */])(function (_ref6) {\n      var _ref7 = close_slicedToArray(_ref6, 2),\n          secrethash = _ref7[0],\n          sent = _ref7[1];\n\n      var _a, _b, _c, _d; // as we can\'t know for sure if recipient/partner received the secret or unlock,\n      //consider transfer failed iff neither the secret was revealed nor the unlock happened\n\n\n      var meta = {\n        secrethash: secrethash,\n        direction: Direction.SENT\n      };\n      if (sent.lockExpired || sent.unlockProcessed || ((_b = (_a = sent.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) || sent.secretRequest && !sent.secretReveal) // success/failure already emitted\n        return;else if (!((_d = (_c = sent.secret) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.registerBlock) && !sent.secretReveal && !sent.unlock) return actions_transfer.failure(new error_RaidenError(ErrorCodes.XFER_CHANNEL_CLOSED_PREMATURELY), meta);else if (sent.unlock) return actions_transfer.success({\n        balanceProof: getBalanceProofFromEnvelopeMessage(sent.unlock[1])\n      }, meta);else return actions_transfer.success({}, meta);\n    }), Object(filter["a" /* filter */])(isntNil));\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/utils.js\n\n\n/**\n * Dispatches an actions and waits until a condition is satisfied.\n *\n * @param action$ - Observable of actions that will be monitored\n * @param request - The request/action that will be dispatched\n * @param predicate - The condition that will that was to be satisfied for the observable to\n * complete\n * @returns Observable of the request type.\n */\n\nfunction dispatchAndWait$(action$, request, predicate) {\n  return Object(merge["a" /* merge */])( // wait until respective success/failure action is seen before completing\n  action$.pipe(Object(filter["a" /* filter */])(predicate), Object(take["a" /* take */])(1), // don\'t output success/failure action, just wait for first match to complete\n  Object(ignoreElements["a" /* ignoreElements */])()), // output once\n  Object(of["a" /* of */])(request));\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/expire.js\nfunction expire_slicedToArray(arr, i) { return expire_arrayWithHoles(arr) || expire_iterableToArrayLimit(arr, i) || expire_unsupportedIterableToArray(arr, i) || expire_nonIterableRest(); }\n\nfunction expire_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction expire_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return expire_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return expire_arrayLikeToArray(o, minLen); }\n\nfunction expire_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction expire_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction expire_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n/**\n * Contains the core logic of {@link transferAutoExpireEpic}.\n *\n * @param action$ - Observable of {@link RaidenAction} actions\n * @param state - Contains The current state of the app\n * @param config - Contains the current app config\n * @param blockNumber - The current block number\n * @returns Observable of {@link transferExpire.request} or {@link transfer.failure} actions\n */\n\nfunction autoExpire$(action$, state, _ref, blockNumber) {\n  var confirmationBlocks = _ref.confirmationBlocks;\n  // we can send LockExpired only for SENT transfers\n  return Object(from["a" /* from */])(Object.entries(state.sent)).pipe(Object(filter["a" /* filter */])(function (_ref2) {\n    var _ref3 = expire_slicedToArray(_ref2, 2),\n        sent = _ref3[1];\n\n    var _a, _b;\n\n    return !sent.unlock && !sent.lockExpired && !sent.channelClosed && sent.transfer[1].lock.expiration.add(confirmationBlocks).lte(blockNumber) && // don\'t expire if secret got registered before lock expired\n    !((_b = (_a = sent.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock);\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref4) {\n    var _ref5 = expire_slicedToArray(_ref4, 2),\n        secrethash = _ref5[0],\n        sent = _ref5[1];\n\n    var meta = {\n      secrethash: secrethash,\n      direction: Direction.SENT\n    }; // this observable acts like a Promise: emits request once, completes on success/failure\n\n    return Object(merge["a" /* merge */])(dispatchAndWait$(action$, transferExpire.request(undefined, meta), isResponseOf(transferExpire, meta)), // notify users that this transfer failed definitely\n    Object(of["a" /* of */])(actions_transfer.failure(new error_RaidenError(ErrorCodes.XFER_EXPIRED, {\n      block: sent.transfer[1].lock.expiration.toString()\n    }), meta)));\n  }));\n}\n/**\n * Process newBlocks, emits transferExpire.request (request to compose&sign LockExpired for a transfer)\n * if pending transfer\'s lock expired and transfer didn\'t unlock (succeed) in time\n * Also, emits transfer.failure, to notify users that a transfer has failed (although it\'ll only be\n * considered as completed with fail once the transferExpireProcessed arrives).\n *\n * @param action$ - Observable of newBlock|transferExpire.success|transferExpire.failure actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferExpire.request|transfer.failure actions\n */\n\n\nvar expire_transferAutoExpireEpic = function transferAutoExpireEpic(action$, state$, _ref6) {\n  var config$ = _ref6.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(newBlock)), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), // exhaustMap ignores new blocks while previous request batch is still pending\n  Object(exhaustMap["a" /* exhaustMap */])(function (_ref7) {\n    var _ref8 = expire_slicedToArray(_ref7, 3),\n        blockNumber = _ref8[0].payload.blockNumber,\n        state = _ref8[1],\n        config = _ref8[2];\n\n    return autoExpire$(action$, state, config, blockNumber);\n  }));\n};\n// EXTERNAL MODULE: ./node_modules/lodash/get.js\nvar lodash_get = __webpack_require__("9b02");\nvar lodash_get_default = /*#__PURE__*/__webpack_require__.n(lodash_get);\n\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/locked.js\n\n\nfunction locked_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction locked_slicedToArray(arr, i) { return locked_arrayWithHoles(arr) || locked_iterableToArrayLimit(arr, i) || locked_unsupportedIterableToArray(arr, i) || locked_nonIterableRest(); }\n\nfunction locked_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction locked_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction locked_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction locked_toConsumableArray(arr) { return locked_arrayWithoutHoles(arr) || locked_iterableToArray(arr) || locked_unsupportedIterableToArray(arr) || locked_nonIterableSpread(); }\n\nfunction locked_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction locked_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return locked_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return locked_arrayLikeToArray(o, minLen); }\n\nfunction locked_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction locked_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return locked_arrayLikeToArray(arr); }\n\nfunction locked_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Return the next nonce for a (possibly missing) balanceProof, or else BigNumber(1)\n *\n * @param balanceProof - Balance proof to increase nonce from\n * @returns Increased nonce, or One if no balance proof provided\n */\n\nfunction nextNonce(balanceProof) {\n  var _a;\n\n  return ((_a = balanceProof === null || balanceProof === void 0 ? void 0 : balanceProof.nonce) !== null && _a !== void 0 ? _a : constants["Zero"]).add(1);\n}\n\nfunction getChannelLocksroot(channel, secrethash) {\n  var _a;\n\n  var locks = ((_a = channel.own.locks) !== null && _a !== void 0 ? _a : []).filter(function (l) {\n    return l.secrethash !== secrethash;\n  });\n  return getLocksroot(locks);\n}\n/**\n * THe core logic of {@link makeAndSignTransfer}.\n *\n * @param state - Contains The current state of the app\n * @param action - transfer request action to be sent.\n * @param revealTimeout - The reveal timeout for the transfer.\n * @param deps - {@link RaidenEpicDeps}\n * @returns Observable of {@link transferSecret} or {@link transferSigned} actions\n */\n\n\nfunction makeAndSignTransfer$(state, action, _ref, _ref2) {\n  var revealTimeout = _ref.revealTimeout;\n  var log = _ref2.log,\n      address = _ref2.address,\n      network = _ref2.network,\n      signer = _ref2.signer;\n\n  var _a, _b, _c, _d, _e, _f;\n\n  if (action.meta.secrethash in state.sent) {\n    // don\'t throw to avoid emitting transfer.failure, to just wait for already pending transfer\n    log.warn(\'transfer already present\', action.meta);\n    return empty["a" /* EMPTY */];\n  } // assume paths are valid and recipient is first hop of first route\n  // compose metadata from it, and use first path fee\n\n\n  var metadata = {\n    routes: action.payload.paths.map(function (_ref3) {\n      var path = _ref3.path;\n      return {\n        route: path\n      };\n    })\n  };\n  var fee = action.payload.paths[0].fee;\n  var recipient = action.payload.paths[0].path[0];\n  var channel = state.channels[action.payload.tokenNetwork][recipient]; // check below shouldn\'t fail because of route validation in pathFindServiceEpic\n  // used here mostly for type narrowing on channel union\n\n  assert((channel === null || channel === void 0 ? void 0 : channel.state) === ChannelState.open, \'not open\');\n  assert(!action.payload.expiration || action.payload.expiration >= state.blockNumber + revealTimeout, \'expiration too soon\');\n  var lock = {\n    amount: action.payload.value.add(fee),\n    expiration: Object(utils["bigNumberify"])(action.payload.expiration || state.blockNumber + revealTimeout * 2),\n    secrethash: action.meta.secrethash\n  };\n  var locks = [].concat(locked_toConsumableArray((_a = channel.own.locks) !== null && _a !== void 0 ? _a : []), [lock]);\n  var locksroot = getLocksroot(locks);\n  var token = findKey_default()(state.tokens, function (tn) {\n    return tn === action.payload.tokenNetwork;\n  });\n  log.info(\'Signing transfer of value\', action.payload.value.toString(), \'of token\', token, \', to\', action.payload.target, \', through routes\', action.payload.paths, \', paying\', fee.toString(), \'in fees.\');\n  var message = {\n    type: MessageType.LOCKED_TRANSFER,\n    message_identifier: makeMessageId(),\n    chain_id: Object(utils["bigNumberify"])(network.chainId),\n    token_network_address: action.payload.tokenNetwork,\n    channel_identifier: Object(utils["bigNumberify"])(channel.id),\n    nonce: nextNonce(channel.own.balanceProof),\n    transferred_amount: (_c = (_b = channel.own.balanceProof) === null || _b === void 0 ? void 0 : _b.transferredAmount) !== null && _c !== void 0 ? _c : constants["Zero"],\n    locked_amount: ((_e = (_d = channel.own.balanceProof) === null || _d === void 0 ? void 0 : _d.lockedAmount) !== null && _e !== void 0 ? _e : constants["Zero"]).add(lock.amount),\n    locksroot: locksroot,\n    payment_identifier: action.payload.paymentId,\n    token: token,\n    recipient: recipient,\n    lock: lock,\n    target: action.payload.target,\n    initiator: (_f = action.payload.initiator) !== null && _f !== void 0 ? _f : address,\n    metadata: metadata\n  };\n  return Object(from["a" /* from */])(signMessage(signer, message, {\n    log: log\n  })).pipe(Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee(signed) {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return transferSigned({\n              message: signed,\n              fee: fee\n            }, action.meta);\n\n          case 2:\n            if (!action.payload.secret) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 5;\n            return transferSecret({\n              secret: action.payload.secret\n            }, action.meta);\n\n          case 5:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n}\n/**\n * Create an observable to compose and sign a LockedTransfer message/transferSigned action\n * As it\'s an async observable which depends on state and may return an action which changes it,\n * the returned observable must be subscribed in a serialized context that ensures non-concurrent\n * write access to the channel\'s balance proof (e.g. concatMap)\n *\n * @param state$ - Observable of current state\n * @param action - transfer request action to be sent\n * @param deps - RaidenEpicDeps\n * @returns Observable of transferSigned|transferSecret|transfer.failure actions\n */\n\n\nfunction makeAndSignTransfer(state$, action, deps) {\n  return Object(combineLatest["a" /* combineLatest */])([state$, deps.config$]).pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (_ref4) {\n    var _ref5 = locked_slicedToArray(_ref4, 2),\n        state = _ref5[0],\n        config = _ref5[1];\n\n    return makeAndSignTransfer$(state, action, config, deps);\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    return Object(of["a" /* of */])(actions_transfer.failure(err, action.meta));\n  }));\n}\n/**\n * Contains the core logic of {@link makeAndSignUnlock}.\n *\n * @param state$ - Observable of the latest app state.\n * @param state - Contains The current state of the app\n * @param action - The transfer unlock action that will generate the transferUnlock.success action.\n * @param signer - The signer that will sign the message\n * @returns Observable of {@link transferUnlock.success} action.\n */\n\n\nfunction makeAndSignUnlock$(state$, state, action, _ref6) {\n  var log = _ref6.log,\n      signer = _ref6.signer;\n\n  var _a, _b;\n\n  var secrethash = action.meta.secrethash;\n  assert(secrethash in state.sent, \'unknown transfer\');\n  var transfer = state.sent[secrethash].transfer[1];\n  var channel = lodash_get_default()(state.channels, [transfer.token_network_address, transfer.recipient]); // shouldn\'t happen, channel close clears transfers, but unlock may already have been queued\n\n  assert((channel === null || channel === void 0 ? void 0 : channel.state) === ChannelState.open && channel.own.balanceProof, \'channel gone, not open or no balanceProof\');\n  var signed$;\n\n  if (state.sent[secrethash].unlock) {\n    // unlock already signed, use cached\n    signed$ = Object(of["a" /* of */])(state.sent[secrethash].unlock[1]);\n  } else {\n    // don\'t forget to check after signature too, may have expired by then\n    // allow unlocking past expiration if secret registered\n    assert(((_b = (_a = state.sent[secrethash].secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) || transfer.lock.expiration.gt(state.blockNumber), \'lock expired\');\n    var locksroot = getChannelLocksroot(channel, secrethash);\n    var message = {\n      type: MessageType.UNLOCK,\n      message_identifier: makeMessageId(),\n      chain_id: transfer.chain_id,\n      token_network_address: transfer.token_network_address,\n      channel_identifier: transfer.channel_identifier,\n      nonce: nextNonce(channel.own.balanceProof),\n      transferred_amount: channel.own.balanceProof.transferredAmount.add(transfer.lock.amount),\n      locked_amount: channel.own.balanceProof.lockedAmount.sub(transfer.lock.amount),\n      locksroot: locksroot,\n      payment_identifier: transfer.payment_identifier,\n      secret: state.sent[action.meta.secrethash].secret[1].value\n    };\n    signed$ = Object(from["a" /* from */])(signMessage(signer, message, {\n      log: log\n    }));\n  }\n\n  return signed$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee2(_ref7) {\n    var _ref8, signed, state, _a, _b;\n\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref8 = locked_slicedToArray(_ref7, 2), signed = _ref8[0], state = _ref8[1];\n            assert(((_b = (_a = state.sent[secrethash].secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) || transfer.lock.expiration.gt(state.blockNumber), \'lock expired\');\n            assert(!state.sent[secrethash].channelClosed, \'channel closed!\');\n            _context2.next = 5;\n            return transferUnlock.success({\n              message: signed\n            }, action.meta);\n\n          case 5:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n}\n/**\n * Create an observable to compose and sign a Unlock message/transferUnlock.success action\n * As it\'s an async observable which depends on state and may return an action which changes it,\n * the returned observable must be subscribed in a serialized context that ensures non-concurrent\n * write access to the channel\'s balance proof (e.g. concatMap)\n *\n * @param state$ - Observable of current state\n * @param action - transferUnlock.request request action to be sent\n * @param signer - RaidenEpicDeps members\n * @returns Observable of transferUnlock.success actions\n */\n\n\nfunction makeAndSignUnlock(state$, action, _ref9) {\n  var signer = _ref9.signer,\n      log = _ref9.log;\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    return makeAndSignUnlock$(state$, state, action, {\n      log: log,\n      signer: signer\n    });\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    log.warn(\'Error trying to unlock after SecretReveal\', err);\n    return Object(of["a" /* of */])(transferUnlock.failure(err, action.meta));\n  }));\n}\n/**\n * Contains the core logic of {@link makeAndSignLockExpired}.\n *\n * @param state - Contains The current state of the app\n * @param action - The transfer expire action.\n * @param signer - RaidenEpicDeps members\n * @returns Observable of transferExpire.success actions\n */\n\n\nfunction makeAndSignLockExpired$(state, action, _ref10) {\n  var signer = _ref10.signer,\n      log = _ref10.log;\n  var secrethash = action.meta.secrethash;\n  assert(secrethash in state.sent, \'unknown transfer\');\n  var transfer = state.sent[secrethash].transfer[1];\n  var channel = lodash_get_default()(state.channels, [transfer.token_network_address, transfer.recipient]);\n  assert((channel === null || channel === void 0 ? void 0 : channel.state) === ChannelState.open && channel.own.balanceProof, \'channel gone, not open or no balanceProof\');\n  var signed$;\n\n  if (state.sent[secrethash].lockExpired) {\n    // lockExpired already signed, use cached\n    signed$ = Object(of["a" /* of */])(state.sent[secrethash].lockExpired[1]);\n  } else {\n    assert(transfer.lock.expiration.lt(state.blockNumber), \'lock not yet expired\');\n    assert(!state.sent[secrethash].unlock, \'transfer already unlocked\');\n    var locksroot = getChannelLocksroot(channel, secrethash);\n    var message = {\n      type: MessageType.LOCK_EXPIRED,\n      message_identifier: makeMessageId(),\n      chain_id: transfer.chain_id,\n      token_network_address: transfer.token_network_address,\n      channel_identifier: transfer.channel_identifier,\n      nonce: nextNonce(channel.own.balanceProof),\n      transferred_amount: channel.own.balanceProof.transferredAmount,\n      locked_amount: channel.own.balanceProof.lockedAmount.sub(transfer.lock.amount),\n      locksroot: locksroot,\n      recipient: transfer.recipient,\n      secrethash: secrethash\n    };\n    signed$ = Object(from["a" /* from */])(signMessage(signer, message, {\n      log: log\n    }));\n  }\n\n  return signed$.pipe( // messageSend LockExpired handled by transferRetryMessageEpic\n  Object(map["a" /* map */])(function (signed) {\n    return transferExpire.success({\n      message: signed\n    }, action.meta);\n  }));\n}\n/**\n * Create an observable to compose and sign a LockExpired message/transferExpire.success action\n * As it\'s an async observable which depends on state and may return an action which changes it,\n * the returned observable must be subscribed in a serialized context that ensures non-concurrent\n * write access to the channel\'s balance proof (e.g. concatMap)\n *\n * @param state$ - Observable of current state\n * @param action - transfer request action to be sent\n * @param signer - RaidenEpicDeps members\n * @returns Observable of transferExpire.success|transferExpire.failure actions\n */\n\n\nfunction makeAndSignLockExpired(state$, action, _ref11) {\n  var log = _ref11.log,\n      signer = _ref11.signer;\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    return makeAndSignLockExpired$(state, action, {\n      signer: signer,\n      log: log\n    });\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    return Object(of["a" /* of */])(transferExpire.failure(err, action.meta));\n  }));\n}\n\nfunction makeAndSignWithdrawConfirmation$(state, action, _ref12, cache) {\n  var log = _ref12.log,\n      signer = _ref12.signer;\n\n  var _a, _b;\n\n  var request = action.payload.message;\n  var channel = lodash_get_default()(state.channels, [action.meta.tokenNetwork, action.meta.partner]); // check channel is in valid state and requested total_withdraw is valid\n  // withdrawable amount is: total_withdraw <= partner.deposit + own.transferredAmount\n\n  assert(channel && channel.state === ChannelState.open && request.channel_identifier.eq(channel.id), \'channel gone or not open\');\n  assert(request.expiration.gt(state.blockNumber), \'WithdrawRequest expired\');\n  assert(request.total_withdraw.lte(channel.partner.deposit.add((_b = (_a = channel.own.balanceProof) === null || _a === void 0 ? void 0 : _a.transferredAmount) !== null && _b !== void 0 ? _b : constants["Zero"])), \'invalid total_withdraw, greater than partner.deposit + own.transferredAmount\');\n  var signed$;\n  var key = request.message_identifier.toString(); // compare WithdrawRequest and a possible signed WithdrawConfirmation\n\n  function compareReqConf(req, conf) {\n    if (!conf) return false;\n    var matchSet = pick_default()(conf, [\'token_network_address\', \'participant\', \'chain_id\', \'channel_identifier\', \'total_withdraw\', \'expiration\']);\n    return isMatchWith_default()(req, matchSet, function (objVal, othVal) {\n      return BigNumberC.is(objVal) ? objVal.eq(othVal) : BigNumberC.is(othVal) ? othVal.eq(objVal) : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      undefined;\n    });\n  }\n\n  var cached = cache.get(key); // ensure all parameters are equal the cached one before returning it, or else sign again\n\n  if (compareReqConf(request, cached)) {\n    signed$ = Object(of["a" /* of */])(cached);\n  } else {\n    var confirmation = {\n      type: MessageType.WITHDRAW_CONFIRMATION,\n      message_identifier: request.message_identifier,\n      chain_id: request.chain_id,\n      token_network_address: request.token_network_address,\n      channel_identifier: request.channel_identifier,\n      participant: request.participant,\n      total_withdraw: request.total_withdraw,\n      nonce: nextNonce(channel.own.balanceProof),\n      expiration: request.expiration\n    };\n    signed$ = Object(from["a" /* from */])(signMessage(signer, confirmation, {\n      log: log\n    })).pipe(Object(tap["a" /* tap */])(function (signed) {\n      return cache.put(key, signed);\n    }));\n  }\n\n  return signed$.pipe(Object(map["a" /* map */])(function (signed) {\n    return withdrawReceive.success({\n      message: signed\n    }, action.meta);\n  }));\n}\n/**\n * Create an observable to compose and sign a [[WithdrawConfirmation]] message\n *\n * Validate we\'re inside expiration timeout, channel exists and is open, and that total_withdraw is\n * less than or equal withdrawable amount (while we don\'t receive, partner.deposit +\n * own.transferredAmount).\n * We need it inside [[transferGenerateAndSignEnvelopeMessageEpic]] concatMap/lock because we read\n * and change the \'nonce\', even though WithdrawConfirmation doesn\'t carry a full balanceProof.\n * Also, instead of storing the messages in state and retrying, we just cache it and send cached\n * signed message on each received request.\n *\n * TODO: once we\'re able to receive transfers, instead of considering only own.transferredAmount,\n * we must also listen to ChannelWithdraw events, store it alongside pending withdraw requests and\n * take that into account before accepting a transfer and also total balance/capacity for accepting\n * a total_withdraw from a WithdrawRequest.\n *\n * @param state$ - Observable of current state\n * @param action - Withdraw request which caused this handling\n * @param signer - RaidenEpicDeps members\n * @param cache - A Map to store and reuse previously Signed<WithdrawConfirmation>\n * @returns Observable of transferExpire.success|transferExpire.failure actions\n */\n\n\nfunction makeAndSignWithdrawConfirmation(state$, action, _ref13, cache) {\n  var signer = _ref13.signer,\n      log = _ref13.log;\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    return makeAndSignWithdrawConfirmation$(state, action, {\n      log: log,\n      signer: signer\n    }, cache);\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    log.warn(\'Error trying to handle WithdrawRequest, ignoring:\', err);\n    return empty["a" /* EMPTY */];\n  }));\n}\n\nfunction receiveTransferSigned(state$, action, _ref14) {\n  var address = _ref14.address,\n      log = _ref14.log,\n      network = _ref14.network,\n      signer = _ref14.signer,\n      config$ = _ref14.config$;\n  var secrethash = action.payload.message.lock.secrethash;\n  var meta = {\n    secrethash: secrethash,\n    direction: Direction.RECEIVED\n  };\n  return Object(combineLatest["a" /* combineLatest */])([state$, config$]).pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (_ref15) {\n    var _ref16 = locked_slicedToArray(_ref15, 2),\n        state = _ref16[0],\n        _ref16$ = _ref16[1],\n        revealTimeout = _ref16$.revealTimeout,\n        caps = _ref16$.caps;\n\n    var _a, _b, _c, _d, _e, _f;\n\n    var transfer = action.payload.message;\n\n    if (secrethash in state.received) {\n      log.warn(\'transfer already present\', action.meta);\n      var msgId = transfer.message_identifier; // if transfer matches the stored one, re-send Processed once\n\n      if (state.received[secrethash].partner === action.meta.address && state.received[secrethash].transfer[1].message_identifier.eq(msgId)) {\n        // transferProcessed again will trigger messageSend.request\n        return Object(of["a" /* of */])(transferProcessed({\n          message: state.received[secrethash].transferProcessed[1]\n        }, meta));\n      } else return empty["a" /* EMPTY */];\n    } // full balance proof validation\n\n\n    var tokenNetwork = transfer.token_network_address;\n    var partner = action.meta.address;\n    var channel = (_a = state.channels[tokenNetwork]) === null || _a === void 0 ? void 0 : _a[partner];\n    assert((channel === null || channel === void 0 ? void 0 : channel.state) === ChannelState.open, \'channel not found or not open\');\n    assert(transfer.chain_id.eq(network.chainId), \'chainId mismatch\');\n    assert(transfer.channel_identifier.eq(channel.id), \'channelId mismatch\');\n    assert(transfer.nonce.eq(nextNonce(channel.partner.balanceProof)), \'nonce mismatch\');\n    assert(transfer.transferred_amount.eq((_c = (_b = channel.partner.balanceProof) === null || _b === void 0 ? void 0 : _b.transferredAmount) !== null && _c !== void 0 ? _c : constants["Zero"]), \'transferredAmount mismatch\');\n    assert(transfer.locked_amount.eq(((_e = (_d = channel.partner.balanceProof) === null || _d === void 0 ? void 0 : _d.lockedAmount) !== null && _e !== void 0 ? _e : constants["Zero"]).add(transfer.lock.amount)), \'lockedAmount mismatch\');\n    var partnerCapacity = channelAmounts(channel).partnerCapacity;\n    assert(transfer.lock.amount.lte(partnerCapacity), \'balanceProof total amount bigger than capacity\');\n    assert(transfer.recipient === address, "Received transfer isn\'t for us");\n    assert(transfer.lock.expiration.sub(state.blockNumber).gt(revealTimeout), \'lock expires too soon\');\n    var locks = [].concat(locked_toConsumableArray((_f = channel.partner.locks) !== null && _f !== void 0 ? _f : []), [transfer.lock]);\n    var locksroot = getLocksroot(locks);\n    assert(transfer.locksroot === locksroot, \'locksroot mismatch\');\n    var token = findKey_default()(state.tokens, function (tn) {\n      return tn === tokenNetwork;\n    });\n    log.info(\'Receiving transfer of value\', transfer.lock.amount.toString(), \'of token\', token, \', from\', transfer.initiator, \', through partner\', partner);\n    var request$ = Object(of["a" /* of */])(undefined);\n    if (!(caps === null || caps === void 0 ? void 0 : caps[Capabilities.NO_RECEIVE]) && transfer.target === address) request$ = Object(defer["a" /* defer */])(function () {\n      var request = {\n        type: MessageType.SECRET_REQUEST,\n        payment_identifier: transfer.payment_identifier,\n        secrethash: secrethash,\n        amount: transfer.lock.amount,\n        expiration: transfer.lock.expiration,\n        message_identifier: makeMessageId()\n      };\n      return signMessage(signer, request, {\n        log: log\n      });\n    });\n    var processed$ = Object(defer["a" /* defer */])(function () {\n      var processed = {\n        type: MessageType.PROCESSED,\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        message_identifier: transfer.message_identifier\n      };\n      return signMessage(signer, processed, {\n        log: log\n      });\n    }); // if any of these signature prompts fail, none of these actions will be emitted\n\n    return Object(combineLatest["a" /* combineLatest */])([processed$, request$]).pipe(Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee3(_ref17) {\n      var _ref18, processed, request;\n\n      return regenerator_default.a.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _ref18 = locked_slicedToArray(_ref17, 2), processed = _ref18[0], request = _ref18[1];\n              _context3.next = 3;\n              return transferSigned({\n                message: transfer,\n                fee: constants["Zero"]\n              }, meta);\n\n            case 3:\n              _context3.next = 5;\n              return transferProcessed({\n                message: processed\n              }, meta);\n\n            case 5:\n              if (!request) {\n                _context3.next = 10;\n                break;\n              }\n\n              _context3.next = 8;\n              return matrixPresence.request(undefined, {\n                address: transfer.initiator\n              });\n\n            case 8:\n              _context3.next = 10;\n              return transferSecretRequest({\n                message: request\n              }, meta);\n\n            case 10:\n            case "end":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    return Object(of["a" /* of */])(actions_transfer.failure(err, meta));\n  }));\n}\n\nfunction receiveTransferUnlocked(state$, action, _ref19) {\n  var log = _ref19.log,\n      network = _ref19.network,\n      signer = _ref19.signer;\n  var secrethash = getSecrethash(action.payload.message.secret);\n  var meta = {\n    secrethash: secrethash,\n    direction: Direction.RECEIVED\n  };\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    var _a;\n\n    if (!(secrethash in state.received)) return empty["a" /* EMPTY */];\n    var received = state.received[secrethash];\n    var unlock = action.payload.message;\n    var partner = action.meta.address;\n    assert(partner === received.partner, \'wrong partner\');\n\n    if (received.unlock) {\n      log.warn(\'transfer already unlocked\', action.meta); // if message matches the stored one, re-send Processed once\n\n      if (received.unlockProcessed && received.unlockProcessed[1].message_identifier.eq(unlock.message_identifier)) {\n        // transferProcessed again will trigger messageSend.request\n        return Object(of["a" /* of */])(transferUnlockProcessed({\n          message: received.unlockProcessed[1]\n        }, meta));\n      } else return empty["a" /* EMPTY */];\n    }\n\n    var transf = received.transfer[1]; // unlock validation\n\n    var tokenNetwork = unlock.token_network_address;\n    assert(tokenNetwork === transf.token_network_address, \'wrong tokenNetwork\');\n    var channel = (_a = state.channels[tokenNetwork]) === null || _a === void 0 ? void 0 : _a[partner];\n    assert((channel === null || channel === void 0 ? void 0 : channel.state) === ChannelState.open && channel.partner.balanceProof && channel.partner.locks, \'channel not found or not open\');\n    assert(unlock.chain_id.eq(network.chainId), \'chainId mismatch\');\n    assert(unlock.channel_identifier.eq(channel.id), \'channelId mismatch\');\n    assert(unlock.nonce.eq(nextNonce(channel.partner.balanceProof)), \'nonce mismatch\');\n    var lock = transf.lock;\n    var amount = lock.amount;\n    assert(unlock.transferred_amount.eq(channel.partner.balanceProof.transferredAmount.add(amount)), \'transferredAmount mismatch\');\n    assert(unlock.locked_amount.eq(channel.partner.balanceProof.lockedAmount.sub(amount)), \'lockedAmount mismatch\');\n    var locks = channel.partner.locks.filter(function (lock) {\n      return lock.secrethash !== secrethash;\n    });\n    var locksroot = getLocksroot(locks);\n    assert(unlock.locksroot === locksroot, \'locksroot mismatch\');\n    var processed = {\n      type: MessageType.PROCESSED,\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      message_identifier: unlock.message_identifier\n    }; // if any of these signature prompts fail, none of these actions will be emitted\n\n    return Object(from["a" /* from */])(signMessage(signer, processed, {\n      log: log\n    })).pipe(Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee4(processed) {\n      return regenerator_default.a.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return transferUnlock.success({\n                message: unlock\n              }, meta);\n\n            case 2:\n              _context4.next = 4;\n              return transferUnlockProcessed({\n                message: processed\n              }, meta);\n\n            case 4:\n              _context4.next = 6;\n              return actions_transfer.success({\n                balanceProof: getBalanceProofFromEnvelopeMessage(unlock)\n              }, meta);\n\n            case 6:\n            case "end":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    })));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    log.warn(\'Error trying to process received Unlock\', err);\n    return Object(of["a" /* of */])(transferUnlock.failure(err, meta));\n  }));\n}\n\nfunction receiveTransferExpired(state$, action, _ref20) {\n  var log = _ref20.log,\n      network = _ref20.network,\n      signer = _ref20.signer,\n      config$ = _ref20.config$;\n  var secrethash = action.payload.message.secrethash;\n  var meta = {\n    secrethash: secrethash,\n    direction: Direction.RECEIVED\n  };\n  return Object(combineLatest["a" /* combineLatest */])([state$, config$]).pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (_ref21) {\n    var _ref22 = locked_slicedToArray(_ref21, 2),\n        state = _ref22[0],\n        confirmationBlocks = _ref22[1].confirmationBlocks;\n\n    var _a, _b, _c;\n\n    if (!(secrethash in state.received)) return empty["a" /* EMPTY */];\n    var received = state.received[secrethash];\n    var expired = action.payload.message;\n    var partner = action.meta.address;\n    assert(partner === received.partner, \'wrong partner\');\n\n    if (received.lockExpired) {\n      log.warn(\'transfer already expired\', action.meta); // if message matches the stored one, re-send Processed once\n\n      if (received.lockExpiredProcessed && received.lockExpiredProcessed[1].message_identifier.eq(expired.message_identifier)) {\n        // transferProcessed again will trigger messageSend.request\n        return Object(of["a" /* of */])(transferExpireProcessed({\n          message: received.lockExpiredProcessed[1]\n        }, meta));\n      } else return empty["a" /* EMPTY */];\n    }\n\n    var transf = received.transfer[1]; // lockExpired validation\n\n    assert(transf.lock.expiration.add(confirmationBlocks).lte(state.blockNumber), \'expiration block not confirmed yet\');\n    assert(!received.unlock, \'transfer unlocked\');\n    assert(!((_b = (_a = received.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock), \'secret registered\');\n    var tokenNetwork = expired.token_network_address;\n    assert(tokenNetwork === transf.token_network_address, \'wrong tokenNetwork\');\n    var channel = (_c = state.channels[tokenNetwork]) === null || _c === void 0 ? void 0 : _c[partner];\n    assert((channel === null || channel === void 0 ? void 0 : channel.state) === ChannelState.open && channel.partner.balanceProof && channel.partner.locks, \'channel not found or not open\');\n    assert(expired.chain_id.eq(network.chainId), \'chainId mismatch\');\n    assert(expired.channel_identifier.eq(channel.id), \'channelId mismatch\');\n    assert(expired.nonce.eq(nextNonce(channel.partner.balanceProof)), \'nonce mismatch\');\n    var lock = transf.lock;\n    var amount = lock.amount;\n    assert(expired.transferred_amount.eq(channel.partner.balanceProof.transferredAmount), \'transferredAmount mismatch\');\n    assert(expired.locked_amount.eq(channel.partner.balanceProof.lockedAmount.sub(amount)), \'lockedAmount mismatch\');\n    var locks = channel.partner.locks.filter(function (lock) {\n      return lock.secrethash !== secrethash;\n    });\n    var locksroot = getLocksroot(locks);\n    assert(expired.locksroot === locksroot, \'locksroot mismatch\');\n    var processed = {\n      type: MessageType.PROCESSED,\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      message_identifier: expired.message_identifier\n    }; // if any of these signature prompts fail, none of these actions will be emitted\n\n    return Object(from["a" /* from */])(signMessage(signer, processed, {\n      log: log\n    })).pipe(Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee5(processed) {\n      return regenerator_default.a.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return transferExpire.success({\n                message: expired\n              }, meta);\n\n            case 2:\n              _context5.next = 4;\n              return transferExpireProcessed({\n                message: processed\n              }, meta);\n\n            case 4:\n              _context5.next = 6;\n              return actions_transfer.failure(new error_RaidenError(ErrorCodes.XFER_EXPIRED, {\n                block: transf.lock.expiration.toString()\n              }), meta);\n\n            case 6:\n            case "end":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    })));\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    log.warn(\'Error trying to process received LockExpired\', err);\n    return Object(of["a" /* of */])(transferExpire.failure(err, meta));\n  }));\n}\n/**\n * Serialize creation and signing of BalanceProof-changing messages or actions\n * Actions which change any data in any channel balance proof must only ever be created reading\n * state inside the serialization flow provided by the concatMap, and also be composed and produced\n * inside it (inner, subscribed observable)\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps\n * @returns Observable of output actions for this epic\n */\n\n\nvar locked_transferGenerateAndSignEnvelopeMessageEpic = function transferGenerateAndSignEnvelopeMessageEpic(action$, _ref23, deps) {\n  locked_objectDestructuringEmpty(_ref23);\n\n  var withdrawCache = new LruCache(32);\n  var state$ = deps.latest$.pipe(pluckDistinct(\'state\')); // replayed(1)\' state$\n\n  return Object(merge["a" /* merge */])(action$.pipe(Object(filter["a" /* filter */])(isActionOf([actions_transfer.request, transferUnlock.request, transferExpire.request, withdrawReceive.request]))), // merge separatedly, to filter per message type before concat\n  action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType([Signed(LockedTransfer), Signed(Unlock), Signed(LockExpired)])))).pipe(Object(concatMap["a" /* concatMap */])(function (action) {\n    return actions_transfer.request.is(action) ? makeAndSignTransfer(state$, action, deps) : transferUnlock.request.is(action) ? makeAndSignUnlock(state$, action, deps) : transferExpire.request.is(action) ? makeAndSignLockExpired(state$, action, deps) : withdrawReceive.request.is(action) ? makeAndSignWithdrawConfirmation(state$, action, deps, withdrawCache) : action.payload.message.type === MessageType.LOCKED_TRANSFER ? receiveTransferSigned(state$, action, deps) : action.payload.message.type === MessageType.UNLOCK ? receiveTransferUnlocked(state$, action, deps) : receiveTransferExpired(state$, action, deps);\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/init.js\n\n\nfunction init_slicedToArray(arr, i) { return init_arrayWithHoles(arr) || init_iterableToArrayLimit(arr, i) || init_unsupportedIterableToArray(arr, i) || init_nonIterableRest(); }\n\nfunction init_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction init_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return init_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return init_arrayLikeToArray(o, minLen); }\n\nfunction init_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction init_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction init_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction init_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\n\n\n\n\n\n\n/**\n * Re-queue pending transfer\'s BalanceProof/Envelope messages for retry on init\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferSigned|transferUnlock.success actions\n */\n\nvar init_initQueuePendingEnvelopeMessagesEpic = function initQueuePendingEnvelopeMessagesEpic(_ref, state$) {\n  init_objectDestructuringEmpty(_ref);\n\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee(state) {\n    var _a, _b, _i, _Object$entries, _Object$entries$_i, key, sent, secrethash, meta;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _i = 0, _Object$entries = Object.entries(state.sent);\n\n          case 1:\n            if (!(_i < _Object$entries.length)) {\n              _context.next = 21;\n              break;\n            }\n\n            _Object$entries$_i = init_slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], sent = _Object$entries$_i[1];\n            secrethash = key; // transfer already completed or channelClosed\n\n            if (!(sent.unlockProcessed || sent.lockExpiredProcessed || ((_b = (_a = sent.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) || sent.channelClosed)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt("continue", 18);\n\n          case 6:\n            meta = {\n              secrethash: secrethash,\n              direction: Direction.SENT\n            }; // on init, request monitor presence of any pending transfer target\n\n            _context.next = 9;\n            return matrixPresence.request(undefined, {\n              address: sent.transfer[1].target\n            });\n\n          case 9:\n            if (sent.transferProcessed) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 12;\n            return transferSigned({\n              message: sent.transfer[1],\n              fee: sent.fee\n            }, meta);\n\n          case 12:\n            if (!sent.unlock) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 15;\n            return transferUnlock.success({\n              message: sent.unlock[1]\n            }, meta);\n\n          case 15:\n            if (!sent.lockExpired) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 18;\n            return transferExpire.success({\n              message: sent.lockExpired[1]\n            }, meta);\n\n          case 18:\n            _i++;\n            _context.next = 1;\n            break;\n\n          case 21:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n};\n/**\n * Re-queue pending Received transfer\'s\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferSigned|transferUnlock.success actions\n */\n\nvar init_initQueuePendingReceivedEpic = function initQueuePendingReceivedEpic(_ref2, state$, _ref3) {\n  init_objectDestructuringEmpty(_ref2);\n\n  var config$ = _ref3.config$;\n  return state$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n    return Object(from["a" /* from */])(Object.entries(state.received));\n  }), Object(filter["a" /* filter */])(function (_ref4) {\n    var _ref5 = init_slicedToArray(_ref4, 2),\n        received = _ref5[1];\n\n    var _a, _b;\n\n    return !received.unlock && !received.lockExpired && !((_b = (_a = received.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) && !received.channelClosed;\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee2(_ref6) {\n    var _ref7, _ref7$, secrethash, received, caps, meta;\n\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref7 = init_slicedToArray(_ref6, 2), _ref7$ = init_slicedToArray(_ref7[0], 2), secrethash = _ref7$[0], received = _ref7$[1], caps = _ref7[1].caps;\n            // loop over all pending transfers\n            meta = {\n              secrethash: secrethash,\n              direction: Direction.RECEIVED\n            }; // on init, request monitor presence of any pending transfer initiator\n\n            _context2.next = 4;\n            return transferSigned({\n              message: received.transfer[1],\n              fee: received.fee\n            }, meta);\n\n          case 4:\n            if (!(received.secret && !received.secretReveal)) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 7;\n            return transferSecret({\n              secret: received.secret[1].value\n            }, meta);\n\n          case 7:\n            if (!received.secretReveal) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 10;\n            return transferSecretReveal({\n              message: received.secretReveal[1]\n            }, meta);\n\n          case 10:\n            if (!(!(caps === null || caps === void 0 ? void 0 : caps[Capabilities.NO_RECEIVE]) && !received.secret && received.secretRequest)) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.next = 13;\n            return matrixPresence.request(undefined, {\n              address: received.transfer[1].initiator\n            });\n\n          case 13:\n            _context2.next = 15;\n            return transferSecretRequest({\n              message: received.secretRequest[1]\n            }, meta);\n\n          case 15:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/mediate.js\nfunction mediate_slicedToArray(arr, i) { return mediate_arrayWithHoles(arr) || mediate_iterableToArrayLimit(arr, i) || mediate_unsupportedIterableToArray(arr, i) || mediate_nonIterableRest(); }\n\nfunction mediate_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction mediate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return mediate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mediate_arrayLikeToArray(o, minLen); }\n\nfunction mediate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction mediate_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction mediate_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n/**\n * When receiving a transfer not targeting us, create an outgoing transfer to target\n * Mediated transfers are handled the same way as unrelated received & sent pairs. The difference\n * is that we don\'t request the secret (as initiator would only reveal to target), and instead,\n * wait for SecretReveal to cascade back from outbound partner, then we unlock it and reveal back\n * to inbound partner, to get its Unlock.\n * If it doesn\'t succeed, if we didn\'t get reveal, we\'ll accept LockExpired, if we did and know\n * the secret but partner didn\'t unlock, we register on-chain as usual.\n *\n * @param action$ - Observable of incoming transferSigned transfers\n * @param state$ - Observable of RaidenStates\n * @param deps - Raiden epic deps\n * @returns Observable of outbound transfer.request actions\n */\n\nvar mediate_transferMediateEpic = function transferMediateEpic(action$, state$, _ref) {\n  var address = _ref.address,\n      config$ = _ref.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(transferSigned.is), // filter for received transfers not to us\n  Object(filter["a" /* filter */])(function (action) {\n    return action.meta.direction === Direction.RECEIVED && action.payload.message.target !== address;\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), // filter when mediating is enabled and outgoing transfer isn\'t set\n  Object(filter["a" /* filter */])(function (_ref2) {\n    var _ref3 = mediate_slicedToArray(_ref2, 3),\n        action = _ref3[0],\n        sent = _ref3[1].sent,\n        caps = _ref3[2].caps;\n\n    return !(caps === null || caps === void 0 ? void 0 : caps[Capabilities.NO_MEDIATE]) && !(action.meta.secrethash in sent);\n  }), Object(map["a" /* map */])(function (_ref4) {\n    var _ref5 = mediate_slicedToArray(_ref4, 1),\n        _ref5$ = _ref5[0],\n        transf = _ref5$.payload.message,\n        secrethash = _ref5$.meta.secrethash;\n\n    return (// request an outbound transfer to target\n      actions_transfer.request({\n        tokenNetwork: transf.token_network_address,\n        target: transf.target,\n        value: transf.lock.amount,\n        paymentId: transf.payment_identifier,\n        paths: transf.metadata.routes.map(function (_ref6) {\n          var route = _ref6.route;\n          return {\n            path: route.slice(1),\n            fee: constants["Zero"]\n          };\n        }),\n        expiration: transf.lock.expiration.toNumber(),\n        initiator: transf.initiator\n      }, {\n        secrethash: secrethash,\n        direction: Direction.SENT\n      })\n    );\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/processed.js\n\n\nfunction processed_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction processed_slicedToArray(arr, i) { return processed_arrayWithHoles(arr) || processed_iterableToArrayLimit(arr, i) || processed_unsupportedIterableToArray(arr, i) || processed_nonIterableRest(); }\n\nfunction processed_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction processed_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return processed_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return processed_arrayLikeToArray(o, minLen); }\n\nfunction processed_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction processed_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction processed_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Handles receiving a signed Processed for some sent LockedTransfer\n * This will persist the Processed reply in transfer state and stop message retry\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferProcessed actions\n */\n\nvar processed_transferProcessedReceivedEpic = function transferProcessedReceivedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType(Signed(Processed))), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee(_ref) {\n    var _ref2, action, state, message, secrethash, _i2, _Object$entries, _Object$entries$_i, key, sent;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref2 = processed_slicedToArray(_ref, 2), action = _ref2[0], state = _ref2[1];\n            message = action.payload.message;\n            secrethash = undefined;\n            _i2 = 0, _Object$entries = Object.entries(state.sent);\n\n          case 4:\n            if (!(_i2 < _Object$entries.length)) {\n              _context.next = 12;\n              break;\n            }\n\n            _Object$entries$_i = processed_slicedToArray(_Object$entries[_i2], 2), key = _Object$entries$_i[0], sent = _Object$entries$_i[1];\n\n            if (!(sent.transfer[1].message_identifier.eq(message.message_identifier) && sent.transfer[1].recipient === action.meta.address)) {\n              _context.next = 9;\n              break;\n            }\n\n            secrethash = key;\n            return _context.abrupt("break", 12);\n\n          case 9:\n            _i2++;\n            _context.next = 4;\n            break;\n\n          case 12:\n            if (secrethash) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt("return");\n\n          case 14:\n            _context.next = 16;\n            return transferProcessed({\n              message: message\n            }, {\n              secrethash: secrethash,\n              direction: Direction.SENT\n            });\n\n          case 16:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n};\n/**\n * Handles sending Processed for a received EnvelopeMessages\n *\n * @param action$ - Observable of transferProcessed actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of messageSend.request actions\n */\n\nvar processed_transferProcessedSendEpic = function transferProcessedSendEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf([transferProcessed, transferUnlockProcessed, transferExpireProcessed])), // transfer direction is RECEIVED, not message direction (which is outbound)\n  Object(filter["a" /* filter */])(function (action) {\n    return action.meta.direction === Direction.RECEIVED;\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(map["a" /* map */])(function (_ref3) {\n    var _ref4 = processed_slicedToArray(_ref3, 2),\n        action = _ref4[0],\n        received = _ref4[1].received;\n\n    return messageSend.request({\n      message: action.payload.message\n    }, {\n      address: received[action.meta.secrethash].partner,\n      msgId: action.payload.message.message_identifier.toString()\n    });\n  }));\n};\n/**\n * Handles receiving a signed Processed for some sent Unlock\n * It sends the success action for transfer (which resolves any pending Promise), marking it as\n * completed successfuly by setting sent.unlockProcessed\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transfer.success|transferUnlockProcessed actions\n */\n\nvar processed_transferUnlockProcessedReceivedEpic = function transferUnlockProcessedReceivedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType(Signed(Processed))), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee2(_ref5) {\n    var _ref6, action, state, message, secrethash, meta;\n\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref6 = processed_slicedToArray(_ref5, 2), action = _ref6[0], state = _ref6[1];\n            message = action.payload.message;\n            secrethash = findKey_default()(state.sent, function (sent) {\n              return sent.unlock && sent.unlock[1].message_identifier.eq(message.message_identifier) && sent.partner === action.meta.address;\n            });\n\n            if (secrethash) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt("return");\n\n          case 5:\n            meta = {\n              secrethash: secrethash,\n              direction: Direction.SENT\n            };\n            _context2.next = 8;\n            return actions_transfer.success({\n              balanceProof: getBalanceProofFromEnvelopeMessage(state.sent[secrethash].unlock[1])\n            }, meta);\n\n          case 8:\n            _context2.next = 10;\n            return transferUnlockProcessed({\n              message: message\n            }, meta);\n\n          case 10:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n};\n/**\n * Handles receiving a signed Processed for some sent LockExpired\n * It marks the end of the unhappy case, by setting sent.lockExpiredProcessed\n * transfer.failure was already sent at newBlock handling/transferExpire.request time\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of output actions for this epic\n */\n\nvar processed_transferExpireProcessedEpic = function transferExpireProcessedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType(Signed(Processed))), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee3(_ref7) {\n    var _ref8, action, state, message, secrethash;\n\n    return regenerator_default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _ref8 = processed_slicedToArray(_ref7, 2), action = _ref8[0], state = _ref8[1];\n            message = action.payload.message;\n            secrethash = findKey_default()(state.sent, function (sent) {\n              return sent.lockExpired && sent.lockExpired[1].message_identifier.eq(message.message_identifier) && sent.partner === action.meta.address;\n            });\n\n            if (secrethash) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt("return");\n\n          case 5:\n            _context3.next = 7;\n            return transferExpireProcessed({\n              message: message\n            }, {\n              secrethash: secrethash,\n              direction: Direction.SENT\n            });\n\n          case 7:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })));\n};\n/**\n * Sends Processed for unhandled nonce\'d messages\n *\n * We don\'t yet support receiving nor mediating transfers (LockedTransfer, RefundTransfer), but\n * also don\'t want the partner to keep retrying any messages intended for us indefinitely.\n * That\'s why we decided to just answer them with Processed, to clear their queue. Of course, we\n * still don\'t validate, store state for these messages nor handle them in any way (e.g. requesting\n * secret from initiator), so any transfer is going to expire, and then we also reply Processed for\n * the respective LockExpired.\n * Additionally, we hook in sending Processed for other messages which contain nonces (and require\n * Processed reply to stop being retried) but are safe to be ignored, like WithdrawExpired.\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @param signer - RaidenEpicDeps members\n * @returns Observable of messageSend.request actions\n */\n\nvar processed_transferReceivedReplyProcessedEpic = function transferReceivedReplyProcessedEpic(action$, _ref9, _ref10) {\n  processed_objectDestructuringEmpty(_ref9);\n\n  var log = _ref10.log,\n      signer = _ref10.signer;\n  var cache = new LruCache(32);\n  return action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType([Signed(RefundTransfer), Signed(WithdrawExpired)])), Object(concatMap["a" /* concatMap */])(function (action) {\n    var message = action.payload.message; // defer causes the cache check to be performed at subscription time\n\n    return Object(defer["a" /* defer */])(function () {\n      var msgId = message.message_identifier;\n      var key = msgId.toString();\n      var cached = cache.get(key);\n      if (cached) return Object(of["a" /* of */])(messageSend.request({\n        message: cached\n      }, {\n        address: action.meta.address,\n        msgId: key\n      }));\n      var processed = {\n        type: MessageType.PROCESSED,\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        message_identifier: msgId\n      };\n      return Object(from["a" /* from */])(signMessage(signer, processed, {\n        log: log\n      })).pipe(Object(tap["a" /* tap */])(function (signed) {\n        return cache.put(key, signed);\n      }), Object(map["a" /* map */])(function (signed) {\n        return messageSend.request({\n          message: signed\n        }, {\n          address: action.meta.address,\n          msgId: key\n        });\n      }));\n    });\n  }));\n};\n// EXTERNAL MODULE: ./node_modules/lodash/isEqualWith.js\nvar isEqualWith = __webpack_require__("b6ad");\nvar isEqualWith_default = /*#__PURE__*/__webpack_require__.n(isEqualWith);\n\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/refund.js\n\n\nfunction refund_slicedToArray(arr, i) { return refund_arrayWithHoles(arr) || refund_iterableToArrayLimit(arr, i) || refund_unsupportedIterableToArray(arr, i) || refund_nonIterableRest(); }\n\nfunction refund_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction refund_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return refund_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return refund_arrayLikeToArray(o, minLen); }\n\nfunction refund_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction refund_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction refund_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n // Compare two objects, using .eq for BigNumber properties\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction bnIsEqual(obj, other) {\n  return isEqualWith_default()(obj, other, function (objVal, othVal) {\n    return BigNumberC.is(objVal) ? objVal.eq(othVal) : BigNumberC.is(othVal) ? othVal.eq(objVal) : undefined;\n  });\n}\n/**\n * Receiving RefundTransfer for pending transfer fails it\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transfer.failure|transferRefunded actions\n */\n\n\nvar refund_transferRefundedEpic = function transferRefundedEpic(action$, state$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType(Signed(RefundTransfer))), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee(_ref) {\n    var _ref2, action, state, message, secrethash, sent, transf, meta;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref2 = refund_slicedToArray(_ref, 2), action = _ref2[0], state = _ref2[1];\n            message = action.payload.message;\n            secrethash = message.lock.secrethash;\n\n            if (secrethash in state.sent) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt("return");\n\n          case 5:\n            sent = state.sent[secrethash], transf = sent.transfer[1];\n\n            if (!(message.initiator !== transf.recipient || !message.payment_identifier.eq(transf.payment_identifier) || !bnIsEqual(message.lock, transf.lock))) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt("return");\n\n          case 8:\n            if (!(sent.unlock || // already unlocked\n            sent.lockExpired || // already expired\n            sent.channelClosed || // channel closed\n            transf.lock.expiration.lte(state.blockNumber) // lock expired but transfer didn\'t yet\n            )) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt("return");\n\n          case 10:\n            meta = {\n              secrethash: secrethash,\n              direction: Direction.SENT\n            };\n            _context.next = 13;\n            return transferRefunded({\n              message: message\n            }, meta);\n\n          case 13:\n            _context.next = 15;\n            return actions_transfer.failure(new error_RaidenError(ErrorCodes.XFER_REFUNDED), meta);\n\n          case 15:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/retry.js\nfunction retry_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction retry_slicedToArray(arr, i) { return retry_arrayWithHoles(arr) || retry_iterableToArrayLimit(arr, i) || retry_unsupportedIterableToArray(arr, i) || retry_nonIterableRest(); }\n\nfunction retry_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction retry_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return retry_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return retry_arrayLikeToArray(o, minLen); }\n\nfunction retry_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction retry_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction retry_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n\n\n\n\nfunction repeatUntil(notifier) {\n  var delayMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30e3;\n  // Resubscribe/retry every 30s after messageSend succeeds\n  // Notice first (or any) messageSend.request can wait for a long time before succeeding, as it\n  // waits for address\'s user in transport to be online and joined room before actually\n  // sending the message. That\'s why repeatWhen emits/resubscribe only some time after\n  // sendOnceAndWaitSent$ completes, instead of a plain \'interval\'\n  return function (input$) {\n    return input$.pipe(Object(repeatWhen["a" /* repeatWhen */])(function (completed$) {\n      return completed$.pipe(Object(delay["a" /* delay */])(delayMs));\n    }), Object(takeUntil["a" /* takeUntil */])(notifier));\n  };\n}\n\nfunction retrySendUntil$(send, action$, notifier) {\n  var delayMs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30e3;\n  return dispatchAndWait$(action$, send, isResponseOf(messageSend, send.meta)).pipe(repeatUntil(notifier, delayMs));\n}\n/**\n * Handles a transferSigned action and retry messageSend.request until transfer is gone (completed\n * with success or error) OR Processed message for LockedTransfer received.\n * transferSigned for pending LockedTransfer\'s may be re-emitted on startup for pending transfer,\n * to start retrying sending the message again until stop condition is met.\n *\n * @param action$ - Observable of transferSigned actions\n * @param state$ - Observable of latest RaidenStates\n * @param config$ - Observable of latest RaidenConfig\n * @param action - The {@link transferSigned} action\n * @returns - Observable of {@link messageSend.request} actions\n */\n\n\nvar retry_signedRetryMessage$ = function signedRetryMessage$(action$, state$, config$, action) {\n  if (action.meta.direction !== Direction.SENT) return empty["a" /* EMPTY */];\n  return config$.pipe(Object(first["a" /* first */])(), Object(switchMap["a" /* switchMap */])(function (_ref) {\n    var httpTimeout = _ref.httpTimeout;\n    var secrethash = action.meta.secrethash;\n    var signed = action.payload.message;\n    var send = messageSend.request({\n      message: signed\n    }, {\n      address: signed.recipient,\n      msgId: signed.message_identifier.toString()\n    });\n    var notifier = state$.pipe(pluckDistinct(\'sent\', secrethash), Object(filter["a" /* filter */])(function (sent) {\n      return !!(sent.transferProcessed || sent.unlockProcessed || sent.lockExpiredProcessed || sent.channelClosed);\n    })); // emit request once immediatelly, then wait until success, then retry every 30s\n\n    return retrySendUntil$(send, action$, notifier, httpTimeout);\n  }));\n};\n/**\n * Handles a transferUnlock.success action and retry messageSend until confirmed.\n * transferUnlock.success for pending Unlock\'s may be re-emitted on startup for pending transfer, to\n * start retrying sending the message again until stop condition is met.\n *\n * @param action$ - Observable of transferUnlock.success actions\n * @param state$ - Observable of the latest RaidenStates\n * @param config$ - Observable of latest RaidenConfig\n * @param action - the transferUnlock.success action\n * @returns Observable of {@link messageSend.request} actions\n */\n\n\nvar retry_unlockedRetryMessage$ = function unlockedRetryMessage$(action$, state$, config$, action) {\n  if (action.meta.direction !== Direction.SENT) return empty["a" /* EMPTY */];\n  return state$.pipe(Object(first["a" /* first */])(), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(switchMap["a" /* switchMap */])(function (_ref2) {\n    var _ref3 = retry_slicedToArray(_ref2, 2),\n        state = _ref3[0],\n        httpTimeout = _ref3[1].httpTimeout;\n\n    var secrethash = action.meta.secrethash;\n    var unlock = action.payload.message;\n    var transfer = state.sent[secrethash].transfer[1];\n    var send = messageSend.request({\n      message: unlock\n    }, {\n      address: transfer.recipient,\n      msgId: unlock.message_identifier.toString()\n    });\n    var notifier = state$.pipe(pluckDistinct(\'sent\', secrethash), Object(filter["a" /* filter */])(function (sent) {\n      return !!(sent.unlockProcessed || sent.channelClosed);\n    })); // emit request once immediatelly, then wait until respective success,\n    // then repeats until confirmed\n\n    return retrySendUntil$(send, action$, notifier, httpTimeout);\n  }));\n};\n/**\n * Handles a transferExpire.success action and retry messageSend.request until transfer is gone (completed\n * with success or error).\n * transferExpire.success for pending LockExpired\'s may be re-emitted on startup for pending transfer, to\n * start retrying sending the message again until stop condition is met.\n *\n * @param action$ - Observable of transferUnlock.success actions\n * @param state$ - Observable of latest RaidenState\n * @param config$ - Observable of latest RaidenConfig\n * @param action - transferExpire.success action\n * @returns Observable of {@link messageSend.request} actions\n */\n\n\nvar retry_expiredRetryMessages$ = function expiredRetryMessages$(action$, state$, config$, action) {\n  if (action.meta.direction !== Direction.SENT) return empty["a" /* EMPTY */];\n  return state$.pipe(Object(first["a" /* first */])(), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(switchMap["a" /* switchMap */])(function (_ref4) {\n    var _ref5 = retry_slicedToArray(_ref4, 2),\n        state = _ref5[0],\n        httpTimeout = _ref5[1].httpTimeout;\n\n    var secrethash = action.meta.secrethash;\n    var lockExpired = action.payload.message;\n    var send = messageSend.request({\n      message: lockExpired\n    }, {\n      address: state.sent[secrethash].transfer[1].recipient,\n      msgId: lockExpired.message_identifier.toString()\n    });\n    var notifier = state$.pipe(pluckDistinct(\'sent\', secrethash), Object(filter["a" /* filter */])(function (sent) {\n      return !!(sent.lockExpiredProcessed || sent.channelClosed);\n    })); // emit request once immediatelly, then wait until respective success,\n    // then retries until confirmed\n\n    return retrySendUntil$(send, action$, notifier, httpTimeout);\n  }));\n};\n\nvar retry_secretRequestRetryMessage$ = function secretRequestRetryMessage$(action$, state$, config$, action) {\n  if (action.meta.direction !== Direction.RECEIVED) return empty["a" /* EMPTY */];\n  return state$.pipe(Object(first["a" /* first */])(), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(switchMap["a" /* switchMap */])(function (_ref6) {\n    var _ref7 = retry_slicedToArray(_ref6, 2),\n        state = _ref7[0],\n        httpTimeout = _ref7[1].httpTimeout;\n\n    var secrethash = action.meta.secrethash;\n    var request = action.payload.message;\n    var send = messageSend.request({\n      message: request\n    }, {\n      address: state.received[secrethash].transfer[1].initiator,\n      msgId: request.message_identifier.toString()\n    });\n    var notifier = state$.pipe(pluckDistinct(\'received\', secrethash), // stop retrying when we\'ve signed secretReveal, lock expired or channel closed\n    // we could stop as soon as we know received.secret, but we use it to retry SecretReveal\n    // signature, if it failed for any reason\n    Object(filter["a" /* filter */])(function (received) {\n      return !!(received.secretReveal || received.lockExpired || received.channelClosed);\n    })); // emit request once immediatelly, then wait until respective success,\n    // then retries until confirmed\n\n    return retrySendUntil$(send, action$, notifier, httpTimeout);\n  }));\n};\n\nvar retry_secretRevealRetryMessage$ = function secretRevealRetryMessage$(action$, state$, config$, action) {\n  if (action.meta.direction !== Direction.RECEIVED) return empty["a" /* EMPTY */];\n  return state$.pipe(Object(first["a" /* first */])(), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(switchMap["a" /* switchMap */])(function (_ref8) {\n    var _ref9 = retry_slicedToArray(_ref8, 2),\n        state = _ref9[0],\n        httpTimeout = _ref9[1].httpTimeout;\n\n    var secrethash = action.meta.secrethash;\n    var reveal = action.payload.message;\n    var send = messageSend.request({\n      message: reveal\n    }, {\n      address: state.received[secrethash].partner,\n      msgId: reveal.message_identifier.toString()\n    });\n    var notifier = state$.pipe(pluckDistinct(\'received\', secrethash), // stop retrying when we were unlocked, secret registered or channel closed\n    // we don\'t test for lockExpired, as we know the secret and must not accept LockExpired\n    Object(filter["a" /* filter */])(function (received) {\n      var _a, _b;\n\n      return !!(received.unlock || ((_b = (_a = received.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) || received.channelClosed);\n    })); // emit request once immediatelly, then wait until respective success,\n    // then retries until confirmed\n\n    return retrySendUntil$(send, action$, notifier, httpTimeout);\n  }));\n};\n/**\n * Retry sending balance proof messages until their respective Processed\n *\n * @param action$ - Observable of transferExpire.success actions\n * @param state$ - Observable of RaidenStates\n * @param latest$ - RaidenEpicDeps latest\n * @returns Observable of messageSend.request actions\n */\n\n\nvar retry_transferRetryMessageEpic = function transferRetryMessageEpic(action$, _ref10, _ref11) {\n  retry_objectDestructuringEmpty(_ref10);\n\n  var latest$ = _ref11.latest$,\n      config$ = _ref11.config$;\n  var state$ = latest$.pipe(pluckDistinct(\'state\'));\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf([transferSigned, transferUnlock.success, transferExpire.success, transferSecretRequest, transferSecretReveal])), Object(mergeMap["a" /* mergeMap */])(function (action) {\n    return transferSigned.is(action) ? retry_signedRetryMessage$(action$, state$, config$, action) : transferUnlock.success.is(action) ? retry_unlockedRetryMessage$(action$, state$, config$, action) : transferExpire.success.is(action) ? retry_expiredRetryMessages$(action$, state$, config$, action) : transferSecretRequest.is(action) ? retry_secretRequestRetryMessage$(action$, state$, config$, action) : retry_secretRevealRetryMessage$(action$, state$, config$, action);\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/secret.js\n\n\nfunction secret_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction secret_slicedToArray(arr, i) { return secret_arrayWithHoles(arr) || secret_iterableToArrayLimit(arr, i) || secret_unsupportedIterableToArray(arr, i) || secret_nonIterableRest(); }\n\nfunction secret_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction secret_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return secret_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return secret_arrayLikeToArray(o, minLen); }\n\nfunction secret_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction secret_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction secret_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Handles receiving a signed SecretRequest from target for some sent LockedTransfer\n * Emits a transferSecretRequest action only if all conditions are met\n *\n * @param action$ - Observable of messageReceived actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferSecretRequest actions\n */\n\nvar secret_transferSecretRequestedEpic = function transferSecretRequestedEpic(action$, state$, _ref) {\n  var address = _ref.address,\n      log = _ref.log;\n  return action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType(Signed(SecretRequest))), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee(_ref2) {\n    var _ref3, action, state, message, transfer;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref3 = secret_slicedToArray(_ref2, 2), action = _ref3[0], state = _ref3[1];\n            message = action.payload.message; // proceed only if we know the secret and the SENT transfer\n\n            if (message.secrethash in state.sent) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt("return");\n\n          case 4:\n            transfer = state.sent[message.secrethash].transfer[1]; // we do only some basic verification here, as most of it is done upon SecretReveal,\n            // to persist the request in most cases in TransferState.secretRequest\n\n            if (!(transfer.initiator !== address || // only the initiator may reply a SecretRequest\n            transfer.target !== action.meta.address || // reveal only to target\n            !transfer.payment_identifier.eq(message.payment_identifier))) {\n              _context.next = 8;\n              break;\n            }\n\n            log.warn(\'Invalid SecretRequest for transfer\', message, transfer);\n            return _context.abrupt("return");\n\n          case 8:\n            _context.next = 10;\n            return transferSecretRequest({\n              message: message\n            }, {\n              secrethash: message.secrethash,\n              direction: Direction.SENT\n            });\n\n          case 10:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n};\n/**\n * Contains the core logic of {@link transferSecretRevealEpic}.\n *\n * @param state - Contains the current state of the app\n * @param action - The {@link transferSecretRequest} action that\n * @param signer - The singer that will sign the message\n * @returns Observable of {@link transfer.failure}, {@link transferSecretReveal} or\n *      {@link messageSend.request} actions\n */\n\nvar secret_secretReveal$ = function secretReveal$(state, action, _ref4) {\n  var signer = _ref4.signer,\n      log = _ref4.log;\n\n  var _a;\n\n  var request = action.payload.message;\n  var secrethash = action.meta.secrethash;\n\n  if (!((_a = state.sent[secrethash]) === null || _a === void 0 ? void 0 : _a.secret)) {\n    // shouldn\'t happen, as we\'re the initiator (for now), and always know the secret\n    log.warn(\'SecretRequest for unknown secret\', request, secrethash);\n    return empty["a" /* EMPTY */];\n  }\n\n  var transf = state.sent[secrethash].transfer[1];\n  var target = transf.target;\n  var fee = state.sent[secrethash].fee;\n  var value = transf.lock.amount.sub(fee);\n\n  if (!request.expiration.lte(transf.lock.expiration) || !request.expiration.gt(state.blockNumber)) {\n    log.error(\'SecretRequest for expired transfer\', request, transf);\n    return empty["a" /* EMPTY */];\n  } else if (request.amount.lt(value)) {\n    log.error(\'SecretRequest for amount too small!\', request, transf);\n    return Object(of["a" /* of */])(actions_transfer.failure(new error_RaidenError(ErrorCodes.XFER_INVALID_SECRETREQUEST), action.meta));\n  } else if (!request.amount.eq(value)) {\n    // accept request\n    log.info(\'Accepted SecretRequest for amount different than sent\', request, transf);\n  }\n\n  var reveal$;\n  if (state.sent[action.meta.secrethash].secretReveal) reveal$ = Object(of["a" /* of */])(state.sent[action.meta.secrethash].secretReveal[1]);else {\n    var message = {\n      type: MessageType.SECRET_REVEAL,\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      message_identifier: makeMessageId(),\n      secret: state.sent[action.meta.secrethash].secret[1].value\n    };\n    reveal$ = Object(from["a" /* from */])(signMessage(signer, message, {\n      log: log\n    }));\n  }\n  return reveal$.pipe(Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee2(message) {\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return transferSecretReveal({\n              message: message\n            }, action.meta);\n\n          case 2:\n            _context2.next = 4;\n            return messageSend.request({\n              message: message\n            }, {\n              address: target,\n              msgId: message.message_identifier.toString()\n            });\n\n          case 4:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n};\n/**\n * Handles a transferSecretRequest action to send the respective secret to target\n * It both emits transferSecretReveal (to persist sent SecretReveal in state and indicate that\n * the secret was revealed and thus the transfer should be assumed as succeeded) as well as\n * triggers sending the message once. New SecretRequests will cause a new transferSecretRequest,\n * which will re-send the cached SecretReveal.\n * transfer.failure is emitted in case invalid secretRequest comes, as no valid one will come as\n * per current implementation, so we fail early to notify users about it.\n *\n * @param action$ - Observable of transferSecretRequest actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps\n * @param deps.signer - RaidenEpicDeps signer\n * @param deps.latest$ - RaidenEpicDeps latest$\n * @returns Observable of transfer.failure|transferSecretReveal|messageSend.request actions\n */\n\n\nvar secret_transferSecretRevealEpic = function transferSecretRevealEpic(action$, _ref5, _ref6) {\n  secret_objectDestructuringEmpty(_ref5);\n\n  var log = _ref6.log,\n      signer = _ref6.signer,\n      latest$ = _ref6.latest$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(transferSecretRequest)), Object(filter["a" /* filter */])(function (action) {\n    return action.meta.direction === Direction.SENT;\n  }), Object(concatMap["a" /* concatMap */])(function (action) {\n    return latest$.pipe(pluckDistinct(\'state\')).pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (state) {\n      return secret_secretReveal$(state, action, {\n        log: log,\n        signer: signer\n      });\n    }));\n  }));\n};\n/**\n * Handles receiving a valid SecretReveal from recipient (neighbor/partner)\n * This indicates that the partner knowws the secret, and we should Unlock to avoid going on-chain.\n * The transferUnlock.request action is a request for the unlocking to be generated and sent.\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of output actions for this epic\n */\n\nvar secret_transferSecretRevealedEpic = function transferSecretRevealedEpic(action$, state$) {\n  return action$.pipe( // we don\'t require Signed SecretReveal, nor even check sender for persisting the secret\n  Object(filter["a" /* filter */])(isMessageReceivedOfType(SecretReveal)), Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee3(_ref7) {\n    var _ref8, action, state, message, secrethash, meta;\n\n    return regenerator_default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _ref8 = secret_slicedToArray(_ref7, 2), action = _ref8[0], state = _ref8[1];\n            message = action.payload.message;\n            secrethash = getSecrethash(message.secret);\n\n            if (!(secrethash in state.sent)) {\n              _context3.next = 10;\n              break;\n            }\n\n            meta = {\n              secrethash: secrethash,\n              direction: Direction.SENT\n            }; // if secrethash matches, we\'re good for persisting\n\n            _context3.next = 7;\n            return transferSecret({\n              secret: message.secret\n            }, meta);\n\n          case 7:\n            if (!(action.meta.address === state.sent[secrethash].partner && // don\'t unlock if channel closed\n            !state.sent[secrethash].channelClosed && // don\'t unlock again if already unlocked, retry handled by transferRetryMessageEpic\n            // in the future, we may avoid retry until Processed, and [re]send once per SecretReveal\n            !state.sent[secrethash].unlock // accepts secretReveal/unlock request even if registered on-chain\n            )) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.next = 10;\n            return transferUnlock.request(undefined, meta);\n\n          case 10:\n            if (!(secrethash in state.received)) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 13;\n            return transferSecret({\n              secret: message.secret\n            }, {\n              secrethash: secrethash,\n              direction: Direction.RECEIVED\n            });\n\n          case 13:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })));\n};\n/**\n * For a received transfer, when we know the secret, sign & send a SecretReveal to previous hop\n *\n * @param action$ - Observable of transferSecret|transferSecretReveal actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps\n * @returns Observable of transferSecretReveal actions\n */\n\nvar secret_transferRequestUnlockEpic = function transferRequestUnlockEpic(action$, _ref9, _ref10) {\n  secret_objectDestructuringEmpty(_ref9);\n\n  var log = _ref10.log,\n      signer = _ref10.signer,\n      latest$ = _ref10.latest$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf([transferSecret, transferSecretRegister.success])), Object(filter["a" /* filter */])(function (action) {\n    return action.meta.direction === Direction.RECEIVED;\n  }), Object(concatMap["a" /* concatMap */])(function (action) {\n    return latest$.pipe(pluckDistinct(\'state\'), Object(first["a" /* first */])(), Object(filter["a" /* filter */])(function (_ref11) {\n      var received = _ref11.received;\n\n      var _a;\n\n      return !((_a = received[action.meta.secrethash]) === null || _a === void 0 ? void 0 : _a.secretReveal);\n    }), Object(mergeMap["a" /* mergeMap */])(function () {\n      var message = {\n        type: MessageType.SECRET_REVEAL,\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        message_identifier: makeMessageId(),\n        secret: action.payload.secret\n      };\n      return signMessage(signer, message, {\n        log: log\n      });\n    }), Object(map["a" /* map */])(function (message) {\n      return transferSecretReveal({\n        message: message\n      }, action.meta);\n    }), Object(catchError["a" /* catchError */])(function (err) {\n      log.warn(\'Error trying to sign SecretReveal - ignoring\', err, action.meta);\n      return empty["a" /* EMPTY */];\n    }));\n  }));\n};\n/**\n * Monitors SecretRegistry and emits when a relevant secret gets registered\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferSecretRegister.success actions\n */\n\nvar secret_monitorSecretRegistryEpic = function monitorSecretRegistryEpic(_ref12, state$, _ref13) {\n  secret_objectDestructuringEmpty(_ref12);\n\n  var secretRegistryContract = _ref13.secretRegistryContract;\n  return getEventsStream(secretRegistryContract, [secretRegistryContract.filters.SecretRevealed(null, null)]).pipe(Object(withLatestFrom["a" /* withLatestFrom */])(state$), Object(filter["a" /* filter */])(function (_ref14) {\n    var _ref15 = secret_slicedToArray(_ref14, 2),\n        _ref15$ = secret_slicedToArray(_ref15[0], 3),\n        secrethash = _ref15$[0],\n        blockNumber = _ref15$[2].blockNumber,\n        _ref15$2 = _ref15[1],\n        sent = _ref15$2.sent,\n        received = _ref15$2.received;\n\n    return (// emits only if lock didn\'t expire yet\n      secrethash in sent && sent[secrethash].transfer[1].lock.expiration.gte(blockNumber) || secrethash in received && received[secrethash].transfer[1].lock.expiration.gte(blockNumber)\n    );\n  }), Object(mergeMap["a" /* mergeMap */])( /*#__PURE__*/regenerator_default.a.mark(function _callee4(_ref16) {\n    var _ref17, _ref17$, secrethash, secret, event, _ref17$2, sent, received;\n\n    return regenerator_default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _ref17 = secret_slicedToArray(_ref16, 2), _ref17$ = secret_slicedToArray(_ref17[0], 3), secrethash = _ref17$[0], secret = _ref17$[1], event = _ref17$[2], _ref17$2 = _ref17[1], sent = _ref17$2.sent, received = _ref17$2.received;\n\n            if (!(secrethash in sent && sent[secrethash].transfer[1].lock.expiration.gte(event.blockNumber))) {\n              _context4.next = 4;\n              break;\n            }\n\n            _context4.next = 4;\n            return transferSecretRegister.success({\n              secret: secret,\n              txHash: event.transactionHash,\n              txBlock: event.blockNumber,\n              confirmed: undefined\n            }, {\n              secrethash: secrethash,\n              direction: Direction.SENT\n            });\n\n          case 4:\n            if (!(secrethash in received && received[secrethash].transfer[1].lock.expiration.gte(event.blockNumber))) {\n              _context4.next = 7;\n              break;\n            }\n\n            _context4.next = 7;\n            return transferSecretRegister.success({\n              secret: secret,\n              txHash: event.transactionHash,\n              txBlock: event.blockNumber,\n              confirmed: undefined\n            }, {\n              secrethash: secrethash,\n              direction: Direction.RECEIVED\n            });\n\n          case 7:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })));\n};\n/**\n * A simple epic to emit transfer.success when secret register is confirmed\n *\n * @param action$ - Observable of transferSecretRegister.success actions\n * @returns Observable of transfer.success actions\n */\n\nvar secret_transferSuccessOnSecretRegisteredEpic = function transferSuccessOnSecretRegisteredEpic(action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(transferSecretRegister.success.is), Object(filter["a" /* filter */])(function (action) {\n    return !!action.payload.confirmed;\n  }), Object(map["a" /* map */])(function (action) {\n    return actions_transfer.success({}, action.meta);\n  }));\n};\n/**\n * Process newBlocks and pending received transfers. If we know the secret, and transfer doesn\'t\n * get unlocked before revealTimeout blocks are left to lock expiration, request to register secret\n * TODO: check economic viability (and define what that means) of registering lock on-chain\n *\n * @param action$ - Observable of newBlock actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of transferSecretRegister.request actions\n */\n\nvar secret_transferAutoRegisterEpic = function transferAutoRegisterEpic(action$, state$, _ref18) {\n  var config$ = _ref18.config$,\n      latest$ = _ref18.latest$;\n  return state$.pipe(pluckDistinct(Direction.RECEIVED), Object(mergeMap["a" /* mergeMap */])(function (received) {\n    return Object(from["a" /* from */])(Object.keys(received));\n  }), Object(distinct["a" /* distinct */])(), Object(mergeMap["a" /* mergeMap */])(function (secrethash) {\n    return action$.pipe(Object(filter["a" /* filter */])(newBlock.is), Object(withLatestFrom["a" /* withLatestFrom */])(latest$.pipe(Object(pluck["a" /* pluck */])(\'state\', Direction.RECEIVED, secrethash)), config$), Object(filter["a" /* filter */])(function (_ref19) {\n      var _ref20 = secret_slicedToArray(_ref19, 3),\n          action = _ref20[0],\n          received = _ref20[1],\n          _ref20$ = _ref20[2],\n          caps = _ref20$.caps,\n          revealTimeout = _ref20$.revealTimeout;\n\n      var _a, _b;\n\n      return !(caps === null || caps === void 0 ? void 0 : caps[Capabilities.NO_RECEIVE]) && // ignore if receiving is disabled\n      !!received.secret && // register only if we know the secret\n      received.transfer[1].lock.expiration.sub(revealTimeout).lt(action.payload.blockNumber) && // and after <revealTimeout left to expiration\n      !((_b = (_a = received.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock) && // and not yet registered nor unlocked\n      !received.unlock;\n    }), Object(exhaustMap["a" /* exhaustMap */])(function (_ref21) {\n      var _ref22 = secret_slicedToArray(_ref21, 2),\n          received = _ref22[1];\n\n      var meta = {\n        secrethash: secrethash,\n        direction: Direction.RECEIVED\n      };\n      return dispatchAndWait$(action$, transferSecretRegister.request({\n        secret: received.secret[1].value\n      }, meta), isConfirmationResponseOf(transferSecretRegister, meta));\n    }), Object(takeUntil["a" /* takeUntil */])(latest$.pipe(pluckDistinct(\'state\'), Object(filter["a" /* filter */])(function (state) {\n      var _a, _b;\n\n      var blockNumber = state.blockNumber;\n      var received = state.received[secrethash];\n      var expiration = received.transfer[1].lock.expiration;\n      return !!(expiration.lt(blockNumber) || // give up if lock already expired\n      received.unlock || ((_b = (_a = // stop if secret got registered or unlocked\n      received.secret) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.registerBlock)); // even if channelClosed, while inside lock expiration, continue to try to register\n    }))));\n  }));\n};\n/**\n * Registers secret on-chain. Success is detected by monitorSecretRegistryEpic\n *\n * @param action$ - Observable of transferSecretRegister.request actions\n * @param state$ - Observable of RaidenStates\n * @param deps - Dependencies\n * @returns Observable of transferSecretRegister.failure actions\n */\n\nvar secret_transferSecretRegisterEpic = function transferSecretRegisterEpic(action$, _ref23, _ref24) {\n  secret_objectDestructuringEmpty(_ref23);\n\n  var log = _ref24.log,\n      signer = _ref24.signer,\n      address = _ref24.address,\n      main = _ref24.main,\n      secretRegistryContract = _ref24.secretRegistryContract,\n      config$ = _ref24.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(transferSecretRegister.request.is), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref25) {\n    var _ref26 = secret_slicedToArray(_ref25, 2),\n        action = _ref26[0],\n        configSubkey = _ref26[1].subkey;\n\n    var _a;\n\n    var _chooseOnchainAccount = chooseOnchainAccount({\n      signer: signer,\n      address: address,\n      main: main\n    }, (_a = action.payload.subkey) !== null && _a !== void 0 ? _a : configSubkey),\n        onchainSigner = _chooseOnchainAccount.signer;\n\n    var contract = getContractWithSigner(secretRegistryContract, onchainSigner);\n    return Object(from["a" /* from */])(contract.functions.registerSecret(action.payload.secret)).pipe(assertTx(\'registerSecret\', ErrorCodes.XFER_REGISTERSECRET_TX_FAILED, {\n      log: log\n    }), // transferSecretRegister.success handled by monitorSecretRegistryEpic\n    Object(ignoreElements["a" /* ignoreElements */])(), Object(catchError["a" /* catchError */])(function (err) {\n      return Object(of["a" /* of */])(transferSecretRegister.failure(err, action.meta));\n    }));\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/withdraw.js\n\n\n\n\n\n\n\n/**\n * When receiving a [[WithdrawRequest]] message, create the respective [[withdrawReceive.request]]\n * action\n *\n * @param action$ - Observable of messageReceived actions\n * @returns Observable of withdrawReceive.request actions\n */\n\nvar withdraw_withdrawRequestReceivedEpic = function withdrawRequestReceivedEpic(action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isMessageReceivedOfType(Signed(WithdrawRequest))), Object(filter["a" /* filter */])(function (action) {\n    return action.payload.message.participant === action.meta.address;\n  }), Object(map["a" /* map */])(function (action) {\n    var message = action.payload.message;\n    return withdrawReceive.request({\n      message: message\n    }, {\n      tokenNetwork: message.token_network_address,\n      partner: message.participant,\n      totalWithdraw: message.total_withdraw,\n      expiration: message.expiration.toNumber()\n    });\n  }));\n};\n/**\n * sendMessage when a [[withdrawReceive.success]] action is fired\n *\n * @param action$ - Observable of withdrawReceive.success actions\n * @returns Observable of messageSend.request actions\n */\n\nvar withdraw_withdrawSendConfirmationEpic = function withdrawSendConfirmationEpic(action$) {\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(withdrawReceive.success)), Object(map["a" /* map */])(function (action) {\n    return messageSend.request({\n      message: action.payload.message\n    }, {\n      address: action.meta.partner,\n      msgId: action.payload.message.message_identifier.toString()\n    });\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/transfers/epics/index.js\n\n\n\n\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/internal/operators/debounceTime.js\nvar debounceTime = __webpack_require__("1a2de");\n\n// CONCATENATED MODULE: ../raiden-ts/dist/path/utils.js\n\n\nfunction path_utils_slicedToArray(arr, i) { return path_utils_arrayWithHoles(arr) || path_utils_iterableToArrayLimit(arr, i) || path_utils_unsupportedIterableToArray(arr, i) || path_utils_nonIterableRest(); }\n\nfunction path_utils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction path_utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return path_utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return path_utils_arrayLikeToArray(o, minLen); }\n\nfunction path_utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction path_utils_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction path_utils_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar path_utils_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Either returns true if given channel can route a payment, or a reason as string if not\n *\n * @param state - current RaidenState\n * @param presences - latest Presences mapping\n * @param tokenNetwork - tokenNetwork where the channel is\n * @param partner - possibly a partner on given tokenNetwork\n * @param target - transfer target\n * @param value - amount of tokens to check if channel can route\n * @returns true if channel can route, string containing reason if not\n */\n\nfunction channelCanRoute(state, presences, tokenNetwork, partner, target, value) {\n  var _a;\n\n  if (!(partner in presences) || !presences[partner].payload.available) return "path: partner \\"".concat(partner, "\\" not available in transport");\n  if (target !== partner && ((_a = presences[partner].payload.caps) === null || _a === void 0 ? void 0 : _a[Capabilities.NO_MEDIATE])) return "path: partner \\"".concat(partner, "\\" doesn\'t mediate transfers");\n  if (!(partner in state.channels[tokenNetwork])) return "path: there\'s no direct channel with partner \\"".concat(partner, "\\"");\n  var channel = state.channels[tokenNetwork][partner];\n  if (channel.state !== ChannelState.open) return "path: channel with \\"".concat(partner, "\\" in state \\"").concat(channel.state, "\\" instead of \\"").concat(ChannelState.open, "\\"");\n\n  var _channelAmounts = channelAmounts(channel),\n      capacity = _channelAmounts.ownCapacity;\n\n  if (capacity.lt(value)) return "path: channel with \\"".concat(partner, "\\" doesn\'t have enough capacity=").concat(capacity.toString());\n  return true;\n}\nvar serviceRegistryToken = memoize_default()(function (serviceRegistryContract) {\n  return path_utils_awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt("return", serviceRegistryContract.functions.token());\n\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n});\n/**\n * Returns a cold observable which fetch PFS info & validate for a given server address or URL\n *\n * @param pfsAddrOrUrl - PFS account/address or URL\n * @param deps - RaidenEpicDeps needed for various parameters\n * @returns Observable containing PFS server info\n */\n\nfunction pfsInfo(pfsAddrOrUrl, _ref) {\n  var _this = this;\n\n  var serviceRegistryContract = _ref.serviceRegistryContract,\n      network = _ref.network,\n      contractsInfo = _ref.contractsInfo,\n      config$ = _ref.config$;\n\n  /**\n   * Codec for PFS /api/v1/info result schema\n   */\n  var PathInfo = es6["t" /* type */]({\n    message: es6["q" /* string */],\n    network_info: es6["t" /* type */]({\n      // literals will fail if trying to decode anything different from these constants\n      chain_id: es6["j" /* literal */](network.chainId),\n      token_network_registry_address: es6["j" /* literal */](contractsInfo.TokenNetworkRegistry.address)\n    }),\n    operator: es6["q" /* string */],\n    payment_address: Address,\n    price_info: UInt(32),\n    version: es6["q" /* string */]\n  }); // if it\'s an address, fetch url from ServiceRegistry, else it\'s already the URL\n\n  var url$ = Address.is(pfsAddrOrUrl) ? Object(from["a" /* from */])(serviceRegistryContract.functions.urls(pfsAddrOrUrl)) : Object(of["a" /* of */])(pfsAddrOrUrl);\n  return url$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref2) {\n    var _ref3 = path_utils_slicedToArray(_ref2, 2),\n        url = _ref3[0],\n        httpTimeout = _ref3[1].httpTimeout;\n\n    if (!url) throw new error_RaidenError(ErrorCodes.PFS_EMPTY_URL);else if (!isValidUrl(url)) throw new error_RaidenError(ErrorCodes.PFS_INVALID_URL, {\n      url: url\n    }); // default to https for domain-only urls\n    else if (!url.startsWith(\'https://\') && !url.startsWith(\'http://\')) url = "https://".concat(url);\n    var start = Date.now();\n    return Object(fetch["a" /* fromFetch */])(url + \'/api/v1/info\').pipe(Object(timeout["a" /* timeout */])(httpTimeout), Object(mergeMap["a" /* mergeMap */])(function (res) {\n      return path_utils_awaiter(_this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = decode;\n                _context2.t1 = PathInfo;\n                _context2.t2 = losslessParse;\n                _context2.next = 5;\n                return res.text();\n\n              case 5:\n                _context2.t3 = _context2.sent;\n                _context2.t4 = (0, _context2.t2)(_context2.t3);\n                _context2.t5 = (0, _context2.t0)(_context2.t1, _context2.t4);\n                _context2.next = 10;\n                return serviceRegistryToken(serviceRegistryContract);\n\n              case 10:\n                _context2.t6 = _context2.sent;\n                return _context2.abrupt("return", [_context2.t5, _context2.t6]);\n\n              case 12:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }), Object(map["a" /* map */])(function (_ref4) {\n      var _ref5 = path_utils_slicedToArray(_ref4, 2),\n          info = _ref5[0],\n          token = _ref5[1];\n\n      return {\n        address: info.payment_address,\n        url: url,\n        rtt: Date.now() - start,\n        price: info.price_info,\n        token: token\n      };\n    }));\n  }));\n}\n/**\n * Retrieve pfsInfo for these servers & return sorted PFS info\n *\n * Sort order is price then response time (rtt).\n * Throws if no server can be validated, meaning either there\'s none in the current network or\n * we\'re out-of-sync (outdated or ahead of PFS\'s deployment network version).\n *\n * @param pfsList - Array of PFS addresses or URLs\n * @param deps - RaidenEpicDeps array\n * @returns Observable of online, validated & sorted PFS info array\n */\n\nfunction pfsListInfo(pfsList, deps) {\n  var log = deps.log;\n  return Object(from["a" /* from */])(pfsList).pipe(Object(mergeMap["a" /* mergeMap */])(function (addrOrUrl) {\n    return pfsInfo(addrOrUrl, deps).pipe(Object(catchError["a" /* catchError */])(function (err) {\n      log.warn("Error trying to fetch PFS info for \\"".concat(addrOrUrl, "\\" - ignoring:"), err);\n      return empty["a" /* EMPTY */];\n    }));\n  }, 5), Object(toArray["a" /* toArray */])(), Object(map["a" /* map */])(function (list) {\n    if (!list.length) throw new error_RaidenError(ErrorCodes.PFS_INVALID_INFO);\n    return list.sort(function (a, b) {\n      var dif = a.price.sub(b.price); // first, sort by price\n\n      if (dif.lt(0)) return -1;else if (dif.gt(0)) return 1; // if it\'s equal, tiebreak on rtt\n      else return a.rtt - b.rtt;\n    });\n  }));\n}\n// CONCATENATED MODULE: ../raiden-ts/dist/path/epics.js\n\n\nfunction epics_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction path_epics_toConsumableArray(arr) { return path_epics_arrayWithoutHoles(arr) || path_epics_iterableToArray(arr) || path_epics_unsupportedIterableToArray(arr) || path_epics_nonIterableSpread(); }\n\nfunction path_epics_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction path_epics_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction path_epics_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return path_epics_arrayLikeToArray(arr); }\n\nfunction path_epics_createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = path_epics_unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction path_epics_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }\n\nfunction path_epics_slicedToArray(arr, i) { return path_epics_arrayWithHoles(arr) || path_epics_iterableToArrayLimit(arr, i) || path_epics_unsupportedIterableToArray(arr, i) || path_epics_nonIterableRest(); }\n\nfunction path_epics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction path_epics_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return path_epics_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return path_epics_arrayLikeToArray(o, minLen); }\n\nfunction path_epics_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction path_epics_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction path_epics_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar path_epics_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable @typescript-eslint/camelcase */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar epics_oneToNAddress = memoize_default()(function (userDepositContract) {\n  return path_epics_awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt("return", userDepositContract.functions.one_to_n_address());\n\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n});\n/**\n * Codec for PFS API returned error\n *\n * May contain other fields like error_details, but we don\'t care about them (for now)\n */\n\nvar PathError = es6["n" /* readonly */](es6["t" /* type */]({\n  /* eslint-disable-next-line @typescript-eslint/camelcase */\n  error_code: es6["l" /* number */],\n  errors: es6["q" /* string */]\n})); // returns a ISO string truncated at the integer second resolution\n\nfunction makeTimestamp(time) {\n  return (time !== null && time !== void 0 ? time : new Date()).toISOString().substr(0, 19);\n}\n\nvar epics_makeIOU = function makeIOU(sender, receiver, chainId, oneToNAddress, blockNumber) {\n  return {\n    sender: sender,\n    receiver: receiver,\n    chain_id: Object(utils["bigNumberify"])(chainId),\n    amount: constants["Zero"],\n    one_to_n_address: oneToNAddress,\n    expiration_block: Object(utils["bigNumberify"])(blockNumber).add(2 * Math.pow(10, 5))\n  };\n};\n\nvar updateIOU = function updateIOU(iou, price) {\n  return Object.assign(Object.assign({}, iou), {\n    amount: iou.amount.add(price)\n  });\n};\n\nvar epics_packIOU = function packIOU(iou) {\n  return Object(utils["concat"])([encode(iou.one_to_n_address, 20), encode(iou.chain_id, 32), encode(MessageTypeId.IOU, 32), encode(iou.sender, 20), encode(iou.receiver, 20), encode(iou.amount, 32), encode(iou.expiration_block, 32)]);\n};\n\nvar epics_signIOU$ = function signIOU$(iou, signer) {\n  return Object(from["a" /* from */])(signer.signMessage(epics_packIOU(iou))).pipe(Object(map["a" /* map */])(function (signature) {\n    return Object.assign(Object.assign({}, iou), {\n      signature: signature\n    });\n  }));\n};\n\nvar epics_makeAndSignLastIOURequest$ = function makeAndSignLastIOURequest$(sender, receiver, signer) {\n  return Object(defer["a" /* defer */])(function () {\n    var timestamp = makeTimestamp(),\n        message = Object(utils["concat"])([sender, receiver, Object(utils["toUtf8Bytes"])(timestamp)]);\n    return Object(from["a" /* from */])(signer.signMessage(message)).pipe(Object(map["a" /* map */])(function (signature) {\n      return {\n        sender: sender,\n        receiver: receiver,\n        timestamp: timestamp,\n        signature: signature\n      };\n    }));\n  });\n};\n\nvar epics_prepareNextIOU$ = function prepareNextIOU$(pfs, tokenNetwork, _ref) {\n  var address = _ref.address,\n      signer = _ref.signer,\n      network = _ref.network,\n      userDepositContract = _ref.userDepositContract,\n      latest$ = _ref.latest$;\n  return latest$.pipe(Object(first["a" /* first */])(), Object(switchMap["a" /* switchMap */])(function (_ref2) {\n    var state = _ref2.state,\n        httpTimeout = _ref2.config.httpTimeout;\n\n    var _a;\n\n    var cachedIOU = (_a = state.path.iou[tokenNetwork]) === null || _a === void 0 ? void 0 : _a[pfs.address];\n    return (cachedIOU ? Object(of["a" /* of */])(cachedIOU) : epics_makeAndSignLastIOURequest$(address, pfs.address, signer).pipe(Object(mergeMap["a" /* mergeMap */])(function (payload) {\n      return Object(fetch["a" /* fromFetch */])("".concat(pfs.url, "/api/v1/").concat(tokenNetwork, "/payment/iou?").concat(new URLSearchParams(payload).toString()), {\n        method: \'GET\',\n        headers: {\n          \'Content-Type\': \'application/json\'\n        }\n      }).pipe(Object(timeout["a" /* timeout */])(httpTimeout));\n    }), Object(withLatestFrom["a" /* withLatestFrom */])(latest$.pipe(Object(pluck["a" /* pluck */])(\'state\'))), Object(mergeMap["a" /* mergeMap */])(function (_ref3) {\n      var _ref4 = path_epics_slicedToArray(_ref3, 2),\n          response = _ref4[0],\n          blockNumber = _ref4[1].blockNumber;\n\n      return path_epics_awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n        var text, _decode, lastIou, signer;\n\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(response.status === 404)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.t0 = epics_makeIOU;\n                _context2.t1 = address;\n                _context2.t2 = pfs.address;\n                _context2.t3 = network.chainId;\n                _context2.next = 7;\n                return epics_oneToNAddress(userDepositContract);\n\n              case 7:\n                _context2.t4 = _context2.sent;\n                _context2.t5 = blockNumber;\n                return _context2.abrupt("return", (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3, _context2.t4, _context2.t5));\n\n              case 10:\n                _context2.next = 12;\n                return response.text();\n\n              case 12:\n                text = _context2.sent;\n\n                if (response.ok) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                throw new error_RaidenError(ErrorCodes.PFS_LAST_IOU_REQUEST_FAILED, {\n                  responseStatus: response.status,\n                  responseText: text\n                });\n\n              case 15:\n                _decode = decode(LastIOUResults, losslessParse(text)), lastIou = _decode.last_iou;\n                signer = Object(utils["verifyMessage"])(epics_packIOU(lastIou), lastIou.signature);\n\n                if (!(signer !== address)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                throw new error_RaidenError(ErrorCodes.PFS_IOU_SIGNATURE_MISMATCH, {\n                  signer: signer,\n                  address: address\n                });\n\n              case 19:\n                return _context2.abrupt("return", lastIou);\n\n              case 20:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }))).pipe(Object(map["a" /* map */])(function (iou) {\n      return updateIOU(iou, pfs.price);\n    }), Object(mergeMap["a" /* mergeMap */])(function (iou) {\n      return epics_signIOU$(iou, signer);\n    }));\n  }));\n};\n/**\n * Check if a transfer can be made and return a set of paths for it.\n *\n * @param action$ - Observable of pathFind.request actions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps object\n * @returns Observable of pathFind.{success|failure} actions\n */\n\n\nvar epics_pathFindServiceEpic = function pathFindServiceEpic(action$, _ref5, deps) {\n  path_epics_objectDestructuringEmpty(_ref5);\n\n  var log = deps.log,\n      latest$ = deps.latest$;\n  return action$.pipe(Object(filter["a" /* filter */])(isActionOf(pathFind.request)), Object(concatMap["a" /* concatMap */])(function (action) {\n    return latest$.pipe(Object(first["a" /* first */])(), Object(mergeMap["a" /* mergeMap */])(function (_ref6) {\n      var state = _ref6.state,\n          presences = _ref6.presences,\n          _ref6$config = _ref6.config,\n          configPfs = _ref6$config.pfs,\n          httpTimeout = _ref6$config.httpTimeout,\n          pfsSafetyMargin = _ref6$config.pfsSafetyMargin;\n\n      var _a;\n\n      var _action$meta = action.meta,\n          tokenNetwork = _action$meta.tokenNetwork,\n          target = _action$meta.target;\n      if (!(tokenNetwork in state.channels)) throw new error_RaidenError(ErrorCodes.PFS_UNKNOWN_TOKEN_NETWORK, {\n        tokenNetwork: tokenNetwork\n      });\n      if (!(target in presences) || !presences[target].payload.available) throw new error_RaidenError(ErrorCodes.PFS_TARGET_OFFLINE, {\n        target: target\n      });\n      if ((_a = presences[target].payload.caps) === null || _a === void 0 ? void 0 : _a[Capabilities.NO_RECEIVE]) throw new error_RaidenError(ErrorCodes.PFS_TARGET_NO_RECEIVE, {\n        target: target\n      }); // if pathFind received a set of paths, pass it through to validation/cleanup\n\n      if (action.payload.paths) return Object(of["a" /* of */])({\n        paths: action.payload.paths,\n        iou: undefined\n      }); // else, if possible, use a direct transfer\n      else if (channelCanRoute(state, presences, tokenNetwork, target, target, action.meta.value) === true) {\n          return Object(of["a" /* of */])({\n            paths: [{\n              path: [deps.address, target],\n              fee: constants["Zero"]\n            }],\n            iou: undefined\n          });\n        } else if (action.payload.pfs === null || // explicitly disabled in action\n        !action.payload.pfs && configPfs === null // undefined in action and disabled in config\n        ) {\n            // pfs not specified in action and disabled (null) in config\n            throw new error_RaidenError(ErrorCodes.PFS_DISABLED);\n          } else {\n          // else, request a route from PFS.\n          // pfs$ - Observable which emits one PFS info and then completes\n          var pfs$ = action.payload.pfs ? // first, use action.payload.pfs as is, if present\n          Object(of["a" /* of */])(action.payload.pfs) : configPfs ? // or if config.pfs isn\'t disabled (null) nor auto (\'\'), fetch & use it\n          pfsInfo(configPfs, deps) : // else (action unset, config.pfs=\'\'=auto mode)\n          latest$.pipe(Object(pluck["a" /* pluck */])(\'pfsList\'), // get cached pfsList\n          // if needed, wait for list to be populated\n          Object(first["a" /* first */])(function (pfsList) {\n            return pfsList.length > 0;\n          }), // fetch pfsInfo from whole list & sort it\n          Object(mergeMap["a" /* mergeMap */])(function (pfsList) {\n            return pfsListInfo(pfsList, deps);\n          }), Object(tap["a" /* tap */])(function (pfss) {\n            return log.info(\'Auto-selecting best PFS from:\', pfss);\n          }), // pop best ranked\n          Object(pluck["a" /* pluck */])(0));\n          return pfs$.pipe(Object(mergeMap["a" /* mergeMap */])(function (pfs) {\n            return pfs.price.isZero() ? Object(of["a" /* of */])({\n              pfs: pfs,\n              iou: undefined\n            }) : epics_prepareNextIOU$(pfs, tokenNetwork, deps).pipe(Object(map["a" /* map */])(function (iou) {\n              return {\n                pfs: pfs,\n                iou: iou\n              };\n            }));\n          }), Object(mergeMap["a" /* mergeMap */])(function (_ref7) {\n            var pfs = _ref7.pfs,\n                iou = _ref7.iou;\n            return Object(fetch["a" /* fromFetch */])("".concat(pfs.url, "/api/v1/").concat(tokenNetwork, "/paths"), {\n              method: \'POST\',\n              headers: {\n                \'Content-Type\': \'application/json\'\n              },\n              body: losslessStringify({\n                from: deps.address,\n                to: target,\n                value: UInt(32).encode(action.meta.value),\n                max_paths: 10,\n                iou: iou ? Object.assign(Object.assign({}, iou), {\n                  amount: UInt(32).encode(iou.amount),\n                  expiration_block: UInt(32).encode(iou.expiration_block),\n                  chain_id: UInt(32).encode(iou.chain_id)\n                }) : undefined\n              })\n            }).pipe(Object(timeout["a" /* timeout */])(httpTimeout), Object(map["a" /* map */])(function (response) {\n              return {\n                response: response,\n                iou: iou\n              };\n            }));\n          }), Object(mergeMap["a" /* mergeMap */])(function (_ref8) {\n            var response = _ref8.response,\n                iou = _ref8.iou;\n            return path_epics_awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee3() {\n              return regenerator_default.a.wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _context3.t0 = response;\n                      _context3.next = 3;\n                      return response.text();\n\n                    case 3:\n                      _context3.t1 = _context3.sent;\n                      _context3.t2 = iou;\n                      return _context3.abrupt("return", {\n                        response: _context3.t0,\n                        text: _context3.t1,\n                        iou: _context3.t2\n                      });\n\n                    case 6:\n                    case "end":\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3);\n            }));\n          }), Object(map["a" /* map */])(function (_ref9) {\n            var response = _ref9.response,\n                text = _ref9.text,\n                iou = _ref9.iou;\n            // any decode error here will throw early and end up in catchError\n            var data = losslessParse(text);\n\n            if (!response.ok) {\n              return {\n                error: decode(PathError, data),\n                iou: iou\n              };\n            }\n\n            return {\n              paths: decode(PathResults, data).result.map(function (r) {\n                return {\n                  path: r.path,\n                  // Add PFS safety margin to estimated fees\n                  fee: r.estimated_fee.mul(Math.round(pfsSafetyMargin * 1e6)).div(1e6)\n                };\n              }),\n              iou: iou\n            };\n          }));\n        }\n    }), Object(withLatestFrom["a" /* withLatestFrom */])(latest$), // validate/cleanup received routes/paths/results\n    Object(mergeMap["a" /* mergeMap */])(function (_ref10) {\n      var _ref11 = path_epics_slicedToArray(_ref10, 2),\n          data = _ref11[0],\n          _ref11$ = _ref11[1],\n          state = _ref11$.state,\n          presences = _ref11$.presences;\n\n      return (// looks like mergeMap with generator doesn\'t handle exceptions correctly\n        // use from+iterator from iife generator instead\n        Object(from["a" /* from */])( /*#__PURE__*/regenerator_default.a.mark(function _callee4() {\n          var iou, filteredPaths, invalidatedRecipients, _iterator, _step, _step$value, path, fee, recipient, canTransferOrReason;\n\n          return regenerator_default.a.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  iou = data.iou;\n\n                  if (!iou) {\n                    _context4.next = 9;\n                    break;\n                  }\n\n                  if (!(data.paths || data.error.error_code === 2201)) {\n                    _context4.next = 7;\n                    break;\n                  }\n\n                  _context4.next = 5;\n                  return iouPersist({\n                    iou: iou\n                  }, {\n                    tokenNetwork: action.meta.tokenNetwork,\n                    serviceAddress: iou.receiver\n                  });\n\n                case 5:\n                  _context4.next = 9;\n                  break;\n\n                case 7:\n                  _context4.next = 9;\n                  return iouClear(undefined, {\n                    tokenNetwork: action.meta.tokenNetwork,\n                    serviceAddress: iou.receiver\n                  });\n\n                case 9:\n                  if (data.paths) {\n                    _context4.next = 11;\n                    break;\n                  }\n\n                  throw new error_RaidenError(ErrorCodes.PFS_ERROR_RESPONSE, {\n                    errorCode: data.error.error_code,\n                    errors: data.error.errors\n                  });\n\n                case 11:\n                  filteredPaths = [], invalidatedRecipients = new Set(); // eslint-disable-next-line prefer-const\n\n                  _iterator = path_epics_createForOfIteratorHelper(data.paths);\n                  _context4.prev = 13;\n\n                  _iterator.s();\n\n                case 15:\n                  if ((_step = _iterator.n()).done) {\n                    _context4.next = 29;\n                    break;\n                  }\n\n                  _step$value = _step.value, path = _step$value.path, fee = _step$value.fee;\n                  // if route has us as first hop, cleanup/shift\n                  if (path[0] === deps.address) path = path.slice(1);\n                  recipient = path[0]; // if this recipient was already invalidated in a previous iteration, skip\n\n                  if (!invalidatedRecipients.has(recipient)) {\n                    _context4.next = 21;\n                    break;\n                  }\n\n                  return _context4.abrupt("continue", 27);\n\n                case 21:\n                  // if we already found some valid route, allow only new routes through this peer\n                  canTransferOrReason = !filteredPaths.length ? channelCanRoute(state, presences, action.meta.tokenNetwork, recipient, action.meta.target, action.meta.value.add(fee)) : recipient !== filteredPaths[0].path[0] ? \'path: already selected another recipient\' : fee.gt(filteredPaths[0].fee) ? \'path: already selected a smaller fee\' : true;\n\n                  if (!(canTransferOrReason !== true)) {\n                    _context4.next = 26;\n                    break;\n                  }\n\n                  log.warn(\'Invalidated received route. Reason:\', canTransferOrReason, \'Route:\', path);\n                  invalidatedRecipients.add(recipient);\n                  return _context4.abrupt("continue", 27);\n\n                case 26:\n                  filteredPaths.push({\n                    path: path,\n                    fee: fee\n                  });\n\n                case 27:\n                  _context4.next = 15;\n                  break;\n\n                case 29:\n                  _context4.next = 34;\n                  break;\n\n                case 31:\n                  _context4.prev = 31;\n                  _context4.t0 = _context4["catch"](13);\n\n                  _iterator.e(_context4.t0);\n\n                case 34:\n                  _context4.prev = 34;\n\n                  _iterator.f();\n\n                  return _context4.finish(34);\n\n                case 37:\n                  if (filteredPaths.length) {\n                    _context4.next = 39;\n                    break;\n                  }\n\n                  throw new error_RaidenError(ErrorCodes.PFS_NO_ROUTES_FOUND);\n\n                case 39:\n                  _context4.next = 41;\n                  return pathFind.success({\n                    paths: filteredPaths\n                  }, action.meta);\n\n                case 41:\n                case "end":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, null, [[13, 31, 34, 37]]);\n        })())\n      );\n    }), Object(catchError["a" /* catchError */])(function (err) {\n      return Object(of["a" /* of */])(pathFind.failure(err, action.meta));\n    }));\n  }));\n};\n\nfunction channelEntries(channels) {\n  return Object.entries(channels).map(function (_ref12) {\n    var _ref13 = path_epics_slicedToArray(_ref12, 2),\n        tokenNetwork = _ref13[0],\n        partnerChannels = _ref13[1];\n\n    return Object.entries(partnerChannels).map(function (_ref14) {\n      var _ref15 = path_epics_slicedToArray(_ref14, 2),\n          partner = _ref15[0],\n          channel = _ref15[1];\n\n      return ["".concat(partner, "@").concat(tokenNetwork), channel];\n    });\n  }).reduce(function (acc, val) {\n    return [].concat(path_epics_toConsumableArray(acc), path_epics_toConsumableArray(val));\n  }, []);\n}\n\nfunction keyToTNP(key) {\n  var _key$split = key.split(\'@\'),\n      _key$split2 = path_epics_slicedToArray(_key$split, 2),\n      partner = _key$split2[0],\n      tokenNetwork = _key$split2[1];\n\n  return {\n    key: key,\n    tokenNetwork: tokenNetwork,\n    partnerAddr: partner\n  };\n}\n/**\n * Sends a [[PFSCapacityUpdate]] to PFS global room on new deposit on our side of channels\n *\n * @param action$ - Observable of channelDeposit.success actions\n * @param state$ - Observable of RaidenStates\n * @returns Observable of messageGlobalSend actions\n */\n\n\nvar epics_pfsCapacityUpdateEpic = function pfsCapacityUpdateEpic(_ref16, _ref17, _ref18) {\n  path_epics_objectDestructuringEmpty(_ref16);\n\n  path_epics_objectDestructuringEmpty(_ref17);\n\n  var log = _ref18.log,\n      address = _ref18.address,\n      network = _ref18.network,\n      signer = _ref18.signer,\n      config$ = _ref18.config$,\n      latest$ = _ref18.latest$;\n  return latest$.pipe(pluckDistinct(\'state\', \'channels\'), Object(concatMap["a" /* concatMap */])(function (channels) {\n    return Object(from["a" /* from */])(channelEntries(channels));\n  }),\n  /* this scan stores a reference to each [key,value] in \'acc\', and emit as \'changed\' iff it\n   * changes from last time seen. It relies on value references changing only if needed */\n  Object(scan["a" /* scan */])(function (_ref19, _ref20) {\n    var acc = _ref19.acc;\n\n    var _ref21 = path_epics_slicedToArray(_ref20, 2),\n        key = _ref21[0],\n        channel = _ref21[1];\n\n    return (// if ref didn\'t change, emit previous accumulator, without \'changed\' value\n      acc[key] === channel ? {\n        acc: acc\n      } : // else, update ref in \'acc\' and emit value in \'changed\' prop\n      {\n        acc: Object.assign(Object.assign({}, acc), epics_defineProperty({}, key, channel)),\n        changed: Object.assign(Object.assign({}, channel), keyToTNP(key))\n      }\n    );\n  }, {\n    acc: {}\n  }), Object(pluck["a" /* pluck */])(\'changed\'), Object(filter["a" /* filter */])(isntNil), // filter out if reference didn\'t change from last emit\n  Object(groupBy["a" /* groupBy */])(function (_ref22) {\n    var key = _ref22.key;\n    return key;\n  }), Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(mergeMap["a" /* mergeMap */])(function (_ref23) {\n    var _ref24 = path_epics_slicedToArray(_ref23, 2),\n        grouped$ = _ref24[0],\n        httpTimeout = _ref24[1].httpTimeout;\n\n    return grouped$.pipe(Object(withLatestFrom["a" /* withLatestFrom */])(config$), Object(filter["a" /* filter */])(function (_ref25) {\n      var _ref26 = path_epics_slicedToArray(_ref25, 2),\n          pfsRoom = _ref26[1].pfsRoom;\n\n      return !!pfsRoom;\n    }), // ignore actions while/if config.pfsRoom isn\'t set\n    Object(debounceTime["a" /* debounceTime */])(httpTimeout / 2), // default: 15s\n    Object(concatMap["a" /* concatMap */])(function (_ref27) {\n      var _ref28 = path_epics_slicedToArray(_ref27, 2),\n          channel = _ref28[0],\n          _ref28$ = _ref28[1],\n          revealTimeout = _ref28$.revealTimeout,\n          pfsRoom = _ref28$.pfsRoom;\n\n      var _a, _b, _c, _d;\n\n      var tokenNetwork = channel.tokenNetwork,\n          partner = channel.partnerAddr;\n      if (channel.state !== ChannelState.open) return empty["a" /* EMPTY */];\n\n      var _channelAmounts = channelAmounts(channel),\n          ownCapacity = _channelAmounts.ownCapacity,\n          partnerCapacity = _channelAmounts.partnerCapacity;\n\n      var message = {\n        type: MessageType.PFS_CAPACITY_UPDATE,\n        canonical_identifier: {\n          chain_identifier: Object(utils["bigNumberify"])(network.chainId),\n          token_network_address: tokenNetwork,\n          channel_identifier: Object(utils["bigNumberify"])(channel.id)\n        },\n        updating_participant: address,\n        other_participant: partner,\n        updating_nonce: (_b = (_a = channel.own.balanceProof) === null || _a === void 0 ? void 0 : _a.nonce) !== null && _b !== void 0 ? _b : constants["Zero"],\n        other_nonce: (_d = (_c = channel.partner.balanceProof) === null || _c === void 0 ? void 0 : _c.nonce) !== null && _d !== void 0 ? _d : constants["Zero"],\n        updating_capacity: ownCapacity,\n        other_capacity: partnerCapacity,\n        reveal_timeout: Object(utils["bigNumberify"])(revealTimeout)\n      };\n      return Object(defer["a" /* defer */])(function () {\n        return signMessage(signer, message, {\n          log: log\n        });\n      }).pipe(Object(map["a" /* map */])(function (signed) {\n        return messageGlobalSend({\n          message: signed\n        }, {\n          roomName: pfsRoom\n        });\n      }), Object(catchError["a" /* catchError */])(function (err) {\n        log.error(\'Error trying to generate & sign PFSCapacityUpdate\', err);\n        return empty["a" /* EMPTY */];\n      }));\n    }));\n  }));\n};\n/**\n * When monitoring a channel (either a new channel or a previously monitored one), send a matching\n * PFSFeeUpdate to path_finding global room, so PFSs can pick us for mediation\n * TODO: Currently, we always send Zero fees; we should send correct fee data from config\n *\n * @param action$ - Observable of channelMonitor actions\n * @param state$ - Observable of RaidenStates\n * @param deps - Raiden epic dependencies\n * @returns Observable of messageGlobalSend actions\n */\n\nvar epics_pfsFeeUpdateEpic = function pfsFeeUpdateEpic(action$, state$, _ref29) {\n  var log = _ref29.log,\n      address = _ref29.address,\n      network = _ref29.network,\n      signer = _ref29.signer,\n      config$ = _ref29.config$;\n  return action$.pipe(Object(filter["a" /* filter */])(channelMonitor.is), Object(withLatestFrom["a" /* withLatestFrom */])(state$, config$), // ignore actions while/if mediating not enabled\n  Object(filter["a" /* filter */])(function (_ref30) {\n    var _ref31 = path_epics_slicedToArray(_ref30, 3),\n        _ref31$ = _ref31[2],\n        pfsRoom = _ref31$.pfsRoom,\n        caps = _ref31$.caps;\n\n    return !!pfsRoom && !(caps === null || caps === void 0 ? void 0 : caps[Capabilities.NO_MEDIATE]);\n  }), Object(mergeMap["a" /* mergeMap */])(function (_ref32) {\n    var _ref33 = path_epics_slicedToArray(_ref32, 3),\n        action = _ref33[0],\n        state = _ref33[1],\n        pfsRoom = _ref33[2].pfsRoom;\n\n    var _a;\n\n    var channel = (_a = state.channels[action.meta.tokenNetwork]) === null || _a === void 0 ? void 0 : _a[action.meta.partner];\n    if ((channel === null || channel === void 0 ? void 0 : channel.state) !== ChannelState.open) return empty["a" /* EMPTY */];\n    var message = {\n      type: MessageType.PFS_FEE_UPDATE,\n      canonical_identifier: {\n        chain_identifier: Object(utils["bigNumberify"])(network.chainId),\n        token_network_address: action.meta.tokenNetwork,\n        channel_identifier: Object(utils["bigNumberify"])(channel.id)\n      },\n      updating_participant: address,\n      timestamp: makeTimestamp(),\n      fee_schedule: {\n        cap_fees: true,\n        imbalance_penalty: null,\n        proportional: constants["Zero"],\n        flat: constants["Zero"]\n      }\n    };\n    return Object(from["a" /* from */])(signMessage(signer, message, {\n      log: log\n    })).pipe(Object(map["a" /* map */])(function (signed) {\n      return messageGlobalSend({\n        message: signed\n      }, {\n        roomName: pfsRoom\n      });\n    }), Object(catchError["a" /* catchError */])(function (err) {\n      log.error(\'Error trying to generate & sign PFSFeeUpdate\', err);\n      return empty["a" /* EMPTY */];\n    }));\n  }));\n};\n/**\n * Fetch & monitors ServiceRegistry\'s RegisteredService events, keep track of valid_till expiration\n * and aggregate list of valid service addresses\n *\n * Notice this epic only deals with the events & addresses, and don\'t fetch URLs, which need to be\n * fetched on-demand through [[pfsInfo]] & [[pfsListInfo]].\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @param deps - RaidenEpicDeps object\n * @returns Observable of pfsListUpdated actions\n */\n\nvar epics_pfsServiceRegistryMonitorEpic = function pfsServiceRegistryMonitorEpic(_ref34, _ref35, _ref36) {\n  path_epics_objectDestructuringEmpty(_ref34);\n\n  path_epics_objectDestructuringEmpty(_ref35);\n\n  var serviceRegistryContract = _ref36.serviceRegistryContract,\n      contractsInfo = _ref36.contractsInfo,\n      config$ = _ref36.config$;\n  return config$.pipe( // monitors config.pfs, and only monitors contract if it\'s empty\n  pluckDistinct(\'pfs\'), Object(switchMap["a" /* switchMap */])(function (pfs) {\n    return pfs !== \'\' ? // disable ServiceRegistry monitoring if/while pfs is null=disabled or truty\n    empty["a" /* EMPTY */] : // type of elements emitted by getEventsStream (past and new events coming from contract):\n    // [service, valid_till, deposit_amount, deposit_contract, Event]\n    getEventsStream(serviceRegistryContract, [serviceRegistryContract.filters.RegisteredService(null, null, null, null)], Object(of["a" /* of */])(contractsInfo.ServiceRegistry.block_number)).pipe(Object(groupBy["a" /* groupBy */])(function (_ref37) {\n      var _ref38 = path_epics_slicedToArray(_ref37, 1),\n          service = _ref38[0];\n\n      return service;\n    }), Object(mergeMap["a" /* mergeMap */])(function (grouped$) {\n      return grouped$.pipe( // switchMap ensures new events for each server (grouped$) picks latest event\n      Object(switchMap["a" /* switchMap */])(function (_ref39) {\n        var _ref40 = path_epics_slicedToArray(_ref39, 2),\n            service = _ref40[0],\n            valid_till = _ref40[1];\n\n        var now = Date.now(),\n            validTill = valid_till.mul(1000); // milliseconds valid_till\n\n        if (validTill.lt(now)) return empty["a" /* EMPTY */]; // this event already expired\n        // end$ will emit valid=false iff <2^31 ms in the future (setTimeout limit)\n\n        var end$ = validTill.sub(now).lt(constants["Two"].pow(31)) ? Object(of["a" /* of */])({\n          service: service,\n          valid: false\n        }).pipe(Object(delay["a" /* delay */])(new Date(validTill.toNumber()))) : empty["a" /* EMPTY */];\n        return Object(merge["a" /* merge */])(Object(of["a" /* of */])({\n          service: service,\n          valid: true\n        }), end$);\n      }));\n    }), Object(scan["a" /* scan */])(function (acc, _ref41) {\n      var service = _ref41.service,\n          valid = _ref41.valid;\n      return !valid && acc.includes(service) ? acc.filter(function (s) {\n        return s !== service;\n      }) : valid && !acc.includes(service) ? [].concat(path_epics_toConsumableArray(acc), [service]) : acc;\n    }, []), Object(distinctUntilChanged["a" /* distinctUntilChanged */])(), Object(debounceTime["a" /* debounceTime */])(1e3), // debounce burst of updates on initial fetch\n    Object(map["a" /* map */])(function (pfsList) {\n      return pfsListUpdated({\n        pfsList: pfsList\n      });\n    }));\n  }));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/epics.js\nfunction dist_epics_slicedToArray(arr, i) { return dist_epics_arrayWithHoles(arr) || dist_epics_iterableToArrayLimit(arr, i) || dist_epics_unsupportedIterableToArray(arr, i) || dist_epics_nonIterableRest(); }\n\nfunction dist_epics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction dist_epics_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dist_epics_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dist_epics_arrayLikeToArray(o, minLen); }\n\nfunction dist_epics_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction dist_epics_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction dist_epics_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction dist_epics_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This function maps cached/latest relevant values from action$ & state$\n *\n * @param action$ - Observable of RaidenActions\n * @param state$ - Observable of RaidenStates\n * @returns latest$ observable\n */\n\nfunction getLatest$(action$, state$, _ref) {\n  var defaultConfig = _ref.defaultConfig;\n  return Object(combineLatest["a" /* combineLatest */])([action$, state$, state$.pipe(pluckDistinct(\'config\'), Object(map["a" /* map */])(function (c) {\n    return Object.assign(Object.assign({}, defaultConfig), c);\n  })), getPresences$(action$), action$.pipe(Object(filter["a" /* filter */])(isActionOf(pfsListUpdated)), Object(pluck["a" /* pluck */])(\'payload\', \'pfsList\'), Object(startWith["a" /* startWith */])([])), action$.pipe(Object(filter["a" /* filter */])(rtcChannel.is), // scan: if v.payload is defined, set it; else, unset\n  Object(scan["a" /* scan */])(function (acc, v) {\n    return v.payload ? Object.assign(Object.assign({}, acc), dist_epics_defineProperty({}, v.meta.address, v.payload)) : unset_default()(v.meta.address, acc);\n  }, {}), Object(startWith["a" /* startWith */])({}))]).pipe(Object(map["a" /* map */])(function (_ref2) {\n    var _ref3 = dist_epics_slicedToArray(_ref2, 6),\n        action = _ref3[0],\n        state = _ref3[1],\n        config = _ref3[2],\n        presences = _ref3[3],\n        pfsList = _ref3[4],\n        rtc = _ref3[5];\n\n    return {\n      action: action,\n      state: state,\n      config: config,\n      presences: presences,\n      pfsList: pfsList,\n      rtc: rtc\n    };\n  }));\n}\nvar RaidenEpics = Object.assign(Object.assign(Object.assign(Object.assign({}, epics_namespaceObject), transport_epics_namespaceObject), transfers_epics_namespaceObject), path_epics_namespaceObject);\nvar epics_raidenRootEpic = function raidenRootEpic(action$, state$, deps) {\n  // observable which emits once when a raidenShutdown action goes through actions pipeline\n  var shutdownNotification = action$.pipe(Object(filter["a" /* filter */])(isActionOf(raidenShutdown))),\n      // actions pipeline, but ends with (including) a raidenShutdown action\n  limitedAction$ = action$.pipe(Object(takeWhile["a" /* takeWhile */])(negate_default()(isActionOf(raidenShutdown)), true)),\n      // states pipeline, but ends when shutdownNotification emits\n  limitedState$ = state$.pipe(Object(takeUntil["a" /* takeUntil */])(shutdownNotification)); // wire deps.latest$\n\n  getLatest$(limitedAction$, limitedState$, deps).subscribe(deps.latest$); // like combineEpics, but completes action$, state$ & output$ when a raidenShutdown goes through\n\n  return Object(from["a" /* from */])(Object.values(RaidenEpics)).pipe(Object(mergeMap["a" /* mergeMap */])(function (epic) {\n    return epic(limitedAction$, limitedState$, deps);\n  }), Object(catchError["a" /* catchError */])(function (err) {\n    return Object(of["a" /* of */])(raidenShutdown({\n      reason: err\n    }));\n  }), Object(takeUntil["a" /* takeUntil */])(shutdownNotification));\n};\n// CONCATENATED MODULE: ../raiden-ts/dist/raiden.js\n\n\nfunction raiden_toConsumableArray(arr) { return raiden_arrayWithoutHoles(arr) || raiden_iterableToArray(arr) || raiden_unsupportedIterableToArray(arr) || raiden_nonIterableSpread(); }\n\nfunction raiden_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction raiden_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction raiden_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return raiden_arrayLikeToArray(arr); }\n\nfunction raiden_slicedToArray(arr, i) { return raiden_arrayWithHoles(arr) || raiden_iterableToArrayLimit(arr, i) || raiden_unsupportedIterableToArray(arr, i) || raiden_nonIterableRest(); }\n\nfunction raiden_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction raiden_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return raiden_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return raiden_arrayLikeToArray(o, minLen); }\n\nfunction raiden_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction raiden_iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction raiden_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction raiden_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction raiden_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction raiden_createClass(Constructor, protoProps, staticProps) { if (protoProps) raiden_defineProperties(Constructor.prototype, protoProps); if (staticProps) raiden_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar raiden_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar raiden_Raiden = /*#__PURE__*/function () {\n  function Raiden(provider, network, signer, contractsInfo, state, defaultConfig, main) {\n    var _this = this;\n\n    raiden_classCallCheck(this, Raiden);\n\n    var _a, _b, _c, _d;\n\n    this.resolveName = provider.resolveName.bind(provider);\n    var address = state.address;\n    this.log = loglevel_default.a.getLogger("raiden:".concat(address)); // use next from latest known blockNumber as start block when polling\n\n    provider.resetEventsBlock(state.blockNumber + 1);\n    var latest$ = new ReplaySubject["a" /* ReplaySubject */](1); // pipe cached state\n\n    this.state$ = latest$.pipe(pluckDistinct(\'state\')); // pipe action, skipping cached\n\n    this.action$ = latest$.pipe(pluckDistinct(\'action\'), Object(skip["a" /* skip */])(1));\n    this.channels$ = this.state$.pipe(Object(map["a" /* map */])(function (state) {\n      return helpers_mapTokenToPartner(state);\n    }));\n    this.transfers$ = helpers_initTransfers$(this.state$);\n    this.events$ = this.action$.pipe(Object(filter["a" /* filter */])(isActionOf(RaidenEvents)));\n    this.getTokenInfo = memoize_default()(function (token) {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n        var tokenContract, _yield$Promise$all, _yield$Promise$all2, totalSupply, decimals, name, symbol;\n\n        return regenerator_default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert(Address.is(token), \'Invalid address\');\n                tokenContract = this.deps.getTokenContract(token);\n                _context.next = 4;\n                return Promise.all([tokenContract.functions.totalSupply(), tokenContract.functions.decimals(), tokenContract.functions.name().catch(constant_default()(undefined)), tokenContract.functions.symbol().catch(constant_default()(undefined))]);\n\n              case 4:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = raiden_slicedToArray(_yield$Promise$all, 4);\n                totalSupply = _yield$Promise$all2[0];\n                decimals = _yield$Promise$all2[1];\n                name = _yield$Promise$all2[2];\n                symbol = _yield$Promise$all2[3];\n                // workaround for https://github.com/microsoft/TypeScript/issues/33752\n                assert(totalSupply && decimals != null, \'Not a token contract\');\n                return _context.abrupt("return", {\n                  totalSupply: totalSupply,\n                  decimals: decimals,\n                  name: name,\n                  symbol: symbol\n                });\n\n              case 12:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    });\n    this.deps = {\n      latest$: latest$,\n      config$: latest$.pipe(pluckDistinct(\'config\')),\n      matrix$: new AsyncSubject["a" /* AsyncSubject */](),\n      provider: provider,\n      network: network,\n      signer: signer,\n      address: address,\n      log: this.log,\n      defaultConfig: defaultConfig,\n      contractsInfo: contractsInfo,\n      registryContract: TokenNetworkRegistryFactory_TokenNetworkRegistryFactory.connect(contractsInfo.TokenNetworkRegistry.address, (_a = main === null || main === void 0 ? void 0 : main.signer) !== null && _a !== void 0 ? _a : signer),\n      getTokenNetworkContract: memoize_default()(function (address) {\n        var _a;\n\n        return TokenNetworkFactory_TokenNetworkFactory.connect(address, (_a = main === null || main === void 0 ? void 0 : main.signer) !== null && _a !== void 0 ? _a : signer);\n      }),\n      getTokenContract: memoize_default()(function (address) {\n        var _a;\n\n        return HumanStandardTokenFactory_HumanStandardTokenFactory.connect(address, (_a = main === null || main === void 0 ? void 0 : main.signer) !== null && _a !== void 0 ? _a : signer);\n      }),\n      serviceRegistryContract: ServiceRegistryFactory_ServiceRegistryFactory.connect(contractsInfo.ServiceRegistry.address, (_b = main === null || main === void 0 ? void 0 : main.signer) !== null && _b !== void 0 ? _b : signer),\n      userDepositContract: UserDepositFactory_UserDepositFactory.connect(contractsInfo.UserDeposit.address, (_c = main === null || main === void 0 ? void 0 : main.signer) !== null && _c !== void 0 ? _c : signer),\n      secretRegistryContract: SecretRegistryFactory_SecretRegistryFactory.connect(contractsInfo.SecretRegistry.address, (_d = main === null || main === void 0 ? void 0 : main.signer) !== null && _d !== void 0 ? _d : signer),\n      main: main\n    };\n    this.userDepositTokenAddress = memoize_default()(function () {\n      return raiden_awaiter(_this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.deps.userDepositContract.functions.token();\n\n              case 2:\n                return _context2.abrupt("return", _context2.sent);\n\n              case 3:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    });\n    var loggerMiddleware = Object(redux_logger["createLogger"])({\n      predicate: function predicate() {\n        return _this.log.getLevel() <= loglevel_default.a.levels.INFO;\n      },\n      logger: this.log,\n      level: {\n        prevState: \'debug\',\n        action: \'info\',\n        error: \'error\',\n        nextState: \'debug\'\n      }\n    });\n    this.deps.config$.pipe(pluckDistinct(\'logger\')).subscribe(function (logger) {\n      return _this.log.setLevel(logger || \'silent\', false);\n    }); // minimum blockNumber of contracts deployment as start scan block\n\n    this.epicMiddleware = Object(createEpicMiddleware["a" /* createEpicMiddleware */])({\n      dependencies: this.deps\n    });\n    this.store = Object(redux["b" /* createStore */])(reducer_raidenReducer, // workaround for redux\'s PreloadedState issues with branded values\n    state, // eslint-disable-line @typescript-eslint/no-explicit-any\n    Object(redux["a" /* applyMiddleware */])(loggerMiddleware, this.epicMiddleware));\n  }\n  /**\n   * Async helper factory to make a Raiden instance from more common parameters.\n   *\n   * An async factory is needed so we can do the needed async requests to construct the required\n   * parameters ahead of construction time, and avoid partial initialization then\n   *\n   * @param connection - A URL or provider to connect to, one of:\n   *     <ul>\n   *       <li>JsonRpcProvider instance,</li>\n   *       <li>a Metamask\'s web3.currentProvider object or,</li>\n   *       <li>a hostname or remote json-rpc connection string</li>\n   *     </ul>\n   * @param account - An account to use as main account, one of:\n   *     <ul>\n   *       <li>Signer instance (e.g. Wallet) loadded with account/private key or</li>\n   *       <li>hex-encoded string address of a remote account in provider or</li>\n   *       <li>hex-encoded string local private key or</li>\n   *       <li>number index of a remote account loaded in provider\n   *            (e.g. 0 for Metamask\'s loaded account)</li>\n   *     </ul>\n   * @param storageOrState - Storage/localStorage-like object from where to load and store current\n   *     state, initial RaidenState-like object, or a { storage; state? } object containing both.\n   *     If a storage isn\'t provided, user must listen state$ changes on ensure it\'s persisted.\n   * @param contracts - Contracts deployment info\n   * @param config - Raiden configuration\n   * @param subkey - Whether to use a derived subkey or not\n   * @returns Promise to Raiden SDK client instance\n   **/\n\n\n  raiden_createClass(Raiden, [{\n    key: "start",\n\n    /**\n     * Starts redux/observables by subscribing to all epics and emitting initial state and action\n     *\n     * No event should be emitted before start is called\n     */\n    value: function start() {\n      var _this2 = this;\n\n      assert(this.epicMiddleware, \'Already started or stopped!\'); // on complete, sets epicMiddleware to null, so this.started === false\n\n      this.deps.latest$.subscribe(undefined, undefined, function () {\n        return _this2.epicMiddleware = null;\n      });\n      this.epicMiddleware.run(epics_raidenRootEpic); // prevent start from being called again, turns this.started to true\n\n      this.epicMiddleware = undefined; // dispatch a first, noop action, to next first state$ as current/initial state\n\n      this.store.dispatch(raidenConfigUpdate({}));\n    }\n    /**\n     * Gets the running state of the instance\n     *\n     * @returns undefined if not yet started, true if running, false if already stopped\n     */\n\n  }, {\n    key: "stop",\n\n    /**\n     * Triggers all epics to be unsubscribed\n     */\n    value: function stop() {\n      // start still can\'t be called again, but turns this.started to false\n      // this.epicMiddleware is set to null by latest$\'s complete callback\n      this.store.dispatch(raidenShutdown({\n        reason: ShutdownReason.STOP\n      }));\n    }\n    /**\n     * Get current RaidenState object. Can be serialized safely with [[encodeRaidenState]]\n     *\n     * @returns Current Raiden state\n     */\n\n  }, {\n    key: "getBlockNumber",\n\n    /**\n     * Returns a promise to current block number, as seen in provider and state\n     *\n     * @returns Promise to current block number\n     */\n    value: function getBlockNumber() {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee3() {\n        return regenerator_default.a.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = this.deps.provider.blockNumber;\n\n                if (_context3.t0) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this.deps.provider.getBlockNumber();\n\n              case 4:\n                _context3.t0 = _context3.sent;\n\n              case 5:\n                return _context3.abrupt("return", _context3.t0);\n\n              case 6:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Getter for current Raiden Config\n     *\n     * @returns Current Raiden config\n     */\n\n  }, {\n    key: "updateConfig",\n\n    /**\n     * Update Raiden Config with a partial (shallow) object\n     *\n     * @param config - Partial object containing keys and values to update in config\n     */\n    value: function updateConfig(config) {\n      this.store.dispatch(raidenConfigUpdate(decode(PartialRaidenConfig, config)));\n    }\n    /**\n     * Get ETH balance for given address or self\n     *\n     * @param address - Optional target address. If omitted, gets own balance\n     * @returns BigNumber of ETH balance\n     */\n\n  }, {\n    key: "getBalance",\n    value: function getBalance(address) {\n      address = address !== null && address !== void 0 ? address : chooseOnchainAccount(this.deps, this.config.subkey).address;\n      assert(Address.is(address), \'Invalid address\');\n      return this.deps.provider.getBalance(address);\n    }\n    /**\n     * Get token balance and token decimals for given address or self\n     *\n     * @param token - Token address to fetch balance. Must be one of the monitored tokens.\n     * @param address - Optional target address. If omitted, gets own balance\n     * @returns BigNumber containing address\'s token balance\n     */\n\n  }, {\n    key: "getTokenBalance",\n    value: function getTokenBalance(token, address) {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee4() {\n        var tokenContract;\n        return regenerator_default.a.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                address = address !== null && address !== void 0 ? address : chooseOnchainAccount(this.deps, this.config.subkey).address;\n                assert(Address.is(address) && Address.is(token), \'Invalid address\');\n                tokenContract = this.deps.getTokenContract(token);\n                return _context4.abrupt("return", tokenContract.functions.balanceOf(address));\n\n              case 4:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * Returns a list of all token addresses registered as token networks in registry\n     *\n     * @returns Promise to list of token addresses\n     */\n\n  }, {\n    key: "getTokenList",\n    value: function getTokenList() {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee5() {\n        var _this3 = this;\n\n        return regenerator_default.a.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt("return", this.deps.provider.getLogs(Object.assign(Object.assign({}, this.deps.registryContract.filters.TokenNetworkCreated(null, null)), {\n                  fromBlock: this.deps.contractsInfo.TokenNetworkRegistry.block_number,\n                  toBlock: \'latest\'\n                })).then(function (logs) {\n                  return logs.map(function (log) {\n                    return _this3.deps.registryContract.interface.parseLog(log);\n                  }).filter(function (parsed) {\n                    var _a;\n\n                    return !!((_a = parsed.values) === null || _a === void 0 ? void 0 : _a.token_address);\n                  }).map(function (parsed) {\n                    return parsed.values.token_address;\n                  });\n                }));\n\n              case 1:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Scans initially and start monitoring a token for channels with us, returning its Tokennetwork\n     * address\n     *\n     * Throws an exception if token isn\'t registered in current registry\n     *\n     * @param token - token address to monitor, must be registered in current token network registry\n     * @returns Address of TokenNetwork contract\n     */\n\n  }, {\n    key: "monitorToken",\n    value: function monitorToken(token) {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee6() {\n        var alreadyMonitoredTokens, tokenNetwork;\n        return regenerator_default.a.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert(Address.is(token), \'Invalid address\');\n                alreadyMonitoredTokens = this.state.tokens;\n\n                if (!(token in alreadyMonitoredTokens)) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                return _context6.abrupt("return", alreadyMonitoredTokens[token]);\n\n              case 4:\n                _context6.next = 6;\n                return this.deps.registryContract.token_to_token_networks(token);\n\n              case 6:\n                tokenNetwork = _context6.sent;\n                assert(tokenNetwork && tokenNetwork !== constants["AddressZero"], \'Unknown token network\');\n                this.store.dispatch(tokenMonitored({\n                  token: token,\n                  tokenNetwork: tokenNetwork,\n                  fromBlock: this.deps.contractsInfo.TokenNetworkRegistry.block_number\n                }));\n                return _context6.abrupt("return", tokenNetwork);\n\n              case 10:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n    /**\n     * Open a channel on the tokenNetwork for given token address with partner\n     *\n     * If token isn\'t yet monitored, starts monitoring it\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param partner - Partner address\n     * @param options - (optional) option parameter\n     * @param options.settleTimeout - Custom, one-time settle timeout\n     * @param options.subkey - Whether to use the subkey for on-chain tx or main account (default)\n     * @param onChange - Optional callback for status change notification\n     * @returns txHash of channelOpen call, iff it succeeded\n     */\n\n  }, {\n    key: "openChannel",\n    value: function openChannel(token, partner) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var onChange = arguments.length > 3 ? arguments[3] : undefined;\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee7() {\n        var tokenNetwork, deposit, meta, openPromise, openTxHash, depositTx;\n        return regenerator_default.a.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert(Address.is(token) && Address.is(partner), \'Invalid address\');\n                _context7.next = 3;\n                return this.monitorToken(token);\n\n              case 3:\n                tokenNetwork = _context7.sent;\n                assert(!options.subkey || this.deps.main, "Can\'t send tx from subkey if not set");\n                deposit = options.deposit === undefined ? undefined : decode(UInt(32), options.deposit);\n                meta = {\n                  tokenNetwork: tokenNetwork,\n                  partner: partner\n                }; // wait for confirmation\n\n                openPromise = asyncActionToPromise(channelOpen, meta, this.action$, false).then(function (_ref) {\n                  var txHash = _ref.txHash;\n                  return txHash;\n                });\n                this.store.dispatch(channelOpen.request(Object.assign(Object.assign({}, options), {\n                  deposit: deposit\n                }), meta));\n                _context7.next = 11;\n                return openPromise;\n\n              case 11:\n                openTxHash = _context7.sent;\n                onChange === null || onChange === void 0 ? void 0 : onChange({\n                  type: EventTypes.OPENED,\n                  payload: {\n                    txHash: openTxHash\n                  }\n                });\n                _context7.next = 15;\n                return this.state$.pipe(pluckDistinct(\'channels\', tokenNetwork, partner, \'state\'), Object(first["a" /* first */])(function (state) {\n                  return state === ChannelState.open;\n                })).toPromise();\n\n              case 15:\n                onChange === null || onChange === void 0 ? void 0 : onChange({\n                  type: EventTypes.CONFIRMED,\n                  payload: {\n                    txHash: openTxHash\n                  }\n                });\n\n                if (!deposit) {\n                  _context7.next = 21;\n                  break;\n                }\n\n                _context7.next = 19;\n                return asyncActionToPromise(channelDeposit, meta, this.action$, true).then(function (_ref2) {\n                  var txHash = _ref2.txHash;\n                  return txHash;\n                });\n\n              case 19:\n                depositTx = _context7.sent;\n                onChange === null || onChange === void 0 ? void 0 : onChange({\n                  type: EventTypes.DEPOSITED,\n                  payload: {\n                    txHash: depositTx\n                  }\n                });\n\n              case 21:\n                return _context7.abrupt("return", openTxHash);\n\n              case 22:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n    /**\n     * Deposit tokens on channel between us and partner on tokenNetwork for token\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param partner - Partner address\n     * @param amount - Number of tokens to deposit on channel\n     * @param options - tx options\n     * @param options.subkey - By default, if using subkey, main account is used to send transactions\n     *    (and is also the account used as source of the deposit tokens).\n     *    Set this to true if one wants to force sending the transaction with the subkey, and using\n     *    tokens held in the subkey.\n     * @returns txHash of setTotalDeposit call, iff it succeeded\n     */\n\n  }, {\n    key: "depositChannel",\n    value: function depositChannel(token, partner, amount) {\n      var _ref3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          subkey = _ref3.subkey;\n\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee8() {\n        var state, tokenNetwork, deposit, meta, promise;\n        return regenerator_default.a.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert(Address.is(token) && Address.is(partner), \'Invalid address\');\n                state = this.state;\n                tokenNetwork = state.tokens[token];\n                assert(tokenNetwork, \'Unknown token network\');\n                assert(!subkey || this.deps.main, "Can\'t send tx from subkey if not set");\n                deposit = decode(UInt(32), amount);\n                meta = {\n                  tokenNetwork: tokenNetwork,\n                  partner: partner\n                };\n                promise = asyncActionToPromise(channelDeposit, meta, this.action$, true).then(function (_ref4) {\n                  var txHash = _ref4.txHash;\n                  return txHash;\n                });\n                this.store.dispatch(channelDeposit.request({\n                  deposit: deposit,\n                  subkey: subkey\n                }, meta));\n                return _context8.abrupt("return", promise);\n\n              case 10:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n    /**\n     * Close channel between us and partner on tokenNetwork for token\n     * This method will fail if called on a channel not in \'opened\' or \'closing\' state.\n     * When calling this method on an \'opened\' channel, its state becomes \'closing\', and from there\n     * on, no payments can be performed on the channel. If for any reason the closeChannel\n     * transaction fails, channel\'s state stays as \'closing\', and this method can be called again\n     * to retry sending \'closeChannel\' transaction. After it\'s successful, channel becomes \'closed\',\n     * and can be settled after \'settleTimeout\' blocks (when it then becomes \'settleable\').\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param partner - Partner address\n     * @param options - tx options\n     * @param options.subkey - By default, if using subkey, main account is used to send transactions\n     *    Set this to true if one wants to force sending the transaction with the subkey\n     * @returns txHash of closeChannel call, iff it succeeded\n     */\n\n  }, {\n    key: "closeChannel",\n    value: function closeChannel(token, partner) {\n      var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          subkey = _ref5.subkey;\n\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee9() {\n        var state, tokenNetwork, meta, promise;\n        return regenerator_default.a.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert(Address.is(token) && Address.is(partner), \'Invalid address\');\n                state = this.state;\n                tokenNetwork = state.tokens[token];\n                assert(tokenNetwork, \'Unknown token network\');\n                assert(!subkey || this.deps.main, "Can\'t send tx from subkey if not set");\n                meta = {\n                  tokenNetwork: tokenNetwork,\n                  partner: partner\n                };\n                promise = asyncActionToPromise(channelClose, meta, this.action$, true).then(function (_ref6) {\n                  var txHash = _ref6.txHash;\n                  return txHash;\n                });\n                this.store.dispatch(channelClose.request(subkey ? {\n                  subkey: subkey\n                } : undefined, meta));\n                return _context9.abrupt("return", promise);\n\n              case 9:\n              case "end":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n    /**\n     * Settle channel between us and partner on tokenNetwork for token\n     * This method will fail if called on a channel not in \'settleable\' or \'settling\' state.\n     * Channel becomes \'settleable\' settleTimeout blocks after closed (detected automatically\n     * while Raiden Light Client is running or later on restart). When calling it, channel state\n     * becomes \'settling\'. If for any reason transaction fails, it\'ll stay on this state, and this\n     * method can be called again to re-send a settleChannel transaction.\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param partner - Partner address\n     * @param options - tx options\n     * @param options.subkey - By default, if using subkey, main account is used to send transactions\n     *    Set this to true if one wants to force sending the transaction with the subkey\n     * @returns txHash of settleChannel call, iff it succeeded\n     */\n\n  }, {\n    key: "settleChannel",\n    value: function settleChannel(token, partner) {\n      var _ref7 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          subkey = _ref7.subkey;\n\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee10() {\n        var state, tokenNetwork, meta, promise;\n        return regenerator_default.a.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert(Address.is(token) && Address.is(partner), \'Invalid address\');\n                state = this.state;\n                tokenNetwork = state.tokens[token];\n                assert(tokenNetwork, \'Unknown token network\');\n                assert(!subkey || this.deps.main, "Can\'t send tx from subkey if not set"); // wait for the corresponding success or error action\n\n                meta = {\n                  tokenNetwork: tokenNetwork,\n                  partner: partner\n                };\n                promise = asyncActionToPromise(channelSettle, meta, this.action$, true).then(function (_ref8) {\n                  var txHash = _ref8.txHash;\n                  return txHash;\n                });\n                this.store.dispatch(channelSettle.request(subkey ? {\n                  subkey: subkey\n                } : undefined, meta));\n                return _context10.abrupt("return", promise);\n\n              case 9:\n              case "end":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n    /**\n     * Returns object describing address\'s users availability on transport\n     * After calling this method, any further presence update to valid transport peers of this\n     * address will trigger a corresponding MatrixPresenceUpdateAction on events$\n     *\n     * @param address - checksummed address to be monitored\n     * @returns Promise to object describing availability and last event timestamp\n     */\n\n  }, {\n    key: "getAvailability",\n    value: function getAvailability(address) {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee11() {\n        var meta, promise;\n        return regenerator_default.a.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert(Address.is(address), \'Invalid address\');\n                meta = {\n                  address: address\n                };\n                promise = asyncActionToPromise(matrixPresence, meta, this.action$);\n                this.store.dispatch(matrixPresence.request(undefined, meta));\n                return _context11.abrupt("return", promise);\n\n              case 5:\n              case "end":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n    /**\n     * Send a Locked Transfer!\n     * This will reject if LockedTransfer signature prompt is canceled/signature fails, or be\n     * resolved to the transfer unique identifier (secrethash) otherwise, and transfer status can be\n     * queried with this id on this.transfers$ observable, which will just have emitted the \'pending\'\n     * transfer. Any following transfer state change will be notified through this observable.\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param target - Target address (must be getAvailability before)\n     * @param value - Amount to try to transfer\n     * @param options - Optional parameters for transfer:\n     *    <ul>\n     *      <li>paymentId - payment identifier, a random one will be generated if missing</li>\n     *      <li>secret - Secret to register, a random one will be generated if missing</li>\n     *      <li>secrethash - Must match secret, if both provided, or else, secret must be\n     *          informed to target by other means, and reveal can\'t be performed</li>\n     *      <li>paths - Used to specify possible routes & fees instead of querying PFS.</li>\n     *      <li>pfs - Use this PFS instead of configured or automatically choosen ones.\n     *          Is ignored if paths were already provided. If neither are set and config.pfs is not\n     *          disabled (null), use it if set or if undefined (auto mode), fetches the best\n     *          PFS from ServiceRegistry and automatically fetch routes from it.</li>\n     *    </ul>\n     * @returns A promise to transfer\'s secrethash (unique id) when it\'s accepted\n     */\n\n  }, {\n    key: "transfer",\n    value: function transfer(token, target, value) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee12() {\n        var _this4 = this;\n\n        var tokenNetwork, decodedValue, paymentId, paths, pfs, secret, secrethash, pathFindMeta;\n        return regenerator_default.a.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert(Address.is(token) && Address.is(target), \'Invalid address\');\n                tokenNetwork = this.state.tokens[token];\n                assert(tokenNetwork, \'Unknown token network\');\n                decodedValue = decode(UInt(32), value);\n                paymentId = options.paymentId ? decode(UInt(8), options.paymentId) : makePaymentId();\n                paths = options.paths ? decode(Paths, options.paths) : undefined;\n                pfs = options.pfs ? decode(PFS, options.pfs) : undefined;\n                assert(options.secret === undefined || Secret.is(options.secret), \'Invalid options.secret\');\n                assert(options.secrethash === undefined || Hash.is(options.secrethash), \'Invalid options.secrethash\'); // use provided secret or create one if no secrethash was provided\n\n                secret = options.secret ? options.secret : !options.secrethash ? makeSecret() : undefined;\n                secrethash = options.secrethash || getSecrethash(secret);\n                assert(!secret || getSecrethash(secret) === secrethash, \'Provided secrethash must match the sha256 hash of provided secret\');\n                pathFindMeta = {\n                  tokenNetwork: tokenNetwork,\n                  target: target,\n                  value: decodedValue\n                };\n                return _context12.abrupt("return", Object(merge["a" /* merge */])( // wait for pathFind response\n                this.action$.pipe(Object(first["a" /* first */])(isResponseOf(pathFind, pathFindMeta)), Object(map["a" /* map */])(function (action) {\n                  if (pathFind.failure.is(action)) throw action.payload;\n                  return action.payload.paths;\n                })), // request pathFind; even if paths were provided, send it again for validation\n                // this is done at \'merge\' subscription time (i.e. when above action filter is subscribed)\n                Object(defer["a" /* defer */])(function () {\n                  _this4.store.dispatch(pathFind.request({\n                    paths: paths,\n                    pfs: pfs\n                  }, pathFindMeta));\n\n                  return empty["a" /* EMPTY */];\n                })).pipe(Object(mergeMap["a" /* mergeMap */])(function (paths) {\n                  return Object(merge["a" /* merge */])( // wait for transfer response\n                  _this4.action$.pipe(Object(filter["a" /* filter */])(isActionOf([transferSigned, actions_transfer.failure])), Object(first["a" /* first */])(function (action) {\n                    return action.meta.secrethash === secrethash;\n                  }), Object(map["a" /* map */])(function (action) {\n                    if (actions_transfer.failure.is(action)) throw action.payload;\n                    return secrethash;\n                  })), // request transfer with returned/validated paths at \'merge\' subscription time\n                  Object(defer["a" /* defer */])(function () {\n                    _this4.store.dispatch(actions_transfer.request({\n                      tokenNetwork: tokenNetwork,\n                      target: target,\n                      value: decodedValue,\n                      paths: paths,\n                      paymentId: paymentId,\n                      secret: secret\n                    }, {\n                      secrethash: secrethash,\n                      direction: Direction.SENT\n                    }));\n\n                    return empty["a" /* EMPTY */];\n                  }));\n                })).toPromise());\n\n              case 14:\n              case "end":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n    /**\n     * Waits for the transfer identified by a secrethash to fail or complete\n     *\n     * The returned promise will resolve with the final amount received by the target\n     *\n     * @param secrethash - Transfer identifier\n     * @returns Amount received by target, as informed by them on SecretRequest\n     */\n\n  }, {\n    key: "waitTransfer",\n    value: function waitTransfer(secrethash) {\n      var _a, _b, _c, _d;\n\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee13() {\n        var state, sent;\n        return regenerator_default.a.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert(Hash.is(secrethash), \'Invalid secrethash for transfer\');\n                state = this.state;\n                assert(secrethash in state.sent, \'Unknown secrethash\');\n                sent = raidenSentTransfer(state.sent[secrethash]); // already completed/past transfer\n\n                if (!sent.completed) {\n                  _context13.next = 10;\n                  break;\n                }\n\n                if (!sent.success) {\n                  _context13.next = 9;\n                  break;\n                }\n\n                return _context13.abrupt("return", (_b = (_a = this.state.sent[secrethash].secretRequest) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.amount);\n\n              case 9:\n                throw new error_RaidenError(ErrorCodes.XFER_ALREADY_COMPLETED, {\n                  status: sent.status\n                });\n\n              case 10:\n                _context13.next = 12;\n                return asyncActionToPromise(actions_transfer, {\n                  secrethash: secrethash,\n                  direction: Direction.SENT\n                }, this.action$);\n\n              case 12:\n                state = this.state;\n                return _context13.abrupt("return", (_d = (_c = state.sent[secrethash].secretRequest) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.amount);\n\n              case 14:\n              case "end":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n    /**\n     * Request a path from PFS\n     *\n     * If a direct route is possible, it\'ll be returned. Else if PFS is set up, a request will be\n     * performed and the cleaned/validated path results will be resolved.\n     * Else, if no route can be found, promise is rejected with respective error.\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param target - Target address (must be getAvailability before)\n     * @param value - Minimum capacity required on routes\n     * @param options - Optional parameters\n     * @param options.pfs - Use this PFS instead of configured or automatically choosen ones\n     * @returns A promise to returned routes/paths result\n     */\n\n  }, {\n    key: "findRoutes",\n    value: function findRoutes(token, target, value) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee14() {\n        var tokenNetwork, decodedValue, pfs, meta, promise;\n        return regenerator_default.a.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert(Address.is(token) && Address.is(target), \'Invalid address\');\n                tokenNetwork = this.state.tokens[token];\n                assert(tokenNetwork, \'Unknown token network\');\n                decodedValue = decode(UInt(32), value);\n                pfs = options.pfs ? decode(PFS, options.pfs) : undefined;\n                meta = {\n                  tokenNetwork: tokenNetwork,\n                  target: target,\n                  value: decodedValue\n                };\n                promise = asyncActionToPromise(pathFind, meta, this.action$).then(function (_ref9) {\n                  var paths = _ref9.paths;\n                  return paths;\n                });\n                this.store.dispatch(pathFind.request({\n                  pfs: pfs\n                }, meta));\n                return _context14.abrupt("return", promise);\n\n              case 9:\n              case "end":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n    /**\n     * Checks if a direct transfer of token to target could be performed and returns it on a\n     * single-element array of Paths\n     *\n     * @param token - Token address on currently configured token network registry\n     * @param target - Target address (must be getAvailability before)\n     * @param value - Minimum capacity required on route\n     * @returns Promise to a [Raiden]Paths array containing the single, direct route, or undefined\n     */\n\n  }, {\n    key: "directRoute",\n    value: function directRoute(token, target, value) {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee15() {\n        var tokenNetwork, decodedValue, meta, promise;\n        return regenerator_default.a.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert(Address.is(token) && Address.is(target), \'Invalid address\');\n                tokenNetwork = this.state.tokens[token];\n                assert(tokenNetwork, \'Unknown token network\');\n                decodedValue = decode(UInt(32), value);\n                meta = {\n                  tokenNetwork: tokenNetwork,\n                  target: target,\n                  value: decodedValue\n                };\n                promise = asyncActionToPromise(pathFind, meta, this.action$).then(function (_ref10) {\n                  var paths = _ref10.paths;\n                  return paths;\n                }, // pluck paths\n                function () {\n                  return undefined;\n                }); // dispatch a pathFind with pfs disabled, to force checking for a direct route\n\n                this.store.dispatch(pathFind.request({\n                  pfs: null\n                }, meta));\n                return _context15.abrupt("return", promise);\n\n              case 8:\n              case "end":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n    }\n    /**\n     * Returns a sorted array of info of available PFS\n     *\n     * It uses data polled from ServiceRegistry, which is available only when config.pfs is\n     * undefined, instead of set or disabled (null), and will reject if not.\n     * It can reject if the validated list is empty, meaning we can be out-of-sync (we\'re outdated or\n     * they are) with PFSs deployment, or no PFS is available on this TokenNetwork/blockchain.\n     *\n     * @returns Promise to array of PFS, which is the interface which describes a PFS\n     */\n\n  }, {\n    key: "findPFS",\n    value: function findPFS() {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee16() {\n        var _this5 = this;\n\n        return regenerator_default.a.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert(this.config.pfs !== null, \'PFS disabled in config\');\n                return _context16.abrupt("return", (this.config.pfs ? Object(of["a" /* of */])([this.config.pfs]) : this.deps.latest$.pipe(pluckDistinct(\'pfsList\'), Object(first["a" /* first */])(function (v) {\n                  return v.length > 0;\n                }))).pipe(Object(mergeMap["a" /* mergeMap */])(function (pfsList) {\n                  return pfsListInfo(pfsList, _this5.deps);\n                })).toPromise());\n\n              case 2:\n              case "end":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n    /**\n     * Mints the amount of tokens of the provided token address.\n     * Throws an error, if\n     * <ol>\n     *  <li>Executed on main net</li>\n     *  <li>`token` is not a valid address</li>\n     *  <li>Token could not be minted</li>\n     * </ol>\n     *\n     * @param token - Address of the token to be minted\n     * @param amount - Amount to be minted\n     * @param options - tx options\n     * @param options.subkey - By default, if using subkey, main account is used to send transactions\n     *    Notice the beneficiary here is always the account that sends the transaction, as this is\n     *    expectedly also the account that will pay for e.g. future deposits.\n     *    Set this to true if one wants to force sending the transaction with the subkey\n     * @returns transaction\n     */\n\n  }, {\n    key: "mint",\n    value: function mint(token, amount) {\n      var _ref11 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          subkey = _ref11.subkey;\n\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee17() {\n        var _chooseOnchainAccount, signer, customTokenContract, receipt;\n\n        return regenerator_default.a.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                // Check whether address is valid\n                assert(Address.is(token), \'Invalid address\');\n                assert(!subkey || this.deps.main, "Can\'t send tx from subkey if not set"); // Check whether we are on a test network\n\n                assert(this.deps.network.name !== \'homestead\', \'Minting is only allowed on test networks.\');\n                _chooseOnchainAccount = chooseOnchainAccount(this.deps, subkey !== null && subkey !== void 0 ? subkey : this.config.subkey), signer = _chooseOnchainAccount.signer; // Mint token\n\n                customTokenContract = CustomTokenFactory_CustomTokenFactory.connect(token, signer);\n                _context17.next = 7;\n                return callAndWaitMined(customTokenContract, \'mint\', [decode(UInt(32), amount)], ErrorCodes.RDN_MINT_FAILED, {\n                  log: this.log\n                });\n\n              case 7:\n                receipt = _context17.sent;\n                _context17.next = 10;\n                return waitConfirmation(receipt, this.deps, 1);\n\n              case 10:\n                return _context17.abrupt("return", receipt.transactionHash);\n\n              case 11:\n              case "end":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n    }\n    /**\n     * Fetches balance of UserDeposit Contract for SDK\'s account minus cached spent IOUs\n     *\n     * @returns Promise to UDC remaining capacity\n     */\n\n  }, {\n    key: "getUDCCapacity",\n    value: function getUDCCapacity() {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee18() {\n        var balance, blockNumber, owedAmount;\n        return regenerator_default.a.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.deps.userDepositContract.functions.balances(this.deps.address);\n\n              case 2:\n                balance = _context18.sent;\n                blockNumber = this.state.blockNumber;\n                owedAmount = Object.values(this.state.path.iou).reduce(function (acc, value) {\n                  var nonExpiredIOUs = Object.values(value).filter(function (value) {\n                    return value.expiration_block.gte(blockNumber);\n                  });\n                  acc.push.apply(acc, raiden_toConsumableArray(nonExpiredIOUs));\n                  return acc;\n                }, new Array()).reduce(function (acc, iou) {\n                  return acc.add(iou.amount);\n                }, constants["Zero"]);\n                return _context18.abrupt("return", balance.sub(owedAmount));\n\n              case 6:\n              case "end":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n    }\n    /**\n     * Deposits the amount to the UserDeposit contract with the target/signer as a beneficiary.\n     * The deposited amount can be used as a collateral in order to sign valid IOUs that will\n     * be accepted by the Services.\n     *\n     * Throws an error, in the following cases:\n     * <ol>\n     *  <li>The amount specified equals to zero</li>\n     *  <li>The target has an insufficient token balance</li>\n     *  <li>The "approve" transaction fails with an error</li>\n     *  <li>The "deposit" transaction fails with an error</li>\n     * </ol>\n     *\n     * @param amount - The amount to deposit on behalf of the target/beneficiary.\n     * @param onChange - callback providing notifications about state changes\n     * @param options - tx options\n     * @param options.subkey - By default, if using subkey, main account is used to send transactions\n     *    Set this to true if one wants to force sending the transaction with the subkey\n     * @returns transaction hash\n     */\n\n  }, {\n    key: "depositToUDC",\n    value: function depositToUDC(amount, onChange) {\n      var _ref12 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          subkey = _ref12.subkey;\n\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee19() {\n        var depositAmount, _chooseOnchainAccount2, signer, address, userDepositContract, serviceTokenContract, balance, approveReceipt, currentUDCBalance, depositReceipt;\n\n        return regenerator_default.a.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                assert(!subkey || this.deps.main, "Can\'t send tx from subkey if not set", this.log.debug);\n                depositAmount = Object(utils["bigNumberify"])(amount);\n                assert(depositAmount.gt(constants["Zero"]), \'Please deposit a positive amount.\', this.log.debug);\n                _chooseOnchainAccount2 = chooseOnchainAccount(this.deps, subkey !== null && subkey !== void 0 ? subkey : this.config.subkey), signer = _chooseOnchainAccount2.signer, address = _chooseOnchainAccount2.address;\n                userDepositContract = getContractWithSigner(this.deps.userDepositContract, signer);\n                _context19.t0 = getContractWithSigner;\n                _context19.t1 = this.deps;\n                _context19.next = 9;\n                return this.userDepositTokenAddress();\n\n              case 9:\n                _context19.t2 = _context19.sent;\n                _context19.t3 = _context19.t1.getTokenContract.call(_context19.t1, _context19.t2);\n                _context19.t4 = signer;\n                serviceTokenContract = (0, _context19.t0)(_context19.t3, _context19.t4);\n                _context19.next = 15;\n                return serviceTokenContract.functions.balanceOf(address);\n\n              case 15:\n                balance = _context19.sent;\n                assert(balance.gte(amount), "Insufficient token balance (".concat(balance, ")."), this.log.debug);\n                _context19.next = 19;\n                return callAndWaitMined(serviceTokenContract, \'approve\', [userDepositContract.address, depositAmount], ErrorCodes.RDN_APPROVE_TRANSACTION_FAILED, {\n                  log: this.log\n                });\n\n              case 19:\n                approveReceipt = _context19.sent;\n                onChange === null || onChange === void 0 ? void 0 : onChange({\n                  type: EventTypes.APPROVED,\n                  payload: {\n                    txHash: approveReceipt.transactionHash\n                  }\n                });\n                _context19.next = 23;\n                return userDepositContract.functions.balances(this.address);\n\n              case 23:\n                currentUDCBalance = _context19.sent;\n                _context19.next = 26;\n                return callAndWaitMined(userDepositContract, \'deposit\', [this.address, currentUDCBalance.add(depositAmount)], ErrorCodes.RDN_DEPOSIT_TRANSACTION_FAILED, {\n                  log: this.log\n                });\n\n              case 26:\n                depositReceipt = _context19.sent;\n                onChange === null || onChange === void 0 ? void 0 : onChange({\n                  type: EventTypes.DEPOSITED,\n                  payload: {\n                    txHash: depositReceipt.transactionHash\n                  }\n                });\n                _context19.next = 30;\n                return waitConfirmation(depositReceipt, this.deps);\n\n              case 30:\n                this.log.debug("deposit tx \\"".concat(depositReceipt.transactionHash, "\\" confirmed"));\n                onChange === null || onChange === void 0 ? void 0 : onChange({\n                  type: EventTypes.CONFIRMED,\n                  payload: {\n                    txHash: depositReceipt.transactionHash\n                  }\n                });\n                return _context19.abrupt("return", depositReceipt.transactionHash);\n\n              case 33:\n              case "end":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n    }\n    /**\n     * Transfer value ETH on-chain to address.\n     * If subkey is being used, use main account by default, or subkey account if \'subkey\' is true\n     * Example:\n     *   // transfer 0.1 ETH from main account to subkey account, when subkey is used\n     *   await raiden.transferOnchainBalance(raiden.address, parseEther(\'0.1\'));\n     *   // transfer 0.1 ETH back from subkey account to main account\n     *   await raiden.transferOnchainBalance(raiden.mainAddress, parseEther(\'0.1\'), true);\n     * TODO: expose a nice way to transfer ALL, considering gas price & limit\n     *\n     * @param to - Recipient address\n     * @param value - Amount of ETH (in Wei) to transfer. Use ethers/utils::parseEther if needed\n     * @param options - tx options\n     * @param options.subkey - By default, if using subkey, main account is used to send transactions\n     *    Set this to true if one wants to force sending the transaction with the subkey\n     * @returns transaction hash\n     */\n\n  }, {\n    key: "transferOnchainBalance",\n    value: function transferOnchainBalance(to, value) {\n      var _ref13 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          subkey = _ref13.subkey;\n\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee20() {\n        var _chooseOnchainAccount3, signer, tx, receipt;\n\n        return regenerator_default.a.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                assert(Address.is(to), \'Invalid address\', this.log.debug);\n                assert(!subkey || this.deps.main, "Can\'t send tx from subkey if not set", this.log.debug);\n                _chooseOnchainAccount3 = chooseOnchainAccount(this.deps, subkey !== null && subkey !== void 0 ? subkey : this.config.subkey), signer = _chooseOnchainAccount3.signer;\n                _context20.next = 5;\n                return signer.sendTransaction({\n                  to: to,\n                  value: Object(utils["bigNumberify"])(value)\n                });\n\n              case 5:\n                tx = _context20.sent;\n                _context20.next = 8;\n                return tx.wait();\n\n              case 8:\n                receipt = _context20.sent;\n\n                if (receipt.status) {\n                  _context20.next = 11;\n                  break;\n                }\n\n                throw new error_RaidenError(ErrorCodes.RDN_TRANSFER_ONCHAIN_BALANCE_FAILED);\n\n              case 11:\n                return _context20.abrupt("return", tx.hash);\n\n              case 12:\n              case "end":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n    }\n    /**\n     * Transfer value tokens on-chain to address.\n     * If subkey is being used, use main account by default, or subkey account if \'subkey\' is true\n     * TODO: expose a nice way to transfer ALL tokens\n     *\n     * @param token - Token address\n     * @param to - Recipient address\n     * @param value - Amount of tokens (in Wei) to transfer. Use ethers/utils::parseUnits if needed\n     * @param options - tx options\n     * @param options.subkey - By default, if using subkey, main account is used to send transactions\n     *    Set this to true if one wants to force sending the transaction with the subkey\n     * @returns transaction hash\n     */\n\n  }, {\n    key: "transferOnchainTokens",\n    value: function transferOnchainTokens(token, to, value) {\n      var _ref14 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          subkey = _ref14.subkey;\n\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee21() {\n        var _chooseOnchainAccount4, signer, tokenContract, receipt;\n\n        return regenerator_default.a.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                assert(Address.is(token) && Address.is(to), \'Invalid address\', this.log.debug);\n                assert(!subkey || this.deps.main, "Can\'t send tx from subkey if not set", this.log.debug);\n                _chooseOnchainAccount4 = chooseOnchainAccount(this.deps, subkey !== null && subkey !== void 0 ? subkey : this.config.subkey), signer = _chooseOnchainAccount4.signer;\n                tokenContract = getContractWithSigner(this.deps.getTokenContract(token), signer);\n                _context21.next = 6;\n                return callAndWaitMined(tokenContract, \'transfer\', [to, Object(utils["bigNumberify"])(value)], ErrorCodes.RDN_TRANSFER_ONCHAIN_TOKENS_FAILED, {\n                  log: this.log\n                });\n\n              case 6:\n                receipt = _context21.sent;\n                return _context21.abrupt("return", receipt.transactionHash);\n\n              case 8:\n              case "end":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n    }\n  }, {\n    key: "started",\n    get: function get() {\n      // !epicMiddleware -> undefined | null -> undefined ? true/started : null/stopped;\n      if (!this.epicMiddleware) return this.epicMiddleware === undefined; // else -> !!epicMiddleware -> not yet started -> returns undefined\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return this.store.getState();\n    }\n    /**\n     * Get current account address (subkey\'s address, if subkey is being used)\n     *\n     * @returns Instance address\n     */\n\n  }, {\n    key: "address",\n    get: function get() {\n      return this.deps.address;\n    }\n    /**\n     * Get main account address (if subkey is being used, undefined otherwise)\n     *\n     * @returns Main account address\n     */\n\n  }, {\n    key: "mainAddress",\n    get: function get() {\n      var _a;\n\n      return (_a = this.deps.main) === null || _a === void 0 ? void 0 : _a.address;\n    }\n    /**\n     * Get current network from provider\n     *\n     * @returns Network object containing blockchain\'s name & chainId\n     */\n\n  }, {\n    key: "network",\n    get: function get() {\n      return this.deps.network;\n    }\n  }, {\n    key: "config",\n    get: function get() {\n      var config;\n      this.deps.config$.pipe(Object(first["a" /* first */])()).subscribe(function (c) {\n        return config = c;\n      });\n      return config;\n    }\n    /**\n     * Returns the currently used SDK version.\n     *\n     * @returns SDK version\n     */\n\n  }], [{\n    key: "create",\n    value: function create(connection, account, storageOrState, contracts, config, subkey) {\n      return raiden_awaiter(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee22() {\n        var provider, network, _yield$getSigner, signer, address, main, _yield$getState, state, onState, onStateComplete, defaultConfig, raiden;\n\n        return regenerator_default.a.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                if (typeof connection === \'string\') {\n                  provider = new providers["JsonRpcProvider"](connection);\n                } else if (connection instanceof providers["JsonRpcProvider"]) {\n                  provider = connection;\n                } else {\n                  provider = new providers["Web3Provider"](connection);\n                } // Patch provider\'s sign method (https://github.com/raiden-network/light-client/issues/223)\n\n\n                patchSignSend(provider);\n                _context22.next = 4;\n                return provider.getNetwork();\n\n              case 4:\n                network = _context22.sent;\n\n                // if no ContractsInfo, try to populate from defaults\n                if (!contracts) {\n                  contracts = helpers_getContracts(network);\n                }\n\n                _context22.next = 8;\n                return helpers_getSigner(account, provider, subkey);\n\n              case 8:\n                _yield$getSigner = _context22.sent;\n                signer = _yield$getSigner.signer;\n                address = _yield$getSigner.address;\n                main = _yield$getSigner.main;\n                _context22.next = 14;\n                return state_getState(network, contracts, address, storageOrState, config && decode(PartialRaidenConfig, config));\n\n              case 14:\n                _yield$getState = _context22.sent;\n                state = _yield$getState.state;\n                onState = _yield$getState.onState;\n                onStateComplete = _yield$getState.onStateComplete;\n                defaultConfig = _yield$getState.defaultConfig;\n                assert(address === state.address, "Mismatch between provided account and loaded state: \\"".concat(address, "\\" !== \\"").concat(state.address, "\\""));\n                assert(network.chainId === state.chainId && contracts.TokenNetworkRegistry.address === state.registry, "Mismatch between network or registry address and loaded state");\n                raiden = new Raiden(provider, network, signer, contracts, state, defaultConfig, main);\n                if (onState) raiden.state$.subscribe(onState, onStateComplete, onStateComplete);\n                return _context22.abrupt("return", raiden);\n\n              case 24:\n              case "end":\n                return _context22.stop();\n            }\n          }\n        }, _callee22);\n      }));\n    }\n  }, {\n    key: "version",\n    get: function get() {\n      return versions.sdk;\n    }\n    /**\n     * Returns the version of the used Smart Contracts.\n     *\n     * @returns Smart Contract version\n     */\n\n  }, {\n    key: "contractVersion",\n    get: function get() {\n      return versions.contracts;\n    }\n  }]);\n\n  return Raiden;\n}();\n/* harmony default export */ var dist_raiden = (raiden_Raiden);\n// CONCATENATED MODULE: ../raiden-ts/dist/index.js\n/* istanbul ignore file */\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///f455\n')},f45e:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob1Rva2Vucy52dWU/MDY4NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJmNDVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///f45e\n")}});